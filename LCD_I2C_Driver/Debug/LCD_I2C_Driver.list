
LCD_I2C_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002304  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080024dc  080024dc  000124dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024f8  080024f8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080024f8  080024f8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080024f8  080024f8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024f8  080024f8  000124f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024fc  080024fc  000124fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002500  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  0800250c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  0800250c  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b05  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019ca  00000000  00000000  00029b41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000968  00000000  00000000  0002b510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000890  00000000  00000000  0002be78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000787f  00000000  00000000  0002c708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000317e  00000000  00000000  00033f87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00037105  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000024fc  00000000  00000000  00037158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080024c4 	.word	0x080024c4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080024c4 	.word	0x080024c4

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fa84 	bl	8000728 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f810 	bl	8000244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f898 	bl	8000358 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000228:	f000 f856 	bl	80002d8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 800022c:	f000 fa2a 	bl	8000684 <lcd_init>
  lcd_send_string("Hello World");
 8000230:	4803      	ldr	r0, [pc, #12]	; (8000240 <main+0x28>)
 8000232:	f000 fa64 	bl	80006fe <lcd_send_string>
  HAL_Delay(1000);
 8000236:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800023a:	f000 fae5 	bl	8000808 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800023e:	e7fe      	b.n	800023e <main+0x26>
 8000240:	080024dc 	.word	0x080024dc

08000244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b094      	sub	sp, #80	; 0x50
 8000248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024a:	f107 0318 	add.w	r3, r7, #24
 800024e:	2238      	movs	r2, #56	; 0x38
 8000250:	2100      	movs	r1, #0
 8000252:	4618      	mov	r0, r3
 8000254:	f002 f92e 	bl	80024b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000258:	1d3b      	adds	r3, r7, #4
 800025a:	2200      	movs	r2, #0
 800025c:	601a      	str	r2, [r3, #0]
 800025e:	605a      	str	r2, [r3, #4]
 8000260:	609a      	str	r2, [r3, #8]
 8000262:	60da      	str	r2, [r3, #12]
 8000264:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000266:	f44f 7000 	mov.w	r0, #512	; 0x200
 800026a:	f001 f96f 	bl	800154c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800026e:	2301      	movs	r3, #1
 8000270:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000272:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000276:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000278:	2302      	movs	r3, #2
 800027a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800027c:	2303      	movs	r3, #3
 800027e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000280:	2302      	movs	r3, #2
 8000282:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000284:	230c      	movs	r3, #12
 8000286:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000288:	2302      	movs	r3, #2
 800028a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800028c:	2302      	movs	r3, #2
 800028e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000290:	2302      	movs	r3, #2
 8000292:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000294:	f107 0318 	add.w	r3, r7, #24
 8000298:	4618      	mov	r0, r3
 800029a:	f001 f9fb 	bl	8001694 <HAL_RCC_OscConfig>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80002a4:	f000 f888 	bl	80003b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a8:	230f      	movs	r3, #15
 80002aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ac:	2303      	movs	r3, #3
 80002ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b0:	2300      	movs	r3, #0
 80002b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002b4:	2300      	movs	r3, #0
 80002b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b8:	2300      	movs	r3, #0
 80002ba:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002bc:	1d3b      	adds	r3, r7, #4
 80002be:	2102      	movs	r1, #2
 80002c0:	4618      	mov	r0, r3
 80002c2:	f001 fcff 	bl	8001cc4 <HAL_RCC_ClockConfig>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80002cc:	f000 f874 	bl	80003b8 <Error_Handler>
  }
}
 80002d0:	bf00      	nop
 80002d2:	3750      	adds	r7, #80	; 0x50
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}

080002d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002dc:	4b1b      	ldr	r3, [pc, #108]	; (800034c <MX_I2C1_Init+0x74>)
 80002de:	4a1c      	ldr	r2, [pc, #112]	; (8000350 <MX_I2C1_Init+0x78>)
 80002e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10808DD3;
 80002e2:	4b1a      	ldr	r3, [pc, #104]	; (800034c <MX_I2C1_Init+0x74>)
 80002e4:	4a1b      	ldr	r2, [pc, #108]	; (8000354 <MX_I2C1_Init+0x7c>)
 80002e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002e8:	4b18      	ldr	r3, [pc, #96]	; (800034c <MX_I2C1_Init+0x74>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002ee:	4b17      	ldr	r3, [pc, #92]	; (800034c <MX_I2C1_Init+0x74>)
 80002f0:	2201      	movs	r2, #1
 80002f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002f4:	4b15      	ldr	r3, [pc, #84]	; (800034c <MX_I2C1_Init+0x74>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002fa:	4b14      	ldr	r3, [pc, #80]	; (800034c <MX_I2C1_Init+0x74>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000300:	4b12      	ldr	r3, [pc, #72]	; (800034c <MX_I2C1_Init+0x74>)
 8000302:	2200      	movs	r2, #0
 8000304:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000306:	4b11      	ldr	r3, [pc, #68]	; (800034c <MX_I2C1_Init+0x74>)
 8000308:	2200      	movs	r2, #0
 800030a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800030c:	4b0f      	ldr	r3, [pc, #60]	; (800034c <MX_I2C1_Init+0x74>)
 800030e:	2200      	movs	r2, #0
 8000310:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000312:	480e      	ldr	r0, [pc, #56]	; (800034c <MX_I2C1_Init+0x74>)
 8000314:	f000 fd00 	bl	8000d18 <HAL_I2C_Init>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800031e:	f000 f84b 	bl	80003b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000322:	2100      	movs	r1, #0
 8000324:	4809      	ldr	r0, [pc, #36]	; (800034c <MX_I2C1_Init+0x74>)
 8000326:	f001 f879 	bl	800141c <HAL_I2CEx_ConfigAnalogFilter>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000330:	f000 f842 	bl	80003b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000334:	2100      	movs	r1, #0
 8000336:	4805      	ldr	r0, [pc, #20]	; (800034c <MX_I2C1_Init+0x74>)
 8000338:	f001 f8bb 	bl	80014b2 <HAL_I2CEx_ConfigDigitalFilter>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000342:	f000 f839 	bl	80003b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000346:	bf00      	nop
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	20000028 	.word	0x20000028
 8000350:	40005400 	.word	0x40005400
 8000354:	10808dd3 	.word	0x10808dd3

08000358 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000358:	b480      	push	{r7}
 800035a:	b085      	sub	sp, #20
 800035c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800035e:	4b15      	ldr	r3, [pc, #84]	; (80003b4 <MX_GPIO_Init+0x5c>)
 8000360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000362:	4a14      	ldr	r2, [pc, #80]	; (80003b4 <MX_GPIO_Init+0x5c>)
 8000364:	f043 0320 	orr.w	r3, r3, #32
 8000368:	64d3      	str	r3, [r2, #76]	; 0x4c
 800036a:	4b12      	ldr	r3, [pc, #72]	; (80003b4 <MX_GPIO_Init+0x5c>)
 800036c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800036e:	f003 0320 	and.w	r3, r3, #32
 8000372:	60fb      	str	r3, [r7, #12]
 8000374:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000376:	4b0f      	ldr	r3, [pc, #60]	; (80003b4 <MX_GPIO_Init+0x5c>)
 8000378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800037a:	4a0e      	ldr	r2, [pc, #56]	; (80003b4 <MX_GPIO_Init+0x5c>)
 800037c:	f043 0301 	orr.w	r3, r3, #1
 8000380:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000382:	4b0c      	ldr	r3, [pc, #48]	; (80003b4 <MX_GPIO_Init+0x5c>)
 8000384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000386:	f003 0301 	and.w	r3, r3, #1
 800038a:	60bb      	str	r3, [r7, #8]
 800038c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800038e:	4b09      	ldr	r3, [pc, #36]	; (80003b4 <MX_GPIO_Init+0x5c>)
 8000390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000392:	4a08      	ldr	r2, [pc, #32]	; (80003b4 <MX_GPIO_Init+0x5c>)
 8000394:	f043 0302 	orr.w	r3, r3, #2
 8000398:	64d3      	str	r3, [r2, #76]	; 0x4c
 800039a:	4b06      	ldr	r3, [pc, #24]	; (80003b4 <MX_GPIO_Init+0x5c>)
 800039c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800039e:	f003 0302 	and.w	r3, r3, #2
 80003a2:	607b      	str	r3, [r7, #4]
 80003a4:	687b      	ldr	r3, [r7, #4]

}
 80003a6:	bf00      	nop
 80003a8:	3714      	adds	r7, #20
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop
 80003b4:	40021000 	.word	0x40021000

080003b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003bc:	b672      	cpsid	i
}
 80003be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003c0:	e7fe      	b.n	80003c0 <Error_Handler+0x8>
	...

080003c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b083      	sub	sp, #12
 80003c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003ca:	4b0f      	ldr	r3, [pc, #60]	; (8000408 <HAL_MspInit+0x44>)
 80003cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003ce:	4a0e      	ldr	r2, [pc, #56]	; (8000408 <HAL_MspInit+0x44>)
 80003d0:	f043 0301 	orr.w	r3, r3, #1
 80003d4:	6613      	str	r3, [r2, #96]	; 0x60
 80003d6:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <HAL_MspInit+0x44>)
 80003d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003da:	f003 0301 	and.w	r3, r3, #1
 80003de:	607b      	str	r3, [r7, #4]
 80003e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003e2:	4b09      	ldr	r3, [pc, #36]	; (8000408 <HAL_MspInit+0x44>)
 80003e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003e6:	4a08      	ldr	r2, [pc, #32]	; (8000408 <HAL_MspInit+0x44>)
 80003e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003ec:	6593      	str	r3, [r2, #88]	; 0x58
 80003ee:	4b06      	ldr	r3, [pc, #24]	; (8000408 <HAL_MspInit+0x44>)
 80003f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003f6:	603b      	str	r3, [r7, #0]
 80003f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003fa:	bf00      	nop
 80003fc:	370c      	adds	r7, #12
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop
 8000408:	40021000 	.word	0x40021000

0800040c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b09c      	sub	sp, #112	; 0x70
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000414:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
 800041c:	605a      	str	r2, [r3, #4]
 800041e:	609a      	str	r2, [r3, #8]
 8000420:	60da      	str	r2, [r3, #12]
 8000422:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000424:	f107 0318 	add.w	r3, r7, #24
 8000428:	2244      	movs	r2, #68	; 0x44
 800042a:	2100      	movs	r1, #0
 800042c:	4618      	mov	r0, r3
 800042e:	f002 f841 	bl	80024b4 <memset>
  if(hi2c->Instance==I2C1)
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	4a2d      	ldr	r2, [pc, #180]	; (80004ec <HAL_I2C_MspInit+0xe0>)
 8000438:	4293      	cmp	r3, r2
 800043a:	d153      	bne.n	80004e4 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800043c:	2340      	movs	r3, #64	; 0x40
 800043e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000440:	2300      	movs	r3, #0
 8000442:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000444:	f107 0318 	add.w	r3, r7, #24
 8000448:	4618      	mov	r0, r3
 800044a:	f001 fe1f 	bl	800208c <HAL_RCCEx_PeriphCLKConfig>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000454:	f7ff ffb0 	bl	80003b8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000458:	4b25      	ldr	r3, [pc, #148]	; (80004f0 <HAL_I2C_MspInit+0xe4>)
 800045a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800045c:	4a24      	ldr	r2, [pc, #144]	; (80004f0 <HAL_I2C_MspInit+0xe4>)
 800045e:	f043 0301 	orr.w	r3, r3, #1
 8000462:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000464:	4b22      	ldr	r3, [pc, #136]	; (80004f0 <HAL_I2C_MspInit+0xe4>)
 8000466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000468:	f003 0301 	and.w	r3, r3, #1
 800046c:	617b      	str	r3, [r7, #20]
 800046e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000470:	4b1f      	ldr	r3, [pc, #124]	; (80004f0 <HAL_I2C_MspInit+0xe4>)
 8000472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000474:	4a1e      	ldr	r2, [pc, #120]	; (80004f0 <HAL_I2C_MspInit+0xe4>)
 8000476:	f043 0302 	orr.w	r3, r3, #2
 800047a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800047c:	4b1c      	ldr	r3, [pc, #112]	; (80004f0 <HAL_I2C_MspInit+0xe4>)
 800047e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000480:	f003 0302 	and.w	r3, r3, #2
 8000484:	613b      	str	r3, [r7, #16]
 8000486:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000488:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800048c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800048e:	2312      	movs	r3, #18
 8000490:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000492:	2300      	movs	r3, #0
 8000494:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000496:	2300      	movs	r3, #0
 8000498:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800049a:	2304      	movs	r3, #4
 800049c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800049e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80004a2:	4619      	mov	r1, r3
 80004a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004a8:	f000 fab4 	bl	8000a14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80004ac:	2380      	movs	r3, #128	; 0x80
 80004ae:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004b0:	2312      	movs	r3, #18
 80004b2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b4:	2300      	movs	r3, #0
 80004b6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b8:	2300      	movs	r3, #0
 80004ba:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80004bc:	2304      	movs	r3, #4
 80004be:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004c0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80004c4:	4619      	mov	r1, r3
 80004c6:	480b      	ldr	r0, [pc, #44]	; (80004f4 <HAL_I2C_MspInit+0xe8>)
 80004c8:	f000 faa4 	bl	8000a14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80004cc:	4b08      	ldr	r3, [pc, #32]	; (80004f0 <HAL_I2C_MspInit+0xe4>)
 80004ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004d0:	4a07      	ldr	r2, [pc, #28]	; (80004f0 <HAL_I2C_MspInit+0xe4>)
 80004d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004d6:	6593      	str	r3, [r2, #88]	; 0x58
 80004d8:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <HAL_I2C_MspInit+0xe4>)
 80004da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004e0:	60fb      	str	r3, [r7, #12]
 80004e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80004e4:	bf00      	nop
 80004e6:	3770      	adds	r7, #112	; 0x70
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	40005400 	.word	0x40005400
 80004f0:	40021000 	.word	0x40021000
 80004f4:	48000400 	.word	0x48000400

080004f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004fc:	e7fe      	b.n	80004fc <NMI_Handler+0x4>

080004fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004fe:	b480      	push	{r7}
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000502:	e7fe      	b.n	8000502 <HardFault_Handler+0x4>

08000504 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000508:	e7fe      	b.n	8000508 <MemManage_Handler+0x4>

0800050a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800050a:	b480      	push	{r7}
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800050e:	e7fe      	b.n	800050e <BusFault_Handler+0x4>

08000510 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000514:	e7fe      	b.n	8000514 <UsageFault_Handler+0x4>

08000516 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000516:	b480      	push	{r7}
 8000518:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800051a:	bf00      	nop
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr

08000524 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr

08000532 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000532:	b480      	push	{r7}
 8000534:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000536:	bf00      	nop
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr

08000540 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000544:	f000 f942 	bl	80007cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000548:	bf00      	nop
 800054a:	bd80      	pop	{r7, pc}

0800054c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000550:	4b06      	ldr	r3, [pc, #24]	; (800056c <SystemInit+0x20>)
 8000552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000556:	4a05      	ldr	r2, [pc, #20]	; (800056c <SystemInit+0x20>)
 8000558:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800055c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000560:	bf00      	nop
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	e000ed00 	.word	0xe000ed00

08000570 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000570:	480d      	ldr	r0, [pc, #52]	; (80005a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000572:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000574:	480d      	ldr	r0, [pc, #52]	; (80005ac <LoopForever+0x6>)
  ldr r1, =_edata
 8000576:	490e      	ldr	r1, [pc, #56]	; (80005b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000578:	4a0e      	ldr	r2, [pc, #56]	; (80005b4 <LoopForever+0xe>)
  movs r3, #0
 800057a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800057c:	e002      	b.n	8000584 <LoopCopyDataInit>

0800057e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800057e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000580:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000582:	3304      	adds	r3, #4

08000584 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000584:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000586:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000588:	d3f9      	bcc.n	800057e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800058a:	4a0b      	ldr	r2, [pc, #44]	; (80005b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800058c:	4c0b      	ldr	r4, [pc, #44]	; (80005bc <LoopForever+0x16>)
  movs r3, #0
 800058e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000590:	e001      	b.n	8000596 <LoopFillZerobss>

08000592 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000592:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000594:	3204      	adds	r2, #4

08000596 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000596:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000598:	d3fb      	bcc.n	8000592 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800059a:	f7ff ffd7 	bl	800054c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800059e:	f001 ff65 	bl	800246c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005a2:	f7ff fe39 	bl	8000218 <main>

080005a6 <LoopForever>:

LoopForever:
    b LoopForever
 80005a6:	e7fe      	b.n	80005a6 <LoopForever>
  ldr   r0, =_estack
 80005a8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80005ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005b0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005b4:	08002500 	.word	0x08002500
  ldr r2, =_sbss
 80005b8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005bc:	20000078 	.word	0x20000078

080005c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005c0:	e7fe      	b.n	80005c0 <ADC1_2_IRQHandler>
	...

080005c4 <lcd_send_cmd>:

#define SLAVE_ADDRESS_LCD   (0x3f << 0x01)// 0x3F // change this according to ur setup

// send commend to display
void lcd_send_cmd (char cmd)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af02      	add	r7, sp, #8
 80005ca:	4603      	mov	r3, r0
 80005cc:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	f023 030f 	bic.w	r3, r3, #15
 80005d4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	011b      	lsls	r3, r3, #4
 80005da:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80005dc:	7bfb      	ldrb	r3, [r7, #15]
 80005de:	f043 030c 	orr.w	r3, r3, #12
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
 80005e8:	f043 0308 	orr.w	r3, r3, #8
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80005f0:	7bbb      	ldrb	r3, [r7, #14]
 80005f2:	f043 030c 	orr.w	r3, r3, #12
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80005fa:	7bbb      	ldrb	r3, [r7, #14]
 80005fc:	f043 0308 	orr.w	r3, r3, #8
 8000600:	b2db      	uxtb	r3, r3
 8000602:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000604:	f107 0208 	add.w	r2, r7, #8
 8000608:	2364      	movs	r3, #100	; 0x64
 800060a:	9300      	str	r3, [sp, #0]
 800060c:	2304      	movs	r3, #4
 800060e:	217e      	movs	r1, #126	; 0x7e
 8000610:	4803      	ldr	r0, [pc, #12]	; (8000620 <lcd_send_cmd+0x5c>)
 8000612:	f000 fc11 	bl	8000e38 <HAL_I2C_Master_Transmit>
}
 8000616:	bf00      	nop
 8000618:	3710      	adds	r7, #16
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	20000028 	.word	0x20000028

08000624 <lcd_send_data>:

// send data
void lcd_send_data (char data)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b086      	sub	sp, #24
 8000628:	af02      	add	r7, sp, #8
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	f023 030f 	bic.w	r3, r3, #15
 8000634:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	011b      	lsls	r3, r3, #4
 800063a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800063c:	7bfb      	ldrb	r3, [r7, #15]
 800063e:	f043 030d 	orr.w	r3, r3, #13
 8000642:	b2db      	uxtb	r3, r3
 8000644:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000646:	7bfb      	ldrb	r3, [r7, #15]
 8000648:	f043 0309 	orr.w	r3, r3, #9
 800064c:	b2db      	uxtb	r3, r3
 800064e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000650:	7bbb      	ldrb	r3, [r7, #14]
 8000652:	f043 030d 	orr.w	r3, r3, #13
 8000656:	b2db      	uxtb	r3, r3
 8000658:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800065a:	7bbb      	ldrb	r3, [r7, #14]
 800065c:	f043 0309 	orr.w	r3, r3, #9
 8000660:	b2db      	uxtb	r3, r3
 8000662:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000664:	f107 0208 	add.w	r2, r7, #8
 8000668:	2364      	movs	r3, #100	; 0x64
 800066a:	9300      	str	r3, [sp, #0]
 800066c:	2304      	movs	r3, #4
 800066e:	217e      	movs	r1, #126	; 0x7e
 8000670:	4803      	ldr	r0, [pc, #12]	; (8000680 <lcd_send_data+0x5c>)
 8000672:	f000 fbe1 	bl	8000e38 <HAL_I2C_Master_Transmit>
}
 8000676:	bf00      	nop
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000028 	.word	0x20000028

08000684 <lcd_init>:
    lcd_send_cmd (col);
}

// initialize lcd
void lcd_init (void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000688:	2032      	movs	r0, #50	; 0x32
 800068a:	f000 f8bd 	bl	8000808 <HAL_Delay>
	lcd_send_cmd (0x30);
 800068e:	2030      	movs	r0, #48	; 0x30
 8000690:	f7ff ff98 	bl	80005c4 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000694:	2005      	movs	r0, #5
 8000696:	f000 f8b7 	bl	8000808 <HAL_Delay>
	lcd_send_cmd (0x30);
 800069a:	2030      	movs	r0, #48	; 0x30
 800069c:	f7ff ff92 	bl	80005c4 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80006a0:	2001      	movs	r0, #1
 80006a2:	f000 f8b1 	bl	8000808 <HAL_Delay>
	lcd_send_cmd (0x30);
 80006a6:	2030      	movs	r0, #48	; 0x30
 80006a8:	f7ff ff8c 	bl	80005c4 <lcd_send_cmd>
	HAL_Delay(10);
 80006ac:	200a      	movs	r0, #10
 80006ae:	f000 f8ab 	bl	8000808 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80006b2:	2020      	movs	r0, #32
 80006b4:	f7ff ff86 	bl	80005c4 <lcd_send_cmd>
	HAL_Delay(10);
 80006b8:	200a      	movs	r0, #10
 80006ba:	f000 f8a5 	bl	8000808 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80006be:	2028      	movs	r0, #40	; 0x28
 80006c0:	f7ff ff80 	bl	80005c4 <lcd_send_cmd>
	HAL_Delay(1);
 80006c4:	2001      	movs	r0, #1
 80006c6:	f000 f89f 	bl	8000808 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80006ca:	2008      	movs	r0, #8
 80006cc:	f7ff ff7a 	bl	80005c4 <lcd_send_cmd>
	HAL_Delay(1);
 80006d0:	2001      	movs	r0, #1
 80006d2:	f000 f899 	bl	8000808 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80006d6:	2001      	movs	r0, #1
 80006d8:	f7ff ff74 	bl	80005c4 <lcd_send_cmd>
	HAL_Delay(1);
 80006dc:	2001      	movs	r0, #1
 80006de:	f000 f893 	bl	8000808 <HAL_Delay>
	HAL_Delay(1);
 80006e2:	2001      	movs	r0, #1
 80006e4:	f000 f890 	bl	8000808 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80006e8:	2006      	movs	r0, #6
 80006ea:	f7ff ff6b 	bl	80005c4 <lcd_send_cmd>
	HAL_Delay(1);
 80006ee:	2001      	movs	r0, #1
 80006f0:	f000 f88a 	bl	8000808 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80006f4:	200c      	movs	r0, #12
 80006f6:	f7ff ff65 	bl	80005c4 <lcd_send_cmd>
}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}

080006fe <lcd_send_string>:

// send string to the lcd
void lcd_send_string (char *str)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	b082      	sub	sp, #8
 8000702:	af00      	add	r7, sp, #0
 8000704:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000706:	e006      	b.n	8000716 <lcd_send_string+0x18>
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	1c5a      	adds	r2, r3, #1
 800070c:	607a      	str	r2, [r7, #4]
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff ff87 	bl	8000624 <lcd_send_data>
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d1f4      	bne.n	8000708 <lcd_send_string+0xa>
}
 800071e:	bf00      	nop
 8000720:	bf00      	nop
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}

08000728 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800072e:	2300      	movs	r3, #0
 8000730:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000732:	2003      	movs	r0, #3
 8000734:	f000 f93c 	bl	80009b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000738:	200f      	movs	r0, #15
 800073a:	f000 f80d 	bl	8000758 <HAL_InitTick>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d002      	beq.n	800074a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000744:	2301      	movs	r3, #1
 8000746:	71fb      	strb	r3, [r7, #7]
 8000748:	e001      	b.n	800074e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800074a:	f7ff fe3b 	bl	80003c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800074e:	79fb      	ldrb	r3, [r7, #7]

}
 8000750:	4618      	mov	r0, r3
 8000752:	3708      	adds	r7, #8
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000760:	2300      	movs	r3, #0
 8000762:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000764:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <HAL_InitTick+0x68>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d022      	beq.n	80007b2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800076c:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <HAL_InitTick+0x6c>)
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <HAL_InitTick+0x68>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000778:	fbb1 f3f3 	udiv	r3, r1, r3
 800077c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000780:	4618      	mov	r0, r3
 8000782:	f000 f93a 	bl	80009fa <HAL_SYSTICK_Config>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d10f      	bne.n	80007ac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2b0f      	cmp	r3, #15
 8000790:	d809      	bhi.n	80007a6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000792:	2200      	movs	r2, #0
 8000794:	6879      	ldr	r1, [r7, #4]
 8000796:	f04f 30ff 	mov.w	r0, #4294967295
 800079a:	f000 f914 	bl	80009c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800079e:	4a0a      	ldr	r2, [pc, #40]	; (80007c8 <HAL_InitTick+0x70>)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	6013      	str	r3, [r2, #0]
 80007a4:	e007      	b.n	80007b6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80007a6:	2301      	movs	r3, #1
 80007a8:	73fb      	strb	r3, [r7, #15]
 80007aa:	e004      	b.n	80007b6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007ac:	2301      	movs	r3, #1
 80007ae:	73fb      	strb	r3, [r7, #15]
 80007b0:	e001      	b.n	80007b6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007b2:	2301      	movs	r3, #1
 80007b4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80007b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3710      	adds	r7, #16
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000008 	.word	0x20000008
 80007c4:	20000000 	.word	0x20000000
 80007c8:	20000004 	.word	0x20000004

080007cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <HAL_IncTick+0x1c>)
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	4b05      	ldr	r3, [pc, #20]	; (80007ec <HAL_IncTick+0x20>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4413      	add	r3, r2
 80007da:	4a03      	ldr	r2, [pc, #12]	; (80007e8 <HAL_IncTick+0x1c>)
 80007dc:	6013      	str	r3, [r2, #0]
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	20000074 	.word	0x20000074
 80007ec:	20000008 	.word	0x20000008

080007f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  return uwTick;
 80007f4:	4b03      	ldr	r3, [pc, #12]	; (8000804 <HAL_GetTick+0x14>)
 80007f6:	681b      	ldr	r3, [r3, #0]
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	20000074 	.word	0x20000074

08000808 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000810:	f7ff ffee 	bl	80007f0 <HAL_GetTick>
 8000814:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000820:	d004      	beq.n	800082c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000822:	4b09      	ldr	r3, [pc, #36]	; (8000848 <HAL_Delay+0x40>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	68fa      	ldr	r2, [r7, #12]
 8000828:	4413      	add	r3, r2
 800082a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800082c:	bf00      	nop
 800082e:	f7ff ffdf 	bl	80007f0 <HAL_GetTick>
 8000832:	4602      	mov	r2, r0
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	1ad3      	subs	r3, r2, r3
 8000838:	68fa      	ldr	r2, [r7, #12]
 800083a:	429a      	cmp	r2, r3
 800083c:	d8f7      	bhi.n	800082e <HAL_Delay+0x26>
  {
  }
}
 800083e:	bf00      	nop
 8000840:	bf00      	nop
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000008 	.word	0x20000008

0800084c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800084c:	b480      	push	{r7}
 800084e:	b085      	sub	sp, #20
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	f003 0307 	and.w	r3, r3, #7
 800085a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800085c:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <__NVIC_SetPriorityGrouping+0x44>)
 800085e:	68db      	ldr	r3, [r3, #12]
 8000860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000862:	68ba      	ldr	r2, [r7, #8]
 8000864:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000868:	4013      	ands	r3, r2
 800086a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000874:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800087c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800087e:	4a04      	ldr	r2, [pc, #16]	; (8000890 <__NVIC_SetPriorityGrouping+0x44>)
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	60d3      	str	r3, [r2, #12]
}
 8000884:	bf00      	nop
 8000886:	3714      	adds	r7, #20
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	e000ed00 	.word	0xe000ed00

08000894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000898:	4b04      	ldr	r3, [pc, #16]	; (80008ac <__NVIC_GetPriorityGrouping+0x18>)
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	0a1b      	lsrs	r3, r3, #8
 800089e:	f003 0307 	and.w	r3, r3, #7
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	e000ed00 	.word	0xe000ed00

080008b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	6039      	str	r1, [r7, #0]
 80008ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	db0a      	blt.n	80008da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	b2da      	uxtb	r2, r3
 80008c8:	490c      	ldr	r1, [pc, #48]	; (80008fc <__NVIC_SetPriority+0x4c>)
 80008ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ce:	0112      	lsls	r2, r2, #4
 80008d0:	b2d2      	uxtb	r2, r2
 80008d2:	440b      	add	r3, r1
 80008d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008d8:	e00a      	b.n	80008f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	4908      	ldr	r1, [pc, #32]	; (8000900 <__NVIC_SetPriority+0x50>)
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	f003 030f 	and.w	r3, r3, #15
 80008e6:	3b04      	subs	r3, #4
 80008e8:	0112      	lsls	r2, r2, #4
 80008ea:	b2d2      	uxtb	r2, r2
 80008ec:	440b      	add	r3, r1
 80008ee:	761a      	strb	r2, [r3, #24]
}
 80008f0:	bf00      	nop
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr
 80008fc:	e000e100 	.word	0xe000e100
 8000900:	e000ed00 	.word	0xe000ed00

08000904 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000904:	b480      	push	{r7}
 8000906:	b089      	sub	sp, #36	; 0x24
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	f003 0307 	and.w	r3, r3, #7
 8000916:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000918:	69fb      	ldr	r3, [r7, #28]
 800091a:	f1c3 0307 	rsb	r3, r3, #7
 800091e:	2b04      	cmp	r3, #4
 8000920:	bf28      	it	cs
 8000922:	2304      	movcs	r3, #4
 8000924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	3304      	adds	r3, #4
 800092a:	2b06      	cmp	r3, #6
 800092c:	d902      	bls.n	8000934 <NVIC_EncodePriority+0x30>
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	3b03      	subs	r3, #3
 8000932:	e000      	b.n	8000936 <NVIC_EncodePriority+0x32>
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000938:	f04f 32ff 	mov.w	r2, #4294967295
 800093c:	69bb      	ldr	r3, [r7, #24]
 800093e:	fa02 f303 	lsl.w	r3, r2, r3
 8000942:	43da      	mvns	r2, r3
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	401a      	ands	r2, r3
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800094c:	f04f 31ff 	mov.w	r1, #4294967295
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	fa01 f303 	lsl.w	r3, r1, r3
 8000956:	43d9      	mvns	r1, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800095c:	4313      	orrs	r3, r2
         );
}
 800095e:	4618      	mov	r0, r3
 8000960:	3724      	adds	r7, #36	; 0x24
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
	...

0800096c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	3b01      	subs	r3, #1
 8000978:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800097c:	d301      	bcc.n	8000982 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800097e:	2301      	movs	r3, #1
 8000980:	e00f      	b.n	80009a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000982:	4a0a      	ldr	r2, [pc, #40]	; (80009ac <SysTick_Config+0x40>)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	3b01      	subs	r3, #1
 8000988:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800098a:	210f      	movs	r1, #15
 800098c:	f04f 30ff 	mov.w	r0, #4294967295
 8000990:	f7ff ff8e 	bl	80008b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000994:	4b05      	ldr	r3, [pc, #20]	; (80009ac <SysTick_Config+0x40>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800099a:	4b04      	ldr	r3, [pc, #16]	; (80009ac <SysTick_Config+0x40>)
 800099c:	2207      	movs	r2, #7
 800099e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009a0:	2300      	movs	r3, #0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	e000e010 	.word	0xe000e010

080009b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f7ff ff47 	bl	800084c <__NVIC_SetPriorityGrouping>
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b086      	sub	sp, #24
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	4603      	mov	r3, r0
 80009ce:	60b9      	str	r1, [r7, #8]
 80009d0:	607a      	str	r2, [r7, #4]
 80009d2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80009d4:	f7ff ff5e 	bl	8000894 <__NVIC_GetPriorityGrouping>
 80009d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	68b9      	ldr	r1, [r7, #8]
 80009de:	6978      	ldr	r0, [r7, #20]
 80009e0:	f7ff ff90 	bl	8000904 <NVIC_EncodePriority>
 80009e4:	4602      	mov	r2, r0
 80009e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ea:	4611      	mov	r1, r2
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff ff5f 	bl	80008b0 <__NVIC_SetPriority>
}
 80009f2:	bf00      	nop
 80009f4:	3718      	adds	r7, #24
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b082      	sub	sp, #8
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f7ff ffb2 	bl	800096c <SysTick_Config>
 8000a08:	4603      	mov	r3, r0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
	...

08000a14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b087      	sub	sp, #28
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000a22:	e15a      	b.n	8000cda <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	2101      	movs	r1, #1
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a30:	4013      	ands	r3, r2
 8000a32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	f000 814c 	beq.w	8000cd4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	f003 0303 	and.w	r3, r3, #3
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d005      	beq.n	8000a54 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a50:	2b02      	cmp	r3, #2
 8000a52:	d130      	bne.n	8000ab6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	689b      	ldr	r3, [r3, #8]
 8000a58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	005b      	lsls	r3, r3, #1
 8000a5e:	2203      	movs	r2, #3
 8000a60:	fa02 f303 	lsl.w	r3, r2, r3
 8000a64:	43db      	mvns	r3, r3
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	4013      	ands	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	68da      	ldr	r2, [r3, #12]
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	fa02 f303 	lsl.w	r3, r2, r3
 8000a78:	693a      	ldr	r2, [r7, #16]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	693a      	ldr	r2, [r7, #16]
 8000a82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a92:	43db      	mvns	r3, r3
 8000a94:	693a      	ldr	r2, [r7, #16]
 8000a96:	4013      	ands	r3, r2
 8000a98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	091b      	lsrs	r3, r3, #4
 8000aa0:	f003 0201 	and.w	r2, r3, #1
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	4313      	orrs	r3, r2
 8000aae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	693a      	ldr	r2, [r7, #16]
 8000ab4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f003 0303 	and.w	r3, r3, #3
 8000abe:	2b03      	cmp	r3, #3
 8000ac0:	d017      	beq.n	8000af2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	68db      	ldr	r3, [r3, #12]
 8000ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	2203      	movs	r2, #3
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	43db      	mvns	r3, r3
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	689a      	ldr	r2, [r3, #8]
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	f003 0303 	and.w	r3, r3, #3
 8000afa:	2b02      	cmp	r3, #2
 8000afc:	d123      	bne.n	8000b46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	08da      	lsrs	r2, r3, #3
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	3208      	adds	r2, #8
 8000b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	f003 0307 	and.w	r3, r3, #7
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	220f      	movs	r2, #15
 8000b16:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1a:	43db      	mvns	r3, r3
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	4013      	ands	r3, r2
 8000b20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	691a      	ldr	r2, [r3, #16]
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	f003 0307 	and.w	r3, r3, #7
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	08da      	lsrs	r2, r3, #3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3208      	adds	r2, #8
 8000b40:	6939      	ldr	r1, [r7, #16]
 8000b42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	2203      	movs	r2, #3
 8000b52:	fa02 f303 	lsl.w	r3, r2, r3
 8000b56:	43db      	mvns	r3, r3
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f003 0203 	and.w	r2, r3, #3
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	f000 80a6 	beq.w	8000cd4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b88:	4b5b      	ldr	r3, [pc, #364]	; (8000cf8 <HAL_GPIO_Init+0x2e4>)
 8000b8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b8c:	4a5a      	ldr	r2, [pc, #360]	; (8000cf8 <HAL_GPIO_Init+0x2e4>)
 8000b8e:	f043 0301 	orr.w	r3, r3, #1
 8000b92:	6613      	str	r3, [r2, #96]	; 0x60
 8000b94:	4b58      	ldr	r3, [pc, #352]	; (8000cf8 <HAL_GPIO_Init+0x2e4>)
 8000b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b98:	f003 0301 	and.w	r3, r3, #1
 8000b9c:	60bb      	str	r3, [r7, #8]
 8000b9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ba0:	4a56      	ldr	r2, [pc, #344]	; (8000cfc <HAL_GPIO_Init+0x2e8>)
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	089b      	lsrs	r3, r3, #2
 8000ba6:	3302      	adds	r3, #2
 8000ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	f003 0303 	and.w	r3, r3, #3
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	220f      	movs	r2, #15
 8000bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000bca:	d01f      	beq.n	8000c0c <HAL_GPIO_Init+0x1f8>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4a4c      	ldr	r2, [pc, #304]	; (8000d00 <HAL_GPIO_Init+0x2ec>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d019      	beq.n	8000c08 <HAL_GPIO_Init+0x1f4>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4a4b      	ldr	r2, [pc, #300]	; (8000d04 <HAL_GPIO_Init+0x2f0>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d013      	beq.n	8000c04 <HAL_GPIO_Init+0x1f0>
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4a4a      	ldr	r2, [pc, #296]	; (8000d08 <HAL_GPIO_Init+0x2f4>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d00d      	beq.n	8000c00 <HAL_GPIO_Init+0x1ec>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a49      	ldr	r2, [pc, #292]	; (8000d0c <HAL_GPIO_Init+0x2f8>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d007      	beq.n	8000bfc <HAL_GPIO_Init+0x1e8>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a48      	ldr	r2, [pc, #288]	; (8000d10 <HAL_GPIO_Init+0x2fc>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d101      	bne.n	8000bf8 <HAL_GPIO_Init+0x1e4>
 8000bf4:	2305      	movs	r3, #5
 8000bf6:	e00a      	b.n	8000c0e <HAL_GPIO_Init+0x1fa>
 8000bf8:	2306      	movs	r3, #6
 8000bfa:	e008      	b.n	8000c0e <HAL_GPIO_Init+0x1fa>
 8000bfc:	2304      	movs	r3, #4
 8000bfe:	e006      	b.n	8000c0e <HAL_GPIO_Init+0x1fa>
 8000c00:	2303      	movs	r3, #3
 8000c02:	e004      	b.n	8000c0e <HAL_GPIO_Init+0x1fa>
 8000c04:	2302      	movs	r3, #2
 8000c06:	e002      	b.n	8000c0e <HAL_GPIO_Init+0x1fa>
 8000c08:	2301      	movs	r3, #1
 8000c0a:	e000      	b.n	8000c0e <HAL_GPIO_Init+0x1fa>
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	697a      	ldr	r2, [r7, #20]
 8000c10:	f002 0203 	and.w	r2, r2, #3
 8000c14:	0092      	lsls	r2, r2, #2
 8000c16:	4093      	lsls	r3, r2
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c1e:	4937      	ldr	r1, [pc, #220]	; (8000cfc <HAL_GPIO_Init+0x2e8>)
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	089b      	lsrs	r3, r3, #2
 8000c24:	3302      	adds	r3, #2
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c2c:	4b39      	ldr	r3, [pc, #228]	; (8000d14 <HAL_GPIO_Init+0x300>)
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	43db      	mvns	r3, r3
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	4013      	ands	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d003      	beq.n	8000c50 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c50:	4a30      	ldr	r2, [pc, #192]	; (8000d14 <HAL_GPIO_Init+0x300>)
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c56:	4b2f      	ldr	r3, [pc, #188]	; (8000d14 <HAL_GPIO_Init+0x300>)
 8000c58:	68db      	ldr	r3, [r3, #12]
 8000c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	43db      	mvns	r3, r3
 8000c60:	693a      	ldr	r2, [r7, #16]
 8000c62:	4013      	ands	r3, r2
 8000c64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d003      	beq.n	8000c7a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c7a:	4a26      	ldr	r2, [pc, #152]	; (8000d14 <HAL_GPIO_Init+0x300>)
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000c80:	4b24      	ldr	r3, [pc, #144]	; (8000d14 <HAL_GPIO_Init+0x300>)
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d003      	beq.n	8000ca4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ca4:	4a1b      	ldr	r2, [pc, #108]	; (8000d14 <HAL_GPIO_Init+0x300>)
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000caa:	4b1a      	ldr	r3, [pc, #104]	; (8000d14 <HAL_GPIO_Init+0x300>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d003      	beq.n	8000cce <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000cce:	4a11      	ldr	r2, [pc, #68]	; (8000d14 <HAL_GPIO_Init+0x300>)
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	f47f ae9d 	bne.w	8000a24 <HAL_GPIO_Init+0x10>
  }
}
 8000cea:	bf00      	nop
 8000cec:	bf00      	nop
 8000cee:	371c      	adds	r7, #28
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	40010000 	.word	0x40010000
 8000d00:	48000400 	.word	0x48000400
 8000d04:	48000800 	.word	0x48000800
 8000d08:	48000c00 	.word	0x48000c00
 8000d0c:	48001000 	.word	0x48001000
 8000d10:	48001400 	.word	0x48001400
 8000d14:	40010400 	.word	0x40010400

08000d18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d101      	bne.n	8000d2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	e081      	b.n	8000e2e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d106      	bne.n	8000d44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff fb64 	bl	800040c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2224      	movs	r2, #36	; 0x24
 8000d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f022 0201 	bic.w	r2, r2, #1
 8000d5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	685a      	ldr	r2, [r3, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000d68:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	689a      	ldr	r2, [r3, #8]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d78:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	68db      	ldr	r3, [r3, #12]
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d107      	bne.n	8000d92 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	689a      	ldr	r2, [r3, #8]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	e006      	b.n	8000da0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	689a      	ldr	r2, [r3, #8]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000d9e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	2b02      	cmp	r3, #2
 8000da6:	d104      	bne.n	8000db2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000db0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	687a      	ldr	r2, [r7, #4]
 8000dba:	6812      	ldr	r2, [r2, #0]
 8000dbc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dc4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	68da      	ldr	r2, [r3, #12]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000dd4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	691a      	ldr	r2, [r3, #16]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	695b      	ldr	r3, [r3, #20]
 8000dde:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	699b      	ldr	r3, [r3, #24]
 8000de6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	430a      	orrs	r2, r1
 8000dee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	69d9      	ldr	r1, [r3, #28]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6a1a      	ldr	r2, [r3, #32]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	430a      	orrs	r2, r1
 8000dfe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f042 0201 	orr.w	r2, r2, #1
 8000e0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2200      	movs	r2, #0
 8000e14:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2220      	movs	r2, #32
 8000e1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2200      	movs	r2, #0
 8000e22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2200      	movs	r2, #0
 8000e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
	...

08000e38 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b088      	sub	sp, #32
 8000e3c:	af02      	add	r7, sp, #8
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	607a      	str	r2, [r7, #4]
 8000e42:	461a      	mov	r2, r3
 8000e44:	460b      	mov	r3, r1
 8000e46:	817b      	strh	r3, [r7, #10]
 8000e48:	4613      	mov	r3, r2
 8000e4a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	2b20      	cmp	r3, #32
 8000e56:	f040 80da 	bne.w	800100e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d101      	bne.n	8000e68 <HAL_I2C_Master_Transmit+0x30>
 8000e64:	2302      	movs	r3, #2
 8000e66:	e0d3      	b.n	8001010 <HAL_I2C_Master_Transmit+0x1d8>
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000e70:	f7ff fcbe 	bl	80007f0 <HAL_GetTick>
 8000e74:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	9300      	str	r3, [sp, #0]
 8000e7a:	2319      	movs	r3, #25
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e82:	68f8      	ldr	r0, [r7, #12]
 8000e84:	f000 f8f0 	bl	8001068 <I2C_WaitOnFlagUntilTimeout>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e0be      	b.n	8001010 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	2221      	movs	r2, #33	; 0x21
 8000e96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	2210      	movs	r2, #16
 8000e9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	893a      	ldrh	r2, [r7, #8]
 8000eb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	2bff      	cmp	r3, #255	; 0xff
 8000ec2:	d90e      	bls.n	8000ee2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	22ff      	movs	r2, #255	; 0xff
 8000ec8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ece:	b2da      	uxtb	r2, r3
 8000ed0:	8979      	ldrh	r1, [r7, #10]
 8000ed2:	4b51      	ldr	r3, [pc, #324]	; (8001018 <HAL_I2C_Master_Transmit+0x1e0>)
 8000ed4:	9300      	str	r3, [sp, #0]
 8000ed6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000eda:	68f8      	ldr	r0, [r7, #12]
 8000edc:	f000 fa6c 	bl	80013b8 <I2C_TransferConfig>
 8000ee0:	e06c      	b.n	8000fbc <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ee6:	b29a      	uxth	r2, r3
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	8979      	ldrh	r1, [r7, #10]
 8000ef4:	4b48      	ldr	r3, [pc, #288]	; (8001018 <HAL_I2C_Master_Transmit+0x1e0>)
 8000ef6:	9300      	str	r3, [sp, #0]
 8000ef8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000efc:	68f8      	ldr	r0, [r7, #12]
 8000efe:	f000 fa5b 	bl	80013b8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8000f02:	e05b      	b.n	8000fbc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f04:	697a      	ldr	r2, [r7, #20]
 8000f06:	6a39      	ldr	r1, [r7, #32]
 8000f08:	68f8      	ldr	r0, [r7, #12]
 8000f0a:	f000 f8ed 	bl	80010e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	e07b      	b.n	8001010 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1c:	781a      	ldrb	r2, [r3, #0]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f28:	1c5a      	adds	r2, r3, #1
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	3b01      	subs	r3, #1
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f40:	3b01      	subs	r3, #1
 8000f42:	b29a      	uxth	r2, r3
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d034      	beq.n	8000fbc <HAL_I2C_Master_Transmit+0x184>
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d130      	bne.n	8000fbc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	6a3b      	ldr	r3, [r7, #32]
 8000f60:	2200      	movs	r2, #0
 8000f62:	2180      	movs	r1, #128	; 0x80
 8000f64:	68f8      	ldr	r0, [r7, #12]
 8000f66:	f000 f87f 	bl	8001068 <I2C_WaitOnFlagUntilTimeout>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	e04d      	b.n	8001010 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	2bff      	cmp	r3, #255	; 0xff
 8000f7c:	d90e      	bls.n	8000f9c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	22ff      	movs	r2, #255	; 0xff
 8000f82:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f88:	b2da      	uxtb	r2, r3
 8000f8a:	8979      	ldrh	r1, [r7, #10]
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	9300      	str	r3, [sp, #0]
 8000f90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f94:	68f8      	ldr	r0, [r7, #12]
 8000f96:	f000 fa0f 	bl	80013b8 <I2C_TransferConfig>
 8000f9a:	e00f      	b.n	8000fbc <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	8979      	ldrh	r1, [r7, #10]
 8000fae:	2300      	movs	r3, #0
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fb6:	68f8      	ldr	r0, [r7, #12]
 8000fb8:	f000 f9fe 	bl	80013b8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d19e      	bne.n	8000f04 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000fc6:	697a      	ldr	r2, [r7, #20]
 8000fc8:	6a39      	ldr	r1, [r7, #32]
 8000fca:	68f8      	ldr	r0, [r7, #12]
 8000fcc:	f000 f8cc 	bl	8001168 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e01a      	b.n	8001010 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2220      	movs	r2, #32
 8000fe0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	6859      	ldr	r1, [r3, #4]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4b0b      	ldr	r3, [pc, #44]	; (800101c <HAL_I2C_Master_Transmit+0x1e4>)
 8000fee:	400b      	ands	r3, r1
 8000ff0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	2220      	movs	r2, #32
 8000ff6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	2200      	movs	r2, #0
 8001006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800100a:	2300      	movs	r3, #0
 800100c:	e000      	b.n	8001010 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800100e:	2302      	movs	r3, #2
  }
}
 8001010:	4618      	mov	r0, r3
 8001012:	3718      	adds	r7, #24
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	80002000 	.word	0x80002000
 800101c:	fe00e800 	.word	0xfe00e800

08001020 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	699b      	ldr	r3, [r3, #24]
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	2b02      	cmp	r3, #2
 8001034:	d103      	bne.n	800103e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2200      	movs	r2, #0
 800103c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	f003 0301 	and.w	r3, r3, #1
 8001048:	2b01      	cmp	r3, #1
 800104a:	d007      	beq.n	800105c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	699a      	ldr	r2, [r3, #24]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f042 0201 	orr.w	r2, r2, #1
 800105a:	619a      	str	r2, [r3, #24]
  }
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	603b      	str	r3, [r7, #0]
 8001074:	4613      	mov	r3, r2
 8001076:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001078:	e022      	b.n	80010c0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001080:	d01e      	beq.n	80010c0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001082:	f7ff fbb5 	bl	80007f0 <HAL_GetTick>
 8001086:	4602      	mov	r2, r0
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	683a      	ldr	r2, [r7, #0]
 800108e:	429a      	cmp	r2, r3
 8001090:	d302      	bcc.n	8001098 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d113      	bne.n	80010c0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109c:	f043 0220 	orr.w	r2, r3, #32
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	2220      	movs	r2, #32
 80010a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	2200      	movs	r2, #0
 80010b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e00f      	b.n	80010e0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	699a      	ldr	r2, [r3, #24]
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	4013      	ands	r3, r2
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	bf0c      	ite	eq
 80010d0:	2301      	moveq	r3, #1
 80010d2:	2300      	movne	r3, #0
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	461a      	mov	r2, r3
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d0cd      	beq.n	800107a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80010de:	2300      	movs	r3, #0
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80010f4:	e02c      	b.n	8001150 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	68b9      	ldr	r1, [r7, #8]
 80010fa:	68f8      	ldr	r0, [r7, #12]
 80010fc:	f000 f870 	bl	80011e0 <I2C_IsErrorOccurred>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e02a      	b.n	8001160 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001110:	d01e      	beq.n	8001150 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001112:	f7ff fb6d 	bl	80007f0 <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	68ba      	ldr	r2, [r7, #8]
 800111e:	429a      	cmp	r2, r3
 8001120:	d302      	bcc.n	8001128 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d113      	bne.n	8001150 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112c:	f043 0220 	orr.w	r2, r3, #32
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	2220      	movs	r2, #32
 8001138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	2200      	movs	r2, #0
 8001140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2200      	movs	r2, #0
 8001148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	e007      	b.n	8001160 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	699b      	ldr	r3, [r3, #24]
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	2b02      	cmp	r3, #2
 800115c:	d1cb      	bne.n	80010f6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800115e:	2300      	movs	r3, #0
}
 8001160:	4618      	mov	r0, r3
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001174:	e028      	b.n	80011c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	68b9      	ldr	r1, [r7, #8]
 800117a:	68f8      	ldr	r0, [r7, #12]
 800117c:	f000 f830 	bl	80011e0 <I2C_IsErrorOccurred>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e026      	b.n	80011d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800118a:	f7ff fb31 	bl	80007f0 <HAL_GetTick>
 800118e:	4602      	mov	r2, r0
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	68ba      	ldr	r2, [r7, #8]
 8001196:	429a      	cmp	r2, r3
 8001198:	d302      	bcc.n	80011a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d113      	bne.n	80011c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a4:	f043 0220 	orr.w	r2, r3, #32
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	2220      	movs	r2, #32
 80011b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	2200      	movs	r2, #0
 80011b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	2200      	movs	r2, #0
 80011c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e007      	b.n	80011d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	f003 0320 	and.w	r3, r3, #32
 80011d2:	2b20      	cmp	r3, #32
 80011d4:	d1cf      	bne.n	8001176 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80011d6:	2300      	movs	r3, #0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08a      	sub	sp, #40	; 0x28
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011ec:	2300      	movs	r3, #0
 80011ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	f003 0310 	and.w	r3, r3, #16
 8001208:	2b00      	cmp	r3, #0
 800120a:	d075      	beq.n	80012f8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2210      	movs	r2, #16
 8001212:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001214:	e056      	b.n	80012c4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800121c:	d052      	beq.n	80012c4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800121e:	f7ff fae7 	bl	80007f0 <HAL_GetTick>
 8001222:	4602      	mov	r2, r0
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	68ba      	ldr	r2, [r7, #8]
 800122a:	429a      	cmp	r2, r3
 800122c:	d302      	bcc.n	8001234 <I2C_IsErrorOccurred+0x54>
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d147      	bne.n	80012c4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800123e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001246:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001252:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001256:	d12e      	bne.n	80012b6 <I2C_IsErrorOccurred+0xd6>
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800125e:	d02a      	beq.n	80012b6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001260:	7cfb      	ldrb	r3, [r7, #19]
 8001262:	2b20      	cmp	r3, #32
 8001264:	d027      	beq.n	80012b6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	685a      	ldr	r2, [r3, #4]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001274:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001276:	f7ff fabb 	bl	80007f0 <HAL_GetTick>
 800127a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800127c:	e01b      	b.n	80012b6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800127e:	f7ff fab7 	bl	80007f0 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b19      	cmp	r3, #25
 800128a:	d914      	bls.n	80012b6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001290:	f043 0220 	orr.w	r2, r3, #32
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2220      	movs	r2, #32
 800129c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2200      	movs	r2, #0
 80012a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2200      	movs	r2, #0
 80012ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	f003 0320 	and.w	r3, r3, #32
 80012c0:	2b20      	cmp	r3, #32
 80012c2:	d1dc      	bne.n	800127e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	699b      	ldr	r3, [r3, #24]
 80012ca:	f003 0320 	and.w	r3, r3, #32
 80012ce:	2b20      	cmp	r3, #32
 80012d0:	d003      	beq.n	80012da <I2C_IsErrorOccurred+0xfa>
 80012d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d09d      	beq.n	8001216 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80012da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d103      	bne.n	80012ea <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2220      	movs	r2, #32
 80012e8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80012ea:	6a3b      	ldr	r3, [r7, #32]
 80012ec:	f043 0304 	orr.w	r3, r3, #4
 80012f0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	699b      	ldr	r3, [r3, #24]
 80012fe:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001306:	2b00      	cmp	r3, #0
 8001308:	d00b      	beq.n	8001322 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800130a:	6a3b      	ldr	r3, [r7, #32]
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f44f 7280 	mov.w	r2, #256	; 0x100
 800131a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001328:	2b00      	cmp	r3, #0
 800132a:	d00b      	beq.n	8001344 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800132c:	6a3b      	ldr	r3, [r7, #32]
 800132e:	f043 0308 	orr.w	r3, r3, #8
 8001332:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800133c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800134a:	2b00      	cmp	r3, #0
 800134c:	d00b      	beq.n	8001366 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800134e:	6a3b      	ldr	r3, [r7, #32]
 8001350:	f043 0302 	orr.w	r3, r3, #2
 8001354:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800135e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001366:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800136a:	2b00      	cmp	r3, #0
 800136c:	d01c      	beq.n	80013a8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800136e:	68f8      	ldr	r0, [r7, #12]
 8001370:	f7ff fe56 	bl	8001020 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	6859      	ldr	r1, [r3, #4]
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	4b0d      	ldr	r3, [pc, #52]	; (80013b4 <I2C_IsErrorOccurred+0x1d4>)
 8001380:	400b      	ands	r3, r1
 8001382:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001388:	6a3b      	ldr	r3, [r7, #32]
 800138a:	431a      	orrs	r2, r3
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2220      	movs	r2, #32
 8001394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2200      	movs	r2, #0
 800139c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2200      	movs	r2, #0
 80013a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80013a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3728      	adds	r7, #40	; 0x28
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	fe00e800 	.word	0xfe00e800

080013b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b087      	sub	sp, #28
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	607b      	str	r3, [r7, #4]
 80013c2:	460b      	mov	r3, r1
 80013c4:	817b      	strh	r3, [r7, #10]
 80013c6:	4613      	mov	r3, r2
 80013c8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80013ca:	897b      	ldrh	r3, [r7, #10]
 80013cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80013d0:	7a7b      	ldrb	r3, [r7, #9]
 80013d2:	041b      	lsls	r3, r3, #16
 80013d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80013d8:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80013de:	6a3b      	ldr	r3, [r7, #32]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80013e6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	685a      	ldr	r2, [r3, #4]
 80013ee:	6a3b      	ldr	r3, [r7, #32]
 80013f0:	0d5b      	lsrs	r3, r3, #21
 80013f2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80013f6:	4b08      	ldr	r3, [pc, #32]	; (8001418 <I2C_TransferConfig+0x60>)
 80013f8:	430b      	orrs	r3, r1
 80013fa:	43db      	mvns	r3, r3
 80013fc:	ea02 0103 	and.w	r1, r2, r3
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	697a      	ldr	r2, [r7, #20]
 8001406:	430a      	orrs	r2, r1
 8001408:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800140a:	bf00      	nop
 800140c:	371c      	adds	r7, #28
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	03ff63ff 	.word	0x03ff63ff

0800141c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b20      	cmp	r3, #32
 8001430:	d138      	bne.n	80014a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001438:	2b01      	cmp	r3, #1
 800143a:	d101      	bne.n	8001440 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800143c:	2302      	movs	r3, #2
 800143e:	e032      	b.n	80014a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2201      	movs	r2, #1
 8001444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2224      	movs	r2, #36	; 0x24
 800144c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f022 0201 	bic.w	r2, r2, #1
 800145e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800146e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	6819      	ldr	r1, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	683a      	ldr	r2, [r7, #0]
 800147c:	430a      	orrs	r2, r1
 800147e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f042 0201 	orr.w	r2, r2, #1
 800148e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2220      	movs	r2, #32
 8001494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80014a0:	2300      	movs	r3, #0
 80014a2:	e000      	b.n	80014a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80014a4:	2302      	movs	r3, #2
  }
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80014b2:	b480      	push	{r7}
 80014b4:	b085      	sub	sp, #20
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
 80014ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	2b20      	cmp	r3, #32
 80014c6:	d139      	bne.n	800153c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d101      	bne.n	80014d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80014d2:	2302      	movs	r3, #2
 80014d4:	e033      	b.n	800153e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2201      	movs	r2, #1
 80014da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2224      	movs	r2, #36	; 0x24
 80014e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f022 0201 	bic.w	r2, r2, #1
 80014f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001504:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	021b      	lsls	r3, r3, #8
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	4313      	orrs	r3, r2
 800150e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	68fa      	ldr	r2, [r7, #12]
 8001516:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f042 0201 	orr.w	r2, r2, #1
 8001526:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2220      	movs	r2, #32
 800152c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001538:	2300      	movs	r3, #0
 800153a:	e000      	b.n	800153e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800153c:	2302      	movs	r3, #2
  }
}
 800153e:	4618      	mov	r0, r3
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
	...

0800154c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d141      	bne.n	80015de <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800155a:	4b4b      	ldr	r3, [pc, #300]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001566:	d131      	bne.n	80015cc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001568:	4b47      	ldr	r3, [pc, #284]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800156a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800156e:	4a46      	ldr	r2, [pc, #280]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001570:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001574:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001578:	4b43      	ldr	r3, [pc, #268]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001580:	4a41      	ldr	r2, [pc, #260]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001582:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001586:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001588:	4b40      	ldr	r3, [pc, #256]	; (800168c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2232      	movs	r2, #50	; 0x32
 800158e:	fb02 f303 	mul.w	r3, r2, r3
 8001592:	4a3f      	ldr	r2, [pc, #252]	; (8001690 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001594:	fba2 2303 	umull	r2, r3, r2, r3
 8001598:	0c9b      	lsrs	r3, r3, #18
 800159a:	3301      	adds	r3, #1
 800159c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800159e:	e002      	b.n	80015a6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015a6:	4b38      	ldr	r3, [pc, #224]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015a8:	695b      	ldr	r3, [r3, #20]
 80015aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015b2:	d102      	bne.n	80015ba <HAL_PWREx_ControlVoltageScaling+0x6e>
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1f2      	bne.n	80015a0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015ba:	4b33      	ldr	r3, [pc, #204]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015bc:	695b      	ldr	r3, [r3, #20]
 80015be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015c6:	d158      	bne.n	800167a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e057      	b.n	800167c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015cc:	4b2e      	ldr	r3, [pc, #184]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015d2:	4a2d      	ldr	r2, [pc, #180]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80015dc:	e04d      	b.n	800167a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015e4:	d141      	bne.n	800166a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80015e6:	4b28      	ldr	r3, [pc, #160]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015f2:	d131      	bne.n	8001658 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015f4:	4b24      	ldr	r3, [pc, #144]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015fa:	4a23      	ldr	r2, [pc, #140]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001600:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001604:	4b20      	ldr	r3, [pc, #128]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800160c:	4a1e      	ldr	r2, [pc, #120]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800160e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001612:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001614:	4b1d      	ldr	r3, [pc, #116]	; (800168c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2232      	movs	r2, #50	; 0x32
 800161a:	fb02 f303 	mul.w	r3, r2, r3
 800161e:	4a1c      	ldr	r2, [pc, #112]	; (8001690 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001620:	fba2 2303 	umull	r2, r3, r2, r3
 8001624:	0c9b      	lsrs	r3, r3, #18
 8001626:	3301      	adds	r3, #1
 8001628:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800162a:	e002      	b.n	8001632 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	3b01      	subs	r3, #1
 8001630:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001632:	4b15      	ldr	r3, [pc, #84]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001634:	695b      	ldr	r3, [r3, #20]
 8001636:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800163a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800163e:	d102      	bne.n	8001646 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1f2      	bne.n	800162c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001646:	4b10      	ldr	r3, [pc, #64]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800164e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001652:	d112      	bne.n	800167a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e011      	b.n	800167c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001658:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800165a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800165e:	4a0a      	ldr	r2, [pc, #40]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001664:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001668:	e007      	b.n	800167a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800166a:	4b07      	ldr	r3, [pc, #28]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001672:	4a05      	ldr	r2, [pc, #20]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001674:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001678:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800167a:	2300      	movs	r3, #0
}
 800167c:	4618      	mov	r0, r3
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	40007000 	.word	0x40007000
 800168c:	20000000 	.word	0x20000000
 8001690:	431bde83 	.word	0x431bde83

08001694 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b088      	sub	sp, #32
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d101      	bne.n	80016a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e306      	b.n	8001cb4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d075      	beq.n	800179e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016b2:	4b97      	ldr	r3, [pc, #604]	; (8001910 <HAL_RCC_OscConfig+0x27c>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f003 030c 	and.w	r3, r3, #12
 80016ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016bc:	4b94      	ldr	r3, [pc, #592]	; (8001910 <HAL_RCC_OscConfig+0x27c>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	f003 0303 	and.w	r3, r3, #3
 80016c4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	2b0c      	cmp	r3, #12
 80016ca:	d102      	bne.n	80016d2 <HAL_RCC_OscConfig+0x3e>
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	2b03      	cmp	r3, #3
 80016d0:	d002      	beq.n	80016d8 <HAL_RCC_OscConfig+0x44>
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	2b08      	cmp	r3, #8
 80016d6:	d10b      	bne.n	80016f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d8:	4b8d      	ldr	r3, [pc, #564]	; (8001910 <HAL_RCC_OscConfig+0x27c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d05b      	beq.n	800179c <HAL_RCC_OscConfig+0x108>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d157      	bne.n	800179c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e2e1      	b.n	8001cb4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016f8:	d106      	bne.n	8001708 <HAL_RCC_OscConfig+0x74>
 80016fa:	4b85      	ldr	r3, [pc, #532]	; (8001910 <HAL_RCC_OscConfig+0x27c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a84      	ldr	r2, [pc, #528]	; (8001910 <HAL_RCC_OscConfig+0x27c>)
 8001700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001704:	6013      	str	r3, [r2, #0]
 8001706:	e01d      	b.n	8001744 <HAL_RCC_OscConfig+0xb0>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001710:	d10c      	bne.n	800172c <HAL_RCC_OscConfig+0x98>
 8001712:	4b7f      	ldr	r3, [pc, #508]	; (8001910 <HAL_RCC_OscConfig+0x27c>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a7e      	ldr	r2, [pc, #504]	; (8001910 <HAL_RCC_OscConfig+0x27c>)
 8001718:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800171c:	6013      	str	r3, [r2, #0]
 800171e:	4b7c      	ldr	r3, [pc, #496]	; (8001910 <HAL_RCC_OscConfig+0x27c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a7b      	ldr	r2, [pc, #492]	; (8001910 <HAL_RCC_OscConfig+0x27c>)
 8001724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001728:	6013      	str	r3, [r2, #0]
 800172a:	e00b      	b.n	8001744 <HAL_RCC_OscConfig+0xb0>
 800172c:	4b78      	ldr	r3, [pc, #480]	; (8001910 <HAL_RCC_OscConfig+0x27c>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a77      	ldr	r2, [pc, #476]	; (8001910 <HAL_RCC_OscConfig+0x27c>)
 8001732:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001736:	6013      	str	r3, [r2, #0]
 8001738:	4b75      	ldr	r3, [pc, #468]	; (8001910 <HAL_RCC_OscConfig+0x27c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a74      	ldr	r2, [pc, #464]	; (8001910 <HAL_RCC_OscConfig+0x27c>)
 800173e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001742:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d013      	beq.n	8001774 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174c:	f7ff f850 	bl	80007f0 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001754:	f7ff f84c 	bl	80007f0 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b64      	cmp	r3, #100	; 0x64
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e2a6      	b.n	8001cb4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001766:	4b6a      	ldr	r3, [pc, #424]	; (8001910 <HAL_RCC_OscConfig+0x27c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d0f0      	beq.n	8001754 <HAL_RCC_OscConfig+0xc0>
 8001772:	e014      	b.n	800179e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001774:	f7ff f83c 	bl	80007f0 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800177c:	f7ff f838 	bl	80007f0 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b64      	cmp	r3, #100	; 0x64
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e292      	b.n	8001cb4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800178e:	4b60      	ldr	r3, [pc, #384]	; (8001910 <HAL_RCC_OscConfig+0x27c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1f0      	bne.n	800177c <HAL_RCC_OscConfig+0xe8>
 800179a:	e000      	b.n	800179e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800179c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d075      	beq.n	8001896 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017aa:	4b59      	ldr	r3, [pc, #356]	; (8001910 <HAL_RCC_OscConfig+0x27c>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f003 030c 	and.w	r3, r3, #12
 80017b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017b4:	4b56      	ldr	r3, [pc, #344]	; (8001910 <HAL_RCC_OscConfig+0x27c>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	f003 0303 	and.w	r3, r3, #3
 80017bc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	2b0c      	cmp	r3, #12
 80017c2:	d102      	bne.n	80017ca <HAL_RCC_OscConfig+0x136>
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d002      	beq.n	80017d0 <HAL_RCC_OscConfig+0x13c>
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	2b04      	cmp	r3, #4
 80017ce:	d11f      	bne.n	8001810 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017d0:	4b4f      	ldr	r3, [pc, #316]	; (8001910 <HAL_RCC_OscConfig+0x27c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d005      	beq.n	80017e8 <HAL_RCC_OscConfig+0x154>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d101      	bne.n	80017e8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e265      	b.n	8001cb4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e8:	4b49      	ldr	r3, [pc, #292]	; (8001910 <HAL_RCC_OscConfig+0x27c>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	691b      	ldr	r3, [r3, #16]
 80017f4:	061b      	lsls	r3, r3, #24
 80017f6:	4946      	ldr	r1, [pc, #280]	; (8001910 <HAL_RCC_OscConfig+0x27c>)
 80017f8:	4313      	orrs	r3, r2
 80017fa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80017fc:	4b45      	ldr	r3, [pc, #276]	; (8001914 <HAL_RCC_OscConfig+0x280>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4618      	mov	r0, r3
 8001802:	f7fe ffa9 	bl	8000758 <HAL_InitTick>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d043      	beq.n	8001894 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e251      	b.n	8001cb4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d023      	beq.n	8001860 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001818:	4b3d      	ldr	r3, [pc, #244]	; (8001910 <HAL_RCC_OscConfig+0x27c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a3c      	ldr	r2, [pc, #240]	; (8001910 <HAL_RCC_OscConfig+0x27c>)
 800181e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001822:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001824:	f7fe ffe4 	bl	80007f0 <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800182a:	e008      	b.n	800183e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800182c:	f7fe ffe0 	bl	80007f0 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b02      	cmp	r3, #2
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e23a      	b.n	8001cb4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800183e:	4b34      	ldr	r3, [pc, #208]	; (8001910 <HAL_RCC_OscConfig+0x27c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001846:	2b00      	cmp	r3, #0
 8001848:	d0f0      	beq.n	800182c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800184a:	4b31      	ldr	r3, [pc, #196]	; (8001910 <HAL_RCC_OscConfig+0x27c>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	061b      	lsls	r3, r3, #24
 8001858:	492d      	ldr	r1, [pc, #180]	; (8001910 <HAL_RCC_OscConfig+0x27c>)
 800185a:	4313      	orrs	r3, r2
 800185c:	604b      	str	r3, [r1, #4]
 800185e:	e01a      	b.n	8001896 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001860:	4b2b      	ldr	r3, [pc, #172]	; (8001910 <HAL_RCC_OscConfig+0x27c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a2a      	ldr	r2, [pc, #168]	; (8001910 <HAL_RCC_OscConfig+0x27c>)
 8001866:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800186a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800186c:	f7fe ffc0 	bl	80007f0 <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001874:	f7fe ffbc 	bl	80007f0 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e216      	b.n	8001cb4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001886:	4b22      	ldr	r3, [pc, #136]	; (8001910 <HAL_RCC_OscConfig+0x27c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f0      	bne.n	8001874 <HAL_RCC_OscConfig+0x1e0>
 8001892:	e000      	b.n	8001896 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001894:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0308 	and.w	r3, r3, #8
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d041      	beq.n	8001926 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	695b      	ldr	r3, [r3, #20]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d01c      	beq.n	80018e4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018aa:	4b19      	ldr	r3, [pc, #100]	; (8001910 <HAL_RCC_OscConfig+0x27c>)
 80018ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018b0:	4a17      	ldr	r2, [pc, #92]	; (8001910 <HAL_RCC_OscConfig+0x27c>)
 80018b2:	f043 0301 	orr.w	r3, r3, #1
 80018b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ba:	f7fe ff99 	bl	80007f0 <HAL_GetTick>
 80018be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018c2:	f7fe ff95 	bl	80007f0 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e1ef      	b.n	8001cb4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018d4:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <HAL_RCC_OscConfig+0x27c>)
 80018d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d0ef      	beq.n	80018c2 <HAL_RCC_OscConfig+0x22e>
 80018e2:	e020      	b.n	8001926 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018e4:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <HAL_RCC_OscConfig+0x27c>)
 80018e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018ea:	4a09      	ldr	r2, [pc, #36]	; (8001910 <HAL_RCC_OscConfig+0x27c>)
 80018ec:	f023 0301 	bic.w	r3, r3, #1
 80018f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f4:	f7fe ff7c 	bl	80007f0 <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018fa:	e00d      	b.n	8001918 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018fc:	f7fe ff78 	bl	80007f0 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d906      	bls.n	8001918 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e1d2      	b.n	8001cb4 <HAL_RCC_OscConfig+0x620>
 800190e:	bf00      	nop
 8001910:	40021000 	.word	0x40021000
 8001914:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001918:	4b8c      	ldr	r3, [pc, #560]	; (8001b4c <HAL_RCC_OscConfig+0x4b8>)
 800191a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1ea      	bne.n	80018fc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0304 	and.w	r3, r3, #4
 800192e:	2b00      	cmp	r3, #0
 8001930:	f000 80a6 	beq.w	8001a80 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001934:	2300      	movs	r3, #0
 8001936:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001938:	4b84      	ldr	r3, [pc, #528]	; (8001b4c <HAL_RCC_OscConfig+0x4b8>)
 800193a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d101      	bne.n	8001948 <HAL_RCC_OscConfig+0x2b4>
 8001944:	2301      	movs	r3, #1
 8001946:	e000      	b.n	800194a <HAL_RCC_OscConfig+0x2b6>
 8001948:	2300      	movs	r3, #0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d00d      	beq.n	800196a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800194e:	4b7f      	ldr	r3, [pc, #508]	; (8001b4c <HAL_RCC_OscConfig+0x4b8>)
 8001950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001952:	4a7e      	ldr	r2, [pc, #504]	; (8001b4c <HAL_RCC_OscConfig+0x4b8>)
 8001954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001958:	6593      	str	r3, [r2, #88]	; 0x58
 800195a:	4b7c      	ldr	r3, [pc, #496]	; (8001b4c <HAL_RCC_OscConfig+0x4b8>)
 800195c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001966:	2301      	movs	r3, #1
 8001968:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800196a:	4b79      	ldr	r3, [pc, #484]	; (8001b50 <HAL_RCC_OscConfig+0x4bc>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001972:	2b00      	cmp	r3, #0
 8001974:	d118      	bne.n	80019a8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001976:	4b76      	ldr	r3, [pc, #472]	; (8001b50 <HAL_RCC_OscConfig+0x4bc>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a75      	ldr	r2, [pc, #468]	; (8001b50 <HAL_RCC_OscConfig+0x4bc>)
 800197c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001980:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001982:	f7fe ff35 	bl	80007f0 <HAL_GetTick>
 8001986:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001988:	e008      	b.n	800199c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800198a:	f7fe ff31 	bl	80007f0 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d901      	bls.n	800199c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e18b      	b.n	8001cb4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800199c:	4b6c      	ldr	r3, [pc, #432]	; (8001b50 <HAL_RCC_OscConfig+0x4bc>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d0f0      	beq.n	800198a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d108      	bne.n	80019c2 <HAL_RCC_OscConfig+0x32e>
 80019b0:	4b66      	ldr	r3, [pc, #408]	; (8001b4c <HAL_RCC_OscConfig+0x4b8>)
 80019b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019b6:	4a65      	ldr	r2, [pc, #404]	; (8001b4c <HAL_RCC_OscConfig+0x4b8>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019c0:	e024      	b.n	8001a0c <HAL_RCC_OscConfig+0x378>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	2b05      	cmp	r3, #5
 80019c8:	d110      	bne.n	80019ec <HAL_RCC_OscConfig+0x358>
 80019ca:	4b60      	ldr	r3, [pc, #384]	; (8001b4c <HAL_RCC_OscConfig+0x4b8>)
 80019cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019d0:	4a5e      	ldr	r2, [pc, #376]	; (8001b4c <HAL_RCC_OscConfig+0x4b8>)
 80019d2:	f043 0304 	orr.w	r3, r3, #4
 80019d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019da:	4b5c      	ldr	r3, [pc, #368]	; (8001b4c <HAL_RCC_OscConfig+0x4b8>)
 80019dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019e0:	4a5a      	ldr	r2, [pc, #360]	; (8001b4c <HAL_RCC_OscConfig+0x4b8>)
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019ea:	e00f      	b.n	8001a0c <HAL_RCC_OscConfig+0x378>
 80019ec:	4b57      	ldr	r3, [pc, #348]	; (8001b4c <HAL_RCC_OscConfig+0x4b8>)
 80019ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019f2:	4a56      	ldr	r2, [pc, #344]	; (8001b4c <HAL_RCC_OscConfig+0x4b8>)
 80019f4:	f023 0301 	bic.w	r3, r3, #1
 80019f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019fc:	4b53      	ldr	r3, [pc, #332]	; (8001b4c <HAL_RCC_OscConfig+0x4b8>)
 80019fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a02:	4a52      	ldr	r2, [pc, #328]	; (8001b4c <HAL_RCC_OscConfig+0x4b8>)
 8001a04:	f023 0304 	bic.w	r3, r3, #4
 8001a08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d016      	beq.n	8001a42 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a14:	f7fe feec 	bl	80007f0 <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a1a:	e00a      	b.n	8001a32 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a1c:	f7fe fee8 	bl	80007f0 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e140      	b.n	8001cb4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a32:	4b46      	ldr	r3, [pc, #280]	; (8001b4c <HAL_RCC_OscConfig+0x4b8>)
 8001a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d0ed      	beq.n	8001a1c <HAL_RCC_OscConfig+0x388>
 8001a40:	e015      	b.n	8001a6e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a42:	f7fe fed5 	bl	80007f0 <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a48:	e00a      	b.n	8001a60 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a4a:	f7fe fed1 	bl	80007f0 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e129      	b.n	8001cb4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a60:	4b3a      	ldr	r3, [pc, #232]	; (8001b4c <HAL_RCC_OscConfig+0x4b8>)
 8001a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1ed      	bne.n	8001a4a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a6e:	7ffb      	ldrb	r3, [r7, #31]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d105      	bne.n	8001a80 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a74:	4b35      	ldr	r3, [pc, #212]	; (8001b4c <HAL_RCC_OscConfig+0x4b8>)
 8001a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a78:	4a34      	ldr	r2, [pc, #208]	; (8001b4c <HAL_RCC_OscConfig+0x4b8>)
 8001a7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a7e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0320 	and.w	r3, r3, #32
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d03c      	beq.n	8001b06 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d01c      	beq.n	8001ace <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a94:	4b2d      	ldr	r3, [pc, #180]	; (8001b4c <HAL_RCC_OscConfig+0x4b8>)
 8001a96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a9a:	4a2c      	ldr	r2, [pc, #176]	; (8001b4c <HAL_RCC_OscConfig+0x4b8>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa4:	f7fe fea4 	bl	80007f0 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001aac:	f7fe fea0 	bl	80007f0 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e0fa      	b.n	8001cb4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001abe:	4b23      	ldr	r3, [pc, #140]	; (8001b4c <HAL_RCC_OscConfig+0x4b8>)
 8001ac0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d0ef      	beq.n	8001aac <HAL_RCC_OscConfig+0x418>
 8001acc:	e01b      	b.n	8001b06 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ace:	4b1f      	ldr	r3, [pc, #124]	; (8001b4c <HAL_RCC_OscConfig+0x4b8>)
 8001ad0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ad4:	4a1d      	ldr	r2, [pc, #116]	; (8001b4c <HAL_RCC_OscConfig+0x4b8>)
 8001ad6:	f023 0301 	bic.w	r3, r3, #1
 8001ada:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ade:	f7fe fe87 	bl	80007f0 <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ae4:	e008      	b.n	8001af8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ae6:	f7fe fe83 	bl	80007f0 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e0dd      	b.n	8001cb4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001af8:	4b14      	ldr	r3, [pc, #80]	; (8001b4c <HAL_RCC_OscConfig+0x4b8>)
 8001afa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1ef      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	f000 80d1 	beq.w	8001cb2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b10:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <HAL_RCC_OscConfig+0x4b8>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f003 030c 	and.w	r3, r3, #12
 8001b18:	2b0c      	cmp	r3, #12
 8001b1a:	f000 808b 	beq.w	8001c34 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d15e      	bne.n	8001be4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b26:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <HAL_RCC_OscConfig+0x4b8>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a08      	ldr	r2, [pc, #32]	; (8001b4c <HAL_RCC_OscConfig+0x4b8>)
 8001b2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b32:	f7fe fe5d 	bl	80007f0 <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b38:	e00c      	b.n	8001b54 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b3a:	f7fe fe59 	bl	80007f0 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d905      	bls.n	8001b54 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e0b3      	b.n	8001cb4 <HAL_RCC_OscConfig+0x620>
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b54:	4b59      	ldr	r3, [pc, #356]	; (8001cbc <HAL_RCC_OscConfig+0x628>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1ec      	bne.n	8001b3a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b60:	4b56      	ldr	r3, [pc, #344]	; (8001cbc <HAL_RCC_OscConfig+0x628>)
 8001b62:	68da      	ldr	r2, [r3, #12]
 8001b64:	4b56      	ldr	r3, [pc, #344]	; (8001cc0 <HAL_RCC_OscConfig+0x62c>)
 8001b66:	4013      	ands	r3, r2
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	6a11      	ldr	r1, [r2, #32]
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b70:	3a01      	subs	r2, #1
 8001b72:	0112      	lsls	r2, r2, #4
 8001b74:	4311      	orrs	r1, r2
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001b7a:	0212      	lsls	r2, r2, #8
 8001b7c:	4311      	orrs	r1, r2
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b82:	0852      	lsrs	r2, r2, #1
 8001b84:	3a01      	subs	r2, #1
 8001b86:	0552      	lsls	r2, r2, #21
 8001b88:	4311      	orrs	r1, r2
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b8e:	0852      	lsrs	r2, r2, #1
 8001b90:	3a01      	subs	r2, #1
 8001b92:	0652      	lsls	r2, r2, #25
 8001b94:	4311      	orrs	r1, r2
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001b9a:	06d2      	lsls	r2, r2, #27
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	4947      	ldr	r1, [pc, #284]	; (8001cbc <HAL_RCC_OscConfig+0x628>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ba4:	4b45      	ldr	r3, [pc, #276]	; (8001cbc <HAL_RCC_OscConfig+0x628>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a44      	ldr	r2, [pc, #272]	; (8001cbc <HAL_RCC_OscConfig+0x628>)
 8001baa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bb0:	4b42      	ldr	r3, [pc, #264]	; (8001cbc <HAL_RCC_OscConfig+0x628>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	4a41      	ldr	r2, [pc, #260]	; (8001cbc <HAL_RCC_OscConfig+0x628>)
 8001bb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bbc:	f7fe fe18 	bl	80007f0 <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bc4:	f7fe fe14 	bl	80007f0 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e06e      	b.n	8001cb4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bd6:	4b39      	ldr	r3, [pc, #228]	; (8001cbc <HAL_RCC_OscConfig+0x628>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d0f0      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x530>
 8001be2:	e066      	b.n	8001cb2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001be4:	4b35      	ldr	r3, [pc, #212]	; (8001cbc <HAL_RCC_OscConfig+0x628>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a34      	ldr	r2, [pc, #208]	; (8001cbc <HAL_RCC_OscConfig+0x628>)
 8001bea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bee:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001bf0:	4b32      	ldr	r3, [pc, #200]	; (8001cbc <HAL_RCC_OscConfig+0x628>)
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	4a31      	ldr	r2, [pc, #196]	; (8001cbc <HAL_RCC_OscConfig+0x628>)
 8001bf6:	f023 0303 	bic.w	r3, r3, #3
 8001bfa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001bfc:	4b2f      	ldr	r3, [pc, #188]	; (8001cbc <HAL_RCC_OscConfig+0x628>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	4a2e      	ldr	r2, [pc, #184]	; (8001cbc <HAL_RCC_OscConfig+0x628>)
 8001c02:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001c06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c0a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c0c:	f7fe fdf0 	bl	80007f0 <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c14:	f7fe fdec 	bl	80007f0 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e046      	b.n	8001cb4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c26:	4b25      	ldr	r3, [pc, #148]	; (8001cbc <HAL_RCC_OscConfig+0x628>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1f0      	bne.n	8001c14 <HAL_RCC_OscConfig+0x580>
 8001c32:	e03e      	b.n	8001cb2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	69db      	ldr	r3, [r3, #28]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d101      	bne.n	8001c40 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e039      	b.n	8001cb4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001c40:	4b1e      	ldr	r3, [pc, #120]	; (8001cbc <HAL_RCC_OscConfig+0x628>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	f003 0203 	and.w	r2, r3, #3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d12c      	bne.n	8001cae <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d123      	bne.n	8001cae <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c70:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d11b      	bne.n	8001cae <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c80:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d113      	bne.n	8001cae <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c90:	085b      	lsrs	r3, r3, #1
 8001c92:	3b01      	subs	r3, #1
 8001c94:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d109      	bne.n	8001cae <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ca4:	085b      	lsrs	r3, r3, #1
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d001      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e000      	b.n	8001cb4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3720      	adds	r7, #32
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	019f800c 	.word	0x019f800c

08001cc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d101      	bne.n	8001cdc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e11e      	b.n	8001f1a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cdc:	4b91      	ldr	r3, [pc, #580]	; (8001f24 <HAL_RCC_ClockConfig+0x260>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 030f 	and.w	r3, r3, #15
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d910      	bls.n	8001d0c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cea:	4b8e      	ldr	r3, [pc, #568]	; (8001f24 <HAL_RCC_ClockConfig+0x260>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f023 020f 	bic.w	r2, r3, #15
 8001cf2:	498c      	ldr	r1, [pc, #560]	; (8001f24 <HAL_RCC_ClockConfig+0x260>)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cfa:	4b8a      	ldr	r3, [pc, #552]	; (8001f24 <HAL_RCC_ClockConfig+0x260>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d001      	beq.n	8001d0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e106      	b.n	8001f1a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d073      	beq.n	8001e00 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	2b03      	cmp	r3, #3
 8001d1e:	d129      	bne.n	8001d74 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d20:	4b81      	ldr	r3, [pc, #516]	; (8001f28 <HAL_RCC_ClockConfig+0x264>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d101      	bne.n	8001d30 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e0f4      	b.n	8001f1a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001d30:	f000 f966 	bl	8002000 <RCC_GetSysClockFreqFromPLLSource>
 8001d34:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	4a7c      	ldr	r2, [pc, #496]	; (8001f2c <HAL_RCC_ClockConfig+0x268>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d93f      	bls.n	8001dbe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001d3e:	4b7a      	ldr	r3, [pc, #488]	; (8001f28 <HAL_RCC_ClockConfig+0x264>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d009      	beq.n	8001d5e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d033      	beq.n	8001dbe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d12f      	bne.n	8001dbe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d5e:	4b72      	ldr	r3, [pc, #456]	; (8001f28 <HAL_RCC_ClockConfig+0x264>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d66:	4a70      	ldr	r2, [pc, #448]	; (8001f28 <HAL_RCC_ClockConfig+0x264>)
 8001d68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d6c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001d6e:	2380      	movs	r3, #128	; 0x80
 8001d70:	617b      	str	r3, [r7, #20]
 8001d72:	e024      	b.n	8001dbe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d107      	bne.n	8001d8c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d7c:	4b6a      	ldr	r3, [pc, #424]	; (8001f28 <HAL_RCC_ClockConfig+0x264>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d109      	bne.n	8001d9c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e0c6      	b.n	8001f1a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d8c:	4b66      	ldr	r3, [pc, #408]	; (8001f28 <HAL_RCC_ClockConfig+0x264>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e0be      	b.n	8001f1a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001d9c:	f000 f8ce 	bl	8001f3c <HAL_RCC_GetSysClockFreq>
 8001da0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	4a61      	ldr	r2, [pc, #388]	; (8001f2c <HAL_RCC_ClockConfig+0x268>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d909      	bls.n	8001dbe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001daa:	4b5f      	ldr	r3, [pc, #380]	; (8001f28 <HAL_RCC_ClockConfig+0x264>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001db2:	4a5d      	ldr	r2, [pc, #372]	; (8001f28 <HAL_RCC_ClockConfig+0x264>)
 8001db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001db8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001dba:	2380      	movs	r3, #128	; 0x80
 8001dbc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dbe:	4b5a      	ldr	r3, [pc, #360]	; (8001f28 <HAL_RCC_ClockConfig+0x264>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f023 0203 	bic.w	r2, r3, #3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	4957      	ldr	r1, [pc, #348]	; (8001f28 <HAL_RCC_ClockConfig+0x264>)
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dd0:	f7fe fd0e 	bl	80007f0 <HAL_GetTick>
 8001dd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dd6:	e00a      	b.n	8001dee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd8:	f7fe fd0a 	bl	80007f0 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e095      	b.n	8001f1a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dee:	4b4e      	ldr	r3, [pc, #312]	; (8001f28 <HAL_RCC_ClockConfig+0x264>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f003 020c 	and.w	r2, r3, #12
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d1eb      	bne.n	8001dd8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0302 	and.w	r3, r3, #2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d023      	beq.n	8001e54 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0304 	and.w	r3, r3, #4
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d005      	beq.n	8001e24 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e18:	4b43      	ldr	r3, [pc, #268]	; (8001f28 <HAL_RCC_ClockConfig+0x264>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	4a42      	ldr	r2, [pc, #264]	; (8001f28 <HAL_RCC_ClockConfig+0x264>)
 8001e1e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e22:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0308 	and.w	r3, r3, #8
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d007      	beq.n	8001e40 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001e30:	4b3d      	ldr	r3, [pc, #244]	; (8001f28 <HAL_RCC_ClockConfig+0x264>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001e38:	4a3b      	ldr	r2, [pc, #236]	; (8001f28 <HAL_RCC_ClockConfig+0x264>)
 8001e3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e3e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e40:	4b39      	ldr	r3, [pc, #228]	; (8001f28 <HAL_RCC_ClockConfig+0x264>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	4936      	ldr	r1, [pc, #216]	; (8001f28 <HAL_RCC_ClockConfig+0x264>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	608b      	str	r3, [r1, #8]
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	2b80      	cmp	r3, #128	; 0x80
 8001e58:	d105      	bne.n	8001e66 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001e5a:	4b33      	ldr	r3, [pc, #204]	; (8001f28 <HAL_RCC_ClockConfig+0x264>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	4a32      	ldr	r2, [pc, #200]	; (8001f28 <HAL_RCC_ClockConfig+0x264>)
 8001e60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e64:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e66:	4b2f      	ldr	r3, [pc, #188]	; (8001f24 <HAL_RCC_ClockConfig+0x260>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 030f 	and.w	r3, r3, #15
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d21d      	bcs.n	8001eb0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e74:	4b2b      	ldr	r3, [pc, #172]	; (8001f24 <HAL_RCC_ClockConfig+0x260>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f023 020f 	bic.w	r2, r3, #15
 8001e7c:	4929      	ldr	r1, [pc, #164]	; (8001f24 <HAL_RCC_ClockConfig+0x260>)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e84:	f7fe fcb4 	bl	80007f0 <HAL_GetTick>
 8001e88:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e8a:	e00a      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e8c:	f7fe fcb0 	bl	80007f0 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e03b      	b.n	8001f1a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea2:	4b20      	ldr	r3, [pc, #128]	; (8001f24 <HAL_RCC_ClockConfig+0x260>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 030f 	and.w	r3, r3, #15
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d1ed      	bne.n	8001e8c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0304 	and.w	r3, r3, #4
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d008      	beq.n	8001ece <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ebc:	4b1a      	ldr	r3, [pc, #104]	; (8001f28 <HAL_RCC_ClockConfig+0x264>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	4917      	ldr	r1, [pc, #92]	; (8001f28 <HAL_RCC_ClockConfig+0x264>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0308 	and.w	r3, r3, #8
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d009      	beq.n	8001eee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eda:	4b13      	ldr	r3, [pc, #76]	; (8001f28 <HAL_RCC_ClockConfig+0x264>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	490f      	ldr	r1, [pc, #60]	; (8001f28 <HAL_RCC_ClockConfig+0x264>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001eee:	f000 f825 	bl	8001f3c <HAL_RCC_GetSysClockFreq>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <HAL_RCC_ClockConfig+0x264>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	091b      	lsrs	r3, r3, #4
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	490c      	ldr	r1, [pc, #48]	; (8001f30 <HAL_RCC_ClockConfig+0x26c>)
 8001f00:	5ccb      	ldrb	r3, [r1, r3]
 8001f02:	f003 031f 	and.w	r3, r3, #31
 8001f06:	fa22 f303 	lsr.w	r3, r2, r3
 8001f0a:	4a0a      	ldr	r2, [pc, #40]	; (8001f34 <HAL_RCC_ClockConfig+0x270>)
 8001f0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001f0e:	4b0a      	ldr	r3, [pc, #40]	; (8001f38 <HAL_RCC_ClockConfig+0x274>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7fe fc20 	bl	8000758 <HAL_InitTick>
 8001f18:	4603      	mov	r3, r0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3718      	adds	r7, #24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40022000 	.word	0x40022000
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	04c4b400 	.word	0x04c4b400
 8001f30:	080024e8 	.word	0x080024e8
 8001f34:	20000000 	.word	0x20000000
 8001f38:	20000004 	.word	0x20000004

08001f3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b087      	sub	sp, #28
 8001f40:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001f42:	4b2c      	ldr	r3, [pc, #176]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f003 030c 	and.w	r3, r3, #12
 8001f4a:	2b04      	cmp	r3, #4
 8001f4c:	d102      	bne.n	8001f54 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f4e:	4b2a      	ldr	r3, [pc, #168]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f50:	613b      	str	r3, [r7, #16]
 8001f52:	e047      	b.n	8001fe4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001f54:	4b27      	ldr	r3, [pc, #156]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f003 030c 	and.w	r3, r3, #12
 8001f5c:	2b08      	cmp	r3, #8
 8001f5e:	d102      	bne.n	8001f66 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f60:	4b26      	ldr	r3, [pc, #152]	; (8001ffc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f62:	613b      	str	r3, [r7, #16]
 8001f64:	e03e      	b.n	8001fe4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001f66:	4b23      	ldr	r3, [pc, #140]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 030c 	and.w	r3, r3, #12
 8001f6e:	2b0c      	cmp	r3, #12
 8001f70:	d136      	bne.n	8001fe0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f72:	4b20      	ldr	r3, [pc, #128]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	f003 0303 	and.w	r3, r3, #3
 8001f7a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f7c:	4b1d      	ldr	r3, [pc, #116]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	091b      	lsrs	r3, r3, #4
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	3301      	adds	r3, #1
 8001f88:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2b03      	cmp	r3, #3
 8001f8e:	d10c      	bne.n	8001faa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f90:	4a1a      	ldr	r2, [pc, #104]	; (8001ffc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f98:	4a16      	ldr	r2, [pc, #88]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f9a:	68d2      	ldr	r2, [r2, #12]
 8001f9c:	0a12      	lsrs	r2, r2, #8
 8001f9e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001fa2:	fb02 f303 	mul.w	r3, r2, r3
 8001fa6:	617b      	str	r3, [r7, #20]
      break;
 8001fa8:	e00c      	b.n	8001fc4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001faa:	4a13      	ldr	r2, [pc, #76]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb2:	4a10      	ldr	r2, [pc, #64]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fb4:	68d2      	ldr	r2, [r2, #12]
 8001fb6:	0a12      	lsrs	r2, r2, #8
 8001fb8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001fbc:	fb02 f303 	mul.w	r3, r2, r3
 8001fc0:	617b      	str	r3, [r7, #20]
      break;
 8001fc2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fc4:	4b0b      	ldr	r3, [pc, #44]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	0e5b      	lsrs	r3, r3, #25
 8001fca:	f003 0303 	and.w	r3, r3, #3
 8001fce:	3301      	adds	r3, #1
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fdc:	613b      	str	r3, [r7, #16]
 8001fde:	e001      	b.n	8001fe4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001fe4:	693b      	ldr	r3, [r7, #16]
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	371c      	adds	r7, #28
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	00f42400 	.word	0x00f42400
 8001ffc:	016e3600 	.word	0x016e3600

08002000 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002000:	b480      	push	{r7}
 8002002:	b087      	sub	sp, #28
 8002004:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002006:	4b1e      	ldr	r3, [pc, #120]	; (8002080 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	f003 0303 	and.w	r3, r3, #3
 800200e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002010:	4b1b      	ldr	r3, [pc, #108]	; (8002080 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	091b      	lsrs	r3, r3, #4
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	3301      	adds	r3, #1
 800201c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	2b03      	cmp	r3, #3
 8002022:	d10c      	bne.n	800203e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002024:	4a17      	ldr	r2, [pc, #92]	; (8002084 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	fbb2 f3f3 	udiv	r3, r2, r3
 800202c:	4a14      	ldr	r2, [pc, #80]	; (8002080 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800202e:	68d2      	ldr	r2, [r2, #12]
 8002030:	0a12      	lsrs	r2, r2, #8
 8002032:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002036:	fb02 f303 	mul.w	r3, r2, r3
 800203a:	617b      	str	r3, [r7, #20]
    break;
 800203c:	e00c      	b.n	8002058 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800203e:	4a12      	ldr	r2, [pc, #72]	; (8002088 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	fbb2 f3f3 	udiv	r3, r2, r3
 8002046:	4a0e      	ldr	r2, [pc, #56]	; (8002080 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002048:	68d2      	ldr	r2, [r2, #12]
 800204a:	0a12      	lsrs	r2, r2, #8
 800204c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002050:	fb02 f303 	mul.w	r3, r2, r3
 8002054:	617b      	str	r3, [r7, #20]
    break;
 8002056:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002058:	4b09      	ldr	r3, [pc, #36]	; (8002080 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	0e5b      	lsrs	r3, r3, #25
 800205e:	f003 0303 	and.w	r3, r3, #3
 8002062:	3301      	adds	r3, #1
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002068:	697a      	ldr	r2, [r7, #20]
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002070:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002072:	687b      	ldr	r3, [r7, #4]
}
 8002074:	4618      	mov	r0, r3
 8002076:	371c      	adds	r7, #28
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	40021000 	.word	0x40021000
 8002084:	016e3600 	.word	0x016e3600
 8002088:	00f42400 	.word	0x00f42400

0800208c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002094:	2300      	movs	r3, #0
 8002096:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002098:	2300      	movs	r3, #0
 800209a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f000 8098 	beq.w	80021da <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020aa:	2300      	movs	r3, #0
 80020ac:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ae:	4b43      	ldr	r3, [pc, #268]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d10d      	bne.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ba:	4b40      	ldr	r3, [pc, #256]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020be:	4a3f      	ldr	r2, [pc, #252]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c4:	6593      	str	r3, [r2, #88]	; 0x58
 80020c6:	4b3d      	ldr	r3, [pc, #244]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ce:	60bb      	str	r3, [r7, #8]
 80020d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020d2:	2301      	movs	r3, #1
 80020d4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020d6:	4b3a      	ldr	r3, [pc, #232]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a39      	ldr	r2, [pc, #228]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80020dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020e2:	f7fe fb85 	bl	80007f0 <HAL_GetTick>
 80020e6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020e8:	e009      	b.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ea:	f7fe fb81 	bl	80007f0 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d902      	bls.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	74fb      	strb	r3, [r7, #19]
        break;
 80020fc:	e005      	b.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020fe:	4b30      	ldr	r3, [pc, #192]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002106:	2b00      	cmp	r3, #0
 8002108:	d0ef      	beq.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800210a:	7cfb      	ldrb	r3, [r7, #19]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d159      	bne.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002110:	4b2a      	ldr	r3, [pc, #168]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800211a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d01e      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	429a      	cmp	r2, r3
 800212a:	d019      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800212c:	4b23      	ldr	r3, [pc, #140]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800212e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002136:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002138:	4b20      	ldr	r3, [pc, #128]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800213a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800213e:	4a1f      	ldr	r2, [pc, #124]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002144:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002148:	4b1c      	ldr	r3, [pc, #112]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800214a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800214e:	4a1b      	ldr	r2, [pc, #108]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002150:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002154:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002158:	4a18      	ldr	r2, [pc, #96]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b00      	cmp	r3, #0
 8002168:	d016      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216a:	f7fe fb41 	bl	80007f0 <HAL_GetTick>
 800216e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002170:	e00b      	b.n	800218a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002172:	f7fe fb3d 	bl	80007f0 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002180:	4293      	cmp	r3, r2
 8002182:	d902      	bls.n	800218a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	74fb      	strb	r3, [r7, #19]
            break;
 8002188:	e006      	b.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800218a:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800218c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d0ec      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002198:	7cfb      	ldrb	r3, [r7, #19]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d10b      	bne.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800219e:	4b07      	ldr	r3, [pc, #28]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ac:	4903      	ldr	r1, [pc, #12]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80021b4:	e008      	b.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021b6:	7cfb      	ldrb	r3, [r7, #19]
 80021b8:	74bb      	strb	r3, [r7, #18]
 80021ba:	e005      	b.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80021bc:	40021000 	.word	0x40021000
 80021c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021c4:	7cfb      	ldrb	r3, [r7, #19]
 80021c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021c8:	7c7b      	ldrb	r3, [r7, #17]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d105      	bne.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ce:	4ba6      	ldr	r3, [pc, #664]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d2:	4aa5      	ldr	r2, [pc, #660]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00a      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021e6:	4ba0      	ldr	r3, [pc, #640]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ec:	f023 0203 	bic.w	r2, r3, #3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	499c      	ldr	r1, [pc, #624]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d00a      	beq.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002208:	4b97      	ldr	r3, [pc, #604]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800220a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800220e:	f023 020c 	bic.w	r2, r3, #12
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	4994      	ldr	r1, [pc, #592]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002218:	4313      	orrs	r3, r2
 800221a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0304 	and.w	r3, r3, #4
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00a      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800222a:	4b8f      	ldr	r3, [pc, #572]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800222c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002230:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	498b      	ldr	r1, [pc, #556]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800223a:	4313      	orrs	r3, r2
 800223c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0308 	and.w	r3, r3, #8
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00a      	beq.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800224c:	4b86      	ldr	r3, [pc, #536]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800224e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002252:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	4983      	ldr	r1, [pc, #524]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800225c:	4313      	orrs	r3, r2
 800225e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0320 	and.w	r3, r3, #32
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00a      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800226e:	4b7e      	ldr	r3, [pc, #504]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002274:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	695b      	ldr	r3, [r3, #20]
 800227c:	497a      	ldr	r1, [pc, #488]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800227e:	4313      	orrs	r3, r2
 8002280:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00a      	beq.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002290:	4b75      	ldr	r3, [pc, #468]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002296:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	4972      	ldr	r1, [pc, #456]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00a      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022b2:	4b6d      	ldr	r3, [pc, #436]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	69db      	ldr	r3, [r3, #28]
 80022c0:	4969      	ldr	r1, [pc, #420]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00a      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022d4:	4b64      	ldr	r3, [pc, #400]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	4961      	ldr	r1, [pc, #388]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00a      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022f6:	4b5c      	ldr	r3, [pc, #368]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002304:	4958      	ldr	r1, [pc, #352]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002306:	4313      	orrs	r3, r2
 8002308:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002314:	2b00      	cmp	r3, #0
 8002316:	d015      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002318:	4b53      	ldr	r3, [pc, #332]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800231a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002326:	4950      	ldr	r1, [pc, #320]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002328:	4313      	orrs	r3, r2
 800232a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002332:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002336:	d105      	bne.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002338:	4b4b      	ldr	r3, [pc, #300]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	4a4a      	ldr	r2, [pc, #296]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800233e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002342:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800234c:	2b00      	cmp	r3, #0
 800234e:	d015      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002350:	4b45      	ldr	r3, [pc, #276]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002356:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235e:	4942      	ldr	r1, [pc, #264]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002360:	4313      	orrs	r3, r2
 8002362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800236e:	d105      	bne.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002370:	4b3d      	ldr	r3, [pc, #244]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	4a3c      	ldr	r2, [pc, #240]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002376:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800237a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d015      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002388:	4b37      	ldr	r3, [pc, #220]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800238a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	4934      	ldr	r1, [pc, #208]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002398:	4313      	orrs	r3, r2
 800239a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023a6:	d105      	bne.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023a8:	4b2f      	ldr	r3, [pc, #188]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	4a2e      	ldr	r2, [pc, #184]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023b2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d015      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023c0:	4b29      	ldr	r3, [pc, #164]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ce:	4926      	ldr	r1, [pc, #152]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023de:	d105      	bne.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023e0:	4b21      	ldr	r3, [pc, #132]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	4a20      	ldr	r2, [pc, #128]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023ea:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d015      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023f8:	4b1b      	ldr	r3, [pc, #108]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002406:	4918      	ldr	r1, [pc, #96]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002408:	4313      	orrs	r3, r2
 800240a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002412:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002416:	d105      	bne.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002418:	4b13      	ldr	r3, [pc, #76]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	4a12      	ldr	r2, [pc, #72]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800241e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002422:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d015      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002430:	4b0d      	ldr	r3, [pc, #52]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002436:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800243e:	490a      	ldr	r1, [pc, #40]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002440:	4313      	orrs	r3, r2
 8002442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800244a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800244e:	d105      	bne.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002450:	4b05      	ldr	r3, [pc, #20]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	4a04      	ldr	r2, [pc, #16]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002456:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800245a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800245c:	7cbb      	ldrb	r3, [r7, #18]
}
 800245e:	4618      	mov	r0, r3
 8002460:	3718      	adds	r7, #24
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40021000 	.word	0x40021000

0800246c <__libc_init_array>:
 800246c:	b570      	push	{r4, r5, r6, lr}
 800246e:	4d0d      	ldr	r5, [pc, #52]	; (80024a4 <__libc_init_array+0x38>)
 8002470:	4c0d      	ldr	r4, [pc, #52]	; (80024a8 <__libc_init_array+0x3c>)
 8002472:	1b64      	subs	r4, r4, r5
 8002474:	10a4      	asrs	r4, r4, #2
 8002476:	2600      	movs	r6, #0
 8002478:	42a6      	cmp	r6, r4
 800247a:	d109      	bne.n	8002490 <__libc_init_array+0x24>
 800247c:	4d0b      	ldr	r5, [pc, #44]	; (80024ac <__libc_init_array+0x40>)
 800247e:	4c0c      	ldr	r4, [pc, #48]	; (80024b0 <__libc_init_array+0x44>)
 8002480:	f000 f820 	bl	80024c4 <_init>
 8002484:	1b64      	subs	r4, r4, r5
 8002486:	10a4      	asrs	r4, r4, #2
 8002488:	2600      	movs	r6, #0
 800248a:	42a6      	cmp	r6, r4
 800248c:	d105      	bne.n	800249a <__libc_init_array+0x2e>
 800248e:	bd70      	pop	{r4, r5, r6, pc}
 8002490:	f855 3b04 	ldr.w	r3, [r5], #4
 8002494:	4798      	blx	r3
 8002496:	3601      	adds	r6, #1
 8002498:	e7ee      	b.n	8002478 <__libc_init_array+0xc>
 800249a:	f855 3b04 	ldr.w	r3, [r5], #4
 800249e:	4798      	blx	r3
 80024a0:	3601      	adds	r6, #1
 80024a2:	e7f2      	b.n	800248a <__libc_init_array+0x1e>
 80024a4:	080024f8 	.word	0x080024f8
 80024a8:	080024f8 	.word	0x080024f8
 80024ac:	080024f8 	.word	0x080024f8
 80024b0:	080024fc 	.word	0x080024fc

080024b4 <memset>:
 80024b4:	4402      	add	r2, r0
 80024b6:	4603      	mov	r3, r0
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d100      	bne.n	80024be <memset+0xa>
 80024bc:	4770      	bx	lr
 80024be:	f803 1b01 	strb.w	r1, [r3], #1
 80024c2:	e7f9      	b.n	80024b8 <memset+0x4>

080024c4 <_init>:
 80024c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024c6:	bf00      	nop
 80024c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ca:	bc08      	pop	{r3}
 80024cc:	469e      	mov	lr, r3
 80024ce:	4770      	bx	lr

080024d0 <_fini>:
 80024d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024d2:	bf00      	nop
 80024d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024d6:	bc08      	pop	{r3}
 80024d8:	469e      	mov	lr, r3
 80024da:	4770      	bx	lr
