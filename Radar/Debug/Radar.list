
Radar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae58  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000504  0800b038  0800b038  0001b038  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b53c  0800b53c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b53c  0800b53c  0001b53c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b544  0800b544  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b544  0800b544  0001b544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b548  0800b548  0001b548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b54c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  200001e0  0800b72c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  0800b72c  0002039c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017572  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c13  00000000  00000000  00037782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d8  00000000  00000000  0003a398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c0  00000000  00000000  0003b770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fc22  00000000  00000000  0003ca30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001742a  00000000  00000000  0005c652  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca54c  00000000  00000000  00073a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013dfc8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a9c  00000000  00000000  0013e018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b020 	.word	0x0800b020

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	0800b020 	.word	0x0800b020

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9aa 	b.w	8001044 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468e      	mov	lr, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d14d      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d82:	428a      	cmp	r2, r1
 8000d84:	4694      	mov	ip, r2
 8000d86:	d969      	bls.n	8000e5c <__udivmoddi4+0xe8>
 8000d88:	fab2 f282 	clz	r2, r2
 8000d8c:	b152      	cbz	r2, 8000da4 <__udivmoddi4+0x30>
 8000d8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d92:	f1c2 0120 	rsb	r1, r2, #32
 8000d96:	fa20 f101 	lsr.w	r1, r0, r1
 8000d9a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9e:	ea41 0e03 	orr.w	lr, r1, r3
 8000da2:	4094      	lsls	r4, r2
 8000da4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da8:	0c21      	lsrs	r1, r4, #16
 8000daa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dae:	fa1f f78c 	uxth.w	r7, ip
 8000db2:	fb08 e316 	mls	r3, r8, r6, lr
 8000db6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dba:	fb06 f107 	mul.w	r1, r6, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dca:	f080 811f 	bcs.w	800100c <__udivmoddi4+0x298>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 811c 	bls.w	800100c <__udivmoddi4+0x298>
 8000dd4:	3e02      	subs	r6, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3310 	mls	r3, r8, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 f707 	mul.w	r7, r0, r7
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	d90a      	bls.n	8000e06 <__udivmoddi4+0x92>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df8:	f080 810a 	bcs.w	8001010 <__udivmoddi4+0x29c>
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	f240 8107 	bls.w	8001010 <__udivmoddi4+0x29c>
 8000e02:	4464      	add	r4, ip
 8000e04:	3802      	subs	r0, #2
 8000e06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e0a:	1be4      	subs	r4, r4, r7
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	b11d      	cbz	r5, 8000e18 <__udivmoddi4+0xa4>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c5 4300 	strd	r4, r3, [r5]
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0xc2>
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	f000 80ef 	beq.w	8001006 <__udivmoddi4+0x292>
 8000e28:	2600      	movs	r6, #0
 8000e2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2e:	4630      	mov	r0, r6
 8000e30:	4631      	mov	r1, r6
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f683 	clz	r6, r3
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d14a      	bne.n	8000ed4 <__udivmoddi4+0x160>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0xd4>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80f9 	bhi.w	800103a <__udivmoddi4+0x2c6>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	469e      	mov	lr, r3
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	d0e0      	beq.n	8000e18 <__udivmoddi4+0xa4>
 8000e56:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e5a:	e7dd      	b.n	8000e18 <__udivmoddi4+0xa4>
 8000e5c:	b902      	cbnz	r2, 8000e60 <__udivmoddi4+0xec>
 8000e5e:	deff      	udf	#255	; 0xff
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 8092 	bne.w	8000f8e <__udivmoddi4+0x21a>
 8000e6a:	eba1 010c 	sub.w	r1, r1, ip
 8000e6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	2601      	movs	r6, #1
 8000e78:	0c20      	lsrs	r0, r4, #16
 8000e7a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e7e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e86:	fb0e f003 	mul.w	r0, lr, r3
 8000e8a:	4288      	cmp	r0, r1
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x12c>
 8000e8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e92:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x12a>
 8000e98:	4288      	cmp	r0, r1
 8000e9a:	f200 80cb 	bhi.w	8001034 <__udivmoddi4+0x2c0>
 8000e9e:	4643      	mov	r3, r8
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1110 	mls	r1, r7, r0, r1
 8000eac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000eb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000eb4:	45a6      	cmp	lr, r4
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x156>
 8000eb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ebc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec0:	d202      	bcs.n	8000ec8 <__udivmoddi4+0x154>
 8000ec2:	45a6      	cmp	lr, r4
 8000ec4:	f200 80bb 	bhi.w	800103e <__udivmoddi4+0x2ca>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	eba4 040e 	sub.w	r4, r4, lr
 8000ece:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ed2:	e79c      	b.n	8000e0e <__udivmoddi4+0x9a>
 8000ed4:	f1c6 0720 	rsb	r7, r6, #32
 8000ed8:	40b3      	lsls	r3, r6
 8000eda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ede:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ee2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ee6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eea:	431c      	orrs	r4, r3
 8000eec:	40f9      	lsrs	r1, r7
 8000eee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ef2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ef6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000efa:	0c20      	lsrs	r0, r4, #16
 8000efc:	fa1f fe8c 	uxth.w	lr, ip
 8000f00:	fb09 1118 	mls	r1, r9, r8, r1
 8000f04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f08:	fb08 f00e 	mul.w	r0, r8, lr
 8000f0c:	4288      	cmp	r0, r1
 8000f0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f12:	d90b      	bls.n	8000f2c <__udivmoddi4+0x1b8>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f1c:	f080 8088 	bcs.w	8001030 <__udivmoddi4+0x2bc>
 8000f20:	4288      	cmp	r0, r1
 8000f22:	f240 8085 	bls.w	8001030 <__udivmoddi4+0x2bc>
 8000f26:	f1a8 0802 	sub.w	r8, r8, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	1a09      	subs	r1, r1, r0
 8000f2e:	b2a4      	uxth	r4, r4
 8000f30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f34:	fb09 1110 	mls	r1, r9, r0, r1
 8000f38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f40:	458e      	cmp	lr, r1
 8000f42:	d908      	bls.n	8000f56 <__udivmoddi4+0x1e2>
 8000f44:	eb1c 0101 	adds.w	r1, ip, r1
 8000f48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f4c:	d26c      	bcs.n	8001028 <__udivmoddi4+0x2b4>
 8000f4e:	458e      	cmp	lr, r1
 8000f50:	d96a      	bls.n	8001028 <__udivmoddi4+0x2b4>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4461      	add	r1, ip
 8000f56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f5e:	eba1 010e 	sub.w	r1, r1, lr
 8000f62:	42a1      	cmp	r1, r4
 8000f64:	46c8      	mov	r8, r9
 8000f66:	46a6      	mov	lr, r4
 8000f68:	d356      	bcc.n	8001018 <__udivmoddi4+0x2a4>
 8000f6a:	d053      	beq.n	8001014 <__udivmoddi4+0x2a0>
 8000f6c:	b15d      	cbz	r5, 8000f86 <__udivmoddi4+0x212>
 8000f6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f72:	eb61 010e 	sbc.w	r1, r1, lr
 8000f76:	fa01 f707 	lsl.w	r7, r1, r7
 8000f7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f7e:	40f1      	lsrs	r1, r6
 8000f80:	431f      	orrs	r7, r3
 8000f82:	e9c5 7100 	strd	r7, r1, [r5]
 8000f86:	2600      	movs	r6, #0
 8000f88:	4631      	mov	r1, r6
 8000f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8e:	f1c2 0320 	rsb	r3, r2, #32
 8000f92:	40d8      	lsrs	r0, r3
 8000f94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f98:	fa21 f303 	lsr.w	r3, r1, r3
 8000f9c:	4091      	lsls	r1, r2
 8000f9e:	4301      	orrs	r1, r0
 8000fa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa4:	fa1f fe8c 	uxth.w	lr, ip
 8000fa8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fac:	fb07 3610 	mls	r6, r7, r0, r3
 8000fb0:	0c0b      	lsrs	r3, r1, #16
 8000fb2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fb6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fba:	429e      	cmp	r6, r3
 8000fbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fc0:	d908      	bls.n	8000fd4 <__udivmoddi4+0x260>
 8000fc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fca:	d22f      	bcs.n	800102c <__udivmoddi4+0x2b8>
 8000fcc:	429e      	cmp	r6, r3
 8000fce:	d92d      	bls.n	800102c <__udivmoddi4+0x2b8>
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	4463      	add	r3, ip
 8000fd4:	1b9b      	subs	r3, r3, r6
 8000fd6:	b289      	uxth	r1, r1
 8000fd8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fdc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fe0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fe4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fe8:	428b      	cmp	r3, r1
 8000fea:	d908      	bls.n	8000ffe <__udivmoddi4+0x28a>
 8000fec:	eb1c 0101 	adds.w	r1, ip, r1
 8000ff0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ff4:	d216      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000ff6:	428b      	cmp	r3, r1
 8000ff8:	d914      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000ffa:	3e02      	subs	r6, #2
 8000ffc:	4461      	add	r1, ip
 8000ffe:	1ac9      	subs	r1, r1, r3
 8001000:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001004:	e738      	b.n	8000e78 <__udivmoddi4+0x104>
 8001006:	462e      	mov	r6, r5
 8001008:	4628      	mov	r0, r5
 800100a:	e705      	b.n	8000e18 <__udivmoddi4+0xa4>
 800100c:	4606      	mov	r6, r0
 800100e:	e6e3      	b.n	8000dd8 <__udivmoddi4+0x64>
 8001010:	4618      	mov	r0, r3
 8001012:	e6f8      	b.n	8000e06 <__udivmoddi4+0x92>
 8001014:	454b      	cmp	r3, r9
 8001016:	d2a9      	bcs.n	8000f6c <__udivmoddi4+0x1f8>
 8001018:	ebb9 0802 	subs.w	r8, r9, r2
 800101c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001020:	3801      	subs	r0, #1
 8001022:	e7a3      	b.n	8000f6c <__udivmoddi4+0x1f8>
 8001024:	4646      	mov	r6, r8
 8001026:	e7ea      	b.n	8000ffe <__udivmoddi4+0x28a>
 8001028:	4620      	mov	r0, r4
 800102a:	e794      	b.n	8000f56 <__udivmoddi4+0x1e2>
 800102c:	4640      	mov	r0, r8
 800102e:	e7d1      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001030:	46d0      	mov	r8, sl
 8001032:	e77b      	b.n	8000f2c <__udivmoddi4+0x1b8>
 8001034:	3b02      	subs	r3, #2
 8001036:	4461      	add	r1, ip
 8001038:	e732      	b.n	8000ea0 <__udivmoddi4+0x12c>
 800103a:	4630      	mov	r0, r6
 800103c:	e709      	b.n	8000e52 <__udivmoddi4+0xde>
 800103e:	4464      	add	r4, ip
 8001040:	3802      	subs	r0, #2
 8001042:	e742      	b.n	8000eca <__udivmoddi4+0x156>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <__io_putchar>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

  //LPUART1
  PUTCHAR_PROTOTYPE
  {
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the LPUART1 and Loop until the end of transmission */
    HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001050:	1d39      	adds	r1, r7, #4
 8001052:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001056:	2201      	movs	r2, #1
 8001058:	4803      	ldr	r0, [pc, #12]	; (8001068 <__io_putchar+0x20>)
 800105a:	f004 fd0b 	bl	8005a74 <HAL_UART_Transmit>

    return ch;
 800105e:	687b      	ldr	r3, [r7, #4]
  }
 8001060:	4618      	mov	r0, r3
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000248 	.word	0x20000248
 800106c:	00000000 	.word	0x00000000

08001070 <set_angle>:

  //PWM
    void set_angle( int angle)
    {
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

          int pwm = (54 + angle) / 0.09;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3336      	adds	r3, #54	; 0x36
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fa79 	bl	8000574 <__aeabi_i2d>
 8001082:	a30b      	add	r3, pc, #44	; (adr r3, 80010b0 <set_angle+0x40>)
 8001084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001088:	f7ff fc08 	bl	800089c <__aeabi_ddiv>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	4610      	mov	r0, r2
 8001092:	4619      	mov	r1, r3
 8001094:	f7ff fd88 	bl	8000ba8 <__aeabi_d2iz>
 8001098:	4603      	mov	r3, r0
 800109a:	60fb      	str	r3, [r7, #12]
    	  TIM2->CCR1 =  pwm;
 800109c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	6353      	str	r3, [r2, #52]	; 0x34
    }
 80010a4:	bf00      	nop
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	f3af 8000 	nop.w
 80010b0:	70a3d70a 	.word	0x70a3d70a
 80010b4:	3fb70a3d 	.word	0x3fb70a3d

080010b8 <Display_LCD>:

  //Display_LCD
  extern uint32_t Distance;
  void Display_LCD(void)
  {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
	  lcd_clear();
 80010be:	f000 fee5 	bl	8001e8c <lcd_clear>
	  HCSR04_Read();
 80010c2:	f000 fe65 	bl	8001d90 <HCSR04_Read>
	  lcd_send_string("Distance= ");
 80010c6:	4820      	ldr	r0, [pc, #128]	; (8001148 <Display_LCD+0x90>)
 80010c8:	f000 ff2a 	bl	8001f20 <lcd_send_string>
	  int d = Distance / 10;
 80010cc:	4b1f      	ldr	r3, [pc, #124]	; (800114c <Display_LCD+0x94>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a1f      	ldr	r2, [pc, #124]	; (8001150 <Display_LCD+0x98>)
 80010d2:	fba2 2303 	umull	r2, r3, r2, r3
 80010d6:	08db      	lsrs	r3, r3, #3
 80010d8:	607b      	str	r3, [r7, #4]
	  if (d > 10)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2b0a      	cmp	r3, #10
 80010de:	dd07      	ble.n	80010f0 <Display_LCD+0x38>
	  d=d/10;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4a1c      	ldr	r2, [pc, #112]	; (8001154 <Display_LCD+0x9c>)
 80010e4:	fb82 1203 	smull	r1, r2, r2, r3
 80010e8:	1092      	asrs	r2, r2, #2
 80010ea:	17db      	asrs	r3, r3, #31
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	607b      	str	r3, [r7, #4]
	  lcd_send_data((Distance / 100) + 48); // Singularity
 80010f0:	4b16      	ldr	r3, [pc, #88]	; (800114c <Display_LCD+0x94>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a18      	ldr	r2, [pc, #96]	; (8001158 <Display_LCD+0xa0>)
 80010f6:	fba2 2303 	umull	r2, r3, r2, r3
 80010fa:	095b      	lsrs	r3, r3, #5
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	3330      	adds	r3, #48	; 0x30
 8001100:	b2db      	uxtb	r3, r3
 8001102:	4618      	mov	r0, r3
 8001104:	f000 fe92 	bl	8001e2c <lcd_send_data>
	  lcd_send_data(d + 48); // Dozens
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	b2db      	uxtb	r3, r3
 800110c:	3330      	adds	r3, #48	; 0x30
 800110e:	b2db      	uxtb	r3, r3
 8001110:	4618      	mov	r0, r3
 8001112:	f000 fe8b 	bl	8001e2c <lcd_send_data>
	  lcd_send_data((Distance % 10) + 48); // Hundreds
 8001116:	4b0d      	ldr	r3, [pc, #52]	; (800114c <Display_LCD+0x94>)
 8001118:	6819      	ldr	r1, [r3, #0]
 800111a:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <Display_LCD+0x98>)
 800111c:	fba3 2301 	umull	r2, r3, r3, r1
 8001120:	08da      	lsrs	r2, r3, #3
 8001122:	4613      	mov	r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	4413      	add	r3, r2
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	1aca      	subs	r2, r1, r3
 800112c:	b2d3      	uxtb	r3, r2
 800112e:	3330      	adds	r3, #48	; 0x30
 8001130:	b2db      	uxtb	r3, r3
 8001132:	4618      	mov	r0, r3
 8001134:	f000 fe7a 	bl	8001e2c <lcd_send_data>
	  lcd_send_string(" cm");
 8001138:	4808      	ldr	r0, [pc, #32]	; (800115c <Display_LCD+0xa4>)
 800113a:	f000 fef1 	bl	8001f20 <lcd_send_string>
  }
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	0800b038 	.word	0x0800b038
 800114c:	20000384 	.word	0x20000384
 8001150:	cccccccd 	.word	0xcccccccd
 8001154:	66666667 	.word	0x66666667
 8001158:	51eb851f 	.word	0x51eb851f
 800115c:	0800b044 	.word	0x0800b044

08001160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001166:	f000 fef0 	bl	8001f4a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800116a:	f000 f86b 	bl	8001244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800116e:	f000 fa0f 	bl	8001590 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001172:	f000 f93b 	bl	80013ec <MX_TIM1_Init>
  MX_I2C1_Init();
 8001176:	f000 f8af 	bl	80012d8 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 800117a:	f000 f8ed 	bl	8001358 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 800117e:	f000 f98f 	bl	80014a0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //LCD
  lcd_init();
 8001182:	f000 fe90 	bl	8001ea6 <lcd_init>
  //HCSR04
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001186:	2100      	movs	r1, #0
 8001188:	4829      	ldr	r0, [pc, #164]	; (8001230 <main+0xd0>)
 800118a:	f003 f81d 	bl	80041c8 <HAL_TIM_IC_Start_IT>
  //PWM
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800118e:	2100      	movs	r1, #0
 8001190:	4828      	ldr	r0, [pc, #160]	; (8001234 <main+0xd4>)
 8001192:	f002 fec1 	bl	8003f18 <HAL_TIM_PWM_Start>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

//PWM
	  		 for(int i=15; i < 170; i++)
 8001196:	230f      	movs	r3, #15
 8001198:	607b      	str	r3, [r7, #4]
 800119a:	e01f      	b.n	80011dc <main+0x7c>
	  		 {
	  			 set_angle(i);
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f7ff ff67 	bl	8001070 <set_angle>
	  			 if(i % 15 == 0)
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	4b24      	ldr	r3, [pc, #144]	; (8001238 <main+0xd8>)
 80011a6:	fb83 1302 	smull	r1, r3, r3, r2
 80011aa:	4413      	add	r3, r2
 80011ac:	10d9      	asrs	r1, r3, #3
 80011ae:	17d3      	asrs	r3, r2, #31
 80011b0:	1ac9      	subs	r1, r1, r3
 80011b2:	460b      	mov	r3, r1
 80011b4:	011b      	lsls	r3, r3, #4
 80011b6:	1a5b      	subs	r3, r3, r1
 80011b8:	1ad1      	subs	r1, r2, r3
 80011ba:	2900      	cmp	r1, #0
 80011bc:	d101      	bne.n	80011c2 <main+0x62>
	  			 Display_LCD();
 80011be:	f7ff ff7b 	bl	80010b8 <Display_LCD>
	  			//LPUART1
	  			 printf("%d,%d\n",i,Distance);
 80011c2:	4b1e      	ldr	r3, [pc, #120]	; (800123c <main+0xdc>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	461a      	mov	r2, r3
 80011c8:	6879      	ldr	r1, [r7, #4]
 80011ca:	481d      	ldr	r0, [pc, #116]	; (8001240 <main+0xe0>)
 80011cc:	f006 f918 	bl	8007400 <iprintf>
	  			 HAL_Delay(30);
 80011d0:	201e      	movs	r0, #30
 80011d2:	f000 ff2b 	bl	800202c <HAL_Delay>
	  		 for(int i=15; i < 170; i++)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	3301      	adds	r3, #1
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2ba9      	cmp	r3, #169	; 0xa9
 80011e0:	dddc      	ble.n	800119c <main+0x3c>
	  		 }

	  		 for(int i=170; i>15; i--)
 80011e2:	23aa      	movs	r3, #170	; 0xaa
 80011e4:	603b      	str	r3, [r7, #0]
 80011e6:	e01f      	b.n	8001228 <main+0xc8>
	  		 {
	  			 set_angle(i);
 80011e8:	6838      	ldr	r0, [r7, #0]
 80011ea:	f7ff ff41 	bl	8001070 <set_angle>
	  			 if(i % 15 == 0)
 80011ee:	683a      	ldr	r2, [r7, #0]
 80011f0:	4b11      	ldr	r3, [pc, #68]	; (8001238 <main+0xd8>)
 80011f2:	fb83 1302 	smull	r1, r3, r3, r2
 80011f6:	4413      	add	r3, r2
 80011f8:	10d9      	asrs	r1, r3, #3
 80011fa:	17d3      	asrs	r3, r2, #31
 80011fc:	1ac9      	subs	r1, r1, r3
 80011fe:	460b      	mov	r3, r1
 8001200:	011b      	lsls	r3, r3, #4
 8001202:	1a5b      	subs	r3, r3, r1
 8001204:	1ad1      	subs	r1, r2, r3
 8001206:	2900      	cmp	r1, #0
 8001208:	d101      	bne.n	800120e <main+0xae>
	  			 Display_LCD();
 800120a:	f7ff ff55 	bl	80010b8 <Display_LCD>
	  			//LPUART1
	  		     printf("%d,%d\n",i,Distance);
 800120e:	4b0b      	ldr	r3, [pc, #44]	; (800123c <main+0xdc>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	461a      	mov	r2, r3
 8001214:	6839      	ldr	r1, [r7, #0]
 8001216:	480a      	ldr	r0, [pc, #40]	; (8001240 <main+0xe0>)
 8001218:	f006 f8f2 	bl	8007400 <iprintf>
	  			 HAL_Delay(30);
 800121c:	201e      	movs	r0, #30
 800121e:	f000 ff05 	bl	800202c <HAL_Delay>
	  		 for(int i=170; i>15; i--)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	3b01      	subs	r3, #1
 8001226:	603b      	str	r3, [r7, #0]
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	2b0f      	cmp	r3, #15
 800122c:	dcdc      	bgt.n	80011e8 <main+0x88>
	  		 for(int i=15; i < 170; i++)
 800122e:	e7b2      	b.n	8001196 <main+0x36>
 8001230:	200002d8 	.word	0x200002d8
 8001234:	20000324 	.word	0x20000324
 8001238:	88888889 	.word	0x88888889
 800123c:	20000384 	.word	0x20000384
 8001240:	0800b048 	.word	0x0800b048

08001244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b094      	sub	sp, #80	; 0x50
 8001248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800124a:	f107 0318 	add.w	r3, r7, #24
 800124e:	2238      	movs	r2, #56	; 0x38
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f005 fa52 	bl	80066fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001258:	1d3b      	adds	r3, r7, #4
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001266:	f44f 7000 	mov.w	r0, #512	; 0x200
 800126a:	f001 fdc5 	bl	8002df8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800126e:	2301      	movs	r3, #1
 8001270:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001272:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001276:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001278:	2302      	movs	r3, #2
 800127a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800127c:	2303      	movs	r3, #3
 800127e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001280:	2302      	movs	r3, #2
 8001282:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001284:	230c      	movs	r3, #12
 8001286:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001288:	2302      	movs	r3, #2
 800128a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800128c:	2302      	movs	r3, #2
 800128e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001290:	2302      	movs	r3, #2
 8001292:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001294:	f107 0318 	add.w	r3, r7, #24
 8001298:	4618      	mov	r0, r3
 800129a:	f001 fe61 	bl	8002f60 <HAL_RCC_OscConfig>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80012a4:	f000 f9ee 	bl	8001684 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a8:	230f      	movs	r3, #15
 80012aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ac:	2303      	movs	r3, #3
 80012ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012b4:	2300      	movs	r3, #0
 80012b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012bc:	1d3b      	adds	r3, r7, #4
 80012be:	2102      	movs	r1, #2
 80012c0:	4618      	mov	r0, r3
 80012c2:	f002 f965 	bl	8003590 <HAL_RCC_ClockConfig>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80012cc:	f000 f9da 	bl	8001684 <Error_Handler>
  }
}
 80012d0:	bf00      	nop
 80012d2:	3750      	adds	r7, #80	; 0x50
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012dc:	4b1b      	ldr	r3, [pc, #108]	; (800134c <MX_I2C1_Init+0x74>)
 80012de:	4a1c      	ldr	r2, [pc, #112]	; (8001350 <MX_I2C1_Init+0x78>)
 80012e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10808DD3;
 80012e2:	4b1a      	ldr	r3, [pc, #104]	; (800134c <MX_I2C1_Init+0x74>)
 80012e4:	4a1b      	ldr	r2, [pc, #108]	; (8001354 <MX_I2C1_Init+0x7c>)
 80012e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012e8:	4b18      	ldr	r3, [pc, #96]	; (800134c <MX_I2C1_Init+0x74>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012ee:	4b17      	ldr	r3, [pc, #92]	; (800134c <MX_I2C1_Init+0x74>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012f4:	4b15      	ldr	r3, [pc, #84]	; (800134c <MX_I2C1_Init+0x74>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012fa:	4b14      	ldr	r3, [pc, #80]	; (800134c <MX_I2C1_Init+0x74>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001300:	4b12      	ldr	r3, [pc, #72]	; (800134c <MX_I2C1_Init+0x74>)
 8001302:	2200      	movs	r2, #0
 8001304:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001306:	4b11      	ldr	r3, [pc, #68]	; (800134c <MX_I2C1_Init+0x74>)
 8001308:	2200      	movs	r2, #0
 800130a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800130c:	4b0f      	ldr	r3, [pc, #60]	; (800134c <MX_I2C1_Init+0x74>)
 800130e:	2200      	movs	r2, #0
 8001310:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001312:	480e      	ldr	r0, [pc, #56]	; (800134c <MX_I2C1_Init+0x74>)
 8001314:	f001 f956 	bl	80025c4 <HAL_I2C_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800131e:	f000 f9b1 	bl	8001684 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001322:	2100      	movs	r1, #0
 8001324:	4809      	ldr	r0, [pc, #36]	; (800134c <MX_I2C1_Init+0x74>)
 8001326:	f001 fccf 	bl	8002cc8 <HAL_I2CEx_ConfigAnalogFilter>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001330:	f000 f9a8 	bl	8001684 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001334:	2100      	movs	r1, #0
 8001336:	4805      	ldr	r0, [pc, #20]	; (800134c <MX_I2C1_Init+0x74>)
 8001338:	f001 fd11 	bl	8002d5e <HAL_I2CEx_ConfigDigitalFilter>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001342:	f000 f99f 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	200001fc 	.word	0x200001fc
 8001350:	40005400 	.word	0x40005400
 8001354:	10808dd3 	.word	0x10808dd3

08001358 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800135c:	4b21      	ldr	r3, [pc, #132]	; (80013e4 <MX_LPUART1_UART_Init+0x8c>)
 800135e:	4a22      	ldr	r2, [pc, #136]	; (80013e8 <MX_LPUART1_UART_Init+0x90>)
 8001360:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001362:	4b20      	ldr	r3, [pc, #128]	; (80013e4 <MX_LPUART1_UART_Init+0x8c>)
 8001364:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001368:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800136a:	4b1e      	ldr	r3, [pc, #120]	; (80013e4 <MX_LPUART1_UART_Init+0x8c>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001370:	4b1c      	ldr	r3, [pc, #112]	; (80013e4 <MX_LPUART1_UART_Init+0x8c>)
 8001372:	2200      	movs	r2, #0
 8001374:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001376:	4b1b      	ldr	r3, [pc, #108]	; (80013e4 <MX_LPUART1_UART_Init+0x8c>)
 8001378:	2200      	movs	r2, #0
 800137a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800137c:	4b19      	ldr	r3, [pc, #100]	; (80013e4 <MX_LPUART1_UART_Init+0x8c>)
 800137e:	220c      	movs	r2, #12
 8001380:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001382:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <MX_LPUART1_UART_Init+0x8c>)
 8001384:	2200      	movs	r2, #0
 8001386:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001388:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <MX_LPUART1_UART_Init+0x8c>)
 800138a:	2200      	movs	r2, #0
 800138c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <MX_LPUART1_UART_Init+0x8c>)
 8001390:	2200      	movs	r2, #0
 8001392:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001394:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <MX_LPUART1_UART_Init+0x8c>)
 8001396:	2200      	movs	r2, #0
 8001398:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800139a:	4812      	ldr	r0, [pc, #72]	; (80013e4 <MX_LPUART1_UART_Init+0x8c>)
 800139c:	f004 fb1a 	bl	80059d4 <HAL_UART_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80013a6:	f000 f96d 	bl	8001684 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013aa:	2100      	movs	r1, #0
 80013ac:	480d      	ldr	r0, [pc, #52]	; (80013e4 <MX_LPUART1_UART_Init+0x8c>)
 80013ae:	f005 f8b1 	bl	8006514 <HAL_UARTEx_SetTxFifoThreshold>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80013b8:	f000 f964 	bl	8001684 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013bc:	2100      	movs	r1, #0
 80013be:	4809      	ldr	r0, [pc, #36]	; (80013e4 <MX_LPUART1_UART_Init+0x8c>)
 80013c0:	f005 f8e6 	bl	8006590 <HAL_UARTEx_SetRxFifoThreshold>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80013ca:	f000 f95b 	bl	8001684 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80013ce:	4805      	ldr	r0, [pc, #20]	; (80013e4 <MX_LPUART1_UART_Init+0x8c>)
 80013d0:	f005 f867 	bl	80064a2 <HAL_UARTEx_DisableFifoMode>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80013da:	f000 f953 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000248 	.word	0x20000248
 80013e8:	40008000 	.word	0x40008000

080013ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b088      	sub	sp, #32
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f2:	f107 0314 	add.w	r3, r7, #20
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800140a:	4b23      	ldr	r3, [pc, #140]	; (8001498 <MX_TIM1_Init+0xac>)
 800140c:	4a23      	ldr	r2, [pc, #140]	; (800149c <MX_TIM1_Init+0xb0>)
 800140e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001410:	4b21      	ldr	r3, [pc, #132]	; (8001498 <MX_TIM1_Init+0xac>)
 8001412:	2247      	movs	r2, #71	; 0x47
 8001414:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001416:	4b20      	ldr	r3, [pc, #128]	; (8001498 <MX_TIM1_Init+0xac>)
 8001418:	2200      	movs	r2, #0
 800141a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65534;
 800141c:	4b1e      	ldr	r3, [pc, #120]	; (8001498 <MX_TIM1_Init+0xac>)
 800141e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001422:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001424:	4b1c      	ldr	r3, [pc, #112]	; (8001498 <MX_TIM1_Init+0xac>)
 8001426:	2200      	movs	r2, #0
 8001428:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800142a:	4b1b      	ldr	r3, [pc, #108]	; (8001498 <MX_TIM1_Init+0xac>)
 800142c:	2200      	movs	r2, #0
 800142e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001430:	4b19      	ldr	r3, [pc, #100]	; (8001498 <MX_TIM1_Init+0xac>)
 8001432:	2200      	movs	r2, #0
 8001434:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001436:	4818      	ldr	r0, [pc, #96]	; (8001498 <MX_TIM1_Init+0xac>)
 8001438:	f002 fe6e 	bl	8004118 <HAL_TIM_IC_Init>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001442:	f000 f91f 	bl	8001684 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001446:	2300      	movs	r3, #0
 8001448:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800144a:	2300      	movs	r3, #0
 800144c:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001452:	f107 0314 	add.w	r3, r7, #20
 8001456:	4619      	mov	r1, r3
 8001458:	480f      	ldr	r0, [pc, #60]	; (8001498 <MX_TIM1_Init+0xac>)
 800145a:	f004 f9f3 	bl	8005844 <HAL_TIMEx_MasterConfigSynchronization>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001464:	f000 f90e 	bl	8001684 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001468:	2300      	movs	r3, #0
 800146a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800146c:	2301      	movs	r3, #1
 800146e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001470:	2300      	movs	r3, #0
 8001472:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001478:	1d3b      	adds	r3, r7, #4
 800147a:	2200      	movs	r2, #0
 800147c:	4619      	mov	r1, r3
 800147e:	4806      	ldr	r0, [pc, #24]	; (8001498 <MX_TIM1_Init+0xac>)
 8001480:	f003 f963 	bl	800474a <HAL_TIM_IC_ConfigChannel>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 800148a:	f000 f8fb 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800148e:	bf00      	nop
 8001490:	3720      	adds	r7, #32
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	200002d8 	.word	0x200002d8
 800149c:	40012c00 	.word	0x40012c00

080014a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08e      	sub	sp, #56	; 0x38
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b4:	f107 031c 	add.w	r3, r7, #28
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014c0:	463b      	mov	r3, r7
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	60da      	str	r2, [r3, #12]
 80014cc:	611a      	str	r2, [r3, #16]
 80014ce:	615a      	str	r2, [r3, #20]
 80014d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014d2:	4b2e      	ldr	r3, [pc, #184]	; (800158c <MX_TIM2_Init+0xec>)
 80014d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80014da:	4b2c      	ldr	r3, [pc, #176]	; (800158c <MX_TIM2_Init+0xec>)
 80014dc:	2247      	movs	r2, #71	; 0x47
 80014de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e0:	4b2a      	ldr	r3, [pc, #168]	; (800158c <MX_TIM2_Init+0xec>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 80014e6:	4b29      	ldr	r3, [pc, #164]	; (800158c <MX_TIM2_Init+0xec>)
 80014e8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80014ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ee:	4b27      	ldr	r3, [pc, #156]	; (800158c <MX_TIM2_Init+0xec>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f4:	4b25      	ldr	r3, [pc, #148]	; (800158c <MX_TIM2_Init+0xec>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014fa:	4824      	ldr	r0, [pc, #144]	; (800158c <MX_TIM2_Init+0xec>)
 80014fc:	f002 fc54 	bl	8003da8 <HAL_TIM_Base_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001506:	f000 f8bd 	bl	8001684 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800150a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800150e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001510:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001514:	4619      	mov	r1, r3
 8001516:	481d      	ldr	r0, [pc, #116]	; (800158c <MX_TIM2_Init+0xec>)
 8001518:	f003 fac8 	bl	8004aac <HAL_TIM_ConfigClockSource>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001522:	f000 f8af 	bl	8001684 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001526:	4819      	ldr	r0, [pc, #100]	; (800158c <MX_TIM2_Init+0xec>)
 8001528:	f002 fc95 	bl	8003e56 <HAL_TIM_PWM_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001532:	f000 f8a7 	bl	8001684 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800153a:	2300      	movs	r3, #0
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800153e:	f107 031c 	add.w	r3, r7, #28
 8001542:	4619      	mov	r1, r3
 8001544:	4811      	ldr	r0, [pc, #68]	; (800158c <MX_TIM2_Init+0xec>)
 8001546:	f004 f97d 	bl	8005844 <HAL_TIMEx_MasterConfigSynchronization>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001550:	f000 f898 	bl	8001684 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001554:	2360      	movs	r3, #96	; 0x60
 8001556:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 8001558:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800155c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800155e:	2300      	movs	r3, #0
 8001560:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001566:	463b      	mov	r3, r7
 8001568:	2200      	movs	r2, #0
 800156a:	4619      	mov	r1, r3
 800156c:	4807      	ldr	r0, [pc, #28]	; (800158c <MX_TIM2_Init+0xec>)
 800156e:	f003 f989 	bl	8004884 <HAL_TIM_PWM_ConfigChannel>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001578:	f000 f884 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800157c:	4803      	ldr	r0, [pc, #12]	; (800158c <MX_TIM2_Init+0xec>)
 800157e:	f000 f9e3 	bl	8001948 <HAL_TIM_MspPostInit>

}
 8001582:	bf00      	nop
 8001584:	3738      	adds	r7, #56	; 0x38
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000324 	.word	0x20000324

08001590 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08a      	sub	sp, #40	; 0x28
 8001594:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001596:	f107 0314 	add.w	r3, r7, #20
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	60da      	str	r2, [r3, #12]
 80015a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a6:	4b35      	ldr	r3, [pc, #212]	; (800167c <MX_GPIO_Init+0xec>)
 80015a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015aa:	4a34      	ldr	r2, [pc, #208]	; (800167c <MX_GPIO_Init+0xec>)
 80015ac:	f043 0304 	orr.w	r3, r3, #4
 80015b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b2:	4b32      	ldr	r3, [pc, #200]	; (800167c <MX_GPIO_Init+0xec>)
 80015b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b6:	f003 0304 	and.w	r3, r3, #4
 80015ba:	613b      	str	r3, [r7, #16]
 80015bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015be:	4b2f      	ldr	r3, [pc, #188]	; (800167c <MX_GPIO_Init+0xec>)
 80015c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c2:	4a2e      	ldr	r2, [pc, #184]	; (800167c <MX_GPIO_Init+0xec>)
 80015c4:	f043 0320 	orr.w	r3, r3, #32
 80015c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ca:	4b2c      	ldr	r3, [pc, #176]	; (800167c <MX_GPIO_Init+0xec>)
 80015cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ce:	f003 0320 	and.w	r3, r3, #32
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d6:	4b29      	ldr	r3, [pc, #164]	; (800167c <MX_GPIO_Init+0xec>)
 80015d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015da:	4a28      	ldr	r2, [pc, #160]	; (800167c <MX_GPIO_Init+0xec>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015e2:	4b26      	ldr	r3, [pc, #152]	; (800167c <MX_GPIO_Init+0xec>)
 80015e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	60bb      	str	r3, [r7, #8]
 80015ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ee:	4b23      	ldr	r3, [pc, #140]	; (800167c <MX_GPIO_Init+0xec>)
 80015f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f2:	4a22      	ldr	r2, [pc, #136]	; (800167c <MX_GPIO_Init+0xec>)
 80015f4:	f043 0302 	orr.w	r3, r3, #2
 80015f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015fa:	4b20      	ldr	r3, [pc, #128]	; (800167c <MX_GPIO_Init+0xec>)
 80015fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	607b      	str	r3, [r7, #4]
 8001604:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001606:	2200      	movs	r2, #0
 8001608:	2102      	movs	r1, #2
 800160a:	481d      	ldr	r0, [pc, #116]	; (8001680 <MX_GPIO_Init+0xf0>)
 800160c:	f000 ffc2 	bl	8002594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001610:	2200      	movs	r2, #0
 8001612:	2120      	movs	r1, #32
 8001614:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001618:	f000 ffbc 	bl	8002594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800161c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001620:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001622:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001626:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	4619      	mov	r1, r3
 8001632:	4813      	ldr	r0, [pc, #76]	; (8001680 <MX_GPIO_Init+0xf0>)
 8001634:	f000 fe2c 	bl	8002290 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001638:	2302      	movs	r3, #2
 800163a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163c:	2301      	movs	r3, #1
 800163e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001644:	2300      	movs	r3, #0
 8001646:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	4619      	mov	r1, r3
 800164e:	480c      	ldr	r0, [pc, #48]	; (8001680 <MX_GPIO_Init+0xf0>)
 8001650:	f000 fe1e 	bl	8002290 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001654:	2320      	movs	r3, #32
 8001656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001658:	2301      	movs	r3, #1
 800165a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001660:	2300      	movs	r3, #0
 8001662:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	4619      	mov	r1, r3
 800166a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800166e:	f000 fe0f 	bl	8002290 <HAL_GPIO_Init>

}
 8001672:	bf00      	nop
 8001674:	3728      	adds	r7, #40	; 0x28
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40021000 	.word	0x40021000
 8001680:	48000800 	.word	0x48000800

08001684 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001688:	b672      	cpsid	i
}
 800168a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800168c:	e7fe      	b.n	800168c <Error_Handler+0x8>
	...

08001690 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001696:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <HAL_MspInit+0x44>)
 8001698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800169a:	4a0e      	ldr	r2, [pc, #56]	; (80016d4 <HAL_MspInit+0x44>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	6613      	str	r3, [r2, #96]	; 0x60
 80016a2:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <HAL_MspInit+0x44>)
 80016a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	607b      	str	r3, [r7, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ae:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <HAL_MspInit+0x44>)
 80016b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b2:	4a08      	ldr	r2, [pc, #32]	; (80016d4 <HAL_MspInit+0x44>)
 80016b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b8:	6593      	str	r3, [r2, #88]	; 0x58
 80016ba:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <HAL_MspInit+0x44>)
 80016bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c2:	603b      	str	r3, [r7, #0]
 80016c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80016c6:	f001 fc3b 	bl	8002f40 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40021000 	.word	0x40021000

080016d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b09c      	sub	sp, #112	; 0x70
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016f0:	f107 0318 	add.w	r3, r7, #24
 80016f4:	2244      	movs	r2, #68	; 0x44
 80016f6:	2100      	movs	r1, #0
 80016f8:	4618      	mov	r0, r3
 80016fa:	f004 ffff 	bl	80066fc <memset>
  if(hi2c->Instance==I2C1)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a2d      	ldr	r2, [pc, #180]	; (80017b8 <HAL_I2C_MspInit+0xe0>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d153      	bne.n	80017b0 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001708:	2340      	movs	r3, #64	; 0x40
 800170a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800170c:	2300      	movs	r3, #0
 800170e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001710:	f107 0318 	add.w	r3, r7, #24
 8001714:	4618      	mov	r0, r3
 8001716:	f002 f957 	bl	80039c8 <HAL_RCCEx_PeriphCLKConfig>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001720:	f7ff ffb0 	bl	8001684 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001724:	4b25      	ldr	r3, [pc, #148]	; (80017bc <HAL_I2C_MspInit+0xe4>)
 8001726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001728:	4a24      	ldr	r2, [pc, #144]	; (80017bc <HAL_I2C_MspInit+0xe4>)
 800172a:	f043 0301 	orr.w	r3, r3, #1
 800172e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001730:	4b22      	ldr	r3, [pc, #136]	; (80017bc <HAL_I2C_MspInit+0xe4>)
 8001732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001734:	f003 0301 	and.w	r3, r3, #1
 8001738:	617b      	str	r3, [r7, #20]
 800173a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800173c:	4b1f      	ldr	r3, [pc, #124]	; (80017bc <HAL_I2C_MspInit+0xe4>)
 800173e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001740:	4a1e      	ldr	r2, [pc, #120]	; (80017bc <HAL_I2C_MspInit+0xe4>)
 8001742:	f043 0302 	orr.w	r3, r3, #2
 8001746:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001748:	4b1c      	ldr	r3, [pc, #112]	; (80017bc <HAL_I2C_MspInit+0xe4>)
 800174a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	613b      	str	r3, [r7, #16]
 8001752:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001754:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001758:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800175a:	2312      	movs	r3, #18
 800175c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001762:	2300      	movs	r3, #0
 8001764:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001766:	2304      	movs	r3, #4
 8001768:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800176e:	4619      	mov	r1, r3
 8001770:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001774:	f000 fd8c 	bl	8002290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001778:	2380      	movs	r3, #128	; 0x80
 800177a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800177c:	2312      	movs	r3, #18
 800177e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001784:	2300      	movs	r3, #0
 8001786:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001788:	2304      	movs	r3, #4
 800178a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800178c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001790:	4619      	mov	r1, r3
 8001792:	480b      	ldr	r0, [pc, #44]	; (80017c0 <HAL_I2C_MspInit+0xe8>)
 8001794:	f000 fd7c 	bl	8002290 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001798:	4b08      	ldr	r3, [pc, #32]	; (80017bc <HAL_I2C_MspInit+0xe4>)
 800179a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179c:	4a07      	ldr	r2, [pc, #28]	; (80017bc <HAL_I2C_MspInit+0xe4>)
 800179e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017a2:	6593      	str	r3, [r2, #88]	; 0x58
 80017a4:	4b05      	ldr	r3, [pc, #20]	; (80017bc <HAL_I2C_MspInit+0xe4>)
 80017a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017b0:	bf00      	nop
 80017b2:	3770      	adds	r7, #112	; 0x70
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40005400 	.word	0x40005400
 80017bc:	40021000 	.word	0x40021000
 80017c0:	48000400 	.word	0x48000400

080017c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b09a      	sub	sp, #104	; 0x68
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017dc:	f107 0310 	add.w	r3, r7, #16
 80017e0:	2244      	movs	r2, #68	; 0x44
 80017e2:	2100      	movs	r1, #0
 80017e4:	4618      	mov	r0, r3
 80017e6:	f004 ff89 	bl	80066fc <memset>
  if(huart->Instance==LPUART1)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a1f      	ldr	r2, [pc, #124]	; (800186c <HAL_UART_MspInit+0xa8>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d136      	bne.n	8001862 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80017f4:	2320      	movs	r3, #32
 80017f6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80017f8:	2300      	movs	r3, #0
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017fc:	f107 0310 	add.w	r3, r7, #16
 8001800:	4618      	mov	r0, r3
 8001802:	f002 f8e1 	bl	80039c8 <HAL_RCCEx_PeriphCLKConfig>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800180c:	f7ff ff3a 	bl	8001684 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001810:	4b17      	ldr	r3, [pc, #92]	; (8001870 <HAL_UART_MspInit+0xac>)
 8001812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001814:	4a16      	ldr	r2, [pc, #88]	; (8001870 <HAL_UART_MspInit+0xac>)
 8001816:	f043 0301 	orr.w	r3, r3, #1
 800181a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800181c:	4b14      	ldr	r3, [pc, #80]	; (8001870 <HAL_UART_MspInit+0xac>)
 800181e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001820:	f003 0301 	and.w	r3, r3, #1
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001828:	4b11      	ldr	r3, [pc, #68]	; (8001870 <HAL_UART_MspInit+0xac>)
 800182a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182c:	4a10      	ldr	r2, [pc, #64]	; (8001870 <HAL_UART_MspInit+0xac>)
 800182e:	f043 0301 	orr.w	r3, r3, #1
 8001832:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001834:	4b0e      	ldr	r3, [pc, #56]	; (8001870 <HAL_UART_MspInit+0xac>)
 8001836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	60bb      	str	r3, [r7, #8]
 800183e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001840:	230c      	movs	r3, #12
 8001842:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001844:	2302      	movs	r3, #2
 8001846:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184c:	2300      	movs	r3, #0
 800184e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001850:	230c      	movs	r3, #12
 8001852:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001854:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001858:	4619      	mov	r1, r3
 800185a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800185e:	f000 fd17 	bl	8002290 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001862:	bf00      	nop
 8001864:	3768      	adds	r7, #104	; 0x68
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40008000 	.word	0x40008000
 8001870:	40021000 	.word	0x40021000

08001874 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b08a      	sub	sp, #40	; 0x28
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187c:	f107 0314 	add.w	r3, r7, #20
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	60da      	str	r2, [r3, #12]
 800188a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a1b      	ldr	r2, [pc, #108]	; (8001900 <HAL_TIM_IC_MspInit+0x8c>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d12f      	bne.n	80018f6 <HAL_TIM_IC_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001896:	4b1b      	ldr	r3, [pc, #108]	; (8001904 <HAL_TIM_IC_MspInit+0x90>)
 8001898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800189a:	4a1a      	ldr	r2, [pc, #104]	; (8001904 <HAL_TIM_IC_MspInit+0x90>)
 800189c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018a0:	6613      	str	r3, [r2, #96]	; 0x60
 80018a2:	4b18      	ldr	r3, [pc, #96]	; (8001904 <HAL_TIM_IC_MspInit+0x90>)
 80018a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018aa:	613b      	str	r3, [r7, #16]
 80018ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ae:	4b15      	ldr	r3, [pc, #84]	; (8001904 <HAL_TIM_IC_MspInit+0x90>)
 80018b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b2:	4a14      	ldr	r2, [pc, #80]	; (8001904 <HAL_TIM_IC_MspInit+0x90>)
 80018b4:	f043 0304 	orr.w	r3, r3, #4
 80018b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ba:	4b12      	ldr	r3, [pc, #72]	; (8001904 <HAL_TIM_IC_MspInit+0x90>)
 80018bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018be:	f003 0304 	and.w	r3, r3, #4
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018c6:	2301      	movs	r3, #1
 80018c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ca:	2302      	movs	r3, #2
 80018cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d2:	2300      	movs	r3, #0
 80018d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80018d6:	2302      	movs	r3, #2
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018da:	f107 0314 	add.w	r3, r7, #20
 80018de:	4619      	mov	r1, r3
 80018e0:	4809      	ldr	r0, [pc, #36]	; (8001908 <HAL_TIM_IC_MspInit+0x94>)
 80018e2:	f000 fcd5 	bl	8002290 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80018e6:	2200      	movs	r2, #0
 80018e8:	2100      	movs	r1, #0
 80018ea:	201b      	movs	r0, #27
 80018ec:	f000 fc9b 	bl	8002226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80018f0:	201b      	movs	r0, #27
 80018f2:	f000 fcb2 	bl	800225a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80018f6:	bf00      	nop
 80018f8:	3728      	adds	r7, #40	; 0x28
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40012c00 	.word	0x40012c00
 8001904:	40021000 	.word	0x40021000
 8001908:	48000800 	.word	0x48000800

0800190c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800191c:	d10b      	bne.n	8001936 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800191e:	4b09      	ldr	r3, [pc, #36]	; (8001944 <HAL_TIM_Base_MspInit+0x38>)
 8001920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001922:	4a08      	ldr	r2, [pc, #32]	; (8001944 <HAL_TIM_Base_MspInit+0x38>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	6593      	str	r3, [r2, #88]	; 0x58
 800192a:	4b06      	ldr	r3, [pc, #24]	; (8001944 <HAL_TIM_Base_MspInit+0x38>)
 800192c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001936:	bf00      	nop
 8001938:	3714      	adds	r7, #20
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	40021000 	.word	0x40021000

08001948 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b088      	sub	sp, #32
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001950:	f107 030c 	add.w	r3, r7, #12
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
 800195e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001968:	d11c      	bne.n	80019a4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800196a:	4b10      	ldr	r3, [pc, #64]	; (80019ac <HAL_TIM_MspPostInit+0x64>)
 800196c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196e:	4a0f      	ldr	r2, [pc, #60]	; (80019ac <HAL_TIM_MspPostInit+0x64>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001976:	4b0d      	ldr	r3, [pc, #52]	; (80019ac <HAL_TIM_MspPostInit+0x64>)
 8001978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	60bb      	str	r3, [r7, #8]
 8001980:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001982:	2301      	movs	r3, #1
 8001984:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001986:	2302      	movs	r3, #2
 8001988:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198e:	2300      	movs	r3, #0
 8001990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001992:	2301      	movs	r3, #1
 8001994:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001996:	f107 030c 	add.w	r3, r7, #12
 800199a:	4619      	mov	r1, r3
 800199c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019a0:	f000 fc76 	bl	8002290 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80019a4:	bf00      	nop
 80019a6:	3720      	adds	r7, #32
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40021000 	.word	0x40021000

080019b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019b4:	e7fe      	b.n	80019b4 <NMI_Handler+0x4>

080019b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ba:	e7fe      	b.n	80019ba <HardFault_Handler+0x4>

080019bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019c0:	e7fe      	b.n	80019c0 <MemManage_Handler+0x4>

080019c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019c6:	e7fe      	b.n	80019c6 <BusFault_Handler+0x4>

080019c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019cc:	e7fe      	b.n	80019cc <UsageFault_Handler+0x4>

080019ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019fc:	f000 faf8 	bl	8001ff0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a00:	bf00      	nop
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a08:	4802      	ldr	r0, [pc, #8]	; (8001a14 <TIM1_CC_IRQHandler+0x10>)
 8001a0a:	f002 fd1f 	bl	800444c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	200002d8 	.word	0x200002d8

08001a18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
	return 1;
 8001a1c:	2301      	movs	r3, #1
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <_kill>:

int _kill(int pid, int sig)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a32:	f004 fe39 	bl	80066a8 <__errno>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2216      	movs	r2, #22
 8001a3a:	601a      	str	r2, [r3, #0]
	return -1;
 8001a3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <_exit>:

void _exit (int status)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a50:	f04f 31ff 	mov.w	r1, #4294967295
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f7ff ffe7 	bl	8001a28 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a5a:	e7fe      	b.n	8001a5a <_exit+0x12>

08001a5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	e00a      	b.n	8001a84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a6e:	f3af 8000 	nop.w
 8001a72:	4601      	mov	r1, r0
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	1c5a      	adds	r2, r3, #1
 8001a78:	60ba      	str	r2, [r7, #8]
 8001a7a:	b2ca      	uxtb	r2, r1
 8001a7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	3301      	adds	r3, #1
 8001a82:	617b      	str	r3, [r7, #20]
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	dbf0      	blt.n	8001a6e <_read+0x12>
	}

return len;
 8001a8c:	687b      	ldr	r3, [r7, #4]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b086      	sub	sp, #24
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	60f8      	str	r0, [r7, #12]
 8001a9e:	60b9      	str	r1, [r7, #8]
 8001aa0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	617b      	str	r3, [r7, #20]
 8001aa6:	e009      	b.n	8001abc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	1c5a      	adds	r2, r3, #1
 8001aac:	60ba      	str	r2, [r7, #8]
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff fac9 	bl	8001048 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	dbf1      	blt.n	8001aa8 <_write+0x12>
	}
	return len;
 8001ac4:	687b      	ldr	r3, [r7, #4]
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <_close>:

int _close(int file)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b083      	sub	sp, #12
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
	return -1;
 8001ad6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b083      	sub	sp, #12
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
 8001aee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001af6:	605a      	str	r2, [r3, #4]
	return 0;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <_isatty>:

int _isatty(int file)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b083      	sub	sp, #12
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
	return 1;
 8001b0e:	2301      	movs	r3, #1
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
	return 0;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3714      	adds	r7, #20
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
	...

08001b38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b40:	4a14      	ldr	r2, [pc, #80]	; (8001b94 <_sbrk+0x5c>)
 8001b42:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <_sbrk+0x60>)
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b4c:	4b13      	ldr	r3, [pc, #76]	; (8001b9c <_sbrk+0x64>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d102      	bne.n	8001b5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b54:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <_sbrk+0x64>)
 8001b56:	4a12      	ldr	r2, [pc, #72]	; (8001ba0 <_sbrk+0x68>)
 8001b58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b5a:	4b10      	ldr	r3, [pc, #64]	; (8001b9c <_sbrk+0x64>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4413      	add	r3, r2
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d207      	bcs.n	8001b78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b68:	f004 fd9e 	bl	80066a8 <__errno>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	220c      	movs	r2, #12
 8001b70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b72:	f04f 33ff 	mov.w	r3, #4294967295
 8001b76:	e009      	b.n	8001b8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b78:	4b08      	ldr	r3, [pc, #32]	; (8001b9c <_sbrk+0x64>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b7e:	4b07      	ldr	r3, [pc, #28]	; (8001b9c <_sbrk+0x64>)
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4413      	add	r3, r2
 8001b86:	4a05      	ldr	r2, [pc, #20]	; (8001b9c <_sbrk+0x64>)
 8001b88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3718      	adds	r7, #24
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	20008000 	.word	0x20008000
 8001b98:	00000400 	.word	0x00000400
 8001b9c:	20000370 	.word	0x20000370
 8001ba0:	200003a0 	.word	0x200003a0

08001ba4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ba8:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <SystemInit+0x20>)
 8001baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bae:	4a05      	ldr	r2, [pc, #20]	; (8001bc4 <SystemInit+0x20>)
 8001bb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001bc8:	480d      	ldr	r0, [pc, #52]	; (8001c00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001bca:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bcc:	480d      	ldr	r0, [pc, #52]	; (8001c04 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bce:	490e      	ldr	r1, [pc, #56]	; (8001c08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bd0:	4a0e      	ldr	r2, [pc, #56]	; (8001c0c <LoopForever+0xe>)
  movs r3, #0
 8001bd2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001bd4:	e002      	b.n	8001bdc <LoopCopyDataInit>

08001bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bda:	3304      	adds	r3, #4

08001bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be0:	d3f9      	bcc.n	8001bd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001be2:	4a0b      	ldr	r2, [pc, #44]	; (8001c10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001be4:	4c0b      	ldr	r4, [pc, #44]	; (8001c14 <LoopForever+0x16>)
  movs r3, #0
 8001be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be8:	e001      	b.n	8001bee <LoopFillZerobss>

08001bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bec:	3204      	adds	r2, #4

08001bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf0:	d3fb      	bcc.n	8001bea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bf2:	f7ff ffd7 	bl	8001ba4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bf6:	f004 fd5d 	bl	80066b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bfa:	f7ff fab1 	bl	8001160 <main>

08001bfe <LoopForever>:

LoopForever:
    b LoopForever
 8001bfe:	e7fe      	b.n	8001bfe <LoopForever>
  ldr   r0, =_estack
 8001c00:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c08:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001c0c:	0800b54c 	.word	0x0800b54c
  ldr r2, =_sbss
 8001c10:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001c14:	2000039c 	.word	0x2000039c

08001c18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c18:	e7fe      	b.n	8001c18 <ADC1_2_IRQHandler>
	...

08001c1c <delay>:

//HCSR04
// Delay function
extern TIM_HandleTypeDef htim1;
void delay (uint16_t time)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	80fb      	strh	r3, [r7, #6]
 __HAL_TIM_SET_COUNTER(&htim1,0);
 8001c26:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <delay+0x30>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	625a      	str	r2, [r3, #36]	; 0x24
 while(__HAL_TIM_GET_COUNTER(&htim1) < time );
 8001c2e:	bf00      	nop
 8001c30:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <delay+0x30>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c36:	88fb      	ldrh	r3, [r7, #6]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d3f9      	bcc.n	8001c30 <delay+0x14>

}
 8001c3c:	bf00      	nop
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	200002d8 	.word	0x200002d8

08001c50 <HAL_TIM_IC_CaptureCallback>:
#define TRIG_PIN GPIO_PIN_1
#define TRIG_PORT GPIOC

//HCSR04
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	7f1b      	ldrb	r3, [r3, #28]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	f040 8082 	bne.w	8001d66 <HAL_TIM_IC_CaptureCallback+0x116>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8001c62:	4b45      	ldr	r3, [pc, #276]	; (8001d78 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d11a      	bne.n	8001ca0 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f003 f817 	bl	8004ca0 <HAL_TIM_ReadCapturedValue>
 8001c72:	4603      	mov	r3, r0
 8001c74:	4a41      	ldr	r2, [pc, #260]	; (8001d7c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001c76:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8001c78:	4b3f      	ldr	r3, [pc, #252]	; (8001d78 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	6a1a      	ldr	r2, [r3, #32]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 020a 	bic.w	r2, r2, #10
 8001c8c:	621a      	str	r2, [r3, #32]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6a1a      	ldr	r2, [r3, #32]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f042 0202 	orr.w	r2, r2, #2
 8001c9c:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 8001c9e:	e062      	b.n	8001d66 <HAL_TIM_IC_CaptureCallback+0x116>
		else if (Is_First_Captured==1)   // if the first is already captured
 8001ca0:	4b35      	ldr	r3, [pc, #212]	; (8001d78 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d15e      	bne.n	8001d66 <HAL_TIM_IC_CaptureCallback+0x116>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8001ca8:	2100      	movs	r1, #0
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f002 fff8 	bl	8004ca0 <HAL_TIM_ReadCapturedValue>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	4a33      	ldr	r2, [pc, #204]	; (8001d80 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001cb4:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 8001cbe:	4b30      	ldr	r3, [pc, #192]	; (8001d80 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	4b2e      	ldr	r3, [pc, #184]	; (8001d7c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d907      	bls.n	8001cda <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 8001cca:	4b2d      	ldr	r3, [pc, #180]	; (8001d80 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	4b2b      	ldr	r3, [pc, #172]	; (8001d7c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	4a2b      	ldr	r2, [pc, #172]	; (8001d84 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001cd6:	6013      	str	r3, [r2, #0]
 8001cd8:	e00f      	b.n	8001cfa <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 8001cda:	4b28      	ldr	r3, [pc, #160]	; (8001d7c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	4b28      	ldr	r3, [pc, #160]	; (8001d80 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d909      	bls.n	8001cfa <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8001ce6:	4b26      	ldr	r3, [pc, #152]	; (8001d80 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	4b24      	ldr	r3, [pc, #144]	; (8001d7c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001cf4:	33ff      	adds	r3, #255	; 0xff
 8001cf6:	4a23      	ldr	r2, [pc, #140]	; (8001d84 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001cf8:	6013      	str	r3, [r2, #0]
			Distance = Difference * 0.034/2.0;
 8001cfa:	4b22      	ldr	r3, [pc, #136]	; (8001d84 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7fe fc28 	bl	8000554 <__aeabi_ui2d>
 8001d04:	a31a      	add	r3, pc, #104	; (adr r3, 8001d70 <HAL_TIM_IC_CaptureCallback+0x120>)
 8001d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0a:	f7fe fc9d 	bl	8000648 <__aeabi_dmul>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	460b      	mov	r3, r1
 8001d12:	4610      	mov	r0, r2
 8001d14:	4619      	mov	r1, r3
 8001d16:	f04f 0200 	mov.w	r2, #0
 8001d1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d1e:	f7fe fdbd 	bl	800089c <__aeabi_ddiv>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	4610      	mov	r0, r2
 8001d28:	4619      	mov	r1, r3
 8001d2a:	f7fe ff65 	bl	8000bf8 <__aeabi_d2uiz>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	4a15      	ldr	r2, [pc, #84]	; (8001d88 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001d32:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 0; // set it back to false
 8001d34:	4b10      	ldr	r3, [pc, #64]	; (8001d78 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	6a1a      	ldr	r2, [r3, #32]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 020a 	bic.w	r2, r2, #10
 8001d48:	621a      	str	r2, [r3, #32]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	6a12      	ldr	r2, [r2, #32]
 8001d54:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8001d56:	4b0d      	ldr	r3, [pc, #52]	; (8001d8c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68da      	ldr	r2, [r3, #12]
 8001d5c:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f022 0202 	bic.w	r2, r2, #2
 8001d64:	60da      	str	r2, [r3, #12]
}
 8001d66:	bf00      	nop
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	b020c49c 	.word	0xb020c49c
 8001d74:	3fa16872 	.word	0x3fa16872
 8001d78:	20000380 	.word	0x20000380
 8001d7c:	20000374 	.word	0x20000374
 8001d80:	20000378 	.word	0x20000378
 8001d84:	2000037c 	.word	0x2000037c
 8001d88:	20000384 	.word	0x20000384
 8001d8c:	200002d8 	.word	0x200002d8

08001d90 <HCSR04_Read>:

//HCSR04
void HCSR04_Read (void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001d94:	2201      	movs	r2, #1
 8001d96:	2102      	movs	r1, #2
 8001d98:	480a      	ldr	r0, [pc, #40]	; (8001dc4 <HCSR04_Read+0x34>)
 8001d9a:	f000 fbfb 	bl	8002594 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 8001d9e:	200a      	movs	r0, #10
 8001da0:	f7ff ff3c 	bl	8001c1c <delay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001da4:	2200      	movs	r2, #0
 8001da6:	2102      	movs	r1, #2
 8001da8:	4806      	ldr	r0, [pc, #24]	; (8001dc4 <HCSR04_Read+0x34>)
 8001daa:	f000 fbf3 	bl	8002594 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8001dae:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <HCSR04_Read+0x38>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68da      	ldr	r2, [r3, #12]
 8001db4:	4b04      	ldr	r3, [pc, #16]	; (8001dc8 <HCSR04_Read+0x38>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f042 0202 	orr.w	r2, r2, #2
 8001dbc:	60da      	str	r2, [r3, #12]
}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	48000800 	.word	0x48000800
 8001dc8:	200002d8 	.word	0x200002d8

08001dcc <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x3f << 0x01)// 0x3F // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af02      	add	r7, sp, #8
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001dd6:	79fb      	ldrb	r3, [r7, #7]
 8001dd8:	f023 030f 	bic.w	r3, r3, #15
 8001ddc:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001dde:	79fb      	ldrb	r3, [r7, #7]
 8001de0:	011b      	lsls	r3, r3, #4
 8001de2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001de4:	7bfb      	ldrb	r3, [r7, #15]
 8001de6:	f043 030c 	orr.w	r3, r3, #12
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001dee:	7bfb      	ldrb	r3, [r7, #15]
 8001df0:	f043 0308 	orr.w	r3, r3, #8
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001df8:	7bbb      	ldrb	r3, [r7, #14]
 8001dfa:	f043 030c 	orr.w	r3, r3, #12
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001e02:	7bbb      	ldrb	r3, [r7, #14]
 8001e04:	f043 0308 	orr.w	r3, r3, #8
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001e0c:	f107 0208 	add.w	r2, r7, #8
 8001e10:	2364      	movs	r3, #100	; 0x64
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	2304      	movs	r3, #4
 8001e16:	217e      	movs	r1, #126	; 0x7e
 8001e18:	4803      	ldr	r0, [pc, #12]	; (8001e28 <lcd_send_cmd+0x5c>)
 8001e1a:	f000 fc63 	bl	80026e4 <HAL_I2C_Master_Transmit>
}
 8001e1e:	bf00      	nop
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	200001fc 	.word	0x200001fc

08001e2c <lcd_send_data>:

void lcd_send_data (char data)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af02      	add	r7, sp, #8
 8001e32:	4603      	mov	r3, r0
 8001e34:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001e36:	79fb      	ldrb	r3, [r7, #7]
 8001e38:	f023 030f 	bic.w	r3, r3, #15
 8001e3c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001e3e:	79fb      	ldrb	r3, [r7, #7]
 8001e40:	011b      	lsls	r3, r3, #4
 8001e42:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001e44:	7bfb      	ldrb	r3, [r7, #15]
 8001e46:	f043 030d 	orr.w	r3, r3, #13
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001e4e:	7bfb      	ldrb	r3, [r7, #15]
 8001e50:	f043 0309 	orr.w	r3, r3, #9
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001e58:	7bbb      	ldrb	r3, [r7, #14]
 8001e5a:	f043 030d 	orr.w	r3, r3, #13
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001e62:	7bbb      	ldrb	r3, [r7, #14]
 8001e64:	f043 0309 	orr.w	r3, r3, #9
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001e6c:	f107 0208 	add.w	r2, r7, #8
 8001e70:	2364      	movs	r3, #100	; 0x64
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	2304      	movs	r3, #4
 8001e76:	217e      	movs	r1, #126	; 0x7e
 8001e78:	4803      	ldr	r0, [pc, #12]	; (8001e88 <lcd_send_data+0x5c>)
 8001e7a:	f000 fc33 	bl	80026e4 <HAL_I2C_Master_Transmit>
}
 8001e7e:	bf00      	nop
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	200001fc 	.word	0x200001fc

08001e8c <lcd_clear>:

void lcd_clear (void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
//	lcd_send_cmd (0x80);
//	for (int i=0; i<70; i++)
//	{
//		lcd_send_data (' ');
//	}
	HAL_Delay(1);
 8001e90:	2001      	movs	r0, #1
 8001e92:	f000 f8cb 	bl	800202c <HAL_Delay>
    lcd_send_cmd (0x01);  // clear display
 8001e96:	2001      	movs	r0, #1
 8001e98:	f7ff ff98 	bl	8001dcc <lcd_send_cmd>
	HAL_Delay(1);
 8001e9c:	2001      	movs	r0, #1
 8001e9e:	f000 f8c5 	bl	800202c <HAL_Delay>
}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <lcd_init>:
    lcd_send_cmd (col);
}


void lcd_init (void)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001eaa:	2032      	movs	r0, #50	; 0x32
 8001eac:	f000 f8be 	bl	800202c <HAL_Delay>
	lcd_send_cmd (0x30);
 8001eb0:	2030      	movs	r0, #48	; 0x30
 8001eb2:	f7ff ff8b 	bl	8001dcc <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001eb6:	2005      	movs	r0, #5
 8001eb8:	f000 f8b8 	bl	800202c <HAL_Delay>
	lcd_send_cmd (0x30);
 8001ebc:	2030      	movs	r0, #48	; 0x30
 8001ebe:	f7ff ff85 	bl	8001dcc <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001ec2:	2001      	movs	r0, #1
 8001ec4:	f000 f8b2 	bl	800202c <HAL_Delay>
	lcd_send_cmd (0x30);
 8001ec8:	2030      	movs	r0, #48	; 0x30
 8001eca:	f7ff ff7f 	bl	8001dcc <lcd_send_cmd>
	HAL_Delay(10);
 8001ece:	200a      	movs	r0, #10
 8001ed0:	f000 f8ac 	bl	800202c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001ed4:	2020      	movs	r0, #32
 8001ed6:	f7ff ff79 	bl	8001dcc <lcd_send_cmd>
	HAL_Delay(10);
 8001eda:	200a      	movs	r0, #10
 8001edc:	f000 f8a6 	bl	800202c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001ee0:	2028      	movs	r0, #40	; 0x28
 8001ee2:	f7ff ff73 	bl	8001dcc <lcd_send_cmd>
	HAL_Delay(1);
 8001ee6:	2001      	movs	r0, #1
 8001ee8:	f000 f8a0 	bl	800202c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001eec:	2008      	movs	r0, #8
 8001eee:	f7ff ff6d 	bl	8001dcc <lcd_send_cmd>
	HAL_Delay(1);
 8001ef2:	2001      	movs	r0, #1
 8001ef4:	f000 f89a 	bl	800202c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001ef8:	2001      	movs	r0, #1
 8001efa:	f7ff ff67 	bl	8001dcc <lcd_send_cmd>
	HAL_Delay(1);
 8001efe:	2001      	movs	r0, #1
 8001f00:	f000 f894 	bl	800202c <HAL_Delay>
	HAL_Delay(1);
 8001f04:	2001      	movs	r0, #1
 8001f06:	f000 f891 	bl	800202c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001f0a:	2006      	movs	r0, #6
 8001f0c:	f7ff ff5e 	bl	8001dcc <lcd_send_cmd>
	HAL_Delay(1);
 8001f10:	2001      	movs	r0, #1
 8001f12:	f000 f88b 	bl	800202c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001f16:	200c      	movs	r0, #12
 8001f18:	f7ff ff58 	bl	8001dcc <lcd_send_cmd>
}
 8001f1c:	bf00      	nop
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001f28:	e006      	b.n	8001f38 <lcd_send_string+0x18>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	1c5a      	adds	r2, r3, #1
 8001f2e:	607a      	str	r2, [r7, #4]
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff ff7a 	bl	8001e2c <lcd_send_data>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1f4      	bne.n	8001f2a <lcd_send_string+0xa>
}
 8001f40:	bf00      	nop
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b082      	sub	sp, #8
 8001f4e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f50:	2300      	movs	r3, #0
 8001f52:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f54:	2003      	movs	r0, #3
 8001f56:	f000 f95b 	bl	8002210 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f5a:	2000      	movs	r0, #0
 8001f5c:	f000 f80e 	bl	8001f7c <HAL_InitTick>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d002      	beq.n	8001f6c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	71fb      	strb	r3, [r7, #7]
 8001f6a:	e001      	b.n	8001f70 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f6c:	f7ff fb90 	bl	8001690 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f70:	79fb      	ldrb	r3, [r7, #7]

}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
	...

08001f7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f84:	2300      	movs	r3, #0
 8001f86:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001f88:	4b16      	ldr	r3, [pc, #88]	; (8001fe4 <HAL_InitTick+0x68>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d022      	beq.n	8001fd6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001f90:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <HAL_InitTick+0x6c>)
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	4b13      	ldr	r3, [pc, #76]	; (8001fe4 <HAL_InitTick+0x68>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001f9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f000 f966 	bl	8002276 <HAL_SYSTICK_Config>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d10f      	bne.n	8001fd0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b0f      	cmp	r3, #15
 8001fb4:	d809      	bhi.n	8001fca <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	f04f 30ff 	mov.w	r0, #4294967295
 8001fbe:	f000 f932 	bl	8002226 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fc2:	4a0a      	ldr	r2, [pc, #40]	; (8001fec <HAL_InitTick+0x70>)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6013      	str	r3, [r2, #0]
 8001fc8:	e007      	b.n	8001fda <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	73fb      	strb	r3, [r7, #15]
 8001fce:	e004      	b.n	8001fda <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	73fb      	strb	r3, [r7, #15]
 8001fd4:	e001      	b.n	8001fda <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	20000008 	.word	0x20000008
 8001fe8:	20000000 	.word	0x20000000
 8001fec:	20000004 	.word	0x20000004

08001ff0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ff4:	4b05      	ldr	r3, [pc, #20]	; (800200c <HAL_IncTick+0x1c>)
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	4b05      	ldr	r3, [pc, #20]	; (8002010 <HAL_IncTick+0x20>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	4a03      	ldr	r2, [pc, #12]	; (800200c <HAL_IncTick+0x1c>)
 8002000:	6013      	str	r3, [r2, #0]
}
 8002002:	bf00      	nop
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	20000388 	.word	0x20000388
 8002010:	20000008 	.word	0x20000008

08002014 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  return uwTick;
 8002018:	4b03      	ldr	r3, [pc, #12]	; (8002028 <HAL_GetTick+0x14>)
 800201a:	681b      	ldr	r3, [r3, #0]
}
 800201c:	4618      	mov	r0, r3
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	20000388 	.word	0x20000388

0800202c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002034:	f7ff ffee 	bl	8002014 <HAL_GetTick>
 8002038:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002044:	d004      	beq.n	8002050 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002046:	4b09      	ldr	r3, [pc, #36]	; (800206c <HAL_Delay+0x40>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	4413      	add	r3, r2
 800204e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002050:	bf00      	nop
 8002052:	f7ff ffdf 	bl	8002014 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	429a      	cmp	r2, r3
 8002060:	d8f7      	bhi.n	8002052 <HAL_Delay+0x26>
  {
  }
}
 8002062:	bf00      	nop
 8002064:	bf00      	nop
 8002066:	3710      	adds	r7, #16
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	20000008 	.word	0x20000008

08002070 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002080:	4b0c      	ldr	r3, [pc, #48]	; (80020b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002086:	68ba      	ldr	r2, [r7, #8]
 8002088:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800208c:	4013      	ands	r3, r2
 800208e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002098:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800209c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020a2:	4a04      	ldr	r2, [pc, #16]	; (80020b4 <__NVIC_SetPriorityGrouping+0x44>)
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	60d3      	str	r3, [r2, #12]
}
 80020a8:	bf00      	nop
 80020aa:	3714      	adds	r7, #20
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	e000ed00 	.word	0xe000ed00

080020b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020bc:	4b04      	ldr	r3, [pc, #16]	; (80020d0 <__NVIC_GetPriorityGrouping+0x18>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	0a1b      	lsrs	r3, r3, #8
 80020c2:	f003 0307 	and.w	r3, r3, #7
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	e000ed00 	.word	0xe000ed00

080020d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	db0b      	blt.n	80020fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020e6:	79fb      	ldrb	r3, [r7, #7]
 80020e8:	f003 021f 	and.w	r2, r3, #31
 80020ec:	4907      	ldr	r1, [pc, #28]	; (800210c <__NVIC_EnableIRQ+0x38>)
 80020ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f2:	095b      	lsrs	r3, r3, #5
 80020f4:	2001      	movs	r0, #1
 80020f6:	fa00 f202 	lsl.w	r2, r0, r2
 80020fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020fe:	bf00      	nop
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	e000e100 	.word	0xe000e100

08002110 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	6039      	str	r1, [r7, #0]
 800211a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800211c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002120:	2b00      	cmp	r3, #0
 8002122:	db0a      	blt.n	800213a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	b2da      	uxtb	r2, r3
 8002128:	490c      	ldr	r1, [pc, #48]	; (800215c <__NVIC_SetPriority+0x4c>)
 800212a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212e:	0112      	lsls	r2, r2, #4
 8002130:	b2d2      	uxtb	r2, r2
 8002132:	440b      	add	r3, r1
 8002134:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002138:	e00a      	b.n	8002150 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	b2da      	uxtb	r2, r3
 800213e:	4908      	ldr	r1, [pc, #32]	; (8002160 <__NVIC_SetPriority+0x50>)
 8002140:	79fb      	ldrb	r3, [r7, #7]
 8002142:	f003 030f 	and.w	r3, r3, #15
 8002146:	3b04      	subs	r3, #4
 8002148:	0112      	lsls	r2, r2, #4
 800214a:	b2d2      	uxtb	r2, r2
 800214c:	440b      	add	r3, r1
 800214e:	761a      	strb	r2, [r3, #24]
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	e000e100 	.word	0xe000e100
 8002160:	e000ed00 	.word	0xe000ed00

08002164 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002164:	b480      	push	{r7}
 8002166:	b089      	sub	sp, #36	; 0x24
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	f1c3 0307 	rsb	r3, r3, #7
 800217e:	2b04      	cmp	r3, #4
 8002180:	bf28      	it	cs
 8002182:	2304      	movcs	r3, #4
 8002184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	3304      	adds	r3, #4
 800218a:	2b06      	cmp	r3, #6
 800218c:	d902      	bls.n	8002194 <NVIC_EncodePriority+0x30>
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	3b03      	subs	r3, #3
 8002192:	e000      	b.n	8002196 <NVIC_EncodePriority+0x32>
 8002194:	2300      	movs	r3, #0
 8002196:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002198:	f04f 32ff 	mov.w	r2, #4294967295
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	43da      	mvns	r2, r3
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	401a      	ands	r2, r3
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021ac:	f04f 31ff 	mov.w	r1, #4294967295
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	fa01 f303 	lsl.w	r3, r1, r3
 80021b6:	43d9      	mvns	r1, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021bc:	4313      	orrs	r3, r2
         );
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3724      	adds	r7, #36	; 0x24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
	...

080021cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	3b01      	subs	r3, #1
 80021d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021dc:	d301      	bcc.n	80021e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021de:	2301      	movs	r3, #1
 80021e0:	e00f      	b.n	8002202 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021e2:	4a0a      	ldr	r2, [pc, #40]	; (800220c <SysTick_Config+0x40>)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3b01      	subs	r3, #1
 80021e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ea:	210f      	movs	r1, #15
 80021ec:	f04f 30ff 	mov.w	r0, #4294967295
 80021f0:	f7ff ff8e 	bl	8002110 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021f4:	4b05      	ldr	r3, [pc, #20]	; (800220c <SysTick_Config+0x40>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021fa:	4b04      	ldr	r3, [pc, #16]	; (800220c <SysTick_Config+0x40>)
 80021fc:	2207      	movs	r2, #7
 80021fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	e000e010 	.word	0xe000e010

08002210 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f7ff ff29 	bl	8002070 <__NVIC_SetPriorityGrouping>
}
 800221e:	bf00      	nop
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b086      	sub	sp, #24
 800222a:	af00      	add	r7, sp, #0
 800222c:	4603      	mov	r3, r0
 800222e:	60b9      	str	r1, [r7, #8]
 8002230:	607a      	str	r2, [r7, #4]
 8002232:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002234:	f7ff ff40 	bl	80020b8 <__NVIC_GetPriorityGrouping>
 8002238:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	68b9      	ldr	r1, [r7, #8]
 800223e:	6978      	ldr	r0, [r7, #20]
 8002240:	f7ff ff90 	bl	8002164 <NVIC_EncodePriority>
 8002244:	4602      	mov	r2, r0
 8002246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800224a:	4611      	mov	r1, r2
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff ff5f 	bl	8002110 <__NVIC_SetPriority>
}
 8002252:	bf00      	nop
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b082      	sub	sp, #8
 800225e:	af00      	add	r7, sp, #0
 8002260:	4603      	mov	r3, r0
 8002262:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff ff33 	bl	80020d4 <__NVIC_EnableIRQ>
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b082      	sub	sp, #8
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7ff ffa4 	bl	80021cc <SysTick_Config>
 8002284:	4603      	mov	r3, r0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
	...

08002290 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002290:	b480      	push	{r7}
 8002292:	b087      	sub	sp, #28
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800229a:	2300      	movs	r3, #0
 800229c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800229e:	e15a      	b.n	8002556 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	2101      	movs	r1, #1
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	fa01 f303 	lsl.w	r3, r1, r3
 80022ac:	4013      	ands	r3, r2
 80022ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f000 814c 	beq.w	8002550 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 0303 	and.w	r3, r3, #3
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d005      	beq.n	80022d0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d130      	bne.n	8002332 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	2203      	movs	r2, #3
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	43db      	mvns	r3, r3
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	4013      	ands	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	68da      	ldr	r2, [r3, #12]
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002306:	2201      	movs	r2, #1
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	43db      	mvns	r3, r3
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	4013      	ands	r3, r2
 8002314:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	091b      	lsrs	r3, r3, #4
 800231c:	f003 0201 	and.w	r2, r3, #1
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	4313      	orrs	r3, r2
 800232a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f003 0303 	and.w	r3, r3, #3
 800233a:	2b03      	cmp	r3, #3
 800233c:	d017      	beq.n	800236e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	2203      	movs	r2, #3
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	43db      	mvns	r3, r3
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	4013      	ands	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	689a      	ldr	r2, [r3, #8]
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	4313      	orrs	r3, r2
 8002366:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f003 0303 	and.w	r3, r3, #3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d123      	bne.n	80023c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	08da      	lsrs	r2, r3, #3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	3208      	adds	r2, #8
 8002382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002386:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	220f      	movs	r2, #15
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	43db      	mvns	r3, r3
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	4013      	ands	r3, r2
 800239c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	691a      	ldr	r2, [r3, #16]
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	08da      	lsrs	r2, r3, #3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3208      	adds	r2, #8
 80023bc:	6939      	ldr	r1, [r7, #16]
 80023be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	2203      	movs	r2, #3
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	43db      	mvns	r3, r3
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	4013      	ands	r3, r2
 80023d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f003 0203 	and.w	r2, r3, #3
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f000 80a6 	beq.w	8002550 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002404:	4b5b      	ldr	r3, [pc, #364]	; (8002574 <HAL_GPIO_Init+0x2e4>)
 8002406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002408:	4a5a      	ldr	r2, [pc, #360]	; (8002574 <HAL_GPIO_Init+0x2e4>)
 800240a:	f043 0301 	orr.w	r3, r3, #1
 800240e:	6613      	str	r3, [r2, #96]	; 0x60
 8002410:	4b58      	ldr	r3, [pc, #352]	; (8002574 <HAL_GPIO_Init+0x2e4>)
 8002412:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800241c:	4a56      	ldr	r2, [pc, #344]	; (8002578 <HAL_GPIO_Init+0x2e8>)
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	089b      	lsrs	r3, r3, #2
 8002422:	3302      	adds	r3, #2
 8002424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002428:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	f003 0303 	and.w	r3, r3, #3
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	220f      	movs	r2, #15
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	43db      	mvns	r3, r3
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	4013      	ands	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002446:	d01f      	beq.n	8002488 <HAL_GPIO_Init+0x1f8>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a4c      	ldr	r2, [pc, #304]	; (800257c <HAL_GPIO_Init+0x2ec>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d019      	beq.n	8002484 <HAL_GPIO_Init+0x1f4>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a4b      	ldr	r2, [pc, #300]	; (8002580 <HAL_GPIO_Init+0x2f0>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d013      	beq.n	8002480 <HAL_GPIO_Init+0x1f0>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a4a      	ldr	r2, [pc, #296]	; (8002584 <HAL_GPIO_Init+0x2f4>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d00d      	beq.n	800247c <HAL_GPIO_Init+0x1ec>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a49      	ldr	r2, [pc, #292]	; (8002588 <HAL_GPIO_Init+0x2f8>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d007      	beq.n	8002478 <HAL_GPIO_Init+0x1e8>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a48      	ldr	r2, [pc, #288]	; (800258c <HAL_GPIO_Init+0x2fc>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d101      	bne.n	8002474 <HAL_GPIO_Init+0x1e4>
 8002470:	2305      	movs	r3, #5
 8002472:	e00a      	b.n	800248a <HAL_GPIO_Init+0x1fa>
 8002474:	2306      	movs	r3, #6
 8002476:	e008      	b.n	800248a <HAL_GPIO_Init+0x1fa>
 8002478:	2304      	movs	r3, #4
 800247a:	e006      	b.n	800248a <HAL_GPIO_Init+0x1fa>
 800247c:	2303      	movs	r3, #3
 800247e:	e004      	b.n	800248a <HAL_GPIO_Init+0x1fa>
 8002480:	2302      	movs	r3, #2
 8002482:	e002      	b.n	800248a <HAL_GPIO_Init+0x1fa>
 8002484:	2301      	movs	r3, #1
 8002486:	e000      	b.n	800248a <HAL_GPIO_Init+0x1fa>
 8002488:	2300      	movs	r3, #0
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	f002 0203 	and.w	r2, r2, #3
 8002490:	0092      	lsls	r2, r2, #2
 8002492:	4093      	lsls	r3, r2
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	4313      	orrs	r3, r2
 8002498:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800249a:	4937      	ldr	r1, [pc, #220]	; (8002578 <HAL_GPIO_Init+0x2e8>)
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	089b      	lsrs	r3, r3, #2
 80024a0:	3302      	adds	r3, #2
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024a8:	4b39      	ldr	r3, [pc, #228]	; (8002590 <HAL_GPIO_Init+0x300>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	43db      	mvns	r3, r3
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	4013      	ands	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d003      	beq.n	80024cc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024cc:	4a30      	ldr	r2, [pc, #192]	; (8002590 <HAL_GPIO_Init+0x300>)
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80024d2:	4b2f      	ldr	r3, [pc, #188]	; (8002590 <HAL_GPIO_Init+0x300>)
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	43db      	mvns	r3, r3
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	4013      	ands	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024f6:	4a26      	ldr	r2, [pc, #152]	; (8002590 <HAL_GPIO_Init+0x300>)
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80024fc:	4b24      	ldr	r3, [pc, #144]	; (8002590 <HAL_GPIO_Init+0x300>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	43db      	mvns	r3, r3
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	4013      	ands	r3, r2
 800250a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d003      	beq.n	8002520 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	4313      	orrs	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002520:	4a1b      	ldr	r2, [pc, #108]	; (8002590 <HAL_GPIO_Init+0x300>)
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002526:	4b1a      	ldr	r3, [pc, #104]	; (8002590 <HAL_GPIO_Init+0x300>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	43db      	mvns	r3, r3
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	4013      	ands	r3, r2
 8002534:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	4313      	orrs	r3, r2
 8002548:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800254a:	4a11      	ldr	r2, [pc, #68]	; (8002590 <HAL_GPIO_Init+0x300>)
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	3301      	adds	r3, #1
 8002554:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	fa22 f303 	lsr.w	r3, r2, r3
 8002560:	2b00      	cmp	r3, #0
 8002562:	f47f ae9d 	bne.w	80022a0 <HAL_GPIO_Init+0x10>
  }
}
 8002566:	bf00      	nop
 8002568:	bf00      	nop
 800256a:	371c      	adds	r7, #28
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	40021000 	.word	0x40021000
 8002578:	40010000 	.word	0x40010000
 800257c:	48000400 	.word	0x48000400
 8002580:	48000800 	.word	0x48000800
 8002584:	48000c00 	.word	0x48000c00
 8002588:	48001000 	.word	0x48001000
 800258c:	48001400 	.word	0x48001400
 8002590:	40010400 	.word	0x40010400

08002594 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	807b      	strh	r3, [r7, #2]
 80025a0:	4613      	mov	r3, r2
 80025a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025a4:	787b      	ldrb	r3, [r7, #1]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025aa:	887a      	ldrh	r2, [r7, #2]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025b0:	e002      	b.n	80025b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025b2:	887a      	ldrh	r2, [r7, #2]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e081      	b.n	80026da <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d106      	bne.n	80025f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7ff f874 	bl	80016d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2224      	movs	r2, #36	; 0x24
 80025f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 0201 	bic.w	r2, r2, #1
 8002606:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685a      	ldr	r2, [r3, #4]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002614:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002624:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d107      	bne.n	800263e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800263a:	609a      	str	r2, [r3, #8]
 800263c:	e006      	b.n	800264c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689a      	ldr	r2, [r3, #8]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800264a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	2b02      	cmp	r3, #2
 8002652:	d104      	bne.n	800265e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800265c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6812      	ldr	r2, [r2, #0]
 8002668:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800266c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002670:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68da      	ldr	r2, [r3, #12]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002680:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	691a      	ldr	r2, [r3, #16]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	430a      	orrs	r2, r1
 800269a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	69d9      	ldr	r1, [r3, #28]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a1a      	ldr	r2, [r3, #32]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	430a      	orrs	r2, r1
 80026aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 0201 	orr.w	r2, r2, #1
 80026ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2220      	movs	r2, #32
 80026c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
	...

080026e4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b088      	sub	sp, #32
 80026e8:	af02      	add	r7, sp, #8
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	607a      	str	r2, [r7, #4]
 80026ee:	461a      	mov	r2, r3
 80026f0:	460b      	mov	r3, r1
 80026f2:	817b      	strh	r3, [r7, #10]
 80026f4:	4613      	mov	r3, r2
 80026f6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2b20      	cmp	r3, #32
 8002702:	f040 80da 	bne.w	80028ba <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800270c:	2b01      	cmp	r3, #1
 800270e:	d101      	bne.n	8002714 <HAL_I2C_Master_Transmit+0x30>
 8002710:	2302      	movs	r3, #2
 8002712:	e0d3      	b.n	80028bc <HAL_I2C_Master_Transmit+0x1d8>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800271c:	f7ff fc7a 	bl	8002014 <HAL_GetTick>
 8002720:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	2319      	movs	r3, #25
 8002728:	2201      	movs	r2, #1
 800272a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f000 f8f0 	bl	8002914 <I2C_WaitOnFlagUntilTimeout>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e0be      	b.n	80028bc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2221      	movs	r2, #33	; 0x21
 8002742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2210      	movs	r2, #16
 800274a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	893a      	ldrh	r2, [r7, #8]
 800275e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800276a:	b29b      	uxth	r3, r3
 800276c:	2bff      	cmp	r3, #255	; 0xff
 800276e:	d90e      	bls.n	800278e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	22ff      	movs	r2, #255	; 0xff
 8002774:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277a:	b2da      	uxtb	r2, r3
 800277c:	8979      	ldrh	r1, [r7, #10]
 800277e:	4b51      	ldr	r3, [pc, #324]	; (80028c4 <HAL_I2C_Master_Transmit+0x1e0>)
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f000 fa6c 	bl	8002c64 <I2C_TransferConfig>
 800278c:	e06c      	b.n	8002868 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002792:	b29a      	uxth	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800279c:	b2da      	uxtb	r2, r3
 800279e:	8979      	ldrh	r1, [r7, #10]
 80027a0:	4b48      	ldr	r3, [pc, #288]	; (80028c4 <HAL_I2C_Master_Transmit+0x1e0>)
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f000 fa5b 	bl	8002c64 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80027ae:	e05b      	b.n	8002868 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	6a39      	ldr	r1, [r7, #32]
 80027b4:	68f8      	ldr	r0, [r7, #12]
 80027b6:	f000 f8ed 	bl	8002994 <I2C_WaitOnTXISFlagUntilTimeout>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e07b      	b.n	80028bc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c8:	781a      	ldrb	r2, [r3, #0]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d4:	1c5a      	adds	r2, r3, #1
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027de:	b29b      	uxth	r3, r3
 80027e0:	3b01      	subs	r3, #1
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ec:	3b01      	subs	r3, #1
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d034      	beq.n	8002868 <HAL_I2C_Master_Transmit+0x184>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002802:	2b00      	cmp	r3, #0
 8002804:	d130      	bne.n	8002868 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	6a3b      	ldr	r3, [r7, #32]
 800280c:	2200      	movs	r2, #0
 800280e:	2180      	movs	r1, #128	; 0x80
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f000 f87f 	bl	8002914 <I2C_WaitOnFlagUntilTimeout>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e04d      	b.n	80028bc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002824:	b29b      	uxth	r3, r3
 8002826:	2bff      	cmp	r3, #255	; 0xff
 8002828:	d90e      	bls.n	8002848 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	22ff      	movs	r2, #255	; 0xff
 800282e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002834:	b2da      	uxtb	r2, r3
 8002836:	8979      	ldrh	r1, [r7, #10]
 8002838:	2300      	movs	r3, #0
 800283a:	9300      	str	r3, [sp, #0]
 800283c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f000 fa0f 	bl	8002c64 <I2C_TransferConfig>
 8002846:	e00f      	b.n	8002868 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800284c:	b29a      	uxth	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002856:	b2da      	uxtb	r2, r3
 8002858:	8979      	ldrh	r1, [r7, #10]
 800285a:	2300      	movs	r3, #0
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f000 f9fe 	bl	8002c64 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800286c:	b29b      	uxth	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d19e      	bne.n	80027b0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	6a39      	ldr	r1, [r7, #32]
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f000 f8cc 	bl	8002a14 <I2C_WaitOnSTOPFlagUntilTimeout>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e01a      	b.n	80028bc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2220      	movs	r2, #32
 800288c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6859      	ldr	r1, [r3, #4]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <HAL_I2C_Master_Transmit+0x1e4>)
 800289a:	400b      	ands	r3, r1
 800289c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2220      	movs	r2, #32
 80028a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028b6:	2300      	movs	r3, #0
 80028b8:	e000      	b.n	80028bc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80028ba:	2302      	movs	r3, #2
  }
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3718      	adds	r7, #24
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	80002000 	.word	0x80002000
 80028c8:	fe00e800 	.word	0xfe00e800

080028cc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d103      	bne.n	80028ea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2200      	movs	r2, #0
 80028e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d007      	beq.n	8002908 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	699a      	ldr	r2, [r3, #24]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f042 0201 	orr.w	r2, r2, #1
 8002906:	619a      	str	r2, [r3, #24]
  }
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	603b      	str	r3, [r7, #0]
 8002920:	4613      	mov	r3, r2
 8002922:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002924:	e022      	b.n	800296c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800292c:	d01e      	beq.n	800296c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800292e:	f7ff fb71 	bl	8002014 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	429a      	cmp	r2, r3
 800293c:	d302      	bcc.n	8002944 <I2C_WaitOnFlagUntilTimeout+0x30>
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d113      	bne.n	800296c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002948:	f043 0220 	orr.w	r2, r3, #32
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2220      	movs	r2, #32
 8002954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e00f      	b.n	800298c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	699a      	ldr	r2, [r3, #24]
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	4013      	ands	r3, r2
 8002976:	68ba      	ldr	r2, [r7, #8]
 8002978:	429a      	cmp	r2, r3
 800297a:	bf0c      	ite	eq
 800297c:	2301      	moveq	r3, #1
 800297e:	2300      	movne	r3, #0
 8002980:	b2db      	uxtb	r3, r3
 8002982:	461a      	mov	r2, r3
 8002984:	79fb      	ldrb	r3, [r7, #7]
 8002986:	429a      	cmp	r2, r3
 8002988:	d0cd      	beq.n	8002926 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029a0:	e02c      	b.n	80029fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	68b9      	ldr	r1, [r7, #8]
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f000 f870 	bl	8002a8c <I2C_IsErrorOccurred>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e02a      	b.n	8002a0c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029bc:	d01e      	beq.n	80029fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029be:	f7ff fb29 	bl	8002014 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	68ba      	ldr	r2, [r7, #8]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d302      	bcc.n	80029d4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d113      	bne.n	80029fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d8:	f043 0220 	orr.w	r2, r3, #32
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2220      	movs	r2, #32
 80029e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e007      	b.n	8002a0c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d1cb      	bne.n	80029a2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a20:	e028      	b.n	8002a74 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	68b9      	ldr	r1, [r7, #8]
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f000 f830 	bl	8002a8c <I2C_IsErrorOccurred>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e026      	b.n	8002a84 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a36:	f7ff faed 	bl	8002014 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	68ba      	ldr	r2, [r7, #8]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d302      	bcc.n	8002a4c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d113      	bne.n	8002a74 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a50:	f043 0220 	orr.w	r2, r3, #32
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e007      	b.n	8002a84 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	f003 0320 	and.w	r3, r3, #32
 8002a7e:	2b20      	cmp	r3, #32
 8002a80:	d1cf      	bne.n	8002a22 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b08a      	sub	sp, #40	; 0x28
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	f003 0310 	and.w	r3, r3, #16
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d075      	beq.n	8002ba4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2210      	movs	r2, #16
 8002abe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ac0:	e056      	b.n	8002b70 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac8:	d052      	beq.n	8002b70 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002aca:	f7ff faa3 	bl	8002014 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	68ba      	ldr	r2, [r7, #8]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d302      	bcc.n	8002ae0 <I2C_IsErrorOccurred+0x54>
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d147      	bne.n	8002b70 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002af2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002afe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b02:	d12e      	bne.n	8002b62 <I2C_IsErrorOccurred+0xd6>
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b0a:	d02a      	beq.n	8002b62 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002b0c:	7cfb      	ldrb	r3, [r7, #19]
 8002b0e:	2b20      	cmp	r3, #32
 8002b10:	d027      	beq.n	8002b62 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b20:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002b22:	f7ff fa77 	bl	8002014 <HAL_GetTick>
 8002b26:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b28:	e01b      	b.n	8002b62 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002b2a:	f7ff fa73 	bl	8002014 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b19      	cmp	r3, #25
 8002b36:	d914      	bls.n	8002b62 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3c:	f043 0220 	orr.w	r2, r3, #32
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2220      	movs	r2, #32
 8002b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	f003 0320 	and.w	r3, r3, #32
 8002b6c:	2b20      	cmp	r3, #32
 8002b6e:	d1dc      	bne.n	8002b2a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	f003 0320 	and.w	r3, r3, #32
 8002b7a:	2b20      	cmp	r3, #32
 8002b7c:	d003      	beq.n	8002b86 <I2C_IsErrorOccurred+0xfa>
 8002b7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d09d      	beq.n	8002ac2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002b86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d103      	bne.n	8002b96 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2220      	movs	r2, #32
 8002b94:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002b96:	6a3b      	ldr	r3, [r7, #32]
 8002b98:	f043 0304 	orr.w	r3, r3, #4
 8002b9c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00b      	beq.n	8002bce <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002bb6:	6a3b      	ldr	r3, [r7, #32]
 8002bb8:	f043 0301 	orr.w	r3, r3, #1
 8002bbc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bc6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00b      	beq.n	8002bf0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002bd8:	6a3b      	ldr	r3, [r7, #32]
 8002bda:	f043 0308 	orr.w	r3, r3, #8
 8002bde:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002be8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00b      	beq.n	8002c12 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002bfa:	6a3b      	ldr	r3, [r7, #32]
 8002bfc:	f043 0302 	orr.w	r3, r3, #2
 8002c00:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c0a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002c12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d01c      	beq.n	8002c54 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f7ff fe56 	bl	80028cc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6859      	ldr	r1, [r3, #4]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	4b0d      	ldr	r3, [pc, #52]	; (8002c60 <I2C_IsErrorOccurred+0x1d4>)
 8002c2c:	400b      	ands	r3, r1
 8002c2e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c34:	6a3b      	ldr	r3, [r7, #32]
 8002c36:	431a      	orrs	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2220      	movs	r2, #32
 8002c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002c54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3728      	adds	r7, #40	; 0x28
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	fe00e800 	.word	0xfe00e800

08002c64 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b087      	sub	sp, #28
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	607b      	str	r3, [r7, #4]
 8002c6e:	460b      	mov	r3, r1
 8002c70:	817b      	strh	r3, [r7, #10]
 8002c72:	4613      	mov	r3, r2
 8002c74:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c76:	897b      	ldrh	r3, [r7, #10]
 8002c78:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c7c:	7a7b      	ldrb	r3, [r7, #9]
 8002c7e:	041b      	lsls	r3, r3, #16
 8002c80:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c84:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c8a:	6a3b      	ldr	r3, [r7, #32]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c92:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	6a3b      	ldr	r3, [r7, #32]
 8002c9c:	0d5b      	lsrs	r3, r3, #21
 8002c9e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002ca2:	4b08      	ldr	r3, [pc, #32]	; (8002cc4 <I2C_TransferConfig+0x60>)
 8002ca4:	430b      	orrs	r3, r1
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	ea02 0103 	and.w	r1, r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002cb6:	bf00      	nop
 8002cb8:	371c      	adds	r7, #28
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	03ff63ff 	.word	0x03ff63ff

08002cc8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b20      	cmp	r3, #32
 8002cdc:	d138      	bne.n	8002d50 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d101      	bne.n	8002cec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ce8:	2302      	movs	r3, #2
 8002cea:	e032      	b.n	8002d52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2224      	movs	r2, #36	; 0x24
 8002cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 0201 	bic.w	r2, r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d1a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6819      	ldr	r1, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f042 0201 	orr.w	r2, r2, #1
 8002d3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2220      	movs	r2, #32
 8002d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	e000      	b.n	8002d52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d50:	2302      	movs	r3, #2
  }
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b085      	sub	sp, #20
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
 8002d66:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b20      	cmp	r3, #32
 8002d72:	d139      	bne.n	8002de8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d101      	bne.n	8002d82 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002d7e:	2302      	movs	r3, #2
 8002d80:	e033      	b.n	8002dea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2224      	movs	r2, #36	; 0x24
 8002d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f022 0201 	bic.w	r2, r2, #1
 8002da0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002db0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	021b      	lsls	r3, r3, #8
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f042 0201 	orr.w	r2, r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002de4:	2300      	movs	r3, #0
 8002de6:	e000      	b.n	8002dea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002de8:	2302      	movs	r3, #2
  }
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3714      	adds	r7, #20
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
	...

08002df8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d141      	bne.n	8002e8a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e06:	4b4b      	ldr	r3, [pc, #300]	; (8002f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e12:	d131      	bne.n	8002e78 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e14:	4b47      	ldr	r3, [pc, #284]	; (8002f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e1a:	4a46      	ldr	r2, [pc, #280]	; (8002f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e24:	4b43      	ldr	r3, [pc, #268]	; (8002f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e2c:	4a41      	ldr	r2, [pc, #260]	; (8002f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e32:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e34:	4b40      	ldr	r3, [pc, #256]	; (8002f38 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2232      	movs	r2, #50	; 0x32
 8002e3a:	fb02 f303 	mul.w	r3, r2, r3
 8002e3e:	4a3f      	ldr	r2, [pc, #252]	; (8002f3c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e40:	fba2 2303 	umull	r2, r3, r2, r3
 8002e44:	0c9b      	lsrs	r3, r3, #18
 8002e46:	3301      	adds	r3, #1
 8002e48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e4a:	e002      	b.n	8002e52 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e52:	4b38      	ldr	r3, [pc, #224]	; (8002f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e5e:	d102      	bne.n	8002e66 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1f2      	bne.n	8002e4c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e66:	4b33      	ldr	r3, [pc, #204]	; (8002f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e72:	d158      	bne.n	8002f26 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e057      	b.n	8002f28 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e78:	4b2e      	ldr	r3, [pc, #184]	; (8002f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e7e:	4a2d      	ldr	r2, [pc, #180]	; (8002f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002e88:	e04d      	b.n	8002f26 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e90:	d141      	bne.n	8002f16 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e92:	4b28      	ldr	r3, [pc, #160]	; (8002f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e9e:	d131      	bne.n	8002f04 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ea0:	4b24      	ldr	r3, [pc, #144]	; (8002f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ea2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ea6:	4a23      	ldr	r2, [pc, #140]	; (8002f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002eb0:	4b20      	ldr	r3, [pc, #128]	; (8002f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002eb8:	4a1e      	ldr	r2, [pc, #120]	; (8002f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ebe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ec0:	4b1d      	ldr	r3, [pc, #116]	; (8002f38 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2232      	movs	r2, #50	; 0x32
 8002ec6:	fb02 f303 	mul.w	r3, r2, r3
 8002eca:	4a1c      	ldr	r2, [pc, #112]	; (8002f3c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed0:	0c9b      	lsrs	r3, r3, #18
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ed6:	e002      	b.n	8002ede <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	3b01      	subs	r3, #1
 8002edc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ede:	4b15      	ldr	r3, [pc, #84]	; (8002f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ee6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eea:	d102      	bne.n	8002ef2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1f2      	bne.n	8002ed8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ef2:	4b10      	ldr	r3, [pc, #64]	; (8002f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002efa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002efe:	d112      	bne.n	8002f26 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e011      	b.n	8002f28 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f04:	4b0b      	ldr	r3, [pc, #44]	; (8002f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f0a:	4a0a      	ldr	r2, [pc, #40]	; (8002f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f10:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002f14:	e007      	b.n	8002f26 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f16:	4b07      	ldr	r3, [pc, #28]	; (8002f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f1e:	4a05      	ldr	r2, [pc, #20]	; (8002f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f20:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f24:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3714      	adds	r7, #20
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr
 8002f34:	40007000 	.word	0x40007000
 8002f38:	20000000 	.word	0x20000000
 8002f3c:	431bde83 	.word	0x431bde83

08002f40 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002f44:	4b05      	ldr	r3, [pc, #20]	; (8002f5c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	4a04      	ldr	r2, [pc, #16]	; (8002f5c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002f4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f4e:	6093      	str	r3, [r2, #8]
}
 8002f50:	bf00      	nop
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	40007000 	.word	0x40007000

08002f60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b088      	sub	sp, #32
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e306      	b.n	8003580 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d075      	beq.n	800306a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f7e:	4b97      	ldr	r3, [pc, #604]	; (80031dc <HAL_RCC_OscConfig+0x27c>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 030c 	and.w	r3, r3, #12
 8002f86:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f88:	4b94      	ldr	r3, [pc, #592]	; (80031dc <HAL_RCC_OscConfig+0x27c>)
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f003 0303 	and.w	r3, r3, #3
 8002f90:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	2b0c      	cmp	r3, #12
 8002f96:	d102      	bne.n	8002f9e <HAL_RCC_OscConfig+0x3e>
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	2b03      	cmp	r3, #3
 8002f9c:	d002      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x44>
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	2b08      	cmp	r3, #8
 8002fa2:	d10b      	bne.n	8002fbc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fa4:	4b8d      	ldr	r3, [pc, #564]	; (80031dc <HAL_RCC_OscConfig+0x27c>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d05b      	beq.n	8003068 <HAL_RCC_OscConfig+0x108>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d157      	bne.n	8003068 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e2e1      	b.n	8003580 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fc4:	d106      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x74>
 8002fc6:	4b85      	ldr	r3, [pc, #532]	; (80031dc <HAL_RCC_OscConfig+0x27c>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a84      	ldr	r2, [pc, #528]	; (80031dc <HAL_RCC_OscConfig+0x27c>)
 8002fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fd0:	6013      	str	r3, [r2, #0]
 8002fd2:	e01d      	b.n	8003010 <HAL_RCC_OscConfig+0xb0>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fdc:	d10c      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x98>
 8002fde:	4b7f      	ldr	r3, [pc, #508]	; (80031dc <HAL_RCC_OscConfig+0x27c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a7e      	ldr	r2, [pc, #504]	; (80031dc <HAL_RCC_OscConfig+0x27c>)
 8002fe4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fe8:	6013      	str	r3, [r2, #0]
 8002fea:	4b7c      	ldr	r3, [pc, #496]	; (80031dc <HAL_RCC_OscConfig+0x27c>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a7b      	ldr	r2, [pc, #492]	; (80031dc <HAL_RCC_OscConfig+0x27c>)
 8002ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff4:	6013      	str	r3, [r2, #0]
 8002ff6:	e00b      	b.n	8003010 <HAL_RCC_OscConfig+0xb0>
 8002ff8:	4b78      	ldr	r3, [pc, #480]	; (80031dc <HAL_RCC_OscConfig+0x27c>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a77      	ldr	r2, [pc, #476]	; (80031dc <HAL_RCC_OscConfig+0x27c>)
 8002ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003002:	6013      	str	r3, [r2, #0]
 8003004:	4b75      	ldr	r3, [pc, #468]	; (80031dc <HAL_RCC_OscConfig+0x27c>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a74      	ldr	r2, [pc, #464]	; (80031dc <HAL_RCC_OscConfig+0x27c>)
 800300a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800300e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d013      	beq.n	8003040 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003018:	f7fe fffc 	bl	8002014 <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800301e:	e008      	b.n	8003032 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003020:	f7fe fff8 	bl	8002014 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b64      	cmp	r3, #100	; 0x64
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e2a6      	b.n	8003580 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003032:	4b6a      	ldr	r3, [pc, #424]	; (80031dc <HAL_RCC_OscConfig+0x27c>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d0f0      	beq.n	8003020 <HAL_RCC_OscConfig+0xc0>
 800303e:	e014      	b.n	800306a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003040:	f7fe ffe8 	bl	8002014 <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003048:	f7fe ffe4 	bl	8002014 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b64      	cmp	r3, #100	; 0x64
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e292      	b.n	8003580 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800305a:	4b60      	ldr	r3, [pc, #384]	; (80031dc <HAL_RCC_OscConfig+0x27c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1f0      	bne.n	8003048 <HAL_RCC_OscConfig+0xe8>
 8003066:	e000      	b.n	800306a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003068:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d075      	beq.n	8003162 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003076:	4b59      	ldr	r3, [pc, #356]	; (80031dc <HAL_RCC_OscConfig+0x27c>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 030c 	and.w	r3, r3, #12
 800307e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003080:	4b56      	ldr	r3, [pc, #344]	; (80031dc <HAL_RCC_OscConfig+0x27c>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	f003 0303 	and.w	r3, r3, #3
 8003088:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	2b0c      	cmp	r3, #12
 800308e:	d102      	bne.n	8003096 <HAL_RCC_OscConfig+0x136>
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	2b02      	cmp	r3, #2
 8003094:	d002      	beq.n	800309c <HAL_RCC_OscConfig+0x13c>
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	2b04      	cmp	r3, #4
 800309a:	d11f      	bne.n	80030dc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800309c:	4b4f      	ldr	r3, [pc, #316]	; (80031dc <HAL_RCC_OscConfig+0x27c>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d005      	beq.n	80030b4 <HAL_RCC_OscConfig+0x154>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e265      	b.n	8003580 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030b4:	4b49      	ldr	r3, [pc, #292]	; (80031dc <HAL_RCC_OscConfig+0x27c>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	061b      	lsls	r3, r3, #24
 80030c2:	4946      	ldr	r1, [pc, #280]	; (80031dc <HAL_RCC_OscConfig+0x27c>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80030c8:	4b45      	ldr	r3, [pc, #276]	; (80031e0 <HAL_RCC_OscConfig+0x280>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7fe ff55 	bl	8001f7c <HAL_InitTick>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d043      	beq.n	8003160 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e251      	b.n	8003580 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d023      	beq.n	800312c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030e4:	4b3d      	ldr	r3, [pc, #244]	; (80031dc <HAL_RCC_OscConfig+0x27c>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a3c      	ldr	r2, [pc, #240]	; (80031dc <HAL_RCC_OscConfig+0x27c>)
 80030ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f0:	f7fe ff90 	bl	8002014 <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030f8:	f7fe ff8c 	bl	8002014 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e23a      	b.n	8003580 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800310a:	4b34      	ldr	r3, [pc, #208]	; (80031dc <HAL_RCC_OscConfig+0x27c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003112:	2b00      	cmp	r3, #0
 8003114:	d0f0      	beq.n	80030f8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003116:	4b31      	ldr	r3, [pc, #196]	; (80031dc <HAL_RCC_OscConfig+0x27c>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	061b      	lsls	r3, r3, #24
 8003124:	492d      	ldr	r1, [pc, #180]	; (80031dc <HAL_RCC_OscConfig+0x27c>)
 8003126:	4313      	orrs	r3, r2
 8003128:	604b      	str	r3, [r1, #4]
 800312a:	e01a      	b.n	8003162 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800312c:	4b2b      	ldr	r3, [pc, #172]	; (80031dc <HAL_RCC_OscConfig+0x27c>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a2a      	ldr	r2, [pc, #168]	; (80031dc <HAL_RCC_OscConfig+0x27c>)
 8003132:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003136:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003138:	f7fe ff6c 	bl	8002014 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003140:	f7fe ff68 	bl	8002014 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e216      	b.n	8003580 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003152:	4b22      	ldr	r3, [pc, #136]	; (80031dc <HAL_RCC_OscConfig+0x27c>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1f0      	bne.n	8003140 <HAL_RCC_OscConfig+0x1e0>
 800315e:	e000      	b.n	8003162 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003160:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0308 	and.w	r3, r3, #8
 800316a:	2b00      	cmp	r3, #0
 800316c:	d041      	beq.n	80031f2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d01c      	beq.n	80031b0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003176:	4b19      	ldr	r3, [pc, #100]	; (80031dc <HAL_RCC_OscConfig+0x27c>)
 8003178:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800317c:	4a17      	ldr	r2, [pc, #92]	; (80031dc <HAL_RCC_OscConfig+0x27c>)
 800317e:	f043 0301 	orr.w	r3, r3, #1
 8003182:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003186:	f7fe ff45 	bl	8002014 <HAL_GetTick>
 800318a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800318c:	e008      	b.n	80031a0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800318e:	f7fe ff41 	bl	8002014 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e1ef      	b.n	8003580 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031a0:	4b0e      	ldr	r3, [pc, #56]	; (80031dc <HAL_RCC_OscConfig+0x27c>)
 80031a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d0ef      	beq.n	800318e <HAL_RCC_OscConfig+0x22e>
 80031ae:	e020      	b.n	80031f2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031b0:	4b0a      	ldr	r3, [pc, #40]	; (80031dc <HAL_RCC_OscConfig+0x27c>)
 80031b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031b6:	4a09      	ldr	r2, [pc, #36]	; (80031dc <HAL_RCC_OscConfig+0x27c>)
 80031b8:	f023 0301 	bic.w	r3, r3, #1
 80031bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c0:	f7fe ff28 	bl	8002014 <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031c6:	e00d      	b.n	80031e4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031c8:	f7fe ff24 	bl	8002014 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d906      	bls.n	80031e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e1d2      	b.n	8003580 <HAL_RCC_OscConfig+0x620>
 80031da:	bf00      	nop
 80031dc:	40021000 	.word	0x40021000
 80031e0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031e4:	4b8c      	ldr	r3, [pc, #560]	; (8003418 <HAL_RCC_OscConfig+0x4b8>)
 80031e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1ea      	bne.n	80031c8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0304 	and.w	r3, r3, #4
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f000 80a6 	beq.w	800334c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003200:	2300      	movs	r3, #0
 8003202:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003204:	4b84      	ldr	r3, [pc, #528]	; (8003418 <HAL_RCC_OscConfig+0x4b8>)
 8003206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d101      	bne.n	8003214 <HAL_RCC_OscConfig+0x2b4>
 8003210:	2301      	movs	r3, #1
 8003212:	e000      	b.n	8003216 <HAL_RCC_OscConfig+0x2b6>
 8003214:	2300      	movs	r3, #0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00d      	beq.n	8003236 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800321a:	4b7f      	ldr	r3, [pc, #508]	; (8003418 <HAL_RCC_OscConfig+0x4b8>)
 800321c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321e:	4a7e      	ldr	r2, [pc, #504]	; (8003418 <HAL_RCC_OscConfig+0x4b8>)
 8003220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003224:	6593      	str	r3, [r2, #88]	; 0x58
 8003226:	4b7c      	ldr	r3, [pc, #496]	; (8003418 <HAL_RCC_OscConfig+0x4b8>)
 8003228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800322a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800322e:	60fb      	str	r3, [r7, #12]
 8003230:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003232:	2301      	movs	r3, #1
 8003234:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003236:	4b79      	ldr	r3, [pc, #484]	; (800341c <HAL_RCC_OscConfig+0x4bc>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323e:	2b00      	cmp	r3, #0
 8003240:	d118      	bne.n	8003274 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003242:	4b76      	ldr	r3, [pc, #472]	; (800341c <HAL_RCC_OscConfig+0x4bc>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a75      	ldr	r2, [pc, #468]	; (800341c <HAL_RCC_OscConfig+0x4bc>)
 8003248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800324c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800324e:	f7fe fee1 	bl	8002014 <HAL_GetTick>
 8003252:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003254:	e008      	b.n	8003268 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003256:	f7fe fedd 	bl	8002014 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e18b      	b.n	8003580 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003268:	4b6c      	ldr	r3, [pc, #432]	; (800341c <HAL_RCC_OscConfig+0x4bc>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003270:	2b00      	cmp	r3, #0
 8003272:	d0f0      	beq.n	8003256 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d108      	bne.n	800328e <HAL_RCC_OscConfig+0x32e>
 800327c:	4b66      	ldr	r3, [pc, #408]	; (8003418 <HAL_RCC_OscConfig+0x4b8>)
 800327e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003282:	4a65      	ldr	r2, [pc, #404]	; (8003418 <HAL_RCC_OscConfig+0x4b8>)
 8003284:	f043 0301 	orr.w	r3, r3, #1
 8003288:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800328c:	e024      	b.n	80032d8 <HAL_RCC_OscConfig+0x378>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	2b05      	cmp	r3, #5
 8003294:	d110      	bne.n	80032b8 <HAL_RCC_OscConfig+0x358>
 8003296:	4b60      	ldr	r3, [pc, #384]	; (8003418 <HAL_RCC_OscConfig+0x4b8>)
 8003298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329c:	4a5e      	ldr	r2, [pc, #376]	; (8003418 <HAL_RCC_OscConfig+0x4b8>)
 800329e:	f043 0304 	orr.w	r3, r3, #4
 80032a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032a6:	4b5c      	ldr	r3, [pc, #368]	; (8003418 <HAL_RCC_OscConfig+0x4b8>)
 80032a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ac:	4a5a      	ldr	r2, [pc, #360]	; (8003418 <HAL_RCC_OscConfig+0x4b8>)
 80032ae:	f043 0301 	orr.w	r3, r3, #1
 80032b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032b6:	e00f      	b.n	80032d8 <HAL_RCC_OscConfig+0x378>
 80032b8:	4b57      	ldr	r3, [pc, #348]	; (8003418 <HAL_RCC_OscConfig+0x4b8>)
 80032ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032be:	4a56      	ldr	r2, [pc, #344]	; (8003418 <HAL_RCC_OscConfig+0x4b8>)
 80032c0:	f023 0301 	bic.w	r3, r3, #1
 80032c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032c8:	4b53      	ldr	r3, [pc, #332]	; (8003418 <HAL_RCC_OscConfig+0x4b8>)
 80032ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ce:	4a52      	ldr	r2, [pc, #328]	; (8003418 <HAL_RCC_OscConfig+0x4b8>)
 80032d0:	f023 0304 	bic.w	r3, r3, #4
 80032d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d016      	beq.n	800330e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e0:	f7fe fe98 	bl	8002014 <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032e6:	e00a      	b.n	80032fe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032e8:	f7fe fe94 	bl	8002014 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e140      	b.n	8003580 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032fe:	4b46      	ldr	r3, [pc, #280]	; (8003418 <HAL_RCC_OscConfig+0x4b8>)
 8003300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d0ed      	beq.n	80032e8 <HAL_RCC_OscConfig+0x388>
 800330c:	e015      	b.n	800333a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800330e:	f7fe fe81 	bl	8002014 <HAL_GetTick>
 8003312:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003314:	e00a      	b.n	800332c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003316:	f7fe fe7d 	bl	8002014 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	f241 3288 	movw	r2, #5000	; 0x1388
 8003324:	4293      	cmp	r3, r2
 8003326:	d901      	bls.n	800332c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e129      	b.n	8003580 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800332c:	4b3a      	ldr	r3, [pc, #232]	; (8003418 <HAL_RCC_OscConfig+0x4b8>)
 800332e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1ed      	bne.n	8003316 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800333a:	7ffb      	ldrb	r3, [r7, #31]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d105      	bne.n	800334c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003340:	4b35      	ldr	r3, [pc, #212]	; (8003418 <HAL_RCC_OscConfig+0x4b8>)
 8003342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003344:	4a34      	ldr	r2, [pc, #208]	; (8003418 <HAL_RCC_OscConfig+0x4b8>)
 8003346:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800334a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0320 	and.w	r3, r3, #32
 8003354:	2b00      	cmp	r3, #0
 8003356:	d03c      	beq.n	80033d2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d01c      	beq.n	800339a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003360:	4b2d      	ldr	r3, [pc, #180]	; (8003418 <HAL_RCC_OscConfig+0x4b8>)
 8003362:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003366:	4a2c      	ldr	r2, [pc, #176]	; (8003418 <HAL_RCC_OscConfig+0x4b8>)
 8003368:	f043 0301 	orr.w	r3, r3, #1
 800336c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003370:	f7fe fe50 	bl	8002014 <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003376:	e008      	b.n	800338a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003378:	f7fe fe4c 	bl	8002014 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e0fa      	b.n	8003580 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800338a:	4b23      	ldr	r3, [pc, #140]	; (8003418 <HAL_RCC_OscConfig+0x4b8>)
 800338c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d0ef      	beq.n	8003378 <HAL_RCC_OscConfig+0x418>
 8003398:	e01b      	b.n	80033d2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800339a:	4b1f      	ldr	r3, [pc, #124]	; (8003418 <HAL_RCC_OscConfig+0x4b8>)
 800339c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033a0:	4a1d      	ldr	r2, [pc, #116]	; (8003418 <HAL_RCC_OscConfig+0x4b8>)
 80033a2:	f023 0301 	bic.w	r3, r3, #1
 80033a6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033aa:	f7fe fe33 	bl	8002014 <HAL_GetTick>
 80033ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80033b0:	e008      	b.n	80033c4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033b2:	f7fe fe2f 	bl	8002014 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e0dd      	b.n	8003580 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80033c4:	4b14      	ldr	r3, [pc, #80]	; (8003418 <HAL_RCC_OscConfig+0x4b8>)
 80033c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1ef      	bne.n	80033b2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f000 80d1 	beq.w	800357e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033dc:	4b0e      	ldr	r3, [pc, #56]	; (8003418 <HAL_RCC_OscConfig+0x4b8>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f003 030c 	and.w	r3, r3, #12
 80033e4:	2b0c      	cmp	r3, #12
 80033e6:	f000 808b 	beq.w	8003500 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d15e      	bne.n	80034b0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f2:	4b09      	ldr	r3, [pc, #36]	; (8003418 <HAL_RCC_OscConfig+0x4b8>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a08      	ldr	r2, [pc, #32]	; (8003418 <HAL_RCC_OscConfig+0x4b8>)
 80033f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fe:	f7fe fe09 	bl	8002014 <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003404:	e00c      	b.n	8003420 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003406:	f7fe fe05 	bl	8002014 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d905      	bls.n	8003420 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e0b3      	b.n	8003580 <HAL_RCC_OscConfig+0x620>
 8003418:	40021000 	.word	0x40021000
 800341c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003420:	4b59      	ldr	r3, [pc, #356]	; (8003588 <HAL_RCC_OscConfig+0x628>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1ec      	bne.n	8003406 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800342c:	4b56      	ldr	r3, [pc, #344]	; (8003588 <HAL_RCC_OscConfig+0x628>)
 800342e:	68da      	ldr	r2, [r3, #12]
 8003430:	4b56      	ldr	r3, [pc, #344]	; (800358c <HAL_RCC_OscConfig+0x62c>)
 8003432:	4013      	ands	r3, r2
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	6a11      	ldr	r1, [r2, #32]
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800343c:	3a01      	subs	r2, #1
 800343e:	0112      	lsls	r2, r2, #4
 8003440:	4311      	orrs	r1, r2
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003446:	0212      	lsls	r2, r2, #8
 8003448:	4311      	orrs	r1, r2
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800344e:	0852      	lsrs	r2, r2, #1
 8003450:	3a01      	subs	r2, #1
 8003452:	0552      	lsls	r2, r2, #21
 8003454:	4311      	orrs	r1, r2
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800345a:	0852      	lsrs	r2, r2, #1
 800345c:	3a01      	subs	r2, #1
 800345e:	0652      	lsls	r2, r2, #25
 8003460:	4311      	orrs	r1, r2
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003466:	06d2      	lsls	r2, r2, #27
 8003468:	430a      	orrs	r2, r1
 800346a:	4947      	ldr	r1, [pc, #284]	; (8003588 <HAL_RCC_OscConfig+0x628>)
 800346c:	4313      	orrs	r3, r2
 800346e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003470:	4b45      	ldr	r3, [pc, #276]	; (8003588 <HAL_RCC_OscConfig+0x628>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a44      	ldr	r2, [pc, #272]	; (8003588 <HAL_RCC_OscConfig+0x628>)
 8003476:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800347a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800347c:	4b42      	ldr	r3, [pc, #264]	; (8003588 <HAL_RCC_OscConfig+0x628>)
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	4a41      	ldr	r2, [pc, #260]	; (8003588 <HAL_RCC_OscConfig+0x628>)
 8003482:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003486:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003488:	f7fe fdc4 	bl	8002014 <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003490:	f7fe fdc0 	bl	8002014 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b02      	cmp	r3, #2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e06e      	b.n	8003580 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034a2:	4b39      	ldr	r3, [pc, #228]	; (8003588 <HAL_RCC_OscConfig+0x628>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d0f0      	beq.n	8003490 <HAL_RCC_OscConfig+0x530>
 80034ae:	e066      	b.n	800357e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034b0:	4b35      	ldr	r3, [pc, #212]	; (8003588 <HAL_RCC_OscConfig+0x628>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a34      	ldr	r2, [pc, #208]	; (8003588 <HAL_RCC_OscConfig+0x628>)
 80034b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034ba:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80034bc:	4b32      	ldr	r3, [pc, #200]	; (8003588 <HAL_RCC_OscConfig+0x628>)
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	4a31      	ldr	r2, [pc, #196]	; (8003588 <HAL_RCC_OscConfig+0x628>)
 80034c2:	f023 0303 	bic.w	r3, r3, #3
 80034c6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80034c8:	4b2f      	ldr	r3, [pc, #188]	; (8003588 <HAL_RCC_OscConfig+0x628>)
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	4a2e      	ldr	r2, [pc, #184]	; (8003588 <HAL_RCC_OscConfig+0x628>)
 80034ce:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80034d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d8:	f7fe fd9c 	bl	8002014 <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e0:	f7fe fd98 	bl	8002014 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e046      	b.n	8003580 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034f2:	4b25      	ldr	r3, [pc, #148]	; (8003588 <HAL_RCC_OscConfig+0x628>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1f0      	bne.n	80034e0 <HAL_RCC_OscConfig+0x580>
 80034fe:	e03e      	b.n	800357e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	69db      	ldr	r3, [r3, #28]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d101      	bne.n	800350c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e039      	b.n	8003580 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800350c:	4b1e      	ldr	r3, [pc, #120]	; (8003588 <HAL_RCC_OscConfig+0x628>)
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	f003 0203 	and.w	r2, r3, #3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a1b      	ldr	r3, [r3, #32]
 800351c:	429a      	cmp	r2, r3
 800351e:	d12c      	bne.n	800357a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352a:	3b01      	subs	r3, #1
 800352c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800352e:	429a      	cmp	r2, r3
 8003530:	d123      	bne.n	800357a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800353e:	429a      	cmp	r2, r3
 8003540:	d11b      	bne.n	800357a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800354e:	429a      	cmp	r2, r3
 8003550:	d113      	bne.n	800357a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355c:	085b      	lsrs	r3, r3, #1
 800355e:	3b01      	subs	r3, #1
 8003560:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003562:	429a      	cmp	r2, r3
 8003564:	d109      	bne.n	800357a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003570:	085b      	lsrs	r3, r3, #1
 8003572:	3b01      	subs	r3, #1
 8003574:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003576:	429a      	cmp	r2, r3
 8003578:	d001      	beq.n	800357e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e000      	b.n	8003580 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	3720      	adds	r7, #32
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	40021000 	.word	0x40021000
 800358c:	019f800c 	.word	0x019f800c

08003590 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800359a:	2300      	movs	r3, #0
 800359c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e11e      	b.n	80037e6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035a8:	4b91      	ldr	r3, [pc, #580]	; (80037f0 <HAL_RCC_ClockConfig+0x260>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 030f 	and.w	r3, r3, #15
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d910      	bls.n	80035d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035b6:	4b8e      	ldr	r3, [pc, #568]	; (80037f0 <HAL_RCC_ClockConfig+0x260>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f023 020f 	bic.w	r2, r3, #15
 80035be:	498c      	ldr	r1, [pc, #560]	; (80037f0 <HAL_RCC_ClockConfig+0x260>)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035c6:	4b8a      	ldr	r3, [pc, #552]	; (80037f0 <HAL_RCC_ClockConfig+0x260>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 030f 	and.w	r3, r3, #15
 80035ce:	683a      	ldr	r2, [r7, #0]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d001      	beq.n	80035d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e106      	b.n	80037e6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0301 	and.w	r3, r3, #1
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d073      	beq.n	80036cc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	2b03      	cmp	r3, #3
 80035ea:	d129      	bne.n	8003640 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ec:	4b81      	ldr	r3, [pc, #516]	; (80037f4 <HAL_RCC_ClockConfig+0x264>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d101      	bne.n	80035fc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e0f4      	b.n	80037e6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80035fc:	f000 f99e 	bl	800393c <RCC_GetSysClockFreqFromPLLSource>
 8003600:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	4a7c      	ldr	r2, [pc, #496]	; (80037f8 <HAL_RCC_ClockConfig+0x268>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d93f      	bls.n	800368a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800360a:	4b7a      	ldr	r3, [pc, #488]	; (80037f4 <HAL_RCC_ClockConfig+0x264>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d009      	beq.n	800362a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800361e:	2b00      	cmp	r3, #0
 8003620:	d033      	beq.n	800368a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003626:	2b00      	cmp	r3, #0
 8003628:	d12f      	bne.n	800368a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800362a:	4b72      	ldr	r3, [pc, #456]	; (80037f4 <HAL_RCC_ClockConfig+0x264>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003632:	4a70      	ldr	r2, [pc, #448]	; (80037f4 <HAL_RCC_ClockConfig+0x264>)
 8003634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003638:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800363a:	2380      	movs	r3, #128	; 0x80
 800363c:	617b      	str	r3, [r7, #20]
 800363e:	e024      	b.n	800368a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	2b02      	cmp	r3, #2
 8003646:	d107      	bne.n	8003658 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003648:	4b6a      	ldr	r3, [pc, #424]	; (80037f4 <HAL_RCC_ClockConfig+0x264>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d109      	bne.n	8003668 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e0c6      	b.n	80037e6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003658:	4b66      	ldr	r3, [pc, #408]	; (80037f4 <HAL_RCC_ClockConfig+0x264>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003660:	2b00      	cmp	r3, #0
 8003662:	d101      	bne.n	8003668 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e0be      	b.n	80037e6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003668:	f000 f8ce 	bl	8003808 <HAL_RCC_GetSysClockFreq>
 800366c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	4a61      	ldr	r2, [pc, #388]	; (80037f8 <HAL_RCC_ClockConfig+0x268>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d909      	bls.n	800368a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003676:	4b5f      	ldr	r3, [pc, #380]	; (80037f4 <HAL_RCC_ClockConfig+0x264>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800367e:	4a5d      	ldr	r2, [pc, #372]	; (80037f4 <HAL_RCC_ClockConfig+0x264>)
 8003680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003684:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003686:	2380      	movs	r3, #128	; 0x80
 8003688:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800368a:	4b5a      	ldr	r3, [pc, #360]	; (80037f4 <HAL_RCC_ClockConfig+0x264>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f023 0203 	bic.w	r2, r3, #3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	4957      	ldr	r1, [pc, #348]	; (80037f4 <HAL_RCC_ClockConfig+0x264>)
 8003698:	4313      	orrs	r3, r2
 800369a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800369c:	f7fe fcba 	bl	8002014 <HAL_GetTick>
 80036a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036a2:	e00a      	b.n	80036ba <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036a4:	f7fe fcb6 	bl	8002014 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e095      	b.n	80037e6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ba:	4b4e      	ldr	r3, [pc, #312]	; (80037f4 <HAL_RCC_ClockConfig+0x264>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f003 020c 	and.w	r2, r3, #12
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d1eb      	bne.n	80036a4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d023      	beq.n	8003720 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0304 	and.w	r3, r3, #4
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d005      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036e4:	4b43      	ldr	r3, [pc, #268]	; (80037f4 <HAL_RCC_ClockConfig+0x264>)
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	4a42      	ldr	r2, [pc, #264]	; (80037f4 <HAL_RCC_ClockConfig+0x264>)
 80036ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80036ee:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0308 	and.w	r3, r3, #8
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d007      	beq.n	800370c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80036fc:	4b3d      	ldr	r3, [pc, #244]	; (80037f4 <HAL_RCC_ClockConfig+0x264>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003704:	4a3b      	ldr	r2, [pc, #236]	; (80037f4 <HAL_RCC_ClockConfig+0x264>)
 8003706:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800370a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800370c:	4b39      	ldr	r3, [pc, #228]	; (80037f4 <HAL_RCC_ClockConfig+0x264>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	4936      	ldr	r1, [pc, #216]	; (80037f4 <HAL_RCC_ClockConfig+0x264>)
 800371a:	4313      	orrs	r3, r2
 800371c:	608b      	str	r3, [r1, #8]
 800371e:	e008      	b.n	8003732 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	2b80      	cmp	r3, #128	; 0x80
 8003724:	d105      	bne.n	8003732 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003726:	4b33      	ldr	r3, [pc, #204]	; (80037f4 <HAL_RCC_ClockConfig+0x264>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	4a32      	ldr	r2, [pc, #200]	; (80037f4 <HAL_RCC_ClockConfig+0x264>)
 800372c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003730:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003732:	4b2f      	ldr	r3, [pc, #188]	; (80037f0 <HAL_RCC_ClockConfig+0x260>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 030f 	and.w	r3, r3, #15
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d21d      	bcs.n	800377c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003740:	4b2b      	ldr	r3, [pc, #172]	; (80037f0 <HAL_RCC_ClockConfig+0x260>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f023 020f 	bic.w	r2, r3, #15
 8003748:	4929      	ldr	r1, [pc, #164]	; (80037f0 <HAL_RCC_ClockConfig+0x260>)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	4313      	orrs	r3, r2
 800374e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003750:	f7fe fc60 	bl	8002014 <HAL_GetTick>
 8003754:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003756:	e00a      	b.n	800376e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003758:	f7fe fc5c 	bl	8002014 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	f241 3288 	movw	r2, #5000	; 0x1388
 8003766:	4293      	cmp	r3, r2
 8003768:	d901      	bls.n	800376e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e03b      	b.n	80037e6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800376e:	4b20      	ldr	r3, [pc, #128]	; (80037f0 <HAL_RCC_ClockConfig+0x260>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 030f 	and.w	r3, r3, #15
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	429a      	cmp	r2, r3
 800377a:	d1ed      	bne.n	8003758 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0304 	and.w	r3, r3, #4
 8003784:	2b00      	cmp	r3, #0
 8003786:	d008      	beq.n	800379a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003788:	4b1a      	ldr	r3, [pc, #104]	; (80037f4 <HAL_RCC_ClockConfig+0x264>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	4917      	ldr	r1, [pc, #92]	; (80037f4 <HAL_RCC_ClockConfig+0x264>)
 8003796:	4313      	orrs	r3, r2
 8003798:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0308 	and.w	r3, r3, #8
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d009      	beq.n	80037ba <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037a6:	4b13      	ldr	r3, [pc, #76]	; (80037f4 <HAL_RCC_ClockConfig+0x264>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	00db      	lsls	r3, r3, #3
 80037b4:	490f      	ldr	r1, [pc, #60]	; (80037f4 <HAL_RCC_ClockConfig+0x264>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037ba:	f000 f825 	bl	8003808 <HAL_RCC_GetSysClockFreq>
 80037be:	4602      	mov	r2, r0
 80037c0:	4b0c      	ldr	r3, [pc, #48]	; (80037f4 <HAL_RCC_ClockConfig+0x264>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	091b      	lsrs	r3, r3, #4
 80037c6:	f003 030f 	and.w	r3, r3, #15
 80037ca:	490c      	ldr	r1, [pc, #48]	; (80037fc <HAL_RCC_ClockConfig+0x26c>)
 80037cc:	5ccb      	ldrb	r3, [r1, r3]
 80037ce:	f003 031f 	and.w	r3, r3, #31
 80037d2:	fa22 f303 	lsr.w	r3, r2, r3
 80037d6:	4a0a      	ldr	r2, [pc, #40]	; (8003800 <HAL_RCC_ClockConfig+0x270>)
 80037d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80037da:	4b0a      	ldr	r3, [pc, #40]	; (8003804 <HAL_RCC_ClockConfig+0x274>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fe fbcc 	bl	8001f7c <HAL_InitTick>
 80037e4:	4603      	mov	r3, r0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3718      	adds	r7, #24
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	40022000 	.word	0x40022000
 80037f4:	40021000 	.word	0x40021000
 80037f8:	04c4b400 	.word	0x04c4b400
 80037fc:	0800b050 	.word	0x0800b050
 8003800:	20000000 	.word	0x20000000
 8003804:	20000004 	.word	0x20000004

08003808 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003808:	b480      	push	{r7}
 800380a:	b087      	sub	sp, #28
 800380c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800380e:	4b2c      	ldr	r3, [pc, #176]	; (80038c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f003 030c 	and.w	r3, r3, #12
 8003816:	2b04      	cmp	r3, #4
 8003818:	d102      	bne.n	8003820 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800381a:	4b2a      	ldr	r3, [pc, #168]	; (80038c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800381c:	613b      	str	r3, [r7, #16]
 800381e:	e047      	b.n	80038b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003820:	4b27      	ldr	r3, [pc, #156]	; (80038c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f003 030c 	and.w	r3, r3, #12
 8003828:	2b08      	cmp	r3, #8
 800382a:	d102      	bne.n	8003832 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800382c:	4b26      	ldr	r3, [pc, #152]	; (80038c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800382e:	613b      	str	r3, [r7, #16]
 8003830:	e03e      	b.n	80038b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003832:	4b23      	ldr	r3, [pc, #140]	; (80038c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f003 030c 	and.w	r3, r3, #12
 800383a:	2b0c      	cmp	r3, #12
 800383c:	d136      	bne.n	80038ac <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800383e:	4b20      	ldr	r3, [pc, #128]	; (80038c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	f003 0303 	and.w	r3, r3, #3
 8003846:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003848:	4b1d      	ldr	r3, [pc, #116]	; (80038c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	091b      	lsrs	r3, r3, #4
 800384e:	f003 030f 	and.w	r3, r3, #15
 8003852:	3301      	adds	r3, #1
 8003854:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2b03      	cmp	r3, #3
 800385a:	d10c      	bne.n	8003876 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800385c:	4a1a      	ldr	r2, [pc, #104]	; (80038c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	fbb2 f3f3 	udiv	r3, r2, r3
 8003864:	4a16      	ldr	r2, [pc, #88]	; (80038c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003866:	68d2      	ldr	r2, [r2, #12]
 8003868:	0a12      	lsrs	r2, r2, #8
 800386a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800386e:	fb02 f303 	mul.w	r3, r2, r3
 8003872:	617b      	str	r3, [r7, #20]
      break;
 8003874:	e00c      	b.n	8003890 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003876:	4a13      	ldr	r2, [pc, #76]	; (80038c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	fbb2 f3f3 	udiv	r3, r2, r3
 800387e:	4a10      	ldr	r2, [pc, #64]	; (80038c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003880:	68d2      	ldr	r2, [r2, #12]
 8003882:	0a12      	lsrs	r2, r2, #8
 8003884:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003888:	fb02 f303 	mul.w	r3, r2, r3
 800388c:	617b      	str	r3, [r7, #20]
      break;
 800388e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003890:	4b0b      	ldr	r3, [pc, #44]	; (80038c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	0e5b      	lsrs	r3, r3, #25
 8003896:	f003 0303 	and.w	r3, r3, #3
 800389a:	3301      	adds	r3, #1
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a8:	613b      	str	r3, [r7, #16]
 80038aa:	e001      	b.n	80038b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80038ac:	2300      	movs	r3, #0
 80038ae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80038b0:	693b      	ldr	r3, [r7, #16]
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	371c      	adds	r7, #28
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	40021000 	.word	0x40021000
 80038c4:	00f42400 	.word	0x00f42400
 80038c8:	016e3600 	.word	0x016e3600

080038cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038d0:	4b03      	ldr	r3, [pc, #12]	; (80038e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80038d2:	681b      	ldr	r3, [r3, #0]
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	20000000 	.word	0x20000000

080038e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80038e8:	f7ff fff0 	bl	80038cc <HAL_RCC_GetHCLKFreq>
 80038ec:	4602      	mov	r2, r0
 80038ee:	4b06      	ldr	r3, [pc, #24]	; (8003908 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	0a1b      	lsrs	r3, r3, #8
 80038f4:	f003 0307 	and.w	r3, r3, #7
 80038f8:	4904      	ldr	r1, [pc, #16]	; (800390c <HAL_RCC_GetPCLK1Freq+0x28>)
 80038fa:	5ccb      	ldrb	r3, [r1, r3]
 80038fc:	f003 031f 	and.w	r3, r3, #31
 8003900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003904:	4618      	mov	r0, r3
 8003906:	bd80      	pop	{r7, pc}
 8003908:	40021000 	.word	0x40021000
 800390c:	0800b060 	.word	0x0800b060

08003910 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003914:	f7ff ffda 	bl	80038cc <HAL_RCC_GetHCLKFreq>
 8003918:	4602      	mov	r2, r0
 800391a:	4b06      	ldr	r3, [pc, #24]	; (8003934 <HAL_RCC_GetPCLK2Freq+0x24>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	0adb      	lsrs	r3, r3, #11
 8003920:	f003 0307 	and.w	r3, r3, #7
 8003924:	4904      	ldr	r1, [pc, #16]	; (8003938 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003926:	5ccb      	ldrb	r3, [r1, r3]
 8003928:	f003 031f 	and.w	r3, r3, #31
 800392c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003930:	4618      	mov	r0, r3
 8003932:	bd80      	pop	{r7, pc}
 8003934:	40021000 	.word	0x40021000
 8003938:	0800b060 	.word	0x0800b060

0800393c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800393c:	b480      	push	{r7}
 800393e:	b087      	sub	sp, #28
 8003940:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003942:	4b1e      	ldr	r3, [pc, #120]	; (80039bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	f003 0303 	and.w	r3, r3, #3
 800394a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800394c:	4b1b      	ldr	r3, [pc, #108]	; (80039bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	091b      	lsrs	r3, r3, #4
 8003952:	f003 030f 	and.w	r3, r3, #15
 8003956:	3301      	adds	r3, #1
 8003958:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	2b03      	cmp	r3, #3
 800395e:	d10c      	bne.n	800397a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003960:	4a17      	ldr	r2, [pc, #92]	; (80039c0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	fbb2 f3f3 	udiv	r3, r2, r3
 8003968:	4a14      	ldr	r2, [pc, #80]	; (80039bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800396a:	68d2      	ldr	r2, [r2, #12]
 800396c:	0a12      	lsrs	r2, r2, #8
 800396e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003972:	fb02 f303 	mul.w	r3, r2, r3
 8003976:	617b      	str	r3, [r7, #20]
    break;
 8003978:	e00c      	b.n	8003994 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800397a:	4a12      	ldr	r2, [pc, #72]	; (80039c4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003982:	4a0e      	ldr	r2, [pc, #56]	; (80039bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003984:	68d2      	ldr	r2, [r2, #12]
 8003986:	0a12      	lsrs	r2, r2, #8
 8003988:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800398c:	fb02 f303 	mul.w	r3, r2, r3
 8003990:	617b      	str	r3, [r7, #20]
    break;
 8003992:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003994:	4b09      	ldr	r3, [pc, #36]	; (80039bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	0e5b      	lsrs	r3, r3, #25
 800399a:	f003 0303 	and.w	r3, r3, #3
 800399e:	3301      	adds	r3, #1
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80039a4:	697a      	ldr	r2, [r7, #20]
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ac:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80039ae:	687b      	ldr	r3, [r7, #4]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	371c      	adds	r7, #28
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	40021000 	.word	0x40021000
 80039c0:	016e3600 	.word	0x016e3600
 80039c4:	00f42400 	.word	0x00f42400

080039c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039d0:	2300      	movs	r3, #0
 80039d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039d4:	2300      	movs	r3, #0
 80039d6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f000 8098 	beq.w	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039e6:	2300      	movs	r3, #0
 80039e8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039ea:	4b43      	ldr	r3, [pc, #268]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10d      	bne.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039f6:	4b40      	ldr	r3, [pc, #256]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fa:	4a3f      	ldr	r2, [pc, #252]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a00:	6593      	str	r3, [r2, #88]	; 0x58
 8003a02:	4b3d      	ldr	r3, [pc, #244]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a0a:	60bb      	str	r3, [r7, #8]
 8003a0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a12:	4b3a      	ldr	r3, [pc, #232]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a39      	ldr	r2, [pc, #228]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a1c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a1e:	f7fe faf9 	bl	8002014 <HAL_GetTick>
 8003a22:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a24:	e009      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a26:	f7fe faf5 	bl	8002014 <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d902      	bls.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	74fb      	strb	r3, [r7, #19]
        break;
 8003a38:	e005      	b.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a3a:	4b30      	ldr	r3, [pc, #192]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d0ef      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003a46:	7cfb      	ldrb	r3, [r7, #19]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d159      	bne.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a4c:	4b2a      	ldr	r3, [pc, #168]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a56:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d01e      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d019      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a68:	4b23      	ldr	r3, [pc, #140]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a72:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a74:	4b20      	ldr	r3, [pc, #128]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a7a:	4a1f      	ldr	r2, [pc, #124]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a84:	4b1c      	ldr	r3, [pc, #112]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a8a:	4a1b      	ldr	r2, [pc, #108]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a94:	4a18      	ldr	r2, [pc, #96]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d016      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa6:	f7fe fab5 	bl	8002014 <HAL_GetTick>
 8003aaa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003aac:	e00b      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aae:	f7fe fab1 	bl	8002014 <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d902      	bls.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	74fb      	strb	r3, [r7, #19]
            break;
 8003ac4:	e006      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ac6:	4b0c      	ldr	r3, [pc, #48]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d0ec      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003ad4:	7cfb      	ldrb	r3, [r7, #19]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10b      	bne.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ada:	4b07      	ldr	r3, [pc, #28]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae8:	4903      	ldr	r1, [pc, #12]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003af0:	e008      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003af2:	7cfb      	ldrb	r3, [r7, #19]
 8003af4:	74bb      	strb	r3, [r7, #18]
 8003af6:	e005      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003af8:	40021000 	.word	0x40021000
 8003afc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b00:	7cfb      	ldrb	r3, [r7, #19]
 8003b02:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b04:	7c7b      	ldrb	r3, [r7, #17]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d105      	bne.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b0a:	4ba6      	ldr	r3, [pc, #664]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b0e:	4aa5      	ldr	r2, [pc, #660]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b14:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00a      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b22:	4ba0      	ldr	r3, [pc, #640]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b28:	f023 0203 	bic.w	r2, r3, #3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	499c      	ldr	r1, [pc, #624]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00a      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b44:	4b97      	ldr	r3, [pc, #604]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b4a:	f023 020c 	bic.w	r2, r3, #12
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	4994      	ldr	r1, [pc, #592]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0304 	and.w	r3, r3, #4
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00a      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b66:	4b8f      	ldr	r3, [pc, #572]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b6c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	498b      	ldr	r1, [pc, #556]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0308 	and.w	r3, r3, #8
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00a      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b88:	4b86      	ldr	r3, [pc, #536]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b8e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	4983      	ldr	r1, [pc, #524]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0320 	and.w	r3, r3, #32
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00a      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003baa:	4b7e      	ldr	r3, [pc, #504]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	497a      	ldr	r1, [pc, #488]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d00a      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bcc:	4b75      	ldr	r3, [pc, #468]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	4972      	ldr	r1, [pc, #456]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00a      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003bee:	4b6d      	ldr	r3, [pc, #436]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	69db      	ldr	r3, [r3, #28]
 8003bfc:	4969      	ldr	r1, [pc, #420]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00a      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c10:	4b64      	ldr	r3, [pc, #400]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c16:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	4961      	ldr	r1, [pc, #388]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00a      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c32:	4b5c      	ldr	r3, [pc, #368]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c38:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c40:	4958      	ldr	r1, [pc, #352]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d015      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c54:	4b53      	ldr	r3, [pc, #332]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c62:	4950      	ldr	r1, [pc, #320]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c72:	d105      	bne.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c74:	4b4b      	ldr	r3, [pc, #300]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	4a4a      	ldr	r2, [pc, #296]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c7e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d015      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c8c:	4b45      	ldr	r3, [pc, #276]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c92:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9a:	4942      	ldr	r1, [pc, #264]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003caa:	d105      	bne.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cac:	4b3d      	ldr	r3, [pc, #244]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	4a3c      	ldr	r2, [pc, #240]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cb6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d015      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003cc4:	4b37      	ldr	r3, [pc, #220]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd2:	4934      	ldr	r1, [pc, #208]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cde:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ce2:	d105      	bne.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ce4:	4b2f      	ldr	r3, [pc, #188]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	4a2e      	ldr	r2, [pc, #184]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cee:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d015      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cfc:	4b29      	ldr	r3, [pc, #164]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d0a:	4926      	ldr	r1, [pc, #152]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d1a:	d105      	bne.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d1c:	4b21      	ldr	r3, [pc, #132]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	4a20      	ldr	r2, [pc, #128]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d26:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d015      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d34:	4b1b      	ldr	r3, [pc, #108]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d3a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d42:	4918      	ldr	r1, [pc, #96]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d52:	d105      	bne.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d54:	4b13      	ldr	r3, [pc, #76]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	4a12      	ldr	r2, [pc, #72]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d5e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d015      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003d6c:	4b0d      	ldr	r3, [pc, #52]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d72:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d7a:	490a      	ldr	r1, [pc, #40]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d8a:	d105      	bne.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003d8c:	4b05      	ldr	r3, [pc, #20]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	4a04      	ldr	r2, [pc, #16]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d96:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003d98:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3718      	adds	r7, #24
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	40021000 	.word	0x40021000

08003da8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e049      	b.n	8003e4e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d106      	bne.n	8003dd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f7fd fd9c 	bl	800190c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	3304      	adds	r3, #4
 8003de4:	4619      	mov	r1, r3
 8003de6:	4610      	mov	r0, r2
 8003de8:	f000 ffc6 	bl	8004d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b082      	sub	sp, #8
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d101      	bne.n	8003e68 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e049      	b.n	8003efc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d106      	bne.n	8003e82 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 f841 	bl	8003f04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2202      	movs	r2, #2
 8003e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	3304      	adds	r3, #4
 8003e92:	4619      	mov	r1, r3
 8003e94:	4610      	mov	r0, r2
 8003e96:	f000 ff6f 	bl	8004d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3708      	adds	r7, #8
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d109      	bne.n	8003f3c <HAL_TIM_PWM_Start+0x24>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	bf14      	ite	ne
 8003f34:	2301      	movne	r3, #1
 8003f36:	2300      	moveq	r3, #0
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	e03c      	b.n	8003fb6 <HAL_TIM_PWM_Start+0x9e>
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	2b04      	cmp	r3, #4
 8003f40:	d109      	bne.n	8003f56 <HAL_TIM_PWM_Start+0x3e>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	bf14      	ite	ne
 8003f4e:	2301      	movne	r3, #1
 8003f50:	2300      	moveq	r3, #0
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	e02f      	b.n	8003fb6 <HAL_TIM_PWM_Start+0x9e>
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	2b08      	cmp	r3, #8
 8003f5a:	d109      	bne.n	8003f70 <HAL_TIM_PWM_Start+0x58>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	bf14      	ite	ne
 8003f68:	2301      	movne	r3, #1
 8003f6a:	2300      	moveq	r3, #0
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	e022      	b.n	8003fb6 <HAL_TIM_PWM_Start+0x9e>
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	2b0c      	cmp	r3, #12
 8003f74:	d109      	bne.n	8003f8a <HAL_TIM_PWM_Start+0x72>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	bf14      	ite	ne
 8003f82:	2301      	movne	r3, #1
 8003f84:	2300      	moveq	r3, #0
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	e015      	b.n	8003fb6 <HAL_TIM_PWM_Start+0x9e>
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	2b10      	cmp	r3, #16
 8003f8e:	d109      	bne.n	8003fa4 <HAL_TIM_PWM_Start+0x8c>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	bf14      	ite	ne
 8003f9c:	2301      	movne	r3, #1
 8003f9e:	2300      	moveq	r3, #0
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	e008      	b.n	8003fb6 <HAL_TIM_PWM_Start+0x9e>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	bf14      	ite	ne
 8003fb0:	2301      	movne	r3, #1
 8003fb2:	2300      	moveq	r3, #0
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e097      	b.n	80040ee <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d104      	bne.n	8003fce <HAL_TIM_PWM_Start+0xb6>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fcc:	e023      	b.n	8004016 <HAL_TIM_PWM_Start+0xfe>
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	2b04      	cmp	r3, #4
 8003fd2:	d104      	bne.n	8003fde <HAL_TIM_PWM_Start+0xc6>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fdc:	e01b      	b.n	8004016 <HAL_TIM_PWM_Start+0xfe>
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	2b08      	cmp	r3, #8
 8003fe2:	d104      	bne.n	8003fee <HAL_TIM_PWM_Start+0xd6>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fec:	e013      	b.n	8004016 <HAL_TIM_PWM_Start+0xfe>
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	2b0c      	cmp	r3, #12
 8003ff2:	d104      	bne.n	8003ffe <HAL_TIM_PWM_Start+0xe6>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ffc:	e00b      	b.n	8004016 <HAL_TIM_PWM_Start+0xfe>
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	2b10      	cmp	r3, #16
 8004002:	d104      	bne.n	800400e <HAL_TIM_PWM_Start+0xf6>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2202      	movs	r2, #2
 8004008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800400c:	e003      	b.n	8004016 <HAL_TIM_PWM_Start+0xfe>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2202      	movs	r2, #2
 8004012:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2201      	movs	r2, #1
 800401c:	6839      	ldr	r1, [r7, #0]
 800401e:	4618      	mov	r0, r3
 8004020:	f001 fbea 	bl	80057f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a33      	ldr	r2, [pc, #204]	; (80040f8 <HAL_TIM_PWM_Start+0x1e0>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d013      	beq.n	8004056 <HAL_TIM_PWM_Start+0x13e>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a32      	ldr	r2, [pc, #200]	; (80040fc <HAL_TIM_PWM_Start+0x1e4>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d00e      	beq.n	8004056 <HAL_TIM_PWM_Start+0x13e>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a30      	ldr	r2, [pc, #192]	; (8004100 <HAL_TIM_PWM_Start+0x1e8>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d009      	beq.n	8004056 <HAL_TIM_PWM_Start+0x13e>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a2f      	ldr	r2, [pc, #188]	; (8004104 <HAL_TIM_PWM_Start+0x1ec>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d004      	beq.n	8004056 <HAL_TIM_PWM_Start+0x13e>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a2d      	ldr	r2, [pc, #180]	; (8004108 <HAL_TIM_PWM_Start+0x1f0>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d101      	bne.n	800405a <HAL_TIM_PWM_Start+0x142>
 8004056:	2301      	movs	r3, #1
 8004058:	e000      	b.n	800405c <HAL_TIM_PWM_Start+0x144>
 800405a:	2300      	movs	r3, #0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d007      	beq.n	8004070 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800406e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a20      	ldr	r2, [pc, #128]	; (80040f8 <HAL_TIM_PWM_Start+0x1e0>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d018      	beq.n	80040ac <HAL_TIM_PWM_Start+0x194>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004082:	d013      	beq.n	80040ac <HAL_TIM_PWM_Start+0x194>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a20      	ldr	r2, [pc, #128]	; (800410c <HAL_TIM_PWM_Start+0x1f4>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d00e      	beq.n	80040ac <HAL_TIM_PWM_Start+0x194>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a1f      	ldr	r2, [pc, #124]	; (8004110 <HAL_TIM_PWM_Start+0x1f8>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d009      	beq.n	80040ac <HAL_TIM_PWM_Start+0x194>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a17      	ldr	r2, [pc, #92]	; (80040fc <HAL_TIM_PWM_Start+0x1e4>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d004      	beq.n	80040ac <HAL_TIM_PWM_Start+0x194>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a16      	ldr	r2, [pc, #88]	; (8004100 <HAL_TIM_PWM_Start+0x1e8>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d115      	bne.n	80040d8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	689a      	ldr	r2, [r3, #8]
 80040b2:	4b18      	ldr	r3, [pc, #96]	; (8004114 <HAL_TIM_PWM_Start+0x1fc>)
 80040b4:	4013      	ands	r3, r2
 80040b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2b06      	cmp	r3, #6
 80040bc:	d015      	beq.n	80040ea <HAL_TIM_PWM_Start+0x1d2>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040c4:	d011      	beq.n	80040ea <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f042 0201 	orr.w	r2, r2, #1
 80040d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040d6:	e008      	b.n	80040ea <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f042 0201 	orr.w	r2, r2, #1
 80040e6:	601a      	str	r2, [r3, #0]
 80040e8:	e000      	b.n	80040ec <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	40012c00 	.word	0x40012c00
 80040fc:	40013400 	.word	0x40013400
 8004100:	40014000 	.word	0x40014000
 8004104:	40014400 	.word	0x40014400
 8004108:	40014800 	.word	0x40014800
 800410c:	40000400 	.word	0x40000400
 8004110:	40000800 	.word	0x40000800
 8004114:	00010007 	.word	0x00010007

08004118 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e049      	b.n	80041be <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d106      	bne.n	8004144 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f7fd fb98 	bl	8001874 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2202      	movs	r2, #2
 8004148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	3304      	adds	r3, #4
 8004154:	4619      	mov	r1, r3
 8004156:	4610      	mov	r0, r2
 8004158:	f000 fe0e 	bl	8004d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3708      	adds	r7, #8
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
	...

080041c8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041d2:	2300      	movs	r3, #0
 80041d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d104      	bne.n	80041e6 <HAL_TIM_IC_Start_IT+0x1e>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	e023      	b.n	800422e <HAL_TIM_IC_Start_IT+0x66>
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	2b04      	cmp	r3, #4
 80041ea:	d104      	bne.n	80041f6 <HAL_TIM_IC_Start_IT+0x2e>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	e01b      	b.n	800422e <HAL_TIM_IC_Start_IT+0x66>
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	2b08      	cmp	r3, #8
 80041fa:	d104      	bne.n	8004206 <HAL_TIM_IC_Start_IT+0x3e>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004202:	b2db      	uxtb	r3, r3
 8004204:	e013      	b.n	800422e <HAL_TIM_IC_Start_IT+0x66>
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	2b0c      	cmp	r3, #12
 800420a:	d104      	bne.n	8004216 <HAL_TIM_IC_Start_IT+0x4e>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004212:	b2db      	uxtb	r3, r3
 8004214:	e00b      	b.n	800422e <HAL_TIM_IC_Start_IT+0x66>
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	2b10      	cmp	r3, #16
 800421a:	d104      	bne.n	8004226 <HAL_TIM_IC_Start_IT+0x5e>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004222:	b2db      	uxtb	r3, r3
 8004224:	e003      	b.n	800422e <HAL_TIM_IC_Start_IT+0x66>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800422c:	b2db      	uxtb	r3, r3
 800422e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d104      	bne.n	8004240 <HAL_TIM_IC_Start_IT+0x78>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800423c:	b2db      	uxtb	r3, r3
 800423e:	e013      	b.n	8004268 <HAL_TIM_IC_Start_IT+0xa0>
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	2b04      	cmp	r3, #4
 8004244:	d104      	bne.n	8004250 <HAL_TIM_IC_Start_IT+0x88>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800424c:	b2db      	uxtb	r3, r3
 800424e:	e00b      	b.n	8004268 <HAL_TIM_IC_Start_IT+0xa0>
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	2b08      	cmp	r3, #8
 8004254:	d104      	bne.n	8004260 <HAL_TIM_IC_Start_IT+0x98>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800425c:	b2db      	uxtb	r3, r3
 800425e:	e003      	b.n	8004268 <HAL_TIM_IC_Start_IT+0xa0>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004266:	b2db      	uxtb	r3, r3
 8004268:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800426a:	7bbb      	ldrb	r3, [r7, #14]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d102      	bne.n	8004276 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004270:	7b7b      	ldrb	r3, [r7, #13]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d001      	beq.n	800427a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e0d8      	b.n	800442c <HAL_TIM_IC_Start_IT+0x264>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d104      	bne.n	800428a <HAL_TIM_IC_Start_IT+0xc2>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2202      	movs	r2, #2
 8004284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004288:	e023      	b.n	80042d2 <HAL_TIM_IC_Start_IT+0x10a>
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	2b04      	cmp	r3, #4
 800428e:	d104      	bne.n	800429a <HAL_TIM_IC_Start_IT+0xd2>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2202      	movs	r2, #2
 8004294:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004298:	e01b      	b.n	80042d2 <HAL_TIM_IC_Start_IT+0x10a>
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	2b08      	cmp	r3, #8
 800429e:	d104      	bne.n	80042aa <HAL_TIM_IC_Start_IT+0xe2>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2202      	movs	r2, #2
 80042a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042a8:	e013      	b.n	80042d2 <HAL_TIM_IC_Start_IT+0x10a>
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	2b0c      	cmp	r3, #12
 80042ae:	d104      	bne.n	80042ba <HAL_TIM_IC_Start_IT+0xf2>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2202      	movs	r2, #2
 80042b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042b8:	e00b      	b.n	80042d2 <HAL_TIM_IC_Start_IT+0x10a>
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	2b10      	cmp	r3, #16
 80042be:	d104      	bne.n	80042ca <HAL_TIM_IC_Start_IT+0x102>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2202      	movs	r2, #2
 80042c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042c8:	e003      	b.n	80042d2 <HAL_TIM_IC_Start_IT+0x10a>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2202      	movs	r2, #2
 80042ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d104      	bne.n	80042e2 <HAL_TIM_IC_Start_IT+0x11a>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2202      	movs	r2, #2
 80042dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042e0:	e013      	b.n	800430a <HAL_TIM_IC_Start_IT+0x142>
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	2b04      	cmp	r3, #4
 80042e6:	d104      	bne.n	80042f2 <HAL_TIM_IC_Start_IT+0x12a>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2202      	movs	r2, #2
 80042ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042f0:	e00b      	b.n	800430a <HAL_TIM_IC_Start_IT+0x142>
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	2b08      	cmp	r3, #8
 80042f6:	d104      	bne.n	8004302 <HAL_TIM_IC_Start_IT+0x13a>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2202      	movs	r2, #2
 80042fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004300:	e003      	b.n	800430a <HAL_TIM_IC_Start_IT+0x142>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2202      	movs	r2, #2
 8004306:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	2b0c      	cmp	r3, #12
 800430e:	d841      	bhi.n	8004394 <HAL_TIM_IC_Start_IT+0x1cc>
 8004310:	a201      	add	r2, pc, #4	; (adr r2, 8004318 <HAL_TIM_IC_Start_IT+0x150>)
 8004312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004316:	bf00      	nop
 8004318:	0800434d 	.word	0x0800434d
 800431c:	08004395 	.word	0x08004395
 8004320:	08004395 	.word	0x08004395
 8004324:	08004395 	.word	0x08004395
 8004328:	0800435f 	.word	0x0800435f
 800432c:	08004395 	.word	0x08004395
 8004330:	08004395 	.word	0x08004395
 8004334:	08004395 	.word	0x08004395
 8004338:	08004371 	.word	0x08004371
 800433c:	08004395 	.word	0x08004395
 8004340:	08004395 	.word	0x08004395
 8004344:	08004395 	.word	0x08004395
 8004348:	08004383 	.word	0x08004383
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68da      	ldr	r2, [r3, #12]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f042 0202 	orr.w	r2, r2, #2
 800435a:	60da      	str	r2, [r3, #12]
      break;
 800435c:	e01d      	b.n	800439a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68da      	ldr	r2, [r3, #12]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f042 0204 	orr.w	r2, r2, #4
 800436c:	60da      	str	r2, [r3, #12]
      break;
 800436e:	e014      	b.n	800439a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68da      	ldr	r2, [r3, #12]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f042 0208 	orr.w	r2, r2, #8
 800437e:	60da      	str	r2, [r3, #12]
      break;
 8004380:	e00b      	b.n	800439a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68da      	ldr	r2, [r3, #12]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f042 0210 	orr.w	r2, r2, #16
 8004390:	60da      	str	r2, [r3, #12]
      break;
 8004392:	e002      	b.n	800439a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	73fb      	strb	r3, [r7, #15]
      break;
 8004398:	bf00      	nop
  }

  if (status == HAL_OK)
 800439a:	7bfb      	ldrb	r3, [r7, #15]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d144      	bne.n	800442a <HAL_TIM_IC_Start_IT+0x262>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2201      	movs	r2, #1
 80043a6:	6839      	ldr	r1, [r7, #0]
 80043a8:	4618      	mov	r0, r3
 80043aa:	f001 fa25 	bl	80057f8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a20      	ldr	r2, [pc, #128]	; (8004434 <HAL_TIM_IC_Start_IT+0x26c>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d018      	beq.n	80043ea <HAL_TIM_IC_Start_IT+0x222>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043c0:	d013      	beq.n	80043ea <HAL_TIM_IC_Start_IT+0x222>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a1c      	ldr	r2, [pc, #112]	; (8004438 <HAL_TIM_IC_Start_IT+0x270>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d00e      	beq.n	80043ea <HAL_TIM_IC_Start_IT+0x222>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a1a      	ldr	r2, [pc, #104]	; (800443c <HAL_TIM_IC_Start_IT+0x274>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d009      	beq.n	80043ea <HAL_TIM_IC_Start_IT+0x222>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a19      	ldr	r2, [pc, #100]	; (8004440 <HAL_TIM_IC_Start_IT+0x278>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d004      	beq.n	80043ea <HAL_TIM_IC_Start_IT+0x222>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a17      	ldr	r2, [pc, #92]	; (8004444 <HAL_TIM_IC_Start_IT+0x27c>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d115      	bne.n	8004416 <HAL_TIM_IC_Start_IT+0x24e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	689a      	ldr	r2, [r3, #8]
 80043f0:	4b15      	ldr	r3, [pc, #84]	; (8004448 <HAL_TIM_IC_Start_IT+0x280>)
 80043f2:	4013      	ands	r3, r2
 80043f4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	2b06      	cmp	r3, #6
 80043fa:	d015      	beq.n	8004428 <HAL_TIM_IC_Start_IT+0x260>
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004402:	d011      	beq.n	8004428 <HAL_TIM_IC_Start_IT+0x260>
      {
        __HAL_TIM_ENABLE(htim);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f042 0201 	orr.w	r2, r2, #1
 8004412:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004414:	e008      	b.n	8004428 <HAL_TIM_IC_Start_IT+0x260>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f042 0201 	orr.w	r2, r2, #1
 8004424:	601a      	str	r2, [r3, #0]
 8004426:	e000      	b.n	800442a <HAL_TIM_IC_Start_IT+0x262>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004428:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800442a:	7bfb      	ldrb	r3, [r7, #15]
}
 800442c:	4618      	mov	r0, r3
 800442e:	3710      	adds	r7, #16
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	40012c00 	.word	0x40012c00
 8004438:	40000400 	.word	0x40000400
 800443c:	40000800 	.word	0x40000800
 8004440:	40013400 	.word	0x40013400
 8004444:	40014000 	.word	0x40014000
 8004448:	00010007 	.word	0x00010007

0800444c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b02      	cmp	r3, #2
 8004460:	d122      	bne.n	80044a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	2b02      	cmp	r3, #2
 800446e:	d11b      	bne.n	80044a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f06f 0202 	mvn.w	r2, #2
 8004478:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	f003 0303 	and.w	r3, r3, #3
 800448a:	2b00      	cmp	r3, #0
 800448c:	d003      	beq.n	8004496 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7fd fbde 	bl	8001c50 <HAL_TIM_IC_CaptureCallback>
 8004494:	e005      	b.n	80044a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 fc50 	bl	8004d3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 fc57 	bl	8004d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	f003 0304 	and.w	r3, r3, #4
 80044b2:	2b04      	cmp	r3, #4
 80044b4:	d122      	bne.n	80044fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	f003 0304 	and.w	r3, r3, #4
 80044c0:	2b04      	cmp	r3, #4
 80044c2:	d11b      	bne.n	80044fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f06f 0204 	mvn.w	r2, #4
 80044cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2202      	movs	r2, #2
 80044d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d003      	beq.n	80044ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f7fd fbb4 	bl	8001c50 <HAL_TIM_IC_CaptureCallback>
 80044e8:	e005      	b.n	80044f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 fc26 	bl	8004d3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 fc2d 	bl	8004d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	f003 0308 	and.w	r3, r3, #8
 8004506:	2b08      	cmp	r3, #8
 8004508:	d122      	bne.n	8004550 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	f003 0308 	and.w	r3, r3, #8
 8004514:	2b08      	cmp	r3, #8
 8004516:	d11b      	bne.n	8004550 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f06f 0208 	mvn.w	r2, #8
 8004520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2204      	movs	r2, #4
 8004526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	69db      	ldr	r3, [r3, #28]
 800452e:	f003 0303 	and.w	r3, r3, #3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d003      	beq.n	800453e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f7fd fb8a 	bl	8001c50 <HAL_TIM_IC_CaptureCallback>
 800453c:	e005      	b.n	800454a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 fbfc 	bl	8004d3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 fc03 	bl	8004d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	f003 0310 	and.w	r3, r3, #16
 800455a:	2b10      	cmp	r3, #16
 800455c:	d122      	bne.n	80045a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	f003 0310 	and.w	r3, r3, #16
 8004568:	2b10      	cmp	r3, #16
 800456a:	d11b      	bne.n	80045a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f06f 0210 	mvn.w	r2, #16
 8004574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2208      	movs	r2, #8
 800457a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004586:	2b00      	cmp	r3, #0
 8004588:	d003      	beq.n	8004592 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f7fd fb60 	bl	8001c50 <HAL_TIM_IC_CaptureCallback>
 8004590:	e005      	b.n	800459e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 fbd2 	bl	8004d3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 fbd9 	bl	8004d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d10e      	bne.n	80045d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	f003 0301 	and.w	r3, r3, #1
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d107      	bne.n	80045d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f06f 0201 	mvn.w	r2, #1
 80045c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 fbac 	bl	8004d28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045da:	2b80      	cmp	r3, #128	; 0x80
 80045dc:	d10e      	bne.n	80045fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e8:	2b80      	cmp	r3, #128	; 0x80
 80045ea:	d107      	bne.n	80045fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f001 f9b0 	bl	800595c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800460a:	d10e      	bne.n	800462a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004616:	2b80      	cmp	r3, #128	; 0x80
 8004618:	d107      	bne.n	800462a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004622:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f001 f9a3 	bl	8005970 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004634:	2b40      	cmp	r3, #64	; 0x40
 8004636:	d10e      	bne.n	8004656 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004642:	2b40      	cmp	r3, #64	; 0x40
 8004644:	d107      	bne.n	8004656 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800464e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 fb87 	bl	8004d64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	f003 0320 	and.w	r3, r3, #32
 8004660:	2b20      	cmp	r3, #32
 8004662:	d10e      	bne.n	8004682 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	f003 0320 	and.w	r3, r3, #32
 800466e:	2b20      	cmp	r3, #32
 8004670:	d107      	bne.n	8004682 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f06f 0220 	mvn.w	r2, #32
 800467a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f001 f963 	bl	8005948 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800468c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004690:	d10f      	bne.n	80046b2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800469c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046a0:	d107      	bne.n	80046b2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80046aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f001 f969 	bl	8005984 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046c0:	d10f      	bne.n	80046e2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046d0:	d107      	bne.n	80046e2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80046da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f001 f95b 	bl	8005998 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046f0:	d10f      	bne.n	8004712 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004700:	d107      	bne.n	8004712 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800470a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f001 f94d 	bl	80059ac <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800471c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004720:	d10f      	bne.n	8004742 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800472c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004730:	d107      	bne.n	8004742 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800473a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f001 f93f 	bl	80059c0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004742:	bf00      	nop
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800474a:	b580      	push	{r7, lr}
 800474c:	b086      	sub	sp, #24
 800474e:	af00      	add	r7, sp, #0
 8004750:	60f8      	str	r0, [r7, #12]
 8004752:	60b9      	str	r1, [r7, #8]
 8004754:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004756:	2300      	movs	r3, #0
 8004758:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004760:	2b01      	cmp	r3, #1
 8004762:	d101      	bne.n	8004768 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004764:	2302      	movs	r3, #2
 8004766:	e088      	b.n	800487a <HAL_TIM_IC_ConfigChannel+0x130>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d11b      	bne.n	80047ae <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6818      	ldr	r0, [r3, #0]
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	6819      	ldr	r1, [r3, #0]
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	685a      	ldr	r2, [r3, #4]
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	f000 fe7d 	bl	8005484 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	699a      	ldr	r2, [r3, #24]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f022 020c 	bic.w	r2, r2, #12
 8004798:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	6999      	ldr	r1, [r3, #24]
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	689a      	ldr	r2, [r3, #8]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	619a      	str	r2, [r3, #24]
 80047ac:	e060      	b.n	8004870 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2b04      	cmp	r3, #4
 80047b2:	d11c      	bne.n	80047ee <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6818      	ldr	r0, [r3, #0]
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	6819      	ldr	r1, [r3, #0]
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	685a      	ldr	r2, [r3, #4]
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	f000 fef5 	bl	80055b2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	699a      	ldr	r2, [r3, #24]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80047d6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6999      	ldr	r1, [r3, #24]
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	021a      	lsls	r2, r3, #8
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	619a      	str	r2, [r3, #24]
 80047ec:	e040      	b.n	8004870 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2b08      	cmp	r3, #8
 80047f2:	d11b      	bne.n	800482c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6818      	ldr	r0, [r3, #0]
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	6819      	ldr	r1, [r3, #0]
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	f000 ff42 	bl	800568c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	69da      	ldr	r2, [r3, #28]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f022 020c 	bic.w	r2, r2, #12
 8004816:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	69d9      	ldr	r1, [r3, #28]
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	689a      	ldr	r2, [r3, #8]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	430a      	orrs	r2, r1
 8004828:	61da      	str	r2, [r3, #28]
 800482a:	e021      	b.n	8004870 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2b0c      	cmp	r3, #12
 8004830:	d11c      	bne.n	800486c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6818      	ldr	r0, [r3, #0]
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	6819      	ldr	r1, [r3, #0]
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	685a      	ldr	r2, [r3, #4]
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	f000 ff5f 	bl	8005704 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	69da      	ldr	r2, [r3, #28]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004854:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	69d9      	ldr	r1, [r3, #28]
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	021a      	lsls	r2, r3, #8
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	430a      	orrs	r2, r1
 8004868:	61da      	str	r2, [r3, #28]
 800486a:	e001      	b.n	8004870 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004878:	7dfb      	ldrb	r3, [r7, #23]
}
 800487a:	4618      	mov	r0, r3
 800487c:	3718      	adds	r7, #24
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
	...

08004884 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b086      	sub	sp, #24
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004890:	2300      	movs	r3, #0
 8004892:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800489a:	2b01      	cmp	r3, #1
 800489c:	d101      	bne.n	80048a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800489e:	2302      	movs	r3, #2
 80048a0:	e0ff      	b.n	8004aa2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2b14      	cmp	r3, #20
 80048ae:	f200 80f0 	bhi.w	8004a92 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80048b2:	a201      	add	r2, pc, #4	; (adr r2, 80048b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80048b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b8:	0800490d 	.word	0x0800490d
 80048bc:	08004a93 	.word	0x08004a93
 80048c0:	08004a93 	.word	0x08004a93
 80048c4:	08004a93 	.word	0x08004a93
 80048c8:	0800494d 	.word	0x0800494d
 80048cc:	08004a93 	.word	0x08004a93
 80048d0:	08004a93 	.word	0x08004a93
 80048d4:	08004a93 	.word	0x08004a93
 80048d8:	0800498f 	.word	0x0800498f
 80048dc:	08004a93 	.word	0x08004a93
 80048e0:	08004a93 	.word	0x08004a93
 80048e4:	08004a93 	.word	0x08004a93
 80048e8:	080049cf 	.word	0x080049cf
 80048ec:	08004a93 	.word	0x08004a93
 80048f0:	08004a93 	.word	0x08004a93
 80048f4:	08004a93 	.word	0x08004a93
 80048f8:	08004a11 	.word	0x08004a11
 80048fc:	08004a93 	.word	0x08004a93
 8004900:	08004a93 	.word	0x08004a93
 8004904:	08004a93 	.word	0x08004a93
 8004908:	08004a51 	.word	0x08004a51
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68b9      	ldr	r1, [r7, #8]
 8004912:	4618      	mov	r0, r3
 8004914:	f000 fac0 	bl	8004e98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	699a      	ldr	r2, [r3, #24]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f042 0208 	orr.w	r2, r2, #8
 8004926:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	699a      	ldr	r2, [r3, #24]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f022 0204 	bic.w	r2, r2, #4
 8004936:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	6999      	ldr	r1, [r3, #24]
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	691a      	ldr	r2, [r3, #16]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	430a      	orrs	r2, r1
 8004948:	619a      	str	r2, [r3, #24]
      break;
 800494a:	e0a5      	b.n	8004a98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68b9      	ldr	r1, [r7, #8]
 8004952:	4618      	mov	r0, r3
 8004954:	f000 fb30 	bl	8004fb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	699a      	ldr	r2, [r3, #24]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004966:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	699a      	ldr	r2, [r3, #24]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004976:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	6999      	ldr	r1, [r3, #24]
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	021a      	lsls	r2, r3, #8
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	430a      	orrs	r2, r1
 800498a:	619a      	str	r2, [r3, #24]
      break;
 800498c:	e084      	b.n	8004a98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68b9      	ldr	r1, [r7, #8]
 8004994:	4618      	mov	r0, r3
 8004996:	f000 fb99 	bl	80050cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	69da      	ldr	r2, [r3, #28]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f042 0208 	orr.w	r2, r2, #8
 80049a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	69da      	ldr	r2, [r3, #28]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f022 0204 	bic.w	r2, r2, #4
 80049b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	69d9      	ldr	r1, [r3, #28]
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	691a      	ldr	r2, [r3, #16]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	430a      	orrs	r2, r1
 80049ca:	61da      	str	r2, [r3, #28]
      break;
 80049cc:	e064      	b.n	8004a98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68b9      	ldr	r1, [r7, #8]
 80049d4:	4618      	mov	r0, r3
 80049d6:	f000 fc01 	bl	80051dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	69da      	ldr	r2, [r3, #28]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	69da      	ldr	r2, [r3, #28]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	69d9      	ldr	r1, [r3, #28]
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	021a      	lsls	r2, r3, #8
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	61da      	str	r2, [r3, #28]
      break;
 8004a0e:	e043      	b.n	8004a98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68b9      	ldr	r1, [r7, #8]
 8004a16:	4618      	mov	r0, r3
 8004a18:	f000 fc6a 	bl	80052f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f042 0208 	orr.w	r2, r2, #8
 8004a2a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f022 0204 	bic.w	r2, r2, #4
 8004a3a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	691a      	ldr	r2, [r3, #16]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004a4e:	e023      	b.n	8004a98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68b9      	ldr	r1, [r7, #8]
 8004a56:	4618      	mov	r0, r3
 8004a58:	f000 fcae 	bl	80053b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a6a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a7a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	021a      	lsls	r2, r3, #8
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004a90:	e002      	b.n	8004a98 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	75fb      	strb	r3, [r7, #23]
      break;
 8004a96:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004aa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3718      	adds	r7, #24
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop

08004aac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d101      	bne.n	8004ac8 <HAL_TIM_ConfigClockSource+0x1c>
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	e0de      	b.n	8004c86 <HAL_TIM_ConfigClockSource+0x1da>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2202      	movs	r2, #2
 8004ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004ae6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004aea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004af2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68ba      	ldr	r2, [r7, #8]
 8004afa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a63      	ldr	r2, [pc, #396]	; (8004c90 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	f000 80a9 	beq.w	8004c5a <HAL_TIM_ConfigClockSource+0x1ae>
 8004b08:	4a61      	ldr	r2, [pc, #388]	; (8004c90 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	f200 80ae 	bhi.w	8004c6c <HAL_TIM_ConfigClockSource+0x1c0>
 8004b10:	4a60      	ldr	r2, [pc, #384]	; (8004c94 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	f000 80a1 	beq.w	8004c5a <HAL_TIM_ConfigClockSource+0x1ae>
 8004b18:	4a5e      	ldr	r2, [pc, #376]	; (8004c94 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	f200 80a6 	bhi.w	8004c6c <HAL_TIM_ConfigClockSource+0x1c0>
 8004b20:	4a5d      	ldr	r2, [pc, #372]	; (8004c98 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	f000 8099 	beq.w	8004c5a <HAL_TIM_ConfigClockSource+0x1ae>
 8004b28:	4a5b      	ldr	r2, [pc, #364]	; (8004c98 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	f200 809e 	bhi.w	8004c6c <HAL_TIM_ConfigClockSource+0x1c0>
 8004b30:	4a5a      	ldr	r2, [pc, #360]	; (8004c9c <HAL_TIM_ConfigClockSource+0x1f0>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	f000 8091 	beq.w	8004c5a <HAL_TIM_ConfigClockSource+0x1ae>
 8004b38:	4a58      	ldr	r2, [pc, #352]	; (8004c9c <HAL_TIM_ConfigClockSource+0x1f0>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	f200 8096 	bhi.w	8004c6c <HAL_TIM_ConfigClockSource+0x1c0>
 8004b40:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004b44:	f000 8089 	beq.w	8004c5a <HAL_TIM_ConfigClockSource+0x1ae>
 8004b48:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004b4c:	f200 808e 	bhi.w	8004c6c <HAL_TIM_ConfigClockSource+0x1c0>
 8004b50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b54:	d03e      	beq.n	8004bd4 <HAL_TIM_ConfigClockSource+0x128>
 8004b56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b5a:	f200 8087 	bhi.w	8004c6c <HAL_TIM_ConfigClockSource+0x1c0>
 8004b5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b62:	f000 8086 	beq.w	8004c72 <HAL_TIM_ConfigClockSource+0x1c6>
 8004b66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b6a:	d87f      	bhi.n	8004c6c <HAL_TIM_ConfigClockSource+0x1c0>
 8004b6c:	2b70      	cmp	r3, #112	; 0x70
 8004b6e:	d01a      	beq.n	8004ba6 <HAL_TIM_ConfigClockSource+0xfa>
 8004b70:	2b70      	cmp	r3, #112	; 0x70
 8004b72:	d87b      	bhi.n	8004c6c <HAL_TIM_ConfigClockSource+0x1c0>
 8004b74:	2b60      	cmp	r3, #96	; 0x60
 8004b76:	d050      	beq.n	8004c1a <HAL_TIM_ConfigClockSource+0x16e>
 8004b78:	2b60      	cmp	r3, #96	; 0x60
 8004b7a:	d877      	bhi.n	8004c6c <HAL_TIM_ConfigClockSource+0x1c0>
 8004b7c:	2b50      	cmp	r3, #80	; 0x50
 8004b7e:	d03c      	beq.n	8004bfa <HAL_TIM_ConfigClockSource+0x14e>
 8004b80:	2b50      	cmp	r3, #80	; 0x50
 8004b82:	d873      	bhi.n	8004c6c <HAL_TIM_ConfigClockSource+0x1c0>
 8004b84:	2b40      	cmp	r3, #64	; 0x40
 8004b86:	d058      	beq.n	8004c3a <HAL_TIM_ConfigClockSource+0x18e>
 8004b88:	2b40      	cmp	r3, #64	; 0x40
 8004b8a:	d86f      	bhi.n	8004c6c <HAL_TIM_ConfigClockSource+0x1c0>
 8004b8c:	2b30      	cmp	r3, #48	; 0x30
 8004b8e:	d064      	beq.n	8004c5a <HAL_TIM_ConfigClockSource+0x1ae>
 8004b90:	2b30      	cmp	r3, #48	; 0x30
 8004b92:	d86b      	bhi.n	8004c6c <HAL_TIM_ConfigClockSource+0x1c0>
 8004b94:	2b20      	cmp	r3, #32
 8004b96:	d060      	beq.n	8004c5a <HAL_TIM_ConfigClockSource+0x1ae>
 8004b98:	2b20      	cmp	r3, #32
 8004b9a:	d867      	bhi.n	8004c6c <HAL_TIM_ConfigClockSource+0x1c0>
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d05c      	beq.n	8004c5a <HAL_TIM_ConfigClockSource+0x1ae>
 8004ba0:	2b10      	cmp	r3, #16
 8004ba2:	d05a      	beq.n	8004c5a <HAL_TIM_ConfigClockSource+0x1ae>
 8004ba4:	e062      	b.n	8004c6c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6818      	ldr	r0, [r3, #0]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	6899      	ldr	r1, [r3, #8]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	685a      	ldr	r2, [r3, #4]
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	f000 fdff 	bl	80057b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004bc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68ba      	ldr	r2, [r7, #8]
 8004bd0:	609a      	str	r2, [r3, #8]
      break;
 8004bd2:	e04f      	b.n	8004c74 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6818      	ldr	r0, [r3, #0]
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	6899      	ldr	r1, [r3, #8]
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	685a      	ldr	r2, [r3, #4]
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	f000 fde8 	bl	80057b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	689a      	ldr	r2, [r3, #8]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bf6:	609a      	str	r2, [r3, #8]
      break;
 8004bf8:	e03c      	b.n	8004c74 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6818      	ldr	r0, [r3, #0]
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	6859      	ldr	r1, [r3, #4]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	461a      	mov	r2, r3
 8004c08:	f000 fca4 	bl	8005554 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2150      	movs	r1, #80	; 0x50
 8004c12:	4618      	mov	r0, r3
 8004c14:	f000 fdb3 	bl	800577e <TIM_ITRx_SetConfig>
      break;
 8004c18:	e02c      	b.n	8004c74 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6818      	ldr	r0, [r3, #0]
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	6859      	ldr	r1, [r3, #4]
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	461a      	mov	r2, r3
 8004c28:	f000 fd00 	bl	800562c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2160      	movs	r1, #96	; 0x60
 8004c32:	4618      	mov	r0, r3
 8004c34:	f000 fda3 	bl	800577e <TIM_ITRx_SetConfig>
      break;
 8004c38:	e01c      	b.n	8004c74 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6818      	ldr	r0, [r3, #0]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	6859      	ldr	r1, [r3, #4]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	461a      	mov	r2, r3
 8004c48:	f000 fc84 	bl	8005554 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2140      	movs	r1, #64	; 0x40
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 fd93 	bl	800577e <TIM_ITRx_SetConfig>
      break;
 8004c58:	e00c      	b.n	8004c74 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4619      	mov	r1, r3
 8004c64:	4610      	mov	r0, r2
 8004c66:	f000 fd8a 	bl	800577e <TIM_ITRx_SetConfig>
      break;
 8004c6a:	e003      	b.n	8004c74 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c70:	e000      	b.n	8004c74 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8004c72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	00100070 	.word	0x00100070
 8004c94:	00100040 	.word	0x00100040
 8004c98:	00100030 	.word	0x00100030
 8004c9c:	00100020 	.word	0x00100020

08004ca0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004caa:	2300      	movs	r3, #0
 8004cac:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	2b0c      	cmp	r3, #12
 8004cb2:	d831      	bhi.n	8004d18 <HAL_TIM_ReadCapturedValue+0x78>
 8004cb4:	a201      	add	r2, pc, #4	; (adr r2, 8004cbc <HAL_TIM_ReadCapturedValue+0x1c>)
 8004cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cba:	bf00      	nop
 8004cbc:	08004cf1 	.word	0x08004cf1
 8004cc0:	08004d19 	.word	0x08004d19
 8004cc4:	08004d19 	.word	0x08004d19
 8004cc8:	08004d19 	.word	0x08004d19
 8004ccc:	08004cfb 	.word	0x08004cfb
 8004cd0:	08004d19 	.word	0x08004d19
 8004cd4:	08004d19 	.word	0x08004d19
 8004cd8:	08004d19 	.word	0x08004d19
 8004cdc:	08004d05 	.word	0x08004d05
 8004ce0:	08004d19 	.word	0x08004d19
 8004ce4:	08004d19 	.word	0x08004d19
 8004ce8:	08004d19 	.word	0x08004d19
 8004cec:	08004d0f 	.word	0x08004d0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cf6:	60fb      	str	r3, [r7, #12]

      break;
 8004cf8:	e00f      	b.n	8004d1a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d00:	60fb      	str	r3, [r7, #12]

      break;
 8004d02:	e00a      	b.n	8004d1a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d0a:	60fb      	str	r3, [r7, #12]

      break;
 8004d0c:	e005      	b.n	8004d1a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d14:	60fb      	str	r3, [r7, #12]

      break;
 8004d16:	e000      	b.n	8004d1a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004d18:	bf00      	nop
  }

  return tmpreg;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3714      	adds	r7, #20
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d58:	bf00      	nop
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d6c:	bf00      	nop
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a3c      	ldr	r2, [pc, #240]	; (8004e7c <TIM_Base_SetConfig+0x104>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d00f      	beq.n	8004db0 <TIM_Base_SetConfig+0x38>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d96:	d00b      	beq.n	8004db0 <TIM_Base_SetConfig+0x38>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a39      	ldr	r2, [pc, #228]	; (8004e80 <TIM_Base_SetConfig+0x108>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d007      	beq.n	8004db0 <TIM_Base_SetConfig+0x38>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a38      	ldr	r2, [pc, #224]	; (8004e84 <TIM_Base_SetConfig+0x10c>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d003      	beq.n	8004db0 <TIM_Base_SetConfig+0x38>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a37      	ldr	r2, [pc, #220]	; (8004e88 <TIM_Base_SetConfig+0x110>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d108      	bne.n	8004dc2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a2d      	ldr	r2, [pc, #180]	; (8004e7c <TIM_Base_SetConfig+0x104>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d01b      	beq.n	8004e02 <TIM_Base_SetConfig+0x8a>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dd0:	d017      	beq.n	8004e02 <TIM_Base_SetConfig+0x8a>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a2a      	ldr	r2, [pc, #168]	; (8004e80 <TIM_Base_SetConfig+0x108>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d013      	beq.n	8004e02 <TIM_Base_SetConfig+0x8a>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a29      	ldr	r2, [pc, #164]	; (8004e84 <TIM_Base_SetConfig+0x10c>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d00f      	beq.n	8004e02 <TIM_Base_SetConfig+0x8a>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a28      	ldr	r2, [pc, #160]	; (8004e88 <TIM_Base_SetConfig+0x110>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d00b      	beq.n	8004e02 <TIM_Base_SetConfig+0x8a>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a27      	ldr	r2, [pc, #156]	; (8004e8c <TIM_Base_SetConfig+0x114>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d007      	beq.n	8004e02 <TIM_Base_SetConfig+0x8a>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a26      	ldr	r2, [pc, #152]	; (8004e90 <TIM_Base_SetConfig+0x118>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d003      	beq.n	8004e02 <TIM_Base_SetConfig+0x8a>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a25      	ldr	r2, [pc, #148]	; (8004e94 <TIM_Base_SetConfig+0x11c>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d108      	bne.n	8004e14 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	689a      	ldr	r2, [r3, #8]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a10      	ldr	r2, [pc, #64]	; (8004e7c <TIM_Base_SetConfig+0x104>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d00f      	beq.n	8004e60 <TIM_Base_SetConfig+0xe8>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a11      	ldr	r2, [pc, #68]	; (8004e88 <TIM_Base_SetConfig+0x110>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d00b      	beq.n	8004e60 <TIM_Base_SetConfig+0xe8>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a10      	ldr	r2, [pc, #64]	; (8004e8c <TIM_Base_SetConfig+0x114>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d007      	beq.n	8004e60 <TIM_Base_SetConfig+0xe8>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a0f      	ldr	r2, [pc, #60]	; (8004e90 <TIM_Base_SetConfig+0x118>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d003      	beq.n	8004e60 <TIM_Base_SetConfig+0xe8>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a0e      	ldr	r2, [pc, #56]	; (8004e94 <TIM_Base_SetConfig+0x11c>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d103      	bne.n	8004e68 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	691a      	ldr	r2, [r3, #16]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	615a      	str	r2, [r3, #20]
}
 8004e6e:	bf00      	nop
 8004e70:	3714      	adds	r7, #20
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	40012c00 	.word	0x40012c00
 8004e80:	40000400 	.word	0x40000400
 8004e84:	40000800 	.word	0x40000800
 8004e88:	40013400 	.word	0x40013400
 8004e8c:	40014000 	.word	0x40014000
 8004e90:	40014400 	.word	0x40014400
 8004e94:	40014800 	.word	0x40014800

08004e98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b087      	sub	sp, #28
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	f023 0201 	bic.w	r2, r3, #1
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f023 0303 	bic.w	r3, r3, #3
 8004ed2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	f023 0302 	bic.w	r3, r3, #2
 8004ee4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a2c      	ldr	r2, [pc, #176]	; (8004fa4 <TIM_OC1_SetConfig+0x10c>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d00f      	beq.n	8004f18 <TIM_OC1_SetConfig+0x80>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a2b      	ldr	r2, [pc, #172]	; (8004fa8 <TIM_OC1_SetConfig+0x110>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d00b      	beq.n	8004f18 <TIM_OC1_SetConfig+0x80>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a2a      	ldr	r2, [pc, #168]	; (8004fac <TIM_OC1_SetConfig+0x114>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d007      	beq.n	8004f18 <TIM_OC1_SetConfig+0x80>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a29      	ldr	r2, [pc, #164]	; (8004fb0 <TIM_OC1_SetConfig+0x118>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d003      	beq.n	8004f18 <TIM_OC1_SetConfig+0x80>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a28      	ldr	r2, [pc, #160]	; (8004fb4 <TIM_OC1_SetConfig+0x11c>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d10c      	bne.n	8004f32 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	f023 0308 	bic.w	r3, r3, #8
 8004f1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	f023 0304 	bic.w	r3, r3, #4
 8004f30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a1b      	ldr	r2, [pc, #108]	; (8004fa4 <TIM_OC1_SetConfig+0x10c>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d00f      	beq.n	8004f5a <TIM_OC1_SetConfig+0xc2>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a1a      	ldr	r2, [pc, #104]	; (8004fa8 <TIM_OC1_SetConfig+0x110>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d00b      	beq.n	8004f5a <TIM_OC1_SetConfig+0xc2>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a19      	ldr	r2, [pc, #100]	; (8004fac <TIM_OC1_SetConfig+0x114>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d007      	beq.n	8004f5a <TIM_OC1_SetConfig+0xc2>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a18      	ldr	r2, [pc, #96]	; (8004fb0 <TIM_OC1_SetConfig+0x118>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d003      	beq.n	8004f5a <TIM_OC1_SetConfig+0xc2>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a17      	ldr	r2, [pc, #92]	; (8004fb4 <TIM_OC1_SetConfig+0x11c>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d111      	bne.n	8004f7e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	685a      	ldr	r2, [r3, #4]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	621a      	str	r2, [r3, #32]
}
 8004f98:	bf00      	nop
 8004f9a:	371c      	adds	r7, #28
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr
 8004fa4:	40012c00 	.word	0x40012c00
 8004fa8:	40013400 	.word	0x40013400
 8004fac:	40014000 	.word	0x40014000
 8004fb0:	40014400 	.word	0x40014400
 8004fb4:	40014800 	.word	0x40014800

08004fb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b087      	sub	sp, #28
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	f023 0210 	bic.w	r2, r3, #16
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ff2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	021b      	lsls	r3, r3, #8
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	f023 0320 	bic.w	r3, r3, #32
 8005006:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	011b      	lsls	r3, r3, #4
 800500e:	697a      	ldr	r2, [r7, #20]
 8005010:	4313      	orrs	r3, r2
 8005012:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a28      	ldr	r2, [pc, #160]	; (80050b8 <TIM_OC2_SetConfig+0x100>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d003      	beq.n	8005024 <TIM_OC2_SetConfig+0x6c>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a27      	ldr	r2, [pc, #156]	; (80050bc <TIM_OC2_SetConfig+0x104>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d10d      	bne.n	8005040 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800502a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	011b      	lsls	r3, r3, #4
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	4313      	orrs	r3, r2
 8005036:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800503e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a1d      	ldr	r2, [pc, #116]	; (80050b8 <TIM_OC2_SetConfig+0x100>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d00f      	beq.n	8005068 <TIM_OC2_SetConfig+0xb0>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a1c      	ldr	r2, [pc, #112]	; (80050bc <TIM_OC2_SetConfig+0x104>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d00b      	beq.n	8005068 <TIM_OC2_SetConfig+0xb0>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a1b      	ldr	r2, [pc, #108]	; (80050c0 <TIM_OC2_SetConfig+0x108>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d007      	beq.n	8005068 <TIM_OC2_SetConfig+0xb0>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a1a      	ldr	r2, [pc, #104]	; (80050c4 <TIM_OC2_SetConfig+0x10c>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d003      	beq.n	8005068 <TIM_OC2_SetConfig+0xb0>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a19      	ldr	r2, [pc, #100]	; (80050c8 <TIM_OC2_SetConfig+0x110>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d113      	bne.n	8005090 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800506e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005076:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	693a      	ldr	r2, [r7, #16]
 8005080:	4313      	orrs	r3, r2
 8005082:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	699b      	ldr	r3, [r3, #24]
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	693a      	ldr	r2, [r7, #16]
 800508c:	4313      	orrs	r3, r2
 800508e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	685a      	ldr	r2, [r3, #4]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	621a      	str	r2, [r3, #32]
}
 80050aa:	bf00      	nop
 80050ac:	371c      	adds	r7, #28
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	40012c00 	.word	0x40012c00
 80050bc:	40013400 	.word	0x40013400
 80050c0:	40014000 	.word	0x40014000
 80050c4:	40014400 	.word	0x40014400
 80050c8:	40014800 	.word	0x40014800

080050cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b087      	sub	sp, #28
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a1b      	ldr	r3, [r3, #32]
 80050da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a1b      	ldr	r3, [r3, #32]
 80050e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	69db      	ldr	r3, [r3, #28]
 80050f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f023 0303 	bic.w	r3, r3, #3
 8005106:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	4313      	orrs	r3, r2
 8005110:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005118:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	021b      	lsls	r3, r3, #8
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	4313      	orrs	r3, r2
 8005124:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a27      	ldr	r2, [pc, #156]	; (80051c8 <TIM_OC3_SetConfig+0xfc>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d003      	beq.n	8005136 <TIM_OC3_SetConfig+0x6a>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a26      	ldr	r2, [pc, #152]	; (80051cc <TIM_OC3_SetConfig+0x100>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d10d      	bne.n	8005152 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800513c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	021b      	lsls	r3, r3, #8
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	4313      	orrs	r3, r2
 8005148:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005150:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a1c      	ldr	r2, [pc, #112]	; (80051c8 <TIM_OC3_SetConfig+0xfc>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d00f      	beq.n	800517a <TIM_OC3_SetConfig+0xae>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a1b      	ldr	r2, [pc, #108]	; (80051cc <TIM_OC3_SetConfig+0x100>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d00b      	beq.n	800517a <TIM_OC3_SetConfig+0xae>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a1a      	ldr	r2, [pc, #104]	; (80051d0 <TIM_OC3_SetConfig+0x104>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d007      	beq.n	800517a <TIM_OC3_SetConfig+0xae>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a19      	ldr	r2, [pc, #100]	; (80051d4 <TIM_OC3_SetConfig+0x108>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d003      	beq.n	800517a <TIM_OC3_SetConfig+0xae>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a18      	ldr	r2, [pc, #96]	; (80051d8 <TIM_OC3_SetConfig+0x10c>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d113      	bne.n	80051a2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005180:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005188:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	011b      	lsls	r3, r3, #4
 8005190:	693a      	ldr	r2, [r7, #16]
 8005192:	4313      	orrs	r3, r2
 8005194:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	011b      	lsls	r3, r3, #4
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	4313      	orrs	r3, r2
 80051a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	685a      	ldr	r2, [r3, #4]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	621a      	str	r2, [r3, #32]
}
 80051bc:	bf00      	nop
 80051be:	371c      	adds	r7, #28
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr
 80051c8:	40012c00 	.word	0x40012c00
 80051cc:	40013400 	.word	0x40013400
 80051d0:	40014000 	.word	0x40014000
 80051d4:	40014400 	.word	0x40014400
 80051d8:	40014800 	.word	0x40014800

080051dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051dc:	b480      	push	{r7}
 80051de:	b087      	sub	sp, #28
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	69db      	ldr	r3, [r3, #28]
 8005202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800520a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800520e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005216:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	021b      	lsls	r3, r3, #8
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	4313      	orrs	r3, r2
 8005222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800522a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	031b      	lsls	r3, r3, #12
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	4313      	orrs	r3, r2
 8005236:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a28      	ldr	r2, [pc, #160]	; (80052dc <TIM_OC4_SetConfig+0x100>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d003      	beq.n	8005248 <TIM_OC4_SetConfig+0x6c>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a27      	ldr	r2, [pc, #156]	; (80052e0 <TIM_OC4_SetConfig+0x104>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d10d      	bne.n	8005264 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800524e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	031b      	lsls	r3, r3, #12
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	4313      	orrs	r3, r2
 800525a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005262:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a1d      	ldr	r2, [pc, #116]	; (80052dc <TIM_OC4_SetConfig+0x100>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d00f      	beq.n	800528c <TIM_OC4_SetConfig+0xb0>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a1c      	ldr	r2, [pc, #112]	; (80052e0 <TIM_OC4_SetConfig+0x104>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d00b      	beq.n	800528c <TIM_OC4_SetConfig+0xb0>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a1b      	ldr	r2, [pc, #108]	; (80052e4 <TIM_OC4_SetConfig+0x108>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d007      	beq.n	800528c <TIM_OC4_SetConfig+0xb0>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a1a      	ldr	r2, [pc, #104]	; (80052e8 <TIM_OC4_SetConfig+0x10c>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d003      	beq.n	800528c <TIM_OC4_SetConfig+0xb0>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a19      	ldr	r2, [pc, #100]	; (80052ec <TIM_OC4_SetConfig+0x110>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d113      	bne.n	80052b4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005292:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800529a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	695b      	ldr	r3, [r3, #20]
 80052a0:	019b      	lsls	r3, r3, #6
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	699b      	ldr	r3, [r3, #24]
 80052ac:	019b      	lsls	r3, r3, #6
 80052ae:	693a      	ldr	r2, [r7, #16]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	693a      	ldr	r2, [r7, #16]
 80052b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	685a      	ldr	r2, [r3, #4]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	697a      	ldr	r2, [r7, #20]
 80052cc:	621a      	str	r2, [r3, #32]
}
 80052ce:	bf00      	nop
 80052d0:	371c      	adds	r7, #28
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	40012c00 	.word	0x40012c00
 80052e0:	40013400 	.word	0x40013400
 80052e4:	40014000 	.word	0x40014000
 80052e8:	40014400 	.word	0x40014400
 80052ec:	40014800 	.word	0x40014800

080052f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b087      	sub	sp, #28
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800531e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005322:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	4313      	orrs	r3, r2
 800532c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005334:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	041b      	lsls	r3, r3, #16
 800533c:	693a      	ldr	r2, [r7, #16]
 800533e:	4313      	orrs	r3, r2
 8005340:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a17      	ldr	r2, [pc, #92]	; (80053a4 <TIM_OC5_SetConfig+0xb4>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d00f      	beq.n	800536a <TIM_OC5_SetConfig+0x7a>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a16      	ldr	r2, [pc, #88]	; (80053a8 <TIM_OC5_SetConfig+0xb8>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d00b      	beq.n	800536a <TIM_OC5_SetConfig+0x7a>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a15      	ldr	r2, [pc, #84]	; (80053ac <TIM_OC5_SetConfig+0xbc>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d007      	beq.n	800536a <TIM_OC5_SetConfig+0x7a>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a14      	ldr	r2, [pc, #80]	; (80053b0 <TIM_OC5_SetConfig+0xc0>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d003      	beq.n	800536a <TIM_OC5_SetConfig+0x7a>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a13      	ldr	r2, [pc, #76]	; (80053b4 <TIM_OC5_SetConfig+0xc4>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d109      	bne.n	800537e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005370:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	695b      	ldr	r3, [r3, #20]
 8005376:	021b      	lsls	r3, r3, #8
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	4313      	orrs	r3, r2
 800537c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	685a      	ldr	r2, [r3, #4]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	693a      	ldr	r2, [r7, #16]
 8005396:	621a      	str	r2, [r3, #32]
}
 8005398:	bf00      	nop
 800539a:	371c      	adds	r7, #28
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr
 80053a4:	40012c00 	.word	0x40012c00
 80053a8:	40013400 	.word	0x40013400
 80053ac:	40014000 	.word	0x40014000
 80053b0:	40014400 	.word	0x40014400
 80053b4:	40014800 	.word	0x40014800

080053b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b087      	sub	sp, #28
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a1b      	ldr	r3, [r3, #32]
 80053c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a1b      	ldr	r3, [r3, #32]
 80053d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	021b      	lsls	r3, r3, #8
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80053fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	051b      	lsls	r3, r3, #20
 8005406:	693a      	ldr	r2, [r7, #16]
 8005408:	4313      	orrs	r3, r2
 800540a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a18      	ldr	r2, [pc, #96]	; (8005470 <TIM_OC6_SetConfig+0xb8>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d00f      	beq.n	8005434 <TIM_OC6_SetConfig+0x7c>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a17      	ldr	r2, [pc, #92]	; (8005474 <TIM_OC6_SetConfig+0xbc>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d00b      	beq.n	8005434 <TIM_OC6_SetConfig+0x7c>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a16      	ldr	r2, [pc, #88]	; (8005478 <TIM_OC6_SetConfig+0xc0>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d007      	beq.n	8005434 <TIM_OC6_SetConfig+0x7c>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a15      	ldr	r2, [pc, #84]	; (800547c <TIM_OC6_SetConfig+0xc4>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d003      	beq.n	8005434 <TIM_OC6_SetConfig+0x7c>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a14      	ldr	r2, [pc, #80]	; (8005480 <TIM_OC6_SetConfig+0xc8>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d109      	bne.n	8005448 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800543a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	695b      	ldr	r3, [r3, #20]
 8005440:	029b      	lsls	r3, r3, #10
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	4313      	orrs	r3, r2
 8005446:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	685a      	ldr	r2, [r3, #4]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	693a      	ldr	r2, [r7, #16]
 8005460:	621a      	str	r2, [r3, #32]
}
 8005462:	bf00      	nop
 8005464:	371c      	adds	r7, #28
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	40012c00 	.word	0x40012c00
 8005474:	40013400 	.word	0x40013400
 8005478:	40014000 	.word	0x40014000
 800547c:	40014400 	.word	0x40014400
 8005480:	40014800 	.word	0x40014800

08005484 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005484:	b480      	push	{r7}
 8005486:	b087      	sub	sp, #28
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]
 8005490:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6a1b      	ldr	r3, [r3, #32]
 8005496:	f023 0201 	bic.w	r2, r3, #1
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6a1b      	ldr	r3, [r3, #32]
 80054a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	4a24      	ldr	r2, [pc, #144]	; (8005540 <TIM_TI1_SetConfig+0xbc>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d013      	beq.n	80054da <TIM_TI1_SetConfig+0x56>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054b8:	d00f      	beq.n	80054da <TIM_TI1_SetConfig+0x56>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	4a21      	ldr	r2, [pc, #132]	; (8005544 <TIM_TI1_SetConfig+0xc0>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d00b      	beq.n	80054da <TIM_TI1_SetConfig+0x56>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	4a20      	ldr	r2, [pc, #128]	; (8005548 <TIM_TI1_SetConfig+0xc4>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d007      	beq.n	80054da <TIM_TI1_SetConfig+0x56>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	4a1f      	ldr	r2, [pc, #124]	; (800554c <TIM_TI1_SetConfig+0xc8>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d003      	beq.n	80054da <TIM_TI1_SetConfig+0x56>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	4a1e      	ldr	r2, [pc, #120]	; (8005550 <TIM_TI1_SetConfig+0xcc>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d101      	bne.n	80054de <TIM_TI1_SetConfig+0x5a>
 80054da:	2301      	movs	r3, #1
 80054dc:	e000      	b.n	80054e0 <TIM_TI1_SetConfig+0x5c>
 80054de:	2300      	movs	r3, #0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d008      	beq.n	80054f6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	f023 0303 	bic.w	r3, r3, #3
 80054ea:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80054ec:	697a      	ldr	r2, [r7, #20]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	617b      	str	r3, [r7, #20]
 80054f4:	e003      	b.n	80054fe <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	f043 0301 	orr.w	r3, r3, #1
 80054fc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005504:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	011b      	lsls	r3, r3, #4
 800550a:	b2db      	uxtb	r3, r3
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	4313      	orrs	r3, r2
 8005510:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	f023 030a 	bic.w	r3, r3, #10
 8005518:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	f003 030a 	and.w	r3, r3, #10
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	4313      	orrs	r3, r2
 8005524:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	693a      	ldr	r2, [r7, #16]
 8005530:	621a      	str	r2, [r3, #32]
}
 8005532:	bf00      	nop
 8005534:	371c      	adds	r7, #28
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	40012c00 	.word	0x40012c00
 8005544:	40000400 	.word	0x40000400
 8005548:	40000800 	.word	0x40000800
 800554c:	40013400 	.word	0x40013400
 8005550:	40014000 	.word	0x40014000

08005554 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005554:	b480      	push	{r7}
 8005556:	b087      	sub	sp, #28
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6a1b      	ldr	r3, [r3, #32]
 8005564:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	f023 0201 	bic.w	r2, r3, #1
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	699b      	ldr	r3, [r3, #24]
 8005576:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800557e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	011b      	lsls	r3, r3, #4
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	4313      	orrs	r3, r2
 8005588:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	f023 030a 	bic.w	r3, r3, #10
 8005590:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	4313      	orrs	r3, r2
 8005598:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	693a      	ldr	r2, [r7, #16]
 800559e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	621a      	str	r2, [r3, #32]
}
 80055a6:	bf00      	nop
 80055a8:	371c      	adds	r7, #28
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr

080055b2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80055b2:	b480      	push	{r7}
 80055b4:	b087      	sub	sp, #28
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	60f8      	str	r0, [r7, #12]
 80055ba:	60b9      	str	r1, [r7, #8]
 80055bc:	607a      	str	r2, [r7, #4]
 80055be:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6a1b      	ldr	r3, [r3, #32]
 80055c4:	f023 0210 	bic.w	r2, r3, #16
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055de:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	021b      	lsls	r3, r3, #8
 80055e4:	697a      	ldr	r2, [r7, #20]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	031b      	lsls	r3, r3, #12
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	697a      	ldr	r2, [r7, #20]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005604:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	011b      	lsls	r3, r3, #4
 800560a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	4313      	orrs	r3, r2
 8005612:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	621a      	str	r2, [r3, #32]
}
 8005620:	bf00      	nop
 8005622:	371c      	adds	r7, #28
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800562c:	b480      	push	{r7}
 800562e:	b087      	sub	sp, #28
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6a1b      	ldr	r3, [r3, #32]
 800563c:	f023 0210 	bic.w	r2, r3, #16
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	699b      	ldr	r3, [r3, #24]
 8005648:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005656:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	031b      	lsls	r3, r3, #12
 800565c:	697a      	ldr	r2, [r7, #20]
 800565e:	4313      	orrs	r3, r2
 8005660:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005668:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	011b      	lsls	r3, r3, #4
 800566e:	693a      	ldr	r2, [r7, #16]
 8005670:	4313      	orrs	r3, r2
 8005672:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	697a      	ldr	r2, [r7, #20]
 8005678:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	621a      	str	r2, [r3, #32]
}
 8005680:	bf00      	nop
 8005682:	371c      	adds	r7, #28
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800568c:	b480      	push	{r7}
 800568e:	b087      	sub	sp, #28
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	607a      	str	r2, [r7, #4]
 8005698:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6a1b      	ldr	r3, [r3, #32]
 800569e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	69db      	ldr	r3, [r3, #28]
 80056aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6a1b      	ldr	r3, [r3, #32]
 80056b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	f023 0303 	bic.w	r3, r3, #3
 80056b8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4313      	orrs	r3, r2
 80056c0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056c8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	011b      	lsls	r3, r3, #4
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	697a      	ldr	r2, [r7, #20]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80056dc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	021b      	lsls	r3, r3, #8
 80056e2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	693a      	ldr	r2, [r7, #16]
 80056f6:	621a      	str	r2, [r3, #32]
}
 80056f8:	bf00      	nop
 80056fa:	371c      	adds	r7, #28
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005704:	b480      	push	{r7}
 8005706:	b087      	sub	sp, #28
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	607a      	str	r2, [r7, #4]
 8005710:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6a1b      	ldr	r3, [r3, #32]
 8005716:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	69db      	ldr	r3, [r3, #28]
 8005722:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6a1b      	ldr	r3, [r3, #32]
 8005728:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005730:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	021b      	lsls	r3, r3, #8
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	4313      	orrs	r3, r2
 800573a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005742:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	031b      	lsls	r3, r3, #12
 8005748:	b29b      	uxth	r3, r3
 800574a:	697a      	ldr	r2, [r7, #20]
 800574c:	4313      	orrs	r3, r2
 800574e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005756:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	031b      	lsls	r3, r3, #12
 800575c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005760:	693a      	ldr	r2, [r7, #16]
 8005762:	4313      	orrs	r3, r2
 8005764:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	697a      	ldr	r2, [r7, #20]
 800576a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	621a      	str	r2, [r3, #32]
}
 8005772:	bf00      	nop
 8005774:	371c      	adds	r7, #28
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr

0800577e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800577e:	b480      	push	{r7}
 8005780:	b085      	sub	sp, #20
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
 8005786:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005798:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800579a:	683a      	ldr	r2, [r7, #0]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	4313      	orrs	r3, r2
 80057a0:	f043 0307 	orr.w	r3, r3, #7
 80057a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	609a      	str	r2, [r3, #8]
}
 80057ac:	bf00      	nop
 80057ae:	3714      	adds	r7, #20
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b087      	sub	sp, #28
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
 80057c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	021a      	lsls	r2, r3, #8
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	431a      	orrs	r2, r3
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	4313      	orrs	r3, r2
 80057e0:	697a      	ldr	r2, [r7, #20]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	697a      	ldr	r2, [r7, #20]
 80057ea:	609a      	str	r2, [r3, #8]
}
 80057ec:	bf00      	nop
 80057ee:	371c      	adds	r7, #28
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b087      	sub	sp, #28
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	f003 031f 	and.w	r3, r3, #31
 800580a:	2201      	movs	r2, #1
 800580c:	fa02 f303 	lsl.w	r3, r2, r3
 8005810:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6a1a      	ldr	r2, [r3, #32]
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	43db      	mvns	r3, r3
 800581a:	401a      	ands	r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6a1a      	ldr	r2, [r3, #32]
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	f003 031f 	and.w	r3, r3, #31
 800582a:	6879      	ldr	r1, [r7, #4]
 800582c:	fa01 f303 	lsl.w	r3, r1, r3
 8005830:	431a      	orrs	r2, r3
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	621a      	str	r2, [r3, #32]
}
 8005836:	bf00      	nop
 8005838:	371c      	adds	r7, #28
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
	...

08005844 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005854:	2b01      	cmp	r3, #1
 8005856:	d101      	bne.n	800585c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005858:	2302      	movs	r3, #2
 800585a:	e065      	b.n	8005928 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2202      	movs	r2, #2
 8005868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a2c      	ldr	r2, [pc, #176]	; (8005934 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d004      	beq.n	8005890 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a2b      	ldr	r2, [pc, #172]	; (8005938 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d108      	bne.n	80058a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005896:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	4313      	orrs	r3, r2
 80058a0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80058a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a1b      	ldr	r2, [pc, #108]	; (8005934 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d018      	beq.n	80058fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058d2:	d013      	beq.n	80058fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a18      	ldr	r2, [pc, #96]	; (800593c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d00e      	beq.n	80058fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a17      	ldr	r2, [pc, #92]	; (8005940 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d009      	beq.n	80058fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a12      	ldr	r2, [pc, #72]	; (8005938 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d004      	beq.n	80058fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a13      	ldr	r2, [pc, #76]	; (8005944 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d10c      	bne.n	8005916 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005902:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	68ba      	ldr	r2, [r7, #8]
 800590a:	4313      	orrs	r3, r2
 800590c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68ba      	ldr	r2, [r7, #8]
 8005914:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2201      	movs	r2, #1
 800591a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3714      	adds	r7, #20
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr
 8005934:	40012c00 	.word	0x40012c00
 8005938:	40013400 	.word	0x40013400
 800593c:	40000400 	.word	0x40000400
 8005940:	40000800 	.word	0x40000800
 8005944:	40014000 	.word	0x40014000

08005948 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005964:	bf00      	nop
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005978:	bf00      	nop
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800598c:	bf00      	nop
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80059a0:	bf00      	nop
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d101      	bne.n	80059e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e042      	b.n	8005a6c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d106      	bne.n	80059fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f7fb fee3 	bl	80017c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2224      	movs	r2, #36	; 0x24
 8005a02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f022 0201 	bic.w	r2, r2, #1
 8005a14:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 f8c2 	bl	8005ba0 <UART_SetConfig>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d101      	bne.n	8005a26 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e022      	b.n	8005a6c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d002      	beq.n	8005a34 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 fb82 	bl	8006138 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	685a      	ldr	r2, [r3, #4]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	689a      	ldr	r2, [r3, #8]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f042 0201 	orr.w	r2, r2, #1
 8005a62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 fc09 	bl	800627c <UART_CheckIdleState>
 8005a6a:	4603      	mov	r3, r0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3708      	adds	r7, #8
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b08a      	sub	sp, #40	; 0x28
 8005a78:	af02      	add	r7, sp, #8
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	603b      	str	r3, [r7, #0]
 8005a80:	4613      	mov	r3, r2
 8005a82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a8a:	2b20      	cmp	r3, #32
 8005a8c:	f040 8083 	bne.w	8005b96 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d002      	beq.n	8005a9c <HAL_UART_Transmit+0x28>
 8005a96:	88fb      	ldrh	r3, [r7, #6]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d101      	bne.n	8005aa0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e07b      	b.n	8005b98 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d101      	bne.n	8005aae <HAL_UART_Transmit+0x3a>
 8005aaa:	2302      	movs	r3, #2
 8005aac:	e074      	b.n	8005b98 <HAL_UART_Transmit+0x124>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2221      	movs	r2, #33	; 0x21
 8005ac2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ac6:	f7fc faa5 	bl	8002014 <HAL_GetTick>
 8005aca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	88fa      	ldrh	r2, [r7, #6]
 8005ad0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	88fa      	ldrh	r2, [r7, #6]
 8005ad8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ae4:	d108      	bne.n	8005af8 <HAL_UART_Transmit+0x84>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d104      	bne.n	8005af8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005aee:	2300      	movs	r3, #0
 8005af0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	61bb      	str	r3, [r7, #24]
 8005af6:	e003      	b.n	8005b00 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005afc:	2300      	movs	r3, #0
 8005afe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005b08:	e02c      	b.n	8005b64 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	9300      	str	r3, [sp, #0]
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	2200      	movs	r2, #0
 8005b12:	2180      	movs	r1, #128	; 0x80
 8005b14:	68f8      	ldr	r0, [r7, #12]
 8005b16:	f000 fbfc 	bl	8006312 <UART_WaitOnFlagUntilTimeout>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d001      	beq.n	8005b24 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	e039      	b.n	8005b98 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10b      	bne.n	8005b42 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	881b      	ldrh	r3, [r3, #0]
 8005b2e:	461a      	mov	r2, r3
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b38:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	3302      	adds	r3, #2
 8005b3e:	61bb      	str	r3, [r7, #24]
 8005b40:	e007      	b.n	8005b52 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	781a      	ldrb	r2, [r3, #0]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1cc      	bne.n	8005b0a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	9300      	str	r3, [sp, #0]
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	2200      	movs	r2, #0
 8005b78:	2140      	movs	r1, #64	; 0x40
 8005b7a:	68f8      	ldr	r0, [r7, #12]
 8005b7c:	f000 fbc9 	bl	8006312 <UART_WaitOnFlagUntilTimeout>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d001      	beq.n	8005b8a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005b86:	2303      	movs	r3, #3
 8005b88:	e006      	b.n	8005b98 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2220      	movs	r2, #32
 8005b8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005b92:	2300      	movs	r3, #0
 8005b94:	e000      	b.n	8005b98 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005b96:	2302      	movs	r3, #2
  }
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3720      	adds	r7, #32
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ba0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ba4:	b08c      	sub	sp, #48	; 0x30
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005baa:	2300      	movs	r3, #0
 8005bac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	689a      	ldr	r2, [r3, #8]
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	431a      	orrs	r2, r3
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	431a      	orrs	r2, r3
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	69db      	ldr	r3, [r3, #28]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	4bab      	ldr	r3, [pc, #684]	; (8005e7c <UART_SetConfig+0x2dc>)
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	6812      	ldr	r2, [r2, #0]
 8005bd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005bd8:	430b      	orrs	r3, r1
 8005bda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	68da      	ldr	r2, [r3, #12]
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	430a      	orrs	r2, r1
 8005bf0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4aa0      	ldr	r2, [pc, #640]	; (8005e80 <UART_SetConfig+0x2e0>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d004      	beq.n	8005c0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	6a1b      	ldr	r3, [r3, #32]
 8005c06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005c16:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005c1a:	697a      	ldr	r2, [r7, #20]
 8005c1c:	6812      	ldr	r2, [r2, #0]
 8005c1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c20:	430b      	orrs	r3, r1
 8005c22:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2a:	f023 010f 	bic.w	r1, r3, #15
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	430a      	orrs	r2, r1
 8005c38:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a91      	ldr	r2, [pc, #580]	; (8005e84 <UART_SetConfig+0x2e4>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d125      	bne.n	8005c90 <UART_SetConfig+0xf0>
 8005c44:	4b90      	ldr	r3, [pc, #576]	; (8005e88 <UART_SetConfig+0x2e8>)
 8005c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c4a:	f003 0303 	and.w	r3, r3, #3
 8005c4e:	2b03      	cmp	r3, #3
 8005c50:	d81a      	bhi.n	8005c88 <UART_SetConfig+0xe8>
 8005c52:	a201      	add	r2, pc, #4	; (adr r2, 8005c58 <UART_SetConfig+0xb8>)
 8005c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c58:	08005c69 	.word	0x08005c69
 8005c5c:	08005c79 	.word	0x08005c79
 8005c60:	08005c71 	.word	0x08005c71
 8005c64:	08005c81 	.word	0x08005c81
 8005c68:	2301      	movs	r3, #1
 8005c6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c6e:	e0d6      	b.n	8005e1e <UART_SetConfig+0x27e>
 8005c70:	2302      	movs	r3, #2
 8005c72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c76:	e0d2      	b.n	8005e1e <UART_SetConfig+0x27e>
 8005c78:	2304      	movs	r3, #4
 8005c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c7e:	e0ce      	b.n	8005e1e <UART_SetConfig+0x27e>
 8005c80:	2308      	movs	r3, #8
 8005c82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c86:	e0ca      	b.n	8005e1e <UART_SetConfig+0x27e>
 8005c88:	2310      	movs	r3, #16
 8005c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c8e:	e0c6      	b.n	8005e1e <UART_SetConfig+0x27e>
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a7d      	ldr	r2, [pc, #500]	; (8005e8c <UART_SetConfig+0x2ec>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d138      	bne.n	8005d0c <UART_SetConfig+0x16c>
 8005c9a:	4b7b      	ldr	r3, [pc, #492]	; (8005e88 <UART_SetConfig+0x2e8>)
 8005c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ca0:	f003 030c 	and.w	r3, r3, #12
 8005ca4:	2b0c      	cmp	r3, #12
 8005ca6:	d82d      	bhi.n	8005d04 <UART_SetConfig+0x164>
 8005ca8:	a201      	add	r2, pc, #4	; (adr r2, 8005cb0 <UART_SetConfig+0x110>)
 8005caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cae:	bf00      	nop
 8005cb0:	08005ce5 	.word	0x08005ce5
 8005cb4:	08005d05 	.word	0x08005d05
 8005cb8:	08005d05 	.word	0x08005d05
 8005cbc:	08005d05 	.word	0x08005d05
 8005cc0:	08005cf5 	.word	0x08005cf5
 8005cc4:	08005d05 	.word	0x08005d05
 8005cc8:	08005d05 	.word	0x08005d05
 8005ccc:	08005d05 	.word	0x08005d05
 8005cd0:	08005ced 	.word	0x08005ced
 8005cd4:	08005d05 	.word	0x08005d05
 8005cd8:	08005d05 	.word	0x08005d05
 8005cdc:	08005d05 	.word	0x08005d05
 8005ce0:	08005cfd 	.word	0x08005cfd
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cea:	e098      	b.n	8005e1e <UART_SetConfig+0x27e>
 8005cec:	2302      	movs	r3, #2
 8005cee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cf2:	e094      	b.n	8005e1e <UART_SetConfig+0x27e>
 8005cf4:	2304      	movs	r3, #4
 8005cf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cfa:	e090      	b.n	8005e1e <UART_SetConfig+0x27e>
 8005cfc:	2308      	movs	r3, #8
 8005cfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d02:	e08c      	b.n	8005e1e <UART_SetConfig+0x27e>
 8005d04:	2310      	movs	r3, #16
 8005d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d0a:	e088      	b.n	8005e1e <UART_SetConfig+0x27e>
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a5f      	ldr	r2, [pc, #380]	; (8005e90 <UART_SetConfig+0x2f0>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d125      	bne.n	8005d62 <UART_SetConfig+0x1c2>
 8005d16:	4b5c      	ldr	r3, [pc, #368]	; (8005e88 <UART_SetConfig+0x2e8>)
 8005d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d1c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d20:	2b30      	cmp	r3, #48	; 0x30
 8005d22:	d016      	beq.n	8005d52 <UART_SetConfig+0x1b2>
 8005d24:	2b30      	cmp	r3, #48	; 0x30
 8005d26:	d818      	bhi.n	8005d5a <UART_SetConfig+0x1ba>
 8005d28:	2b20      	cmp	r3, #32
 8005d2a:	d00a      	beq.n	8005d42 <UART_SetConfig+0x1a2>
 8005d2c:	2b20      	cmp	r3, #32
 8005d2e:	d814      	bhi.n	8005d5a <UART_SetConfig+0x1ba>
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d002      	beq.n	8005d3a <UART_SetConfig+0x19a>
 8005d34:	2b10      	cmp	r3, #16
 8005d36:	d008      	beq.n	8005d4a <UART_SetConfig+0x1aa>
 8005d38:	e00f      	b.n	8005d5a <UART_SetConfig+0x1ba>
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d40:	e06d      	b.n	8005e1e <UART_SetConfig+0x27e>
 8005d42:	2302      	movs	r3, #2
 8005d44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d48:	e069      	b.n	8005e1e <UART_SetConfig+0x27e>
 8005d4a:	2304      	movs	r3, #4
 8005d4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d50:	e065      	b.n	8005e1e <UART_SetConfig+0x27e>
 8005d52:	2308      	movs	r3, #8
 8005d54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d58:	e061      	b.n	8005e1e <UART_SetConfig+0x27e>
 8005d5a:	2310      	movs	r3, #16
 8005d5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d60:	e05d      	b.n	8005e1e <UART_SetConfig+0x27e>
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a4b      	ldr	r2, [pc, #300]	; (8005e94 <UART_SetConfig+0x2f4>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d125      	bne.n	8005db8 <UART_SetConfig+0x218>
 8005d6c:	4b46      	ldr	r3, [pc, #280]	; (8005e88 <UART_SetConfig+0x2e8>)
 8005d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d72:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005d76:	2bc0      	cmp	r3, #192	; 0xc0
 8005d78:	d016      	beq.n	8005da8 <UART_SetConfig+0x208>
 8005d7a:	2bc0      	cmp	r3, #192	; 0xc0
 8005d7c:	d818      	bhi.n	8005db0 <UART_SetConfig+0x210>
 8005d7e:	2b80      	cmp	r3, #128	; 0x80
 8005d80:	d00a      	beq.n	8005d98 <UART_SetConfig+0x1f8>
 8005d82:	2b80      	cmp	r3, #128	; 0x80
 8005d84:	d814      	bhi.n	8005db0 <UART_SetConfig+0x210>
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d002      	beq.n	8005d90 <UART_SetConfig+0x1f0>
 8005d8a:	2b40      	cmp	r3, #64	; 0x40
 8005d8c:	d008      	beq.n	8005da0 <UART_SetConfig+0x200>
 8005d8e:	e00f      	b.n	8005db0 <UART_SetConfig+0x210>
 8005d90:	2300      	movs	r3, #0
 8005d92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d96:	e042      	b.n	8005e1e <UART_SetConfig+0x27e>
 8005d98:	2302      	movs	r3, #2
 8005d9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d9e:	e03e      	b.n	8005e1e <UART_SetConfig+0x27e>
 8005da0:	2304      	movs	r3, #4
 8005da2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005da6:	e03a      	b.n	8005e1e <UART_SetConfig+0x27e>
 8005da8:	2308      	movs	r3, #8
 8005daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dae:	e036      	b.n	8005e1e <UART_SetConfig+0x27e>
 8005db0:	2310      	movs	r3, #16
 8005db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005db6:	e032      	b.n	8005e1e <UART_SetConfig+0x27e>
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a30      	ldr	r2, [pc, #192]	; (8005e80 <UART_SetConfig+0x2e0>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d12a      	bne.n	8005e18 <UART_SetConfig+0x278>
 8005dc2:	4b31      	ldr	r3, [pc, #196]	; (8005e88 <UART_SetConfig+0x2e8>)
 8005dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dc8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005dcc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005dd0:	d01a      	beq.n	8005e08 <UART_SetConfig+0x268>
 8005dd2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005dd6:	d81b      	bhi.n	8005e10 <UART_SetConfig+0x270>
 8005dd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ddc:	d00c      	beq.n	8005df8 <UART_SetConfig+0x258>
 8005dde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005de2:	d815      	bhi.n	8005e10 <UART_SetConfig+0x270>
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d003      	beq.n	8005df0 <UART_SetConfig+0x250>
 8005de8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dec:	d008      	beq.n	8005e00 <UART_SetConfig+0x260>
 8005dee:	e00f      	b.n	8005e10 <UART_SetConfig+0x270>
 8005df0:	2300      	movs	r3, #0
 8005df2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005df6:	e012      	b.n	8005e1e <UART_SetConfig+0x27e>
 8005df8:	2302      	movs	r3, #2
 8005dfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dfe:	e00e      	b.n	8005e1e <UART_SetConfig+0x27e>
 8005e00:	2304      	movs	r3, #4
 8005e02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e06:	e00a      	b.n	8005e1e <UART_SetConfig+0x27e>
 8005e08:	2308      	movs	r3, #8
 8005e0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e0e:	e006      	b.n	8005e1e <UART_SetConfig+0x27e>
 8005e10:	2310      	movs	r3, #16
 8005e12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e16:	e002      	b.n	8005e1e <UART_SetConfig+0x27e>
 8005e18:	2310      	movs	r3, #16
 8005e1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a17      	ldr	r2, [pc, #92]	; (8005e80 <UART_SetConfig+0x2e0>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	f040 80a8 	bne.w	8005f7a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005e2e:	2b08      	cmp	r3, #8
 8005e30:	d834      	bhi.n	8005e9c <UART_SetConfig+0x2fc>
 8005e32:	a201      	add	r2, pc, #4	; (adr r2, 8005e38 <UART_SetConfig+0x298>)
 8005e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e38:	08005e5d 	.word	0x08005e5d
 8005e3c:	08005e9d 	.word	0x08005e9d
 8005e40:	08005e65 	.word	0x08005e65
 8005e44:	08005e9d 	.word	0x08005e9d
 8005e48:	08005e6b 	.word	0x08005e6b
 8005e4c:	08005e9d 	.word	0x08005e9d
 8005e50:	08005e9d 	.word	0x08005e9d
 8005e54:	08005e9d 	.word	0x08005e9d
 8005e58:	08005e73 	.word	0x08005e73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e5c:	f7fd fd42 	bl	80038e4 <HAL_RCC_GetPCLK1Freq>
 8005e60:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e62:	e021      	b.n	8005ea8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e64:	4b0c      	ldr	r3, [pc, #48]	; (8005e98 <UART_SetConfig+0x2f8>)
 8005e66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005e68:	e01e      	b.n	8005ea8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e6a:	f7fd fccd 	bl	8003808 <HAL_RCC_GetSysClockFreq>
 8005e6e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e70:	e01a      	b.n	8005ea8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005e78:	e016      	b.n	8005ea8 <UART_SetConfig+0x308>
 8005e7a:	bf00      	nop
 8005e7c:	cfff69f3 	.word	0xcfff69f3
 8005e80:	40008000 	.word	0x40008000
 8005e84:	40013800 	.word	0x40013800
 8005e88:	40021000 	.word	0x40021000
 8005e8c:	40004400 	.word	0x40004400
 8005e90:	40004800 	.word	0x40004800
 8005e94:	40004c00 	.word	0x40004c00
 8005e98:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005ea6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	f000 812a 	beq.w	8006104 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb4:	4a9e      	ldr	r2, [pc, #632]	; (8006130 <UART_SetConfig+0x590>)
 8005eb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005eba:	461a      	mov	r2, r3
 8005ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebe:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ec2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	685a      	ldr	r2, [r3, #4]
 8005ec8:	4613      	mov	r3, r2
 8005eca:	005b      	lsls	r3, r3, #1
 8005ecc:	4413      	add	r3, r2
 8005ece:	69ba      	ldr	r2, [r7, #24]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d305      	bcc.n	8005ee0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005eda:	69ba      	ldr	r2, [r7, #24]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d903      	bls.n	8005ee8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005ee6:	e10d      	b.n	8006104 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eea:	2200      	movs	r2, #0
 8005eec:	60bb      	str	r3, [r7, #8]
 8005eee:	60fa      	str	r2, [r7, #12]
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef4:	4a8e      	ldr	r2, [pc, #568]	; (8006130 <UART_SetConfig+0x590>)
 8005ef6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	2200      	movs	r2, #0
 8005efe:	603b      	str	r3, [r7, #0]
 8005f00:	607a      	str	r2, [r7, #4]
 8005f02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005f0a:	f7fa fee5 	bl	8000cd8 <__aeabi_uldivmod>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	460b      	mov	r3, r1
 8005f12:	4610      	mov	r0, r2
 8005f14:	4619      	mov	r1, r3
 8005f16:	f04f 0200 	mov.w	r2, #0
 8005f1a:	f04f 0300 	mov.w	r3, #0
 8005f1e:	020b      	lsls	r3, r1, #8
 8005f20:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005f24:	0202      	lsls	r2, r0, #8
 8005f26:	6979      	ldr	r1, [r7, #20]
 8005f28:	6849      	ldr	r1, [r1, #4]
 8005f2a:	0849      	lsrs	r1, r1, #1
 8005f2c:	2000      	movs	r0, #0
 8005f2e:	460c      	mov	r4, r1
 8005f30:	4605      	mov	r5, r0
 8005f32:	eb12 0804 	adds.w	r8, r2, r4
 8005f36:	eb43 0905 	adc.w	r9, r3, r5
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	469a      	mov	sl, r3
 8005f42:	4693      	mov	fp, r2
 8005f44:	4652      	mov	r2, sl
 8005f46:	465b      	mov	r3, fp
 8005f48:	4640      	mov	r0, r8
 8005f4a:	4649      	mov	r1, r9
 8005f4c:	f7fa fec4 	bl	8000cd8 <__aeabi_uldivmod>
 8005f50:	4602      	mov	r2, r0
 8005f52:	460b      	mov	r3, r1
 8005f54:	4613      	mov	r3, r2
 8005f56:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f58:	6a3b      	ldr	r3, [r7, #32]
 8005f5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f5e:	d308      	bcc.n	8005f72 <UART_SetConfig+0x3d2>
 8005f60:	6a3b      	ldr	r3, [r7, #32]
 8005f62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f66:	d204      	bcs.n	8005f72 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6a3a      	ldr	r2, [r7, #32]
 8005f6e:	60da      	str	r2, [r3, #12]
 8005f70:	e0c8      	b.n	8006104 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005f78:	e0c4      	b.n	8006104 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	69db      	ldr	r3, [r3, #28]
 8005f7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f82:	d167      	bne.n	8006054 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005f84:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005f88:	2b08      	cmp	r3, #8
 8005f8a:	d828      	bhi.n	8005fde <UART_SetConfig+0x43e>
 8005f8c:	a201      	add	r2, pc, #4	; (adr r2, 8005f94 <UART_SetConfig+0x3f4>)
 8005f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f92:	bf00      	nop
 8005f94:	08005fb9 	.word	0x08005fb9
 8005f98:	08005fc1 	.word	0x08005fc1
 8005f9c:	08005fc9 	.word	0x08005fc9
 8005fa0:	08005fdf 	.word	0x08005fdf
 8005fa4:	08005fcf 	.word	0x08005fcf
 8005fa8:	08005fdf 	.word	0x08005fdf
 8005fac:	08005fdf 	.word	0x08005fdf
 8005fb0:	08005fdf 	.word	0x08005fdf
 8005fb4:	08005fd7 	.word	0x08005fd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fb8:	f7fd fc94 	bl	80038e4 <HAL_RCC_GetPCLK1Freq>
 8005fbc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005fbe:	e014      	b.n	8005fea <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fc0:	f7fd fca6 	bl	8003910 <HAL_RCC_GetPCLK2Freq>
 8005fc4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005fc6:	e010      	b.n	8005fea <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fc8:	4b5a      	ldr	r3, [pc, #360]	; (8006134 <UART_SetConfig+0x594>)
 8005fca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005fcc:	e00d      	b.n	8005fea <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fce:	f7fd fc1b 	bl	8003808 <HAL_RCC_GetSysClockFreq>
 8005fd2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005fd4:	e009      	b.n	8005fea <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005fdc:	e005      	b.n	8005fea <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005fe8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	f000 8089 	beq.w	8006104 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff6:	4a4e      	ldr	r2, [pc, #312]	; (8006130 <UART_SetConfig+0x590>)
 8005ff8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006000:	fbb3 f3f2 	udiv	r3, r3, r2
 8006004:	005a      	lsls	r2, r3, #1
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	085b      	lsrs	r3, r3, #1
 800600c:	441a      	add	r2, r3
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	fbb2 f3f3 	udiv	r3, r2, r3
 8006016:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006018:	6a3b      	ldr	r3, [r7, #32]
 800601a:	2b0f      	cmp	r3, #15
 800601c:	d916      	bls.n	800604c <UART_SetConfig+0x4ac>
 800601e:	6a3b      	ldr	r3, [r7, #32]
 8006020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006024:	d212      	bcs.n	800604c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006026:	6a3b      	ldr	r3, [r7, #32]
 8006028:	b29b      	uxth	r3, r3
 800602a:	f023 030f 	bic.w	r3, r3, #15
 800602e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006030:	6a3b      	ldr	r3, [r7, #32]
 8006032:	085b      	lsrs	r3, r3, #1
 8006034:	b29b      	uxth	r3, r3
 8006036:	f003 0307 	and.w	r3, r3, #7
 800603a:	b29a      	uxth	r2, r3
 800603c:	8bfb      	ldrh	r3, [r7, #30]
 800603e:	4313      	orrs	r3, r2
 8006040:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	8bfa      	ldrh	r2, [r7, #30]
 8006048:	60da      	str	r2, [r3, #12]
 800604a:	e05b      	b.n	8006104 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006052:	e057      	b.n	8006104 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006054:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006058:	2b08      	cmp	r3, #8
 800605a:	d828      	bhi.n	80060ae <UART_SetConfig+0x50e>
 800605c:	a201      	add	r2, pc, #4	; (adr r2, 8006064 <UART_SetConfig+0x4c4>)
 800605e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006062:	bf00      	nop
 8006064:	08006089 	.word	0x08006089
 8006068:	08006091 	.word	0x08006091
 800606c:	08006099 	.word	0x08006099
 8006070:	080060af 	.word	0x080060af
 8006074:	0800609f 	.word	0x0800609f
 8006078:	080060af 	.word	0x080060af
 800607c:	080060af 	.word	0x080060af
 8006080:	080060af 	.word	0x080060af
 8006084:	080060a7 	.word	0x080060a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006088:	f7fd fc2c 	bl	80038e4 <HAL_RCC_GetPCLK1Freq>
 800608c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800608e:	e014      	b.n	80060ba <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006090:	f7fd fc3e 	bl	8003910 <HAL_RCC_GetPCLK2Freq>
 8006094:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006096:	e010      	b.n	80060ba <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006098:	4b26      	ldr	r3, [pc, #152]	; (8006134 <UART_SetConfig+0x594>)
 800609a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800609c:	e00d      	b.n	80060ba <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800609e:	f7fd fbb3 	bl	8003808 <HAL_RCC_GetSysClockFreq>
 80060a2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80060a4:	e009      	b.n	80060ba <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80060ac:	e005      	b.n	80060ba <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80060ae:	2300      	movs	r3, #0
 80060b0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80060b8:	bf00      	nop
    }

    if (pclk != 0U)
 80060ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d021      	beq.n	8006104 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c4:	4a1a      	ldr	r2, [pc, #104]	; (8006130 <UART_SetConfig+0x590>)
 80060c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060ca:	461a      	mov	r2, r3
 80060cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ce:	fbb3 f2f2 	udiv	r2, r3, r2
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	085b      	lsrs	r3, r3, #1
 80060d8:	441a      	add	r2, r3
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	fbb2 f3f3 	udiv	r3, r2, r3
 80060e2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060e4:	6a3b      	ldr	r3, [r7, #32]
 80060e6:	2b0f      	cmp	r3, #15
 80060e8:	d909      	bls.n	80060fe <UART_SetConfig+0x55e>
 80060ea:	6a3b      	ldr	r3, [r7, #32]
 80060ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060f0:	d205      	bcs.n	80060fe <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80060f2:	6a3b      	ldr	r3, [r7, #32]
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	60da      	str	r2, [r3, #12]
 80060fc:	e002      	b.n	8006104 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	2201      	movs	r2, #1
 8006108:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	2201      	movs	r2, #1
 8006110:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	2200      	movs	r2, #0
 8006118:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	2200      	movs	r2, #0
 800611e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006120:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006124:	4618      	mov	r0, r3
 8006126:	3730      	adds	r7, #48	; 0x30
 8006128:	46bd      	mov	sp, r7
 800612a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800612e:	bf00      	nop
 8006130:	0800b068 	.word	0x0800b068
 8006134:	00f42400 	.word	0x00f42400

08006138 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006144:	f003 0301 	and.w	r3, r3, #1
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00a      	beq.n	8006162 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	430a      	orrs	r2, r1
 8006160:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006166:	f003 0302 	and.w	r3, r3, #2
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00a      	beq.n	8006184 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	430a      	orrs	r2, r1
 8006182:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006188:	f003 0304 	and.w	r3, r3, #4
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00a      	beq.n	80061a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	430a      	orrs	r2, r1
 80061a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061aa:	f003 0308 	and.w	r3, r3, #8
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00a      	beq.n	80061c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	430a      	orrs	r2, r1
 80061c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061cc:	f003 0310 	and.w	r3, r3, #16
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d00a      	beq.n	80061ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	430a      	orrs	r2, r1
 80061e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ee:	f003 0320 	and.w	r3, r3, #32
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00a      	beq.n	800620c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	430a      	orrs	r2, r1
 800620a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006214:	2b00      	cmp	r3, #0
 8006216:	d01a      	beq.n	800624e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	430a      	orrs	r2, r1
 800622c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006232:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006236:	d10a      	bne.n	800624e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	430a      	orrs	r2, r1
 800624c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00a      	beq.n	8006270 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	430a      	orrs	r2, r1
 800626e:	605a      	str	r2, [r3, #4]
  }
}
 8006270:	bf00      	nop
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b086      	sub	sp, #24
 8006280:	af02      	add	r7, sp, #8
 8006282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800628c:	f7fb fec2 	bl	8002014 <HAL_GetTick>
 8006290:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0308 	and.w	r3, r3, #8
 800629c:	2b08      	cmp	r3, #8
 800629e:	d10e      	bne.n	80062be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062a4:	9300      	str	r3, [sp, #0]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 f82f 	bl	8006312 <UART_WaitOnFlagUntilTimeout>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d001      	beq.n	80062be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e025      	b.n	800630a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 0304 	and.w	r3, r3, #4
 80062c8:	2b04      	cmp	r3, #4
 80062ca:	d10e      	bne.n	80062ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062d0:	9300      	str	r3, [sp, #0]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 f819 	bl	8006312 <UART_WaitOnFlagUntilTimeout>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d001      	beq.n	80062ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e00f      	b.n	800630a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2220      	movs	r2, #32
 80062ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2220      	movs	r2, #32
 80062f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3710      	adds	r7, #16
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}

08006312 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006312:	b580      	push	{r7, lr}
 8006314:	b09c      	sub	sp, #112	; 0x70
 8006316:	af00      	add	r7, sp, #0
 8006318:	60f8      	str	r0, [r7, #12]
 800631a:	60b9      	str	r1, [r7, #8]
 800631c:	603b      	str	r3, [r7, #0]
 800631e:	4613      	mov	r3, r2
 8006320:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006322:	e0a9      	b.n	8006478 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006324:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800632a:	f000 80a5 	beq.w	8006478 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800632e:	f7fb fe71 	bl	8002014 <HAL_GetTick>
 8006332:	4602      	mov	r2, r0
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800633a:	429a      	cmp	r2, r3
 800633c:	d302      	bcc.n	8006344 <UART_WaitOnFlagUntilTimeout+0x32>
 800633e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006340:	2b00      	cmp	r3, #0
 8006342:	d140      	bne.n	80063c6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800634a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800634c:	e853 3f00 	ldrex	r3, [r3]
 8006350:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006354:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006358:	667b      	str	r3, [r7, #100]	; 0x64
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	461a      	mov	r2, r3
 8006360:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006362:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006364:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006366:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006368:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800636a:	e841 2300 	strex	r3, r2, [r1]
 800636e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006370:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006372:	2b00      	cmp	r3, #0
 8006374:	d1e6      	bne.n	8006344 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	3308      	adds	r3, #8
 800637c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006380:	e853 3f00 	ldrex	r3, [r3]
 8006384:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006388:	f023 0301 	bic.w	r3, r3, #1
 800638c:	663b      	str	r3, [r7, #96]	; 0x60
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	3308      	adds	r3, #8
 8006394:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006396:	64ba      	str	r2, [r7, #72]	; 0x48
 8006398:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800639a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800639c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800639e:	e841 2300 	strex	r3, r2, [r1]
 80063a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80063a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d1e5      	bne.n	8006376 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2220      	movs	r2, #32
 80063ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2220      	movs	r2, #32
 80063b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e069      	b.n	800649a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0304 	and.w	r3, r3, #4
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d051      	beq.n	8006478 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	69db      	ldr	r3, [r3, #28]
 80063da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063e2:	d149      	bne.n	8006478 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063ec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f6:	e853 3f00 	ldrex	r3, [r3]
 80063fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006402:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	461a      	mov	r2, r3
 800640a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800640c:	637b      	str	r3, [r7, #52]	; 0x34
 800640e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006410:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006412:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006414:	e841 2300 	strex	r3, r2, [r1]
 8006418:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800641a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800641c:	2b00      	cmp	r3, #0
 800641e:	d1e6      	bne.n	80063ee <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	3308      	adds	r3, #8
 8006426:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	e853 3f00 	ldrex	r3, [r3]
 800642e:	613b      	str	r3, [r7, #16]
   return(result);
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	f023 0301 	bic.w	r3, r3, #1
 8006436:	66bb      	str	r3, [r7, #104]	; 0x68
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	3308      	adds	r3, #8
 800643e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006440:	623a      	str	r2, [r7, #32]
 8006442:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006444:	69f9      	ldr	r1, [r7, #28]
 8006446:	6a3a      	ldr	r2, [r7, #32]
 8006448:	e841 2300 	strex	r3, r2, [r1]
 800644c:	61bb      	str	r3, [r7, #24]
   return(result);
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d1e5      	bne.n	8006420 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2220      	movs	r2, #32
 8006458:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2220      	movs	r2, #32
 8006460:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2220      	movs	r2, #32
 8006468:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2200      	movs	r2, #0
 8006470:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006474:	2303      	movs	r3, #3
 8006476:	e010      	b.n	800649a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	69da      	ldr	r2, [r3, #28]
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	4013      	ands	r3, r2
 8006482:	68ba      	ldr	r2, [r7, #8]
 8006484:	429a      	cmp	r2, r3
 8006486:	bf0c      	ite	eq
 8006488:	2301      	moveq	r3, #1
 800648a:	2300      	movne	r3, #0
 800648c:	b2db      	uxtb	r3, r3
 800648e:	461a      	mov	r2, r3
 8006490:	79fb      	ldrb	r3, [r7, #7]
 8006492:	429a      	cmp	r2, r3
 8006494:	f43f af46 	beq.w	8006324 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3770      	adds	r7, #112	; 0x70
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80064a2:	b480      	push	{r7}
 80064a4:	b085      	sub	sp, #20
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d101      	bne.n	80064b8 <HAL_UARTEx_DisableFifoMode+0x16>
 80064b4:	2302      	movs	r3, #2
 80064b6:	e027      	b.n	8006508 <HAL_UARTEx_DisableFifoMode+0x66>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2224      	movs	r2, #36	; 0x24
 80064c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f022 0201 	bic.w	r2, r2, #1
 80064de:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80064e6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2220      	movs	r2, #32
 80064fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006506:	2300      	movs	r3, #0
}
 8006508:	4618      	mov	r0, r3
 800650a:	3714      	adds	r7, #20
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006524:	2b01      	cmp	r3, #1
 8006526:	d101      	bne.n	800652c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006528:	2302      	movs	r3, #2
 800652a:	e02d      	b.n	8006588 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2224      	movs	r2, #36	; 0x24
 8006538:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f022 0201 	bic.w	r2, r2, #1
 8006552:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	683a      	ldr	r2, [r7, #0]
 8006564:	430a      	orrs	r2, r1
 8006566:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 f84f 	bl	800660c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2220      	movs	r2, #32
 800657a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	3710      	adds	r7, #16
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d101      	bne.n	80065a8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80065a4:	2302      	movs	r3, #2
 80065a6:	e02d      	b.n	8006604 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2224      	movs	r2, #36	; 0x24
 80065b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f022 0201 	bic.w	r2, r2, #1
 80065ce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	683a      	ldr	r2, [r7, #0]
 80065e0:	430a      	orrs	r2, r1
 80065e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 f811 	bl	800660c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2220      	movs	r2, #32
 80065f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006602:	2300      	movs	r3, #0
}
 8006604:	4618      	mov	r0, r3
 8006606:	3710      	adds	r7, #16
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800660c:	b480      	push	{r7}
 800660e:	b085      	sub	sp, #20
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006618:	2b00      	cmp	r3, #0
 800661a:	d108      	bne.n	800662e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800662c:	e031      	b.n	8006692 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800662e:	2308      	movs	r3, #8
 8006630:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006632:	2308      	movs	r3, #8
 8006634:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	0e5b      	lsrs	r3, r3, #25
 800663e:	b2db      	uxtb	r3, r3
 8006640:	f003 0307 	and.w	r3, r3, #7
 8006644:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	0f5b      	lsrs	r3, r3, #29
 800664e:	b2db      	uxtb	r3, r3
 8006650:	f003 0307 	and.w	r3, r3, #7
 8006654:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006656:	7bbb      	ldrb	r3, [r7, #14]
 8006658:	7b3a      	ldrb	r2, [r7, #12]
 800665a:	4911      	ldr	r1, [pc, #68]	; (80066a0 <UARTEx_SetNbDataToProcess+0x94>)
 800665c:	5c8a      	ldrb	r2, [r1, r2]
 800665e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006662:	7b3a      	ldrb	r2, [r7, #12]
 8006664:	490f      	ldr	r1, [pc, #60]	; (80066a4 <UARTEx_SetNbDataToProcess+0x98>)
 8006666:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006668:	fb93 f3f2 	sdiv	r3, r3, r2
 800666c:	b29a      	uxth	r2, r3
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006674:	7bfb      	ldrb	r3, [r7, #15]
 8006676:	7b7a      	ldrb	r2, [r7, #13]
 8006678:	4909      	ldr	r1, [pc, #36]	; (80066a0 <UARTEx_SetNbDataToProcess+0x94>)
 800667a:	5c8a      	ldrb	r2, [r1, r2]
 800667c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006680:	7b7a      	ldrb	r2, [r7, #13]
 8006682:	4908      	ldr	r1, [pc, #32]	; (80066a4 <UARTEx_SetNbDataToProcess+0x98>)
 8006684:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006686:	fb93 f3f2 	sdiv	r3, r3, r2
 800668a:	b29a      	uxth	r2, r3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006692:	bf00      	nop
 8006694:	3714      	adds	r7, #20
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr
 800669e:	bf00      	nop
 80066a0:	0800b080 	.word	0x0800b080
 80066a4:	0800b088 	.word	0x0800b088

080066a8 <__errno>:
 80066a8:	4b01      	ldr	r3, [pc, #4]	; (80066b0 <__errno+0x8>)
 80066aa:	6818      	ldr	r0, [r3, #0]
 80066ac:	4770      	bx	lr
 80066ae:	bf00      	nop
 80066b0:	2000000c 	.word	0x2000000c

080066b4 <__libc_init_array>:
 80066b4:	b570      	push	{r4, r5, r6, lr}
 80066b6:	4d0d      	ldr	r5, [pc, #52]	; (80066ec <__libc_init_array+0x38>)
 80066b8:	4c0d      	ldr	r4, [pc, #52]	; (80066f0 <__libc_init_array+0x3c>)
 80066ba:	1b64      	subs	r4, r4, r5
 80066bc:	10a4      	asrs	r4, r4, #2
 80066be:	2600      	movs	r6, #0
 80066c0:	42a6      	cmp	r6, r4
 80066c2:	d109      	bne.n	80066d8 <__libc_init_array+0x24>
 80066c4:	4d0b      	ldr	r5, [pc, #44]	; (80066f4 <__libc_init_array+0x40>)
 80066c6:	4c0c      	ldr	r4, [pc, #48]	; (80066f8 <__libc_init_array+0x44>)
 80066c8:	f004 fcaa 	bl	800b020 <_init>
 80066cc:	1b64      	subs	r4, r4, r5
 80066ce:	10a4      	asrs	r4, r4, #2
 80066d0:	2600      	movs	r6, #0
 80066d2:	42a6      	cmp	r6, r4
 80066d4:	d105      	bne.n	80066e2 <__libc_init_array+0x2e>
 80066d6:	bd70      	pop	{r4, r5, r6, pc}
 80066d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80066dc:	4798      	blx	r3
 80066de:	3601      	adds	r6, #1
 80066e0:	e7ee      	b.n	80066c0 <__libc_init_array+0xc>
 80066e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80066e6:	4798      	blx	r3
 80066e8:	3601      	adds	r6, #1
 80066ea:	e7f2      	b.n	80066d2 <__libc_init_array+0x1e>
 80066ec:	0800b544 	.word	0x0800b544
 80066f0:	0800b544 	.word	0x0800b544
 80066f4:	0800b544 	.word	0x0800b544
 80066f8:	0800b548 	.word	0x0800b548

080066fc <memset>:
 80066fc:	4402      	add	r2, r0
 80066fe:	4603      	mov	r3, r0
 8006700:	4293      	cmp	r3, r2
 8006702:	d100      	bne.n	8006706 <memset+0xa>
 8006704:	4770      	bx	lr
 8006706:	f803 1b01 	strb.w	r1, [r3], #1
 800670a:	e7f9      	b.n	8006700 <memset+0x4>

0800670c <__cvt>:
 800670c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006710:	ec55 4b10 	vmov	r4, r5, d0
 8006714:	2d00      	cmp	r5, #0
 8006716:	460e      	mov	r6, r1
 8006718:	4619      	mov	r1, r3
 800671a:	462b      	mov	r3, r5
 800671c:	bfbb      	ittet	lt
 800671e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006722:	461d      	movlt	r5, r3
 8006724:	2300      	movge	r3, #0
 8006726:	232d      	movlt	r3, #45	; 0x2d
 8006728:	700b      	strb	r3, [r1, #0]
 800672a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800672c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006730:	4691      	mov	r9, r2
 8006732:	f023 0820 	bic.w	r8, r3, #32
 8006736:	bfbc      	itt	lt
 8006738:	4622      	movlt	r2, r4
 800673a:	4614      	movlt	r4, r2
 800673c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006740:	d005      	beq.n	800674e <__cvt+0x42>
 8006742:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006746:	d100      	bne.n	800674a <__cvt+0x3e>
 8006748:	3601      	adds	r6, #1
 800674a:	2102      	movs	r1, #2
 800674c:	e000      	b.n	8006750 <__cvt+0x44>
 800674e:	2103      	movs	r1, #3
 8006750:	ab03      	add	r3, sp, #12
 8006752:	9301      	str	r3, [sp, #4]
 8006754:	ab02      	add	r3, sp, #8
 8006756:	9300      	str	r3, [sp, #0]
 8006758:	ec45 4b10 	vmov	d0, r4, r5
 800675c:	4653      	mov	r3, sl
 800675e:	4632      	mov	r2, r6
 8006760:	f001 fdc6 	bl	80082f0 <_dtoa_r>
 8006764:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006768:	4607      	mov	r7, r0
 800676a:	d102      	bne.n	8006772 <__cvt+0x66>
 800676c:	f019 0f01 	tst.w	r9, #1
 8006770:	d022      	beq.n	80067b8 <__cvt+0xac>
 8006772:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006776:	eb07 0906 	add.w	r9, r7, r6
 800677a:	d110      	bne.n	800679e <__cvt+0x92>
 800677c:	783b      	ldrb	r3, [r7, #0]
 800677e:	2b30      	cmp	r3, #48	; 0x30
 8006780:	d10a      	bne.n	8006798 <__cvt+0x8c>
 8006782:	2200      	movs	r2, #0
 8006784:	2300      	movs	r3, #0
 8006786:	4620      	mov	r0, r4
 8006788:	4629      	mov	r1, r5
 800678a:	f7fa f9c5 	bl	8000b18 <__aeabi_dcmpeq>
 800678e:	b918      	cbnz	r0, 8006798 <__cvt+0x8c>
 8006790:	f1c6 0601 	rsb	r6, r6, #1
 8006794:	f8ca 6000 	str.w	r6, [sl]
 8006798:	f8da 3000 	ldr.w	r3, [sl]
 800679c:	4499      	add	r9, r3
 800679e:	2200      	movs	r2, #0
 80067a0:	2300      	movs	r3, #0
 80067a2:	4620      	mov	r0, r4
 80067a4:	4629      	mov	r1, r5
 80067a6:	f7fa f9b7 	bl	8000b18 <__aeabi_dcmpeq>
 80067aa:	b108      	cbz	r0, 80067b0 <__cvt+0xa4>
 80067ac:	f8cd 900c 	str.w	r9, [sp, #12]
 80067b0:	2230      	movs	r2, #48	; 0x30
 80067b2:	9b03      	ldr	r3, [sp, #12]
 80067b4:	454b      	cmp	r3, r9
 80067b6:	d307      	bcc.n	80067c8 <__cvt+0xbc>
 80067b8:	9b03      	ldr	r3, [sp, #12]
 80067ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80067bc:	1bdb      	subs	r3, r3, r7
 80067be:	4638      	mov	r0, r7
 80067c0:	6013      	str	r3, [r2, #0]
 80067c2:	b004      	add	sp, #16
 80067c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067c8:	1c59      	adds	r1, r3, #1
 80067ca:	9103      	str	r1, [sp, #12]
 80067cc:	701a      	strb	r2, [r3, #0]
 80067ce:	e7f0      	b.n	80067b2 <__cvt+0xa6>

080067d0 <__exponent>:
 80067d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067d2:	4603      	mov	r3, r0
 80067d4:	2900      	cmp	r1, #0
 80067d6:	bfb8      	it	lt
 80067d8:	4249      	neglt	r1, r1
 80067da:	f803 2b02 	strb.w	r2, [r3], #2
 80067de:	bfb4      	ite	lt
 80067e0:	222d      	movlt	r2, #45	; 0x2d
 80067e2:	222b      	movge	r2, #43	; 0x2b
 80067e4:	2909      	cmp	r1, #9
 80067e6:	7042      	strb	r2, [r0, #1]
 80067e8:	dd2a      	ble.n	8006840 <__exponent+0x70>
 80067ea:	f10d 0407 	add.w	r4, sp, #7
 80067ee:	46a4      	mov	ip, r4
 80067f0:	270a      	movs	r7, #10
 80067f2:	46a6      	mov	lr, r4
 80067f4:	460a      	mov	r2, r1
 80067f6:	fb91 f6f7 	sdiv	r6, r1, r7
 80067fa:	fb07 1516 	mls	r5, r7, r6, r1
 80067fe:	3530      	adds	r5, #48	; 0x30
 8006800:	2a63      	cmp	r2, #99	; 0x63
 8006802:	f104 34ff 	add.w	r4, r4, #4294967295
 8006806:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800680a:	4631      	mov	r1, r6
 800680c:	dcf1      	bgt.n	80067f2 <__exponent+0x22>
 800680e:	3130      	adds	r1, #48	; 0x30
 8006810:	f1ae 0502 	sub.w	r5, lr, #2
 8006814:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006818:	1c44      	adds	r4, r0, #1
 800681a:	4629      	mov	r1, r5
 800681c:	4561      	cmp	r1, ip
 800681e:	d30a      	bcc.n	8006836 <__exponent+0x66>
 8006820:	f10d 0209 	add.w	r2, sp, #9
 8006824:	eba2 020e 	sub.w	r2, r2, lr
 8006828:	4565      	cmp	r5, ip
 800682a:	bf88      	it	hi
 800682c:	2200      	movhi	r2, #0
 800682e:	4413      	add	r3, r2
 8006830:	1a18      	subs	r0, r3, r0
 8006832:	b003      	add	sp, #12
 8006834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006836:	f811 2b01 	ldrb.w	r2, [r1], #1
 800683a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800683e:	e7ed      	b.n	800681c <__exponent+0x4c>
 8006840:	2330      	movs	r3, #48	; 0x30
 8006842:	3130      	adds	r1, #48	; 0x30
 8006844:	7083      	strb	r3, [r0, #2]
 8006846:	70c1      	strb	r1, [r0, #3]
 8006848:	1d03      	adds	r3, r0, #4
 800684a:	e7f1      	b.n	8006830 <__exponent+0x60>

0800684c <_printf_float>:
 800684c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006850:	ed2d 8b02 	vpush	{d8}
 8006854:	b08d      	sub	sp, #52	; 0x34
 8006856:	460c      	mov	r4, r1
 8006858:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800685c:	4616      	mov	r6, r2
 800685e:	461f      	mov	r7, r3
 8006860:	4605      	mov	r5, r0
 8006862:	f002 ff97 	bl	8009794 <_localeconv_r>
 8006866:	f8d0 a000 	ldr.w	sl, [r0]
 800686a:	4650      	mov	r0, sl
 800686c:	f7f9 fcd8 	bl	8000220 <strlen>
 8006870:	2300      	movs	r3, #0
 8006872:	930a      	str	r3, [sp, #40]	; 0x28
 8006874:	6823      	ldr	r3, [r4, #0]
 8006876:	9305      	str	r3, [sp, #20]
 8006878:	f8d8 3000 	ldr.w	r3, [r8]
 800687c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006880:	3307      	adds	r3, #7
 8006882:	f023 0307 	bic.w	r3, r3, #7
 8006886:	f103 0208 	add.w	r2, r3, #8
 800688a:	f8c8 2000 	str.w	r2, [r8]
 800688e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006892:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006896:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800689a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800689e:	9307      	str	r3, [sp, #28]
 80068a0:	f8cd 8018 	str.w	r8, [sp, #24]
 80068a4:	ee08 0a10 	vmov	s16, r0
 80068a8:	4b9f      	ldr	r3, [pc, #636]	; (8006b28 <_printf_float+0x2dc>)
 80068aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068ae:	f04f 32ff 	mov.w	r2, #4294967295
 80068b2:	f7fa f963 	bl	8000b7c <__aeabi_dcmpun>
 80068b6:	bb88      	cbnz	r0, 800691c <_printf_float+0xd0>
 80068b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068bc:	4b9a      	ldr	r3, [pc, #616]	; (8006b28 <_printf_float+0x2dc>)
 80068be:	f04f 32ff 	mov.w	r2, #4294967295
 80068c2:	f7fa f93d 	bl	8000b40 <__aeabi_dcmple>
 80068c6:	bb48      	cbnz	r0, 800691c <_printf_float+0xd0>
 80068c8:	2200      	movs	r2, #0
 80068ca:	2300      	movs	r3, #0
 80068cc:	4640      	mov	r0, r8
 80068ce:	4649      	mov	r1, r9
 80068d0:	f7fa f92c 	bl	8000b2c <__aeabi_dcmplt>
 80068d4:	b110      	cbz	r0, 80068dc <_printf_float+0x90>
 80068d6:	232d      	movs	r3, #45	; 0x2d
 80068d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068dc:	4b93      	ldr	r3, [pc, #588]	; (8006b2c <_printf_float+0x2e0>)
 80068de:	4894      	ldr	r0, [pc, #592]	; (8006b30 <_printf_float+0x2e4>)
 80068e0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80068e4:	bf94      	ite	ls
 80068e6:	4698      	movls	r8, r3
 80068e8:	4680      	movhi	r8, r0
 80068ea:	2303      	movs	r3, #3
 80068ec:	6123      	str	r3, [r4, #16]
 80068ee:	9b05      	ldr	r3, [sp, #20]
 80068f0:	f023 0204 	bic.w	r2, r3, #4
 80068f4:	6022      	str	r2, [r4, #0]
 80068f6:	f04f 0900 	mov.w	r9, #0
 80068fa:	9700      	str	r7, [sp, #0]
 80068fc:	4633      	mov	r3, r6
 80068fe:	aa0b      	add	r2, sp, #44	; 0x2c
 8006900:	4621      	mov	r1, r4
 8006902:	4628      	mov	r0, r5
 8006904:	f000 f9d8 	bl	8006cb8 <_printf_common>
 8006908:	3001      	adds	r0, #1
 800690a:	f040 8090 	bne.w	8006a2e <_printf_float+0x1e2>
 800690e:	f04f 30ff 	mov.w	r0, #4294967295
 8006912:	b00d      	add	sp, #52	; 0x34
 8006914:	ecbd 8b02 	vpop	{d8}
 8006918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800691c:	4642      	mov	r2, r8
 800691e:	464b      	mov	r3, r9
 8006920:	4640      	mov	r0, r8
 8006922:	4649      	mov	r1, r9
 8006924:	f7fa f92a 	bl	8000b7c <__aeabi_dcmpun>
 8006928:	b140      	cbz	r0, 800693c <_printf_float+0xf0>
 800692a:	464b      	mov	r3, r9
 800692c:	2b00      	cmp	r3, #0
 800692e:	bfbc      	itt	lt
 8006930:	232d      	movlt	r3, #45	; 0x2d
 8006932:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006936:	487f      	ldr	r0, [pc, #508]	; (8006b34 <_printf_float+0x2e8>)
 8006938:	4b7f      	ldr	r3, [pc, #508]	; (8006b38 <_printf_float+0x2ec>)
 800693a:	e7d1      	b.n	80068e0 <_printf_float+0x94>
 800693c:	6863      	ldr	r3, [r4, #4]
 800693e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006942:	9206      	str	r2, [sp, #24]
 8006944:	1c5a      	adds	r2, r3, #1
 8006946:	d13f      	bne.n	80069c8 <_printf_float+0x17c>
 8006948:	2306      	movs	r3, #6
 800694a:	6063      	str	r3, [r4, #4]
 800694c:	9b05      	ldr	r3, [sp, #20]
 800694e:	6861      	ldr	r1, [r4, #4]
 8006950:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006954:	2300      	movs	r3, #0
 8006956:	9303      	str	r3, [sp, #12]
 8006958:	ab0a      	add	r3, sp, #40	; 0x28
 800695a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800695e:	ab09      	add	r3, sp, #36	; 0x24
 8006960:	ec49 8b10 	vmov	d0, r8, r9
 8006964:	9300      	str	r3, [sp, #0]
 8006966:	6022      	str	r2, [r4, #0]
 8006968:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800696c:	4628      	mov	r0, r5
 800696e:	f7ff fecd 	bl	800670c <__cvt>
 8006972:	9b06      	ldr	r3, [sp, #24]
 8006974:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006976:	2b47      	cmp	r3, #71	; 0x47
 8006978:	4680      	mov	r8, r0
 800697a:	d108      	bne.n	800698e <_printf_float+0x142>
 800697c:	1cc8      	adds	r0, r1, #3
 800697e:	db02      	blt.n	8006986 <_printf_float+0x13a>
 8006980:	6863      	ldr	r3, [r4, #4]
 8006982:	4299      	cmp	r1, r3
 8006984:	dd41      	ble.n	8006a0a <_printf_float+0x1be>
 8006986:	f1ab 0b02 	sub.w	fp, fp, #2
 800698a:	fa5f fb8b 	uxtb.w	fp, fp
 800698e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006992:	d820      	bhi.n	80069d6 <_printf_float+0x18a>
 8006994:	3901      	subs	r1, #1
 8006996:	465a      	mov	r2, fp
 8006998:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800699c:	9109      	str	r1, [sp, #36]	; 0x24
 800699e:	f7ff ff17 	bl	80067d0 <__exponent>
 80069a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069a4:	1813      	adds	r3, r2, r0
 80069a6:	2a01      	cmp	r2, #1
 80069a8:	4681      	mov	r9, r0
 80069aa:	6123      	str	r3, [r4, #16]
 80069ac:	dc02      	bgt.n	80069b4 <_printf_float+0x168>
 80069ae:	6822      	ldr	r2, [r4, #0]
 80069b0:	07d2      	lsls	r2, r2, #31
 80069b2:	d501      	bpl.n	80069b8 <_printf_float+0x16c>
 80069b4:	3301      	adds	r3, #1
 80069b6:	6123      	str	r3, [r4, #16]
 80069b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d09c      	beq.n	80068fa <_printf_float+0xae>
 80069c0:	232d      	movs	r3, #45	; 0x2d
 80069c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069c6:	e798      	b.n	80068fa <_printf_float+0xae>
 80069c8:	9a06      	ldr	r2, [sp, #24]
 80069ca:	2a47      	cmp	r2, #71	; 0x47
 80069cc:	d1be      	bne.n	800694c <_printf_float+0x100>
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d1bc      	bne.n	800694c <_printf_float+0x100>
 80069d2:	2301      	movs	r3, #1
 80069d4:	e7b9      	b.n	800694a <_printf_float+0xfe>
 80069d6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80069da:	d118      	bne.n	8006a0e <_printf_float+0x1c2>
 80069dc:	2900      	cmp	r1, #0
 80069de:	6863      	ldr	r3, [r4, #4]
 80069e0:	dd0b      	ble.n	80069fa <_printf_float+0x1ae>
 80069e2:	6121      	str	r1, [r4, #16]
 80069e4:	b913      	cbnz	r3, 80069ec <_printf_float+0x1a0>
 80069e6:	6822      	ldr	r2, [r4, #0]
 80069e8:	07d0      	lsls	r0, r2, #31
 80069ea:	d502      	bpl.n	80069f2 <_printf_float+0x1a6>
 80069ec:	3301      	adds	r3, #1
 80069ee:	440b      	add	r3, r1
 80069f0:	6123      	str	r3, [r4, #16]
 80069f2:	65a1      	str	r1, [r4, #88]	; 0x58
 80069f4:	f04f 0900 	mov.w	r9, #0
 80069f8:	e7de      	b.n	80069b8 <_printf_float+0x16c>
 80069fa:	b913      	cbnz	r3, 8006a02 <_printf_float+0x1b6>
 80069fc:	6822      	ldr	r2, [r4, #0]
 80069fe:	07d2      	lsls	r2, r2, #31
 8006a00:	d501      	bpl.n	8006a06 <_printf_float+0x1ba>
 8006a02:	3302      	adds	r3, #2
 8006a04:	e7f4      	b.n	80069f0 <_printf_float+0x1a4>
 8006a06:	2301      	movs	r3, #1
 8006a08:	e7f2      	b.n	80069f0 <_printf_float+0x1a4>
 8006a0a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006a0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a10:	4299      	cmp	r1, r3
 8006a12:	db05      	blt.n	8006a20 <_printf_float+0x1d4>
 8006a14:	6823      	ldr	r3, [r4, #0]
 8006a16:	6121      	str	r1, [r4, #16]
 8006a18:	07d8      	lsls	r0, r3, #31
 8006a1a:	d5ea      	bpl.n	80069f2 <_printf_float+0x1a6>
 8006a1c:	1c4b      	adds	r3, r1, #1
 8006a1e:	e7e7      	b.n	80069f0 <_printf_float+0x1a4>
 8006a20:	2900      	cmp	r1, #0
 8006a22:	bfd4      	ite	le
 8006a24:	f1c1 0202 	rsble	r2, r1, #2
 8006a28:	2201      	movgt	r2, #1
 8006a2a:	4413      	add	r3, r2
 8006a2c:	e7e0      	b.n	80069f0 <_printf_float+0x1a4>
 8006a2e:	6823      	ldr	r3, [r4, #0]
 8006a30:	055a      	lsls	r2, r3, #21
 8006a32:	d407      	bmi.n	8006a44 <_printf_float+0x1f8>
 8006a34:	6923      	ldr	r3, [r4, #16]
 8006a36:	4642      	mov	r2, r8
 8006a38:	4631      	mov	r1, r6
 8006a3a:	4628      	mov	r0, r5
 8006a3c:	47b8      	blx	r7
 8006a3e:	3001      	adds	r0, #1
 8006a40:	d12c      	bne.n	8006a9c <_printf_float+0x250>
 8006a42:	e764      	b.n	800690e <_printf_float+0xc2>
 8006a44:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006a48:	f240 80e0 	bls.w	8006c0c <_printf_float+0x3c0>
 8006a4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a50:	2200      	movs	r2, #0
 8006a52:	2300      	movs	r3, #0
 8006a54:	f7fa f860 	bl	8000b18 <__aeabi_dcmpeq>
 8006a58:	2800      	cmp	r0, #0
 8006a5a:	d034      	beq.n	8006ac6 <_printf_float+0x27a>
 8006a5c:	4a37      	ldr	r2, [pc, #220]	; (8006b3c <_printf_float+0x2f0>)
 8006a5e:	2301      	movs	r3, #1
 8006a60:	4631      	mov	r1, r6
 8006a62:	4628      	mov	r0, r5
 8006a64:	47b8      	blx	r7
 8006a66:	3001      	adds	r0, #1
 8006a68:	f43f af51 	beq.w	800690e <_printf_float+0xc2>
 8006a6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a70:	429a      	cmp	r2, r3
 8006a72:	db02      	blt.n	8006a7a <_printf_float+0x22e>
 8006a74:	6823      	ldr	r3, [r4, #0]
 8006a76:	07d8      	lsls	r0, r3, #31
 8006a78:	d510      	bpl.n	8006a9c <_printf_float+0x250>
 8006a7a:	ee18 3a10 	vmov	r3, s16
 8006a7e:	4652      	mov	r2, sl
 8006a80:	4631      	mov	r1, r6
 8006a82:	4628      	mov	r0, r5
 8006a84:	47b8      	blx	r7
 8006a86:	3001      	adds	r0, #1
 8006a88:	f43f af41 	beq.w	800690e <_printf_float+0xc2>
 8006a8c:	f04f 0800 	mov.w	r8, #0
 8006a90:	f104 091a 	add.w	r9, r4, #26
 8006a94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a96:	3b01      	subs	r3, #1
 8006a98:	4543      	cmp	r3, r8
 8006a9a:	dc09      	bgt.n	8006ab0 <_printf_float+0x264>
 8006a9c:	6823      	ldr	r3, [r4, #0]
 8006a9e:	079b      	lsls	r3, r3, #30
 8006aa0:	f100 8105 	bmi.w	8006cae <_printf_float+0x462>
 8006aa4:	68e0      	ldr	r0, [r4, #12]
 8006aa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006aa8:	4298      	cmp	r0, r3
 8006aaa:	bfb8      	it	lt
 8006aac:	4618      	movlt	r0, r3
 8006aae:	e730      	b.n	8006912 <_printf_float+0xc6>
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	464a      	mov	r2, r9
 8006ab4:	4631      	mov	r1, r6
 8006ab6:	4628      	mov	r0, r5
 8006ab8:	47b8      	blx	r7
 8006aba:	3001      	adds	r0, #1
 8006abc:	f43f af27 	beq.w	800690e <_printf_float+0xc2>
 8006ac0:	f108 0801 	add.w	r8, r8, #1
 8006ac4:	e7e6      	b.n	8006a94 <_printf_float+0x248>
 8006ac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	dc39      	bgt.n	8006b40 <_printf_float+0x2f4>
 8006acc:	4a1b      	ldr	r2, [pc, #108]	; (8006b3c <_printf_float+0x2f0>)
 8006ace:	2301      	movs	r3, #1
 8006ad0:	4631      	mov	r1, r6
 8006ad2:	4628      	mov	r0, r5
 8006ad4:	47b8      	blx	r7
 8006ad6:	3001      	adds	r0, #1
 8006ad8:	f43f af19 	beq.w	800690e <_printf_float+0xc2>
 8006adc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	d102      	bne.n	8006aea <_printf_float+0x29e>
 8006ae4:	6823      	ldr	r3, [r4, #0]
 8006ae6:	07d9      	lsls	r1, r3, #31
 8006ae8:	d5d8      	bpl.n	8006a9c <_printf_float+0x250>
 8006aea:	ee18 3a10 	vmov	r3, s16
 8006aee:	4652      	mov	r2, sl
 8006af0:	4631      	mov	r1, r6
 8006af2:	4628      	mov	r0, r5
 8006af4:	47b8      	blx	r7
 8006af6:	3001      	adds	r0, #1
 8006af8:	f43f af09 	beq.w	800690e <_printf_float+0xc2>
 8006afc:	f04f 0900 	mov.w	r9, #0
 8006b00:	f104 0a1a 	add.w	sl, r4, #26
 8006b04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b06:	425b      	negs	r3, r3
 8006b08:	454b      	cmp	r3, r9
 8006b0a:	dc01      	bgt.n	8006b10 <_printf_float+0x2c4>
 8006b0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b0e:	e792      	b.n	8006a36 <_printf_float+0x1ea>
 8006b10:	2301      	movs	r3, #1
 8006b12:	4652      	mov	r2, sl
 8006b14:	4631      	mov	r1, r6
 8006b16:	4628      	mov	r0, r5
 8006b18:	47b8      	blx	r7
 8006b1a:	3001      	adds	r0, #1
 8006b1c:	f43f aef7 	beq.w	800690e <_printf_float+0xc2>
 8006b20:	f109 0901 	add.w	r9, r9, #1
 8006b24:	e7ee      	b.n	8006b04 <_printf_float+0x2b8>
 8006b26:	bf00      	nop
 8006b28:	7fefffff 	.word	0x7fefffff
 8006b2c:	0800b094 	.word	0x0800b094
 8006b30:	0800b098 	.word	0x0800b098
 8006b34:	0800b0a0 	.word	0x0800b0a0
 8006b38:	0800b09c 	.word	0x0800b09c
 8006b3c:	0800b0a4 	.word	0x0800b0a4
 8006b40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b42:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b44:	429a      	cmp	r2, r3
 8006b46:	bfa8      	it	ge
 8006b48:	461a      	movge	r2, r3
 8006b4a:	2a00      	cmp	r2, #0
 8006b4c:	4691      	mov	r9, r2
 8006b4e:	dc37      	bgt.n	8006bc0 <_printf_float+0x374>
 8006b50:	f04f 0b00 	mov.w	fp, #0
 8006b54:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b58:	f104 021a 	add.w	r2, r4, #26
 8006b5c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b5e:	9305      	str	r3, [sp, #20]
 8006b60:	eba3 0309 	sub.w	r3, r3, r9
 8006b64:	455b      	cmp	r3, fp
 8006b66:	dc33      	bgt.n	8006bd0 <_printf_float+0x384>
 8006b68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	db3b      	blt.n	8006be8 <_printf_float+0x39c>
 8006b70:	6823      	ldr	r3, [r4, #0]
 8006b72:	07da      	lsls	r2, r3, #31
 8006b74:	d438      	bmi.n	8006be8 <_printf_float+0x39c>
 8006b76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b78:	9a05      	ldr	r2, [sp, #20]
 8006b7a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b7c:	1a9a      	subs	r2, r3, r2
 8006b7e:	eba3 0901 	sub.w	r9, r3, r1
 8006b82:	4591      	cmp	r9, r2
 8006b84:	bfa8      	it	ge
 8006b86:	4691      	movge	r9, r2
 8006b88:	f1b9 0f00 	cmp.w	r9, #0
 8006b8c:	dc35      	bgt.n	8006bfa <_printf_float+0x3ae>
 8006b8e:	f04f 0800 	mov.w	r8, #0
 8006b92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b96:	f104 0a1a 	add.w	sl, r4, #26
 8006b9a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b9e:	1a9b      	subs	r3, r3, r2
 8006ba0:	eba3 0309 	sub.w	r3, r3, r9
 8006ba4:	4543      	cmp	r3, r8
 8006ba6:	f77f af79 	ble.w	8006a9c <_printf_float+0x250>
 8006baa:	2301      	movs	r3, #1
 8006bac:	4652      	mov	r2, sl
 8006bae:	4631      	mov	r1, r6
 8006bb0:	4628      	mov	r0, r5
 8006bb2:	47b8      	blx	r7
 8006bb4:	3001      	adds	r0, #1
 8006bb6:	f43f aeaa 	beq.w	800690e <_printf_float+0xc2>
 8006bba:	f108 0801 	add.w	r8, r8, #1
 8006bbe:	e7ec      	b.n	8006b9a <_printf_float+0x34e>
 8006bc0:	4613      	mov	r3, r2
 8006bc2:	4631      	mov	r1, r6
 8006bc4:	4642      	mov	r2, r8
 8006bc6:	4628      	mov	r0, r5
 8006bc8:	47b8      	blx	r7
 8006bca:	3001      	adds	r0, #1
 8006bcc:	d1c0      	bne.n	8006b50 <_printf_float+0x304>
 8006bce:	e69e      	b.n	800690e <_printf_float+0xc2>
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	4631      	mov	r1, r6
 8006bd4:	4628      	mov	r0, r5
 8006bd6:	9205      	str	r2, [sp, #20]
 8006bd8:	47b8      	blx	r7
 8006bda:	3001      	adds	r0, #1
 8006bdc:	f43f ae97 	beq.w	800690e <_printf_float+0xc2>
 8006be0:	9a05      	ldr	r2, [sp, #20]
 8006be2:	f10b 0b01 	add.w	fp, fp, #1
 8006be6:	e7b9      	b.n	8006b5c <_printf_float+0x310>
 8006be8:	ee18 3a10 	vmov	r3, s16
 8006bec:	4652      	mov	r2, sl
 8006bee:	4631      	mov	r1, r6
 8006bf0:	4628      	mov	r0, r5
 8006bf2:	47b8      	blx	r7
 8006bf4:	3001      	adds	r0, #1
 8006bf6:	d1be      	bne.n	8006b76 <_printf_float+0x32a>
 8006bf8:	e689      	b.n	800690e <_printf_float+0xc2>
 8006bfa:	9a05      	ldr	r2, [sp, #20]
 8006bfc:	464b      	mov	r3, r9
 8006bfe:	4442      	add	r2, r8
 8006c00:	4631      	mov	r1, r6
 8006c02:	4628      	mov	r0, r5
 8006c04:	47b8      	blx	r7
 8006c06:	3001      	adds	r0, #1
 8006c08:	d1c1      	bne.n	8006b8e <_printf_float+0x342>
 8006c0a:	e680      	b.n	800690e <_printf_float+0xc2>
 8006c0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c0e:	2a01      	cmp	r2, #1
 8006c10:	dc01      	bgt.n	8006c16 <_printf_float+0x3ca>
 8006c12:	07db      	lsls	r3, r3, #31
 8006c14:	d538      	bpl.n	8006c88 <_printf_float+0x43c>
 8006c16:	2301      	movs	r3, #1
 8006c18:	4642      	mov	r2, r8
 8006c1a:	4631      	mov	r1, r6
 8006c1c:	4628      	mov	r0, r5
 8006c1e:	47b8      	blx	r7
 8006c20:	3001      	adds	r0, #1
 8006c22:	f43f ae74 	beq.w	800690e <_printf_float+0xc2>
 8006c26:	ee18 3a10 	vmov	r3, s16
 8006c2a:	4652      	mov	r2, sl
 8006c2c:	4631      	mov	r1, r6
 8006c2e:	4628      	mov	r0, r5
 8006c30:	47b8      	blx	r7
 8006c32:	3001      	adds	r0, #1
 8006c34:	f43f ae6b 	beq.w	800690e <_printf_float+0xc2>
 8006c38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	2300      	movs	r3, #0
 8006c40:	f7f9 ff6a 	bl	8000b18 <__aeabi_dcmpeq>
 8006c44:	b9d8      	cbnz	r0, 8006c7e <_printf_float+0x432>
 8006c46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c48:	f108 0201 	add.w	r2, r8, #1
 8006c4c:	3b01      	subs	r3, #1
 8006c4e:	4631      	mov	r1, r6
 8006c50:	4628      	mov	r0, r5
 8006c52:	47b8      	blx	r7
 8006c54:	3001      	adds	r0, #1
 8006c56:	d10e      	bne.n	8006c76 <_printf_float+0x42a>
 8006c58:	e659      	b.n	800690e <_printf_float+0xc2>
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	4652      	mov	r2, sl
 8006c5e:	4631      	mov	r1, r6
 8006c60:	4628      	mov	r0, r5
 8006c62:	47b8      	blx	r7
 8006c64:	3001      	adds	r0, #1
 8006c66:	f43f ae52 	beq.w	800690e <_printf_float+0xc2>
 8006c6a:	f108 0801 	add.w	r8, r8, #1
 8006c6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c70:	3b01      	subs	r3, #1
 8006c72:	4543      	cmp	r3, r8
 8006c74:	dcf1      	bgt.n	8006c5a <_printf_float+0x40e>
 8006c76:	464b      	mov	r3, r9
 8006c78:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006c7c:	e6dc      	b.n	8006a38 <_printf_float+0x1ec>
 8006c7e:	f04f 0800 	mov.w	r8, #0
 8006c82:	f104 0a1a 	add.w	sl, r4, #26
 8006c86:	e7f2      	b.n	8006c6e <_printf_float+0x422>
 8006c88:	2301      	movs	r3, #1
 8006c8a:	4642      	mov	r2, r8
 8006c8c:	e7df      	b.n	8006c4e <_printf_float+0x402>
 8006c8e:	2301      	movs	r3, #1
 8006c90:	464a      	mov	r2, r9
 8006c92:	4631      	mov	r1, r6
 8006c94:	4628      	mov	r0, r5
 8006c96:	47b8      	blx	r7
 8006c98:	3001      	adds	r0, #1
 8006c9a:	f43f ae38 	beq.w	800690e <_printf_float+0xc2>
 8006c9e:	f108 0801 	add.w	r8, r8, #1
 8006ca2:	68e3      	ldr	r3, [r4, #12]
 8006ca4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ca6:	1a5b      	subs	r3, r3, r1
 8006ca8:	4543      	cmp	r3, r8
 8006caa:	dcf0      	bgt.n	8006c8e <_printf_float+0x442>
 8006cac:	e6fa      	b.n	8006aa4 <_printf_float+0x258>
 8006cae:	f04f 0800 	mov.w	r8, #0
 8006cb2:	f104 0919 	add.w	r9, r4, #25
 8006cb6:	e7f4      	b.n	8006ca2 <_printf_float+0x456>

08006cb8 <_printf_common>:
 8006cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cbc:	4616      	mov	r6, r2
 8006cbe:	4699      	mov	r9, r3
 8006cc0:	688a      	ldr	r2, [r1, #8]
 8006cc2:	690b      	ldr	r3, [r1, #16]
 8006cc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	bfb8      	it	lt
 8006ccc:	4613      	movlt	r3, r2
 8006cce:	6033      	str	r3, [r6, #0]
 8006cd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006cd4:	4607      	mov	r7, r0
 8006cd6:	460c      	mov	r4, r1
 8006cd8:	b10a      	cbz	r2, 8006cde <_printf_common+0x26>
 8006cda:	3301      	adds	r3, #1
 8006cdc:	6033      	str	r3, [r6, #0]
 8006cde:	6823      	ldr	r3, [r4, #0]
 8006ce0:	0699      	lsls	r1, r3, #26
 8006ce2:	bf42      	ittt	mi
 8006ce4:	6833      	ldrmi	r3, [r6, #0]
 8006ce6:	3302      	addmi	r3, #2
 8006ce8:	6033      	strmi	r3, [r6, #0]
 8006cea:	6825      	ldr	r5, [r4, #0]
 8006cec:	f015 0506 	ands.w	r5, r5, #6
 8006cf0:	d106      	bne.n	8006d00 <_printf_common+0x48>
 8006cf2:	f104 0a19 	add.w	sl, r4, #25
 8006cf6:	68e3      	ldr	r3, [r4, #12]
 8006cf8:	6832      	ldr	r2, [r6, #0]
 8006cfa:	1a9b      	subs	r3, r3, r2
 8006cfc:	42ab      	cmp	r3, r5
 8006cfe:	dc26      	bgt.n	8006d4e <_printf_common+0x96>
 8006d00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d04:	1e13      	subs	r3, r2, #0
 8006d06:	6822      	ldr	r2, [r4, #0]
 8006d08:	bf18      	it	ne
 8006d0a:	2301      	movne	r3, #1
 8006d0c:	0692      	lsls	r2, r2, #26
 8006d0e:	d42b      	bmi.n	8006d68 <_printf_common+0xb0>
 8006d10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d14:	4649      	mov	r1, r9
 8006d16:	4638      	mov	r0, r7
 8006d18:	47c0      	blx	r8
 8006d1a:	3001      	adds	r0, #1
 8006d1c:	d01e      	beq.n	8006d5c <_printf_common+0xa4>
 8006d1e:	6823      	ldr	r3, [r4, #0]
 8006d20:	68e5      	ldr	r5, [r4, #12]
 8006d22:	6832      	ldr	r2, [r6, #0]
 8006d24:	f003 0306 	and.w	r3, r3, #6
 8006d28:	2b04      	cmp	r3, #4
 8006d2a:	bf08      	it	eq
 8006d2c:	1aad      	subeq	r5, r5, r2
 8006d2e:	68a3      	ldr	r3, [r4, #8]
 8006d30:	6922      	ldr	r2, [r4, #16]
 8006d32:	bf0c      	ite	eq
 8006d34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d38:	2500      	movne	r5, #0
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	bfc4      	itt	gt
 8006d3e:	1a9b      	subgt	r3, r3, r2
 8006d40:	18ed      	addgt	r5, r5, r3
 8006d42:	2600      	movs	r6, #0
 8006d44:	341a      	adds	r4, #26
 8006d46:	42b5      	cmp	r5, r6
 8006d48:	d11a      	bne.n	8006d80 <_printf_common+0xc8>
 8006d4a:	2000      	movs	r0, #0
 8006d4c:	e008      	b.n	8006d60 <_printf_common+0xa8>
 8006d4e:	2301      	movs	r3, #1
 8006d50:	4652      	mov	r2, sl
 8006d52:	4649      	mov	r1, r9
 8006d54:	4638      	mov	r0, r7
 8006d56:	47c0      	blx	r8
 8006d58:	3001      	adds	r0, #1
 8006d5a:	d103      	bne.n	8006d64 <_printf_common+0xac>
 8006d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d64:	3501      	adds	r5, #1
 8006d66:	e7c6      	b.n	8006cf6 <_printf_common+0x3e>
 8006d68:	18e1      	adds	r1, r4, r3
 8006d6a:	1c5a      	adds	r2, r3, #1
 8006d6c:	2030      	movs	r0, #48	; 0x30
 8006d6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d72:	4422      	add	r2, r4
 8006d74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d7c:	3302      	adds	r3, #2
 8006d7e:	e7c7      	b.n	8006d10 <_printf_common+0x58>
 8006d80:	2301      	movs	r3, #1
 8006d82:	4622      	mov	r2, r4
 8006d84:	4649      	mov	r1, r9
 8006d86:	4638      	mov	r0, r7
 8006d88:	47c0      	blx	r8
 8006d8a:	3001      	adds	r0, #1
 8006d8c:	d0e6      	beq.n	8006d5c <_printf_common+0xa4>
 8006d8e:	3601      	adds	r6, #1
 8006d90:	e7d9      	b.n	8006d46 <_printf_common+0x8e>
	...

08006d94 <_printf_i>:
 8006d94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d98:	7e0f      	ldrb	r7, [r1, #24]
 8006d9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006d9c:	2f78      	cmp	r7, #120	; 0x78
 8006d9e:	4691      	mov	r9, r2
 8006da0:	4680      	mov	r8, r0
 8006da2:	460c      	mov	r4, r1
 8006da4:	469a      	mov	sl, r3
 8006da6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006daa:	d807      	bhi.n	8006dbc <_printf_i+0x28>
 8006dac:	2f62      	cmp	r7, #98	; 0x62
 8006dae:	d80a      	bhi.n	8006dc6 <_printf_i+0x32>
 8006db0:	2f00      	cmp	r7, #0
 8006db2:	f000 80d8 	beq.w	8006f66 <_printf_i+0x1d2>
 8006db6:	2f58      	cmp	r7, #88	; 0x58
 8006db8:	f000 80a3 	beq.w	8006f02 <_printf_i+0x16e>
 8006dbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006dc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006dc4:	e03a      	b.n	8006e3c <_printf_i+0xa8>
 8006dc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006dca:	2b15      	cmp	r3, #21
 8006dcc:	d8f6      	bhi.n	8006dbc <_printf_i+0x28>
 8006dce:	a101      	add	r1, pc, #4	; (adr r1, 8006dd4 <_printf_i+0x40>)
 8006dd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006dd4:	08006e2d 	.word	0x08006e2d
 8006dd8:	08006e41 	.word	0x08006e41
 8006ddc:	08006dbd 	.word	0x08006dbd
 8006de0:	08006dbd 	.word	0x08006dbd
 8006de4:	08006dbd 	.word	0x08006dbd
 8006de8:	08006dbd 	.word	0x08006dbd
 8006dec:	08006e41 	.word	0x08006e41
 8006df0:	08006dbd 	.word	0x08006dbd
 8006df4:	08006dbd 	.word	0x08006dbd
 8006df8:	08006dbd 	.word	0x08006dbd
 8006dfc:	08006dbd 	.word	0x08006dbd
 8006e00:	08006f4d 	.word	0x08006f4d
 8006e04:	08006e71 	.word	0x08006e71
 8006e08:	08006f2f 	.word	0x08006f2f
 8006e0c:	08006dbd 	.word	0x08006dbd
 8006e10:	08006dbd 	.word	0x08006dbd
 8006e14:	08006f6f 	.word	0x08006f6f
 8006e18:	08006dbd 	.word	0x08006dbd
 8006e1c:	08006e71 	.word	0x08006e71
 8006e20:	08006dbd 	.word	0x08006dbd
 8006e24:	08006dbd 	.word	0x08006dbd
 8006e28:	08006f37 	.word	0x08006f37
 8006e2c:	682b      	ldr	r3, [r5, #0]
 8006e2e:	1d1a      	adds	r2, r3, #4
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	602a      	str	r2, [r5, #0]
 8006e34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e0a3      	b.n	8006f88 <_printf_i+0x1f4>
 8006e40:	6820      	ldr	r0, [r4, #0]
 8006e42:	6829      	ldr	r1, [r5, #0]
 8006e44:	0606      	lsls	r6, r0, #24
 8006e46:	f101 0304 	add.w	r3, r1, #4
 8006e4a:	d50a      	bpl.n	8006e62 <_printf_i+0xce>
 8006e4c:	680e      	ldr	r6, [r1, #0]
 8006e4e:	602b      	str	r3, [r5, #0]
 8006e50:	2e00      	cmp	r6, #0
 8006e52:	da03      	bge.n	8006e5c <_printf_i+0xc8>
 8006e54:	232d      	movs	r3, #45	; 0x2d
 8006e56:	4276      	negs	r6, r6
 8006e58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e5c:	485e      	ldr	r0, [pc, #376]	; (8006fd8 <_printf_i+0x244>)
 8006e5e:	230a      	movs	r3, #10
 8006e60:	e019      	b.n	8006e96 <_printf_i+0x102>
 8006e62:	680e      	ldr	r6, [r1, #0]
 8006e64:	602b      	str	r3, [r5, #0]
 8006e66:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006e6a:	bf18      	it	ne
 8006e6c:	b236      	sxthne	r6, r6
 8006e6e:	e7ef      	b.n	8006e50 <_printf_i+0xbc>
 8006e70:	682b      	ldr	r3, [r5, #0]
 8006e72:	6820      	ldr	r0, [r4, #0]
 8006e74:	1d19      	adds	r1, r3, #4
 8006e76:	6029      	str	r1, [r5, #0]
 8006e78:	0601      	lsls	r1, r0, #24
 8006e7a:	d501      	bpl.n	8006e80 <_printf_i+0xec>
 8006e7c:	681e      	ldr	r6, [r3, #0]
 8006e7e:	e002      	b.n	8006e86 <_printf_i+0xf2>
 8006e80:	0646      	lsls	r6, r0, #25
 8006e82:	d5fb      	bpl.n	8006e7c <_printf_i+0xe8>
 8006e84:	881e      	ldrh	r6, [r3, #0]
 8006e86:	4854      	ldr	r0, [pc, #336]	; (8006fd8 <_printf_i+0x244>)
 8006e88:	2f6f      	cmp	r7, #111	; 0x6f
 8006e8a:	bf0c      	ite	eq
 8006e8c:	2308      	moveq	r3, #8
 8006e8e:	230a      	movne	r3, #10
 8006e90:	2100      	movs	r1, #0
 8006e92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e96:	6865      	ldr	r5, [r4, #4]
 8006e98:	60a5      	str	r5, [r4, #8]
 8006e9a:	2d00      	cmp	r5, #0
 8006e9c:	bfa2      	ittt	ge
 8006e9e:	6821      	ldrge	r1, [r4, #0]
 8006ea0:	f021 0104 	bicge.w	r1, r1, #4
 8006ea4:	6021      	strge	r1, [r4, #0]
 8006ea6:	b90e      	cbnz	r6, 8006eac <_printf_i+0x118>
 8006ea8:	2d00      	cmp	r5, #0
 8006eaa:	d04d      	beq.n	8006f48 <_printf_i+0x1b4>
 8006eac:	4615      	mov	r5, r2
 8006eae:	fbb6 f1f3 	udiv	r1, r6, r3
 8006eb2:	fb03 6711 	mls	r7, r3, r1, r6
 8006eb6:	5dc7      	ldrb	r7, [r0, r7]
 8006eb8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ebc:	4637      	mov	r7, r6
 8006ebe:	42bb      	cmp	r3, r7
 8006ec0:	460e      	mov	r6, r1
 8006ec2:	d9f4      	bls.n	8006eae <_printf_i+0x11a>
 8006ec4:	2b08      	cmp	r3, #8
 8006ec6:	d10b      	bne.n	8006ee0 <_printf_i+0x14c>
 8006ec8:	6823      	ldr	r3, [r4, #0]
 8006eca:	07de      	lsls	r6, r3, #31
 8006ecc:	d508      	bpl.n	8006ee0 <_printf_i+0x14c>
 8006ece:	6923      	ldr	r3, [r4, #16]
 8006ed0:	6861      	ldr	r1, [r4, #4]
 8006ed2:	4299      	cmp	r1, r3
 8006ed4:	bfde      	ittt	le
 8006ed6:	2330      	movle	r3, #48	; 0x30
 8006ed8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006edc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006ee0:	1b52      	subs	r2, r2, r5
 8006ee2:	6122      	str	r2, [r4, #16]
 8006ee4:	f8cd a000 	str.w	sl, [sp]
 8006ee8:	464b      	mov	r3, r9
 8006eea:	aa03      	add	r2, sp, #12
 8006eec:	4621      	mov	r1, r4
 8006eee:	4640      	mov	r0, r8
 8006ef0:	f7ff fee2 	bl	8006cb8 <_printf_common>
 8006ef4:	3001      	adds	r0, #1
 8006ef6:	d14c      	bne.n	8006f92 <_printf_i+0x1fe>
 8006ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8006efc:	b004      	add	sp, #16
 8006efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f02:	4835      	ldr	r0, [pc, #212]	; (8006fd8 <_printf_i+0x244>)
 8006f04:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006f08:	6829      	ldr	r1, [r5, #0]
 8006f0a:	6823      	ldr	r3, [r4, #0]
 8006f0c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f10:	6029      	str	r1, [r5, #0]
 8006f12:	061d      	lsls	r5, r3, #24
 8006f14:	d514      	bpl.n	8006f40 <_printf_i+0x1ac>
 8006f16:	07df      	lsls	r7, r3, #31
 8006f18:	bf44      	itt	mi
 8006f1a:	f043 0320 	orrmi.w	r3, r3, #32
 8006f1e:	6023      	strmi	r3, [r4, #0]
 8006f20:	b91e      	cbnz	r6, 8006f2a <_printf_i+0x196>
 8006f22:	6823      	ldr	r3, [r4, #0]
 8006f24:	f023 0320 	bic.w	r3, r3, #32
 8006f28:	6023      	str	r3, [r4, #0]
 8006f2a:	2310      	movs	r3, #16
 8006f2c:	e7b0      	b.n	8006e90 <_printf_i+0xfc>
 8006f2e:	6823      	ldr	r3, [r4, #0]
 8006f30:	f043 0320 	orr.w	r3, r3, #32
 8006f34:	6023      	str	r3, [r4, #0]
 8006f36:	2378      	movs	r3, #120	; 0x78
 8006f38:	4828      	ldr	r0, [pc, #160]	; (8006fdc <_printf_i+0x248>)
 8006f3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f3e:	e7e3      	b.n	8006f08 <_printf_i+0x174>
 8006f40:	0659      	lsls	r1, r3, #25
 8006f42:	bf48      	it	mi
 8006f44:	b2b6      	uxthmi	r6, r6
 8006f46:	e7e6      	b.n	8006f16 <_printf_i+0x182>
 8006f48:	4615      	mov	r5, r2
 8006f4a:	e7bb      	b.n	8006ec4 <_printf_i+0x130>
 8006f4c:	682b      	ldr	r3, [r5, #0]
 8006f4e:	6826      	ldr	r6, [r4, #0]
 8006f50:	6961      	ldr	r1, [r4, #20]
 8006f52:	1d18      	adds	r0, r3, #4
 8006f54:	6028      	str	r0, [r5, #0]
 8006f56:	0635      	lsls	r5, r6, #24
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	d501      	bpl.n	8006f60 <_printf_i+0x1cc>
 8006f5c:	6019      	str	r1, [r3, #0]
 8006f5e:	e002      	b.n	8006f66 <_printf_i+0x1d2>
 8006f60:	0670      	lsls	r0, r6, #25
 8006f62:	d5fb      	bpl.n	8006f5c <_printf_i+0x1c8>
 8006f64:	8019      	strh	r1, [r3, #0]
 8006f66:	2300      	movs	r3, #0
 8006f68:	6123      	str	r3, [r4, #16]
 8006f6a:	4615      	mov	r5, r2
 8006f6c:	e7ba      	b.n	8006ee4 <_printf_i+0x150>
 8006f6e:	682b      	ldr	r3, [r5, #0]
 8006f70:	1d1a      	adds	r2, r3, #4
 8006f72:	602a      	str	r2, [r5, #0]
 8006f74:	681d      	ldr	r5, [r3, #0]
 8006f76:	6862      	ldr	r2, [r4, #4]
 8006f78:	2100      	movs	r1, #0
 8006f7a:	4628      	mov	r0, r5
 8006f7c:	f7f9 f958 	bl	8000230 <memchr>
 8006f80:	b108      	cbz	r0, 8006f86 <_printf_i+0x1f2>
 8006f82:	1b40      	subs	r0, r0, r5
 8006f84:	6060      	str	r0, [r4, #4]
 8006f86:	6863      	ldr	r3, [r4, #4]
 8006f88:	6123      	str	r3, [r4, #16]
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f90:	e7a8      	b.n	8006ee4 <_printf_i+0x150>
 8006f92:	6923      	ldr	r3, [r4, #16]
 8006f94:	462a      	mov	r2, r5
 8006f96:	4649      	mov	r1, r9
 8006f98:	4640      	mov	r0, r8
 8006f9a:	47d0      	blx	sl
 8006f9c:	3001      	adds	r0, #1
 8006f9e:	d0ab      	beq.n	8006ef8 <_printf_i+0x164>
 8006fa0:	6823      	ldr	r3, [r4, #0]
 8006fa2:	079b      	lsls	r3, r3, #30
 8006fa4:	d413      	bmi.n	8006fce <_printf_i+0x23a>
 8006fa6:	68e0      	ldr	r0, [r4, #12]
 8006fa8:	9b03      	ldr	r3, [sp, #12]
 8006faa:	4298      	cmp	r0, r3
 8006fac:	bfb8      	it	lt
 8006fae:	4618      	movlt	r0, r3
 8006fb0:	e7a4      	b.n	8006efc <_printf_i+0x168>
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	4632      	mov	r2, r6
 8006fb6:	4649      	mov	r1, r9
 8006fb8:	4640      	mov	r0, r8
 8006fba:	47d0      	blx	sl
 8006fbc:	3001      	adds	r0, #1
 8006fbe:	d09b      	beq.n	8006ef8 <_printf_i+0x164>
 8006fc0:	3501      	adds	r5, #1
 8006fc2:	68e3      	ldr	r3, [r4, #12]
 8006fc4:	9903      	ldr	r1, [sp, #12]
 8006fc6:	1a5b      	subs	r3, r3, r1
 8006fc8:	42ab      	cmp	r3, r5
 8006fca:	dcf2      	bgt.n	8006fb2 <_printf_i+0x21e>
 8006fcc:	e7eb      	b.n	8006fa6 <_printf_i+0x212>
 8006fce:	2500      	movs	r5, #0
 8006fd0:	f104 0619 	add.w	r6, r4, #25
 8006fd4:	e7f5      	b.n	8006fc2 <_printf_i+0x22e>
 8006fd6:	bf00      	nop
 8006fd8:	0800b0a6 	.word	0x0800b0a6
 8006fdc:	0800b0b7 	.word	0x0800b0b7

08006fe0 <_scanf_float>:
 8006fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fe4:	b087      	sub	sp, #28
 8006fe6:	4617      	mov	r7, r2
 8006fe8:	9303      	str	r3, [sp, #12]
 8006fea:	688b      	ldr	r3, [r1, #8]
 8006fec:	1e5a      	subs	r2, r3, #1
 8006fee:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006ff2:	bf83      	ittte	hi
 8006ff4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006ff8:	195b      	addhi	r3, r3, r5
 8006ffa:	9302      	strhi	r3, [sp, #8]
 8006ffc:	2300      	movls	r3, #0
 8006ffe:	bf86      	itte	hi
 8007000:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007004:	608b      	strhi	r3, [r1, #8]
 8007006:	9302      	strls	r3, [sp, #8]
 8007008:	680b      	ldr	r3, [r1, #0]
 800700a:	468b      	mov	fp, r1
 800700c:	2500      	movs	r5, #0
 800700e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007012:	f84b 3b1c 	str.w	r3, [fp], #28
 8007016:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800701a:	4680      	mov	r8, r0
 800701c:	460c      	mov	r4, r1
 800701e:	465e      	mov	r6, fp
 8007020:	46aa      	mov	sl, r5
 8007022:	46a9      	mov	r9, r5
 8007024:	9501      	str	r5, [sp, #4]
 8007026:	68a2      	ldr	r2, [r4, #8]
 8007028:	b152      	cbz	r2, 8007040 <_scanf_float+0x60>
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	2b4e      	cmp	r3, #78	; 0x4e
 8007030:	d864      	bhi.n	80070fc <_scanf_float+0x11c>
 8007032:	2b40      	cmp	r3, #64	; 0x40
 8007034:	d83c      	bhi.n	80070b0 <_scanf_float+0xd0>
 8007036:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800703a:	b2c8      	uxtb	r0, r1
 800703c:	280e      	cmp	r0, #14
 800703e:	d93a      	bls.n	80070b6 <_scanf_float+0xd6>
 8007040:	f1b9 0f00 	cmp.w	r9, #0
 8007044:	d003      	beq.n	800704e <_scanf_float+0x6e>
 8007046:	6823      	ldr	r3, [r4, #0]
 8007048:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800704c:	6023      	str	r3, [r4, #0]
 800704e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007052:	f1ba 0f01 	cmp.w	sl, #1
 8007056:	f200 8113 	bhi.w	8007280 <_scanf_float+0x2a0>
 800705a:	455e      	cmp	r6, fp
 800705c:	f200 8105 	bhi.w	800726a <_scanf_float+0x28a>
 8007060:	2501      	movs	r5, #1
 8007062:	4628      	mov	r0, r5
 8007064:	b007      	add	sp, #28
 8007066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800706a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800706e:	2a0d      	cmp	r2, #13
 8007070:	d8e6      	bhi.n	8007040 <_scanf_float+0x60>
 8007072:	a101      	add	r1, pc, #4	; (adr r1, 8007078 <_scanf_float+0x98>)
 8007074:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007078:	080071b7 	.word	0x080071b7
 800707c:	08007041 	.word	0x08007041
 8007080:	08007041 	.word	0x08007041
 8007084:	08007041 	.word	0x08007041
 8007088:	08007217 	.word	0x08007217
 800708c:	080071ef 	.word	0x080071ef
 8007090:	08007041 	.word	0x08007041
 8007094:	08007041 	.word	0x08007041
 8007098:	080071c5 	.word	0x080071c5
 800709c:	08007041 	.word	0x08007041
 80070a0:	08007041 	.word	0x08007041
 80070a4:	08007041 	.word	0x08007041
 80070a8:	08007041 	.word	0x08007041
 80070ac:	0800717d 	.word	0x0800717d
 80070b0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80070b4:	e7db      	b.n	800706e <_scanf_float+0x8e>
 80070b6:	290e      	cmp	r1, #14
 80070b8:	d8c2      	bhi.n	8007040 <_scanf_float+0x60>
 80070ba:	a001      	add	r0, pc, #4	; (adr r0, 80070c0 <_scanf_float+0xe0>)
 80070bc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80070c0:	0800716f 	.word	0x0800716f
 80070c4:	08007041 	.word	0x08007041
 80070c8:	0800716f 	.word	0x0800716f
 80070cc:	08007203 	.word	0x08007203
 80070d0:	08007041 	.word	0x08007041
 80070d4:	0800711d 	.word	0x0800711d
 80070d8:	08007159 	.word	0x08007159
 80070dc:	08007159 	.word	0x08007159
 80070e0:	08007159 	.word	0x08007159
 80070e4:	08007159 	.word	0x08007159
 80070e8:	08007159 	.word	0x08007159
 80070ec:	08007159 	.word	0x08007159
 80070f0:	08007159 	.word	0x08007159
 80070f4:	08007159 	.word	0x08007159
 80070f8:	08007159 	.word	0x08007159
 80070fc:	2b6e      	cmp	r3, #110	; 0x6e
 80070fe:	d809      	bhi.n	8007114 <_scanf_float+0x134>
 8007100:	2b60      	cmp	r3, #96	; 0x60
 8007102:	d8b2      	bhi.n	800706a <_scanf_float+0x8a>
 8007104:	2b54      	cmp	r3, #84	; 0x54
 8007106:	d077      	beq.n	80071f8 <_scanf_float+0x218>
 8007108:	2b59      	cmp	r3, #89	; 0x59
 800710a:	d199      	bne.n	8007040 <_scanf_float+0x60>
 800710c:	2d07      	cmp	r5, #7
 800710e:	d197      	bne.n	8007040 <_scanf_float+0x60>
 8007110:	2508      	movs	r5, #8
 8007112:	e029      	b.n	8007168 <_scanf_float+0x188>
 8007114:	2b74      	cmp	r3, #116	; 0x74
 8007116:	d06f      	beq.n	80071f8 <_scanf_float+0x218>
 8007118:	2b79      	cmp	r3, #121	; 0x79
 800711a:	e7f6      	b.n	800710a <_scanf_float+0x12a>
 800711c:	6821      	ldr	r1, [r4, #0]
 800711e:	05c8      	lsls	r0, r1, #23
 8007120:	d51a      	bpl.n	8007158 <_scanf_float+0x178>
 8007122:	9b02      	ldr	r3, [sp, #8]
 8007124:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007128:	6021      	str	r1, [r4, #0]
 800712a:	f109 0901 	add.w	r9, r9, #1
 800712e:	b11b      	cbz	r3, 8007138 <_scanf_float+0x158>
 8007130:	3b01      	subs	r3, #1
 8007132:	3201      	adds	r2, #1
 8007134:	9302      	str	r3, [sp, #8]
 8007136:	60a2      	str	r2, [r4, #8]
 8007138:	68a3      	ldr	r3, [r4, #8]
 800713a:	3b01      	subs	r3, #1
 800713c:	60a3      	str	r3, [r4, #8]
 800713e:	6923      	ldr	r3, [r4, #16]
 8007140:	3301      	adds	r3, #1
 8007142:	6123      	str	r3, [r4, #16]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	3b01      	subs	r3, #1
 8007148:	2b00      	cmp	r3, #0
 800714a:	607b      	str	r3, [r7, #4]
 800714c:	f340 8084 	ble.w	8007258 <_scanf_float+0x278>
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	3301      	adds	r3, #1
 8007154:	603b      	str	r3, [r7, #0]
 8007156:	e766      	b.n	8007026 <_scanf_float+0x46>
 8007158:	eb1a 0f05 	cmn.w	sl, r5
 800715c:	f47f af70 	bne.w	8007040 <_scanf_float+0x60>
 8007160:	6822      	ldr	r2, [r4, #0]
 8007162:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007166:	6022      	str	r2, [r4, #0]
 8007168:	f806 3b01 	strb.w	r3, [r6], #1
 800716c:	e7e4      	b.n	8007138 <_scanf_float+0x158>
 800716e:	6822      	ldr	r2, [r4, #0]
 8007170:	0610      	lsls	r0, r2, #24
 8007172:	f57f af65 	bpl.w	8007040 <_scanf_float+0x60>
 8007176:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800717a:	e7f4      	b.n	8007166 <_scanf_float+0x186>
 800717c:	f1ba 0f00 	cmp.w	sl, #0
 8007180:	d10e      	bne.n	80071a0 <_scanf_float+0x1c0>
 8007182:	f1b9 0f00 	cmp.w	r9, #0
 8007186:	d10e      	bne.n	80071a6 <_scanf_float+0x1c6>
 8007188:	6822      	ldr	r2, [r4, #0]
 800718a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800718e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007192:	d108      	bne.n	80071a6 <_scanf_float+0x1c6>
 8007194:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007198:	6022      	str	r2, [r4, #0]
 800719a:	f04f 0a01 	mov.w	sl, #1
 800719e:	e7e3      	b.n	8007168 <_scanf_float+0x188>
 80071a0:	f1ba 0f02 	cmp.w	sl, #2
 80071a4:	d055      	beq.n	8007252 <_scanf_float+0x272>
 80071a6:	2d01      	cmp	r5, #1
 80071a8:	d002      	beq.n	80071b0 <_scanf_float+0x1d0>
 80071aa:	2d04      	cmp	r5, #4
 80071ac:	f47f af48 	bne.w	8007040 <_scanf_float+0x60>
 80071b0:	3501      	adds	r5, #1
 80071b2:	b2ed      	uxtb	r5, r5
 80071b4:	e7d8      	b.n	8007168 <_scanf_float+0x188>
 80071b6:	f1ba 0f01 	cmp.w	sl, #1
 80071ba:	f47f af41 	bne.w	8007040 <_scanf_float+0x60>
 80071be:	f04f 0a02 	mov.w	sl, #2
 80071c2:	e7d1      	b.n	8007168 <_scanf_float+0x188>
 80071c4:	b97d      	cbnz	r5, 80071e6 <_scanf_float+0x206>
 80071c6:	f1b9 0f00 	cmp.w	r9, #0
 80071ca:	f47f af3c 	bne.w	8007046 <_scanf_float+0x66>
 80071ce:	6822      	ldr	r2, [r4, #0]
 80071d0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80071d4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80071d8:	f47f af39 	bne.w	800704e <_scanf_float+0x6e>
 80071dc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80071e0:	6022      	str	r2, [r4, #0]
 80071e2:	2501      	movs	r5, #1
 80071e4:	e7c0      	b.n	8007168 <_scanf_float+0x188>
 80071e6:	2d03      	cmp	r5, #3
 80071e8:	d0e2      	beq.n	80071b0 <_scanf_float+0x1d0>
 80071ea:	2d05      	cmp	r5, #5
 80071ec:	e7de      	b.n	80071ac <_scanf_float+0x1cc>
 80071ee:	2d02      	cmp	r5, #2
 80071f0:	f47f af26 	bne.w	8007040 <_scanf_float+0x60>
 80071f4:	2503      	movs	r5, #3
 80071f6:	e7b7      	b.n	8007168 <_scanf_float+0x188>
 80071f8:	2d06      	cmp	r5, #6
 80071fa:	f47f af21 	bne.w	8007040 <_scanf_float+0x60>
 80071fe:	2507      	movs	r5, #7
 8007200:	e7b2      	b.n	8007168 <_scanf_float+0x188>
 8007202:	6822      	ldr	r2, [r4, #0]
 8007204:	0591      	lsls	r1, r2, #22
 8007206:	f57f af1b 	bpl.w	8007040 <_scanf_float+0x60>
 800720a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800720e:	6022      	str	r2, [r4, #0]
 8007210:	f8cd 9004 	str.w	r9, [sp, #4]
 8007214:	e7a8      	b.n	8007168 <_scanf_float+0x188>
 8007216:	6822      	ldr	r2, [r4, #0]
 8007218:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800721c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007220:	d006      	beq.n	8007230 <_scanf_float+0x250>
 8007222:	0550      	lsls	r0, r2, #21
 8007224:	f57f af0c 	bpl.w	8007040 <_scanf_float+0x60>
 8007228:	f1b9 0f00 	cmp.w	r9, #0
 800722c:	f43f af0f 	beq.w	800704e <_scanf_float+0x6e>
 8007230:	0591      	lsls	r1, r2, #22
 8007232:	bf58      	it	pl
 8007234:	9901      	ldrpl	r1, [sp, #4]
 8007236:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800723a:	bf58      	it	pl
 800723c:	eba9 0101 	subpl.w	r1, r9, r1
 8007240:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007244:	bf58      	it	pl
 8007246:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800724a:	6022      	str	r2, [r4, #0]
 800724c:	f04f 0900 	mov.w	r9, #0
 8007250:	e78a      	b.n	8007168 <_scanf_float+0x188>
 8007252:	f04f 0a03 	mov.w	sl, #3
 8007256:	e787      	b.n	8007168 <_scanf_float+0x188>
 8007258:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800725c:	4639      	mov	r1, r7
 800725e:	4640      	mov	r0, r8
 8007260:	4798      	blx	r3
 8007262:	2800      	cmp	r0, #0
 8007264:	f43f aedf 	beq.w	8007026 <_scanf_float+0x46>
 8007268:	e6ea      	b.n	8007040 <_scanf_float+0x60>
 800726a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800726e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007272:	463a      	mov	r2, r7
 8007274:	4640      	mov	r0, r8
 8007276:	4798      	blx	r3
 8007278:	6923      	ldr	r3, [r4, #16]
 800727a:	3b01      	subs	r3, #1
 800727c:	6123      	str	r3, [r4, #16]
 800727e:	e6ec      	b.n	800705a <_scanf_float+0x7a>
 8007280:	1e6b      	subs	r3, r5, #1
 8007282:	2b06      	cmp	r3, #6
 8007284:	d825      	bhi.n	80072d2 <_scanf_float+0x2f2>
 8007286:	2d02      	cmp	r5, #2
 8007288:	d836      	bhi.n	80072f8 <_scanf_float+0x318>
 800728a:	455e      	cmp	r6, fp
 800728c:	f67f aee8 	bls.w	8007060 <_scanf_float+0x80>
 8007290:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007294:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007298:	463a      	mov	r2, r7
 800729a:	4640      	mov	r0, r8
 800729c:	4798      	blx	r3
 800729e:	6923      	ldr	r3, [r4, #16]
 80072a0:	3b01      	subs	r3, #1
 80072a2:	6123      	str	r3, [r4, #16]
 80072a4:	e7f1      	b.n	800728a <_scanf_float+0x2aa>
 80072a6:	9802      	ldr	r0, [sp, #8]
 80072a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80072ac:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80072b0:	9002      	str	r0, [sp, #8]
 80072b2:	463a      	mov	r2, r7
 80072b4:	4640      	mov	r0, r8
 80072b6:	4798      	blx	r3
 80072b8:	6923      	ldr	r3, [r4, #16]
 80072ba:	3b01      	subs	r3, #1
 80072bc:	6123      	str	r3, [r4, #16]
 80072be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80072c2:	fa5f fa8a 	uxtb.w	sl, sl
 80072c6:	f1ba 0f02 	cmp.w	sl, #2
 80072ca:	d1ec      	bne.n	80072a6 <_scanf_float+0x2c6>
 80072cc:	3d03      	subs	r5, #3
 80072ce:	b2ed      	uxtb	r5, r5
 80072d0:	1b76      	subs	r6, r6, r5
 80072d2:	6823      	ldr	r3, [r4, #0]
 80072d4:	05da      	lsls	r2, r3, #23
 80072d6:	d52f      	bpl.n	8007338 <_scanf_float+0x358>
 80072d8:	055b      	lsls	r3, r3, #21
 80072da:	d510      	bpl.n	80072fe <_scanf_float+0x31e>
 80072dc:	455e      	cmp	r6, fp
 80072de:	f67f aebf 	bls.w	8007060 <_scanf_float+0x80>
 80072e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80072e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80072ea:	463a      	mov	r2, r7
 80072ec:	4640      	mov	r0, r8
 80072ee:	4798      	blx	r3
 80072f0:	6923      	ldr	r3, [r4, #16]
 80072f2:	3b01      	subs	r3, #1
 80072f4:	6123      	str	r3, [r4, #16]
 80072f6:	e7f1      	b.n	80072dc <_scanf_float+0x2fc>
 80072f8:	46aa      	mov	sl, r5
 80072fa:	9602      	str	r6, [sp, #8]
 80072fc:	e7df      	b.n	80072be <_scanf_float+0x2de>
 80072fe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007302:	6923      	ldr	r3, [r4, #16]
 8007304:	2965      	cmp	r1, #101	; 0x65
 8007306:	f103 33ff 	add.w	r3, r3, #4294967295
 800730a:	f106 35ff 	add.w	r5, r6, #4294967295
 800730e:	6123      	str	r3, [r4, #16]
 8007310:	d00c      	beq.n	800732c <_scanf_float+0x34c>
 8007312:	2945      	cmp	r1, #69	; 0x45
 8007314:	d00a      	beq.n	800732c <_scanf_float+0x34c>
 8007316:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800731a:	463a      	mov	r2, r7
 800731c:	4640      	mov	r0, r8
 800731e:	4798      	blx	r3
 8007320:	6923      	ldr	r3, [r4, #16]
 8007322:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007326:	3b01      	subs	r3, #1
 8007328:	1eb5      	subs	r5, r6, #2
 800732a:	6123      	str	r3, [r4, #16]
 800732c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007330:	463a      	mov	r2, r7
 8007332:	4640      	mov	r0, r8
 8007334:	4798      	blx	r3
 8007336:	462e      	mov	r6, r5
 8007338:	6825      	ldr	r5, [r4, #0]
 800733a:	f015 0510 	ands.w	r5, r5, #16
 800733e:	d159      	bne.n	80073f4 <_scanf_float+0x414>
 8007340:	7035      	strb	r5, [r6, #0]
 8007342:	6823      	ldr	r3, [r4, #0]
 8007344:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007348:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800734c:	d11b      	bne.n	8007386 <_scanf_float+0x3a6>
 800734e:	9b01      	ldr	r3, [sp, #4]
 8007350:	454b      	cmp	r3, r9
 8007352:	eba3 0209 	sub.w	r2, r3, r9
 8007356:	d123      	bne.n	80073a0 <_scanf_float+0x3c0>
 8007358:	2200      	movs	r2, #0
 800735a:	4659      	mov	r1, fp
 800735c:	4640      	mov	r0, r8
 800735e:	f000 feb1 	bl	80080c4 <_strtod_r>
 8007362:	6822      	ldr	r2, [r4, #0]
 8007364:	9b03      	ldr	r3, [sp, #12]
 8007366:	f012 0f02 	tst.w	r2, #2
 800736a:	ec57 6b10 	vmov	r6, r7, d0
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	d021      	beq.n	80073b6 <_scanf_float+0x3d6>
 8007372:	9903      	ldr	r1, [sp, #12]
 8007374:	1d1a      	adds	r2, r3, #4
 8007376:	600a      	str	r2, [r1, #0]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	e9c3 6700 	strd	r6, r7, [r3]
 800737e:	68e3      	ldr	r3, [r4, #12]
 8007380:	3301      	adds	r3, #1
 8007382:	60e3      	str	r3, [r4, #12]
 8007384:	e66d      	b.n	8007062 <_scanf_float+0x82>
 8007386:	9b04      	ldr	r3, [sp, #16]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d0e5      	beq.n	8007358 <_scanf_float+0x378>
 800738c:	9905      	ldr	r1, [sp, #20]
 800738e:	230a      	movs	r3, #10
 8007390:	462a      	mov	r2, r5
 8007392:	3101      	adds	r1, #1
 8007394:	4640      	mov	r0, r8
 8007396:	f000 ff1d 	bl	80081d4 <_strtol_r>
 800739a:	9b04      	ldr	r3, [sp, #16]
 800739c:	9e05      	ldr	r6, [sp, #20]
 800739e:	1ac2      	subs	r2, r0, r3
 80073a0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80073a4:	429e      	cmp	r6, r3
 80073a6:	bf28      	it	cs
 80073a8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80073ac:	4912      	ldr	r1, [pc, #72]	; (80073f8 <_scanf_float+0x418>)
 80073ae:	4630      	mov	r0, r6
 80073b0:	f000 f844 	bl	800743c <siprintf>
 80073b4:	e7d0      	b.n	8007358 <_scanf_float+0x378>
 80073b6:	9903      	ldr	r1, [sp, #12]
 80073b8:	f012 0f04 	tst.w	r2, #4
 80073bc:	f103 0204 	add.w	r2, r3, #4
 80073c0:	600a      	str	r2, [r1, #0]
 80073c2:	d1d9      	bne.n	8007378 <_scanf_float+0x398>
 80073c4:	f8d3 8000 	ldr.w	r8, [r3]
 80073c8:	ee10 2a10 	vmov	r2, s0
 80073cc:	ee10 0a10 	vmov	r0, s0
 80073d0:	463b      	mov	r3, r7
 80073d2:	4639      	mov	r1, r7
 80073d4:	f7f9 fbd2 	bl	8000b7c <__aeabi_dcmpun>
 80073d8:	b128      	cbz	r0, 80073e6 <_scanf_float+0x406>
 80073da:	4808      	ldr	r0, [pc, #32]	; (80073fc <_scanf_float+0x41c>)
 80073dc:	f000 f828 	bl	8007430 <nanf>
 80073e0:	ed88 0a00 	vstr	s0, [r8]
 80073e4:	e7cb      	b.n	800737e <_scanf_float+0x39e>
 80073e6:	4630      	mov	r0, r6
 80073e8:	4639      	mov	r1, r7
 80073ea:	f7f9 fc25 	bl	8000c38 <__aeabi_d2f>
 80073ee:	f8c8 0000 	str.w	r0, [r8]
 80073f2:	e7c4      	b.n	800737e <_scanf_float+0x39e>
 80073f4:	2500      	movs	r5, #0
 80073f6:	e634      	b.n	8007062 <_scanf_float+0x82>
 80073f8:	0800b0c8 	.word	0x0800b0c8
 80073fc:	0800b538 	.word	0x0800b538

08007400 <iprintf>:
 8007400:	b40f      	push	{r0, r1, r2, r3}
 8007402:	4b0a      	ldr	r3, [pc, #40]	; (800742c <iprintf+0x2c>)
 8007404:	b513      	push	{r0, r1, r4, lr}
 8007406:	681c      	ldr	r4, [r3, #0]
 8007408:	b124      	cbz	r4, 8007414 <iprintf+0x14>
 800740a:	69a3      	ldr	r3, [r4, #24]
 800740c:	b913      	cbnz	r3, 8007414 <iprintf+0x14>
 800740e:	4620      	mov	r0, r4
 8007410:	f001 fdb4 	bl	8008f7c <__sinit>
 8007414:	ab05      	add	r3, sp, #20
 8007416:	9a04      	ldr	r2, [sp, #16]
 8007418:	68a1      	ldr	r1, [r4, #8]
 800741a:	9301      	str	r3, [sp, #4]
 800741c:	4620      	mov	r0, r4
 800741e:	f003 f927 	bl	800a670 <_vfiprintf_r>
 8007422:	b002      	add	sp, #8
 8007424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007428:	b004      	add	sp, #16
 800742a:	4770      	bx	lr
 800742c:	2000000c 	.word	0x2000000c

08007430 <nanf>:
 8007430:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007438 <nanf+0x8>
 8007434:	4770      	bx	lr
 8007436:	bf00      	nop
 8007438:	7fc00000 	.word	0x7fc00000

0800743c <siprintf>:
 800743c:	b40e      	push	{r1, r2, r3}
 800743e:	b500      	push	{lr}
 8007440:	b09c      	sub	sp, #112	; 0x70
 8007442:	ab1d      	add	r3, sp, #116	; 0x74
 8007444:	9002      	str	r0, [sp, #8]
 8007446:	9006      	str	r0, [sp, #24]
 8007448:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800744c:	4809      	ldr	r0, [pc, #36]	; (8007474 <siprintf+0x38>)
 800744e:	9107      	str	r1, [sp, #28]
 8007450:	9104      	str	r1, [sp, #16]
 8007452:	4909      	ldr	r1, [pc, #36]	; (8007478 <siprintf+0x3c>)
 8007454:	f853 2b04 	ldr.w	r2, [r3], #4
 8007458:	9105      	str	r1, [sp, #20]
 800745a:	6800      	ldr	r0, [r0, #0]
 800745c:	9301      	str	r3, [sp, #4]
 800745e:	a902      	add	r1, sp, #8
 8007460:	f002 ffdc 	bl	800a41c <_svfiprintf_r>
 8007464:	9b02      	ldr	r3, [sp, #8]
 8007466:	2200      	movs	r2, #0
 8007468:	701a      	strb	r2, [r3, #0]
 800746a:	b01c      	add	sp, #112	; 0x70
 800746c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007470:	b003      	add	sp, #12
 8007472:	4770      	bx	lr
 8007474:	2000000c 	.word	0x2000000c
 8007478:	ffff0208 	.word	0xffff0208

0800747c <sulp>:
 800747c:	b570      	push	{r4, r5, r6, lr}
 800747e:	4604      	mov	r4, r0
 8007480:	460d      	mov	r5, r1
 8007482:	ec45 4b10 	vmov	d0, r4, r5
 8007486:	4616      	mov	r6, r2
 8007488:	f002 fd26 	bl	8009ed8 <__ulp>
 800748c:	ec51 0b10 	vmov	r0, r1, d0
 8007490:	b17e      	cbz	r6, 80074b2 <sulp+0x36>
 8007492:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007496:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800749a:	2b00      	cmp	r3, #0
 800749c:	dd09      	ble.n	80074b2 <sulp+0x36>
 800749e:	051b      	lsls	r3, r3, #20
 80074a0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80074a4:	2400      	movs	r4, #0
 80074a6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80074aa:	4622      	mov	r2, r4
 80074ac:	462b      	mov	r3, r5
 80074ae:	f7f9 f8cb 	bl	8000648 <__aeabi_dmul>
 80074b2:	bd70      	pop	{r4, r5, r6, pc}
 80074b4:	0000      	movs	r0, r0
	...

080074b8 <_strtod_l>:
 80074b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074bc:	ed2d 8b02 	vpush	{d8}
 80074c0:	b09d      	sub	sp, #116	; 0x74
 80074c2:	461f      	mov	r7, r3
 80074c4:	2300      	movs	r3, #0
 80074c6:	9318      	str	r3, [sp, #96]	; 0x60
 80074c8:	4ba2      	ldr	r3, [pc, #648]	; (8007754 <_strtod_l+0x29c>)
 80074ca:	9213      	str	r2, [sp, #76]	; 0x4c
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	9305      	str	r3, [sp, #20]
 80074d0:	4604      	mov	r4, r0
 80074d2:	4618      	mov	r0, r3
 80074d4:	4688      	mov	r8, r1
 80074d6:	f7f8 fea3 	bl	8000220 <strlen>
 80074da:	f04f 0a00 	mov.w	sl, #0
 80074de:	4605      	mov	r5, r0
 80074e0:	f04f 0b00 	mov.w	fp, #0
 80074e4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80074e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80074ea:	781a      	ldrb	r2, [r3, #0]
 80074ec:	2a2b      	cmp	r2, #43	; 0x2b
 80074ee:	d04e      	beq.n	800758e <_strtod_l+0xd6>
 80074f0:	d83b      	bhi.n	800756a <_strtod_l+0xb2>
 80074f2:	2a0d      	cmp	r2, #13
 80074f4:	d834      	bhi.n	8007560 <_strtod_l+0xa8>
 80074f6:	2a08      	cmp	r2, #8
 80074f8:	d834      	bhi.n	8007564 <_strtod_l+0xac>
 80074fa:	2a00      	cmp	r2, #0
 80074fc:	d03e      	beq.n	800757c <_strtod_l+0xc4>
 80074fe:	2300      	movs	r3, #0
 8007500:	930a      	str	r3, [sp, #40]	; 0x28
 8007502:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007504:	7833      	ldrb	r3, [r6, #0]
 8007506:	2b30      	cmp	r3, #48	; 0x30
 8007508:	f040 80b0 	bne.w	800766c <_strtod_l+0x1b4>
 800750c:	7873      	ldrb	r3, [r6, #1]
 800750e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007512:	2b58      	cmp	r3, #88	; 0x58
 8007514:	d168      	bne.n	80075e8 <_strtod_l+0x130>
 8007516:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007518:	9301      	str	r3, [sp, #4]
 800751a:	ab18      	add	r3, sp, #96	; 0x60
 800751c:	9702      	str	r7, [sp, #8]
 800751e:	9300      	str	r3, [sp, #0]
 8007520:	4a8d      	ldr	r2, [pc, #564]	; (8007758 <_strtod_l+0x2a0>)
 8007522:	ab19      	add	r3, sp, #100	; 0x64
 8007524:	a917      	add	r1, sp, #92	; 0x5c
 8007526:	4620      	mov	r0, r4
 8007528:	f001 fe2c 	bl	8009184 <__gethex>
 800752c:	f010 0707 	ands.w	r7, r0, #7
 8007530:	4605      	mov	r5, r0
 8007532:	d005      	beq.n	8007540 <_strtod_l+0x88>
 8007534:	2f06      	cmp	r7, #6
 8007536:	d12c      	bne.n	8007592 <_strtod_l+0xda>
 8007538:	3601      	adds	r6, #1
 800753a:	2300      	movs	r3, #0
 800753c:	9617      	str	r6, [sp, #92]	; 0x5c
 800753e:	930a      	str	r3, [sp, #40]	; 0x28
 8007540:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007542:	2b00      	cmp	r3, #0
 8007544:	f040 8590 	bne.w	8008068 <_strtod_l+0xbb0>
 8007548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800754a:	b1eb      	cbz	r3, 8007588 <_strtod_l+0xd0>
 800754c:	4652      	mov	r2, sl
 800754e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007552:	ec43 2b10 	vmov	d0, r2, r3
 8007556:	b01d      	add	sp, #116	; 0x74
 8007558:	ecbd 8b02 	vpop	{d8}
 800755c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007560:	2a20      	cmp	r2, #32
 8007562:	d1cc      	bne.n	80074fe <_strtod_l+0x46>
 8007564:	3301      	adds	r3, #1
 8007566:	9317      	str	r3, [sp, #92]	; 0x5c
 8007568:	e7be      	b.n	80074e8 <_strtod_l+0x30>
 800756a:	2a2d      	cmp	r2, #45	; 0x2d
 800756c:	d1c7      	bne.n	80074fe <_strtod_l+0x46>
 800756e:	2201      	movs	r2, #1
 8007570:	920a      	str	r2, [sp, #40]	; 0x28
 8007572:	1c5a      	adds	r2, r3, #1
 8007574:	9217      	str	r2, [sp, #92]	; 0x5c
 8007576:	785b      	ldrb	r3, [r3, #1]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d1c2      	bne.n	8007502 <_strtod_l+0x4a>
 800757c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800757e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007582:	2b00      	cmp	r3, #0
 8007584:	f040 856e 	bne.w	8008064 <_strtod_l+0xbac>
 8007588:	4652      	mov	r2, sl
 800758a:	465b      	mov	r3, fp
 800758c:	e7e1      	b.n	8007552 <_strtod_l+0x9a>
 800758e:	2200      	movs	r2, #0
 8007590:	e7ee      	b.n	8007570 <_strtod_l+0xb8>
 8007592:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007594:	b13a      	cbz	r2, 80075a6 <_strtod_l+0xee>
 8007596:	2135      	movs	r1, #53	; 0x35
 8007598:	a81a      	add	r0, sp, #104	; 0x68
 800759a:	f002 fda8 	bl	800a0ee <__copybits>
 800759e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80075a0:	4620      	mov	r0, r4
 80075a2:	f002 f967 	bl	8009874 <_Bfree>
 80075a6:	3f01      	subs	r7, #1
 80075a8:	2f04      	cmp	r7, #4
 80075aa:	d806      	bhi.n	80075ba <_strtod_l+0x102>
 80075ac:	e8df f007 	tbb	[pc, r7]
 80075b0:	1714030a 	.word	0x1714030a
 80075b4:	0a          	.byte	0x0a
 80075b5:	00          	.byte	0x00
 80075b6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80075ba:	0728      	lsls	r0, r5, #28
 80075bc:	d5c0      	bpl.n	8007540 <_strtod_l+0x88>
 80075be:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80075c2:	e7bd      	b.n	8007540 <_strtod_l+0x88>
 80075c4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80075c8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80075ca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80075ce:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80075d2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80075d6:	e7f0      	b.n	80075ba <_strtod_l+0x102>
 80075d8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800775c <_strtod_l+0x2a4>
 80075dc:	e7ed      	b.n	80075ba <_strtod_l+0x102>
 80075de:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80075e2:	f04f 3aff 	mov.w	sl, #4294967295
 80075e6:	e7e8      	b.n	80075ba <_strtod_l+0x102>
 80075e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80075ea:	1c5a      	adds	r2, r3, #1
 80075ec:	9217      	str	r2, [sp, #92]	; 0x5c
 80075ee:	785b      	ldrb	r3, [r3, #1]
 80075f0:	2b30      	cmp	r3, #48	; 0x30
 80075f2:	d0f9      	beq.n	80075e8 <_strtod_l+0x130>
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d0a3      	beq.n	8007540 <_strtod_l+0x88>
 80075f8:	2301      	movs	r3, #1
 80075fa:	f04f 0900 	mov.w	r9, #0
 80075fe:	9304      	str	r3, [sp, #16]
 8007600:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007602:	9308      	str	r3, [sp, #32]
 8007604:	f8cd 901c 	str.w	r9, [sp, #28]
 8007608:	464f      	mov	r7, r9
 800760a:	220a      	movs	r2, #10
 800760c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800760e:	7806      	ldrb	r6, [r0, #0]
 8007610:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007614:	b2d9      	uxtb	r1, r3
 8007616:	2909      	cmp	r1, #9
 8007618:	d92a      	bls.n	8007670 <_strtod_l+0x1b8>
 800761a:	9905      	ldr	r1, [sp, #20]
 800761c:	462a      	mov	r2, r5
 800761e:	f003 f9b2 	bl	800a986 <strncmp>
 8007622:	b398      	cbz	r0, 800768c <_strtod_l+0x1d4>
 8007624:	2000      	movs	r0, #0
 8007626:	4632      	mov	r2, r6
 8007628:	463d      	mov	r5, r7
 800762a:	9005      	str	r0, [sp, #20]
 800762c:	4603      	mov	r3, r0
 800762e:	2a65      	cmp	r2, #101	; 0x65
 8007630:	d001      	beq.n	8007636 <_strtod_l+0x17e>
 8007632:	2a45      	cmp	r2, #69	; 0x45
 8007634:	d118      	bne.n	8007668 <_strtod_l+0x1b0>
 8007636:	b91d      	cbnz	r5, 8007640 <_strtod_l+0x188>
 8007638:	9a04      	ldr	r2, [sp, #16]
 800763a:	4302      	orrs	r2, r0
 800763c:	d09e      	beq.n	800757c <_strtod_l+0xc4>
 800763e:	2500      	movs	r5, #0
 8007640:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8007644:	f108 0201 	add.w	r2, r8, #1
 8007648:	9217      	str	r2, [sp, #92]	; 0x5c
 800764a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800764e:	2a2b      	cmp	r2, #43	; 0x2b
 8007650:	d075      	beq.n	800773e <_strtod_l+0x286>
 8007652:	2a2d      	cmp	r2, #45	; 0x2d
 8007654:	d07b      	beq.n	800774e <_strtod_l+0x296>
 8007656:	f04f 0c00 	mov.w	ip, #0
 800765a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800765e:	2909      	cmp	r1, #9
 8007660:	f240 8082 	bls.w	8007768 <_strtod_l+0x2b0>
 8007664:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007668:	2600      	movs	r6, #0
 800766a:	e09d      	b.n	80077a8 <_strtod_l+0x2f0>
 800766c:	2300      	movs	r3, #0
 800766e:	e7c4      	b.n	80075fa <_strtod_l+0x142>
 8007670:	2f08      	cmp	r7, #8
 8007672:	bfd8      	it	le
 8007674:	9907      	ldrle	r1, [sp, #28]
 8007676:	f100 0001 	add.w	r0, r0, #1
 800767a:	bfda      	itte	le
 800767c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007680:	9307      	strle	r3, [sp, #28]
 8007682:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007686:	3701      	adds	r7, #1
 8007688:	9017      	str	r0, [sp, #92]	; 0x5c
 800768a:	e7bf      	b.n	800760c <_strtod_l+0x154>
 800768c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800768e:	195a      	adds	r2, r3, r5
 8007690:	9217      	str	r2, [sp, #92]	; 0x5c
 8007692:	5d5a      	ldrb	r2, [r3, r5]
 8007694:	2f00      	cmp	r7, #0
 8007696:	d037      	beq.n	8007708 <_strtod_l+0x250>
 8007698:	9005      	str	r0, [sp, #20]
 800769a:	463d      	mov	r5, r7
 800769c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80076a0:	2b09      	cmp	r3, #9
 80076a2:	d912      	bls.n	80076ca <_strtod_l+0x212>
 80076a4:	2301      	movs	r3, #1
 80076a6:	e7c2      	b.n	800762e <_strtod_l+0x176>
 80076a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80076aa:	1c5a      	adds	r2, r3, #1
 80076ac:	9217      	str	r2, [sp, #92]	; 0x5c
 80076ae:	785a      	ldrb	r2, [r3, #1]
 80076b0:	3001      	adds	r0, #1
 80076b2:	2a30      	cmp	r2, #48	; 0x30
 80076b4:	d0f8      	beq.n	80076a8 <_strtod_l+0x1f0>
 80076b6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80076ba:	2b08      	cmp	r3, #8
 80076bc:	f200 84d9 	bhi.w	8008072 <_strtod_l+0xbba>
 80076c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80076c2:	9005      	str	r0, [sp, #20]
 80076c4:	2000      	movs	r0, #0
 80076c6:	9308      	str	r3, [sp, #32]
 80076c8:	4605      	mov	r5, r0
 80076ca:	3a30      	subs	r2, #48	; 0x30
 80076cc:	f100 0301 	add.w	r3, r0, #1
 80076d0:	d014      	beq.n	80076fc <_strtod_l+0x244>
 80076d2:	9905      	ldr	r1, [sp, #20]
 80076d4:	4419      	add	r1, r3
 80076d6:	9105      	str	r1, [sp, #20]
 80076d8:	462b      	mov	r3, r5
 80076da:	eb00 0e05 	add.w	lr, r0, r5
 80076de:	210a      	movs	r1, #10
 80076e0:	4573      	cmp	r3, lr
 80076e2:	d113      	bne.n	800770c <_strtod_l+0x254>
 80076e4:	182b      	adds	r3, r5, r0
 80076e6:	2b08      	cmp	r3, #8
 80076e8:	f105 0501 	add.w	r5, r5, #1
 80076ec:	4405      	add	r5, r0
 80076ee:	dc1c      	bgt.n	800772a <_strtod_l+0x272>
 80076f0:	9907      	ldr	r1, [sp, #28]
 80076f2:	230a      	movs	r3, #10
 80076f4:	fb03 2301 	mla	r3, r3, r1, r2
 80076f8:	9307      	str	r3, [sp, #28]
 80076fa:	2300      	movs	r3, #0
 80076fc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80076fe:	1c51      	adds	r1, r2, #1
 8007700:	9117      	str	r1, [sp, #92]	; 0x5c
 8007702:	7852      	ldrb	r2, [r2, #1]
 8007704:	4618      	mov	r0, r3
 8007706:	e7c9      	b.n	800769c <_strtod_l+0x1e4>
 8007708:	4638      	mov	r0, r7
 800770a:	e7d2      	b.n	80076b2 <_strtod_l+0x1fa>
 800770c:	2b08      	cmp	r3, #8
 800770e:	dc04      	bgt.n	800771a <_strtod_l+0x262>
 8007710:	9e07      	ldr	r6, [sp, #28]
 8007712:	434e      	muls	r6, r1
 8007714:	9607      	str	r6, [sp, #28]
 8007716:	3301      	adds	r3, #1
 8007718:	e7e2      	b.n	80076e0 <_strtod_l+0x228>
 800771a:	f103 0c01 	add.w	ip, r3, #1
 800771e:	f1bc 0f10 	cmp.w	ip, #16
 8007722:	bfd8      	it	le
 8007724:	fb01 f909 	mulle.w	r9, r1, r9
 8007728:	e7f5      	b.n	8007716 <_strtod_l+0x25e>
 800772a:	2d10      	cmp	r5, #16
 800772c:	bfdc      	itt	le
 800772e:	230a      	movle	r3, #10
 8007730:	fb03 2909 	mlale	r9, r3, r9, r2
 8007734:	e7e1      	b.n	80076fa <_strtod_l+0x242>
 8007736:	2300      	movs	r3, #0
 8007738:	9305      	str	r3, [sp, #20]
 800773a:	2301      	movs	r3, #1
 800773c:	e77c      	b.n	8007638 <_strtod_l+0x180>
 800773e:	f04f 0c00 	mov.w	ip, #0
 8007742:	f108 0202 	add.w	r2, r8, #2
 8007746:	9217      	str	r2, [sp, #92]	; 0x5c
 8007748:	f898 2002 	ldrb.w	r2, [r8, #2]
 800774c:	e785      	b.n	800765a <_strtod_l+0x1a2>
 800774e:	f04f 0c01 	mov.w	ip, #1
 8007752:	e7f6      	b.n	8007742 <_strtod_l+0x28a>
 8007754:	0800b37c 	.word	0x0800b37c
 8007758:	0800b0d0 	.word	0x0800b0d0
 800775c:	7ff00000 	.word	0x7ff00000
 8007760:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007762:	1c51      	adds	r1, r2, #1
 8007764:	9117      	str	r1, [sp, #92]	; 0x5c
 8007766:	7852      	ldrb	r2, [r2, #1]
 8007768:	2a30      	cmp	r2, #48	; 0x30
 800776a:	d0f9      	beq.n	8007760 <_strtod_l+0x2a8>
 800776c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007770:	2908      	cmp	r1, #8
 8007772:	f63f af79 	bhi.w	8007668 <_strtod_l+0x1b0>
 8007776:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800777a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800777c:	9206      	str	r2, [sp, #24]
 800777e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007780:	1c51      	adds	r1, r2, #1
 8007782:	9117      	str	r1, [sp, #92]	; 0x5c
 8007784:	7852      	ldrb	r2, [r2, #1]
 8007786:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800778a:	2e09      	cmp	r6, #9
 800778c:	d937      	bls.n	80077fe <_strtod_l+0x346>
 800778e:	9e06      	ldr	r6, [sp, #24]
 8007790:	1b89      	subs	r1, r1, r6
 8007792:	2908      	cmp	r1, #8
 8007794:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007798:	dc02      	bgt.n	80077a0 <_strtod_l+0x2e8>
 800779a:	4576      	cmp	r6, lr
 800779c:	bfa8      	it	ge
 800779e:	4676      	movge	r6, lr
 80077a0:	f1bc 0f00 	cmp.w	ip, #0
 80077a4:	d000      	beq.n	80077a8 <_strtod_l+0x2f0>
 80077a6:	4276      	negs	r6, r6
 80077a8:	2d00      	cmp	r5, #0
 80077aa:	d14d      	bne.n	8007848 <_strtod_l+0x390>
 80077ac:	9904      	ldr	r1, [sp, #16]
 80077ae:	4301      	orrs	r1, r0
 80077b0:	f47f aec6 	bne.w	8007540 <_strtod_l+0x88>
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	f47f aee1 	bne.w	800757c <_strtod_l+0xc4>
 80077ba:	2a69      	cmp	r2, #105	; 0x69
 80077bc:	d027      	beq.n	800780e <_strtod_l+0x356>
 80077be:	dc24      	bgt.n	800780a <_strtod_l+0x352>
 80077c0:	2a49      	cmp	r2, #73	; 0x49
 80077c2:	d024      	beq.n	800780e <_strtod_l+0x356>
 80077c4:	2a4e      	cmp	r2, #78	; 0x4e
 80077c6:	f47f aed9 	bne.w	800757c <_strtod_l+0xc4>
 80077ca:	499f      	ldr	r1, [pc, #636]	; (8007a48 <_strtod_l+0x590>)
 80077cc:	a817      	add	r0, sp, #92	; 0x5c
 80077ce:	f001 ff31 	bl	8009634 <__match>
 80077d2:	2800      	cmp	r0, #0
 80077d4:	f43f aed2 	beq.w	800757c <_strtod_l+0xc4>
 80077d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	2b28      	cmp	r3, #40	; 0x28
 80077de:	d12d      	bne.n	800783c <_strtod_l+0x384>
 80077e0:	499a      	ldr	r1, [pc, #616]	; (8007a4c <_strtod_l+0x594>)
 80077e2:	aa1a      	add	r2, sp, #104	; 0x68
 80077e4:	a817      	add	r0, sp, #92	; 0x5c
 80077e6:	f001 ff39 	bl	800965c <__hexnan>
 80077ea:	2805      	cmp	r0, #5
 80077ec:	d126      	bne.n	800783c <_strtod_l+0x384>
 80077ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80077f0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80077f4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80077f8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80077fc:	e6a0      	b.n	8007540 <_strtod_l+0x88>
 80077fe:	210a      	movs	r1, #10
 8007800:	fb01 2e0e 	mla	lr, r1, lr, r2
 8007804:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007808:	e7b9      	b.n	800777e <_strtod_l+0x2c6>
 800780a:	2a6e      	cmp	r2, #110	; 0x6e
 800780c:	e7db      	b.n	80077c6 <_strtod_l+0x30e>
 800780e:	4990      	ldr	r1, [pc, #576]	; (8007a50 <_strtod_l+0x598>)
 8007810:	a817      	add	r0, sp, #92	; 0x5c
 8007812:	f001 ff0f 	bl	8009634 <__match>
 8007816:	2800      	cmp	r0, #0
 8007818:	f43f aeb0 	beq.w	800757c <_strtod_l+0xc4>
 800781c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800781e:	498d      	ldr	r1, [pc, #564]	; (8007a54 <_strtod_l+0x59c>)
 8007820:	3b01      	subs	r3, #1
 8007822:	a817      	add	r0, sp, #92	; 0x5c
 8007824:	9317      	str	r3, [sp, #92]	; 0x5c
 8007826:	f001 ff05 	bl	8009634 <__match>
 800782a:	b910      	cbnz	r0, 8007832 <_strtod_l+0x37a>
 800782c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800782e:	3301      	adds	r3, #1
 8007830:	9317      	str	r3, [sp, #92]	; 0x5c
 8007832:	f8df b230 	ldr.w	fp, [pc, #560]	; 8007a64 <_strtod_l+0x5ac>
 8007836:	f04f 0a00 	mov.w	sl, #0
 800783a:	e681      	b.n	8007540 <_strtod_l+0x88>
 800783c:	4886      	ldr	r0, [pc, #536]	; (8007a58 <_strtod_l+0x5a0>)
 800783e:	f003 f847 	bl	800a8d0 <nan>
 8007842:	ec5b ab10 	vmov	sl, fp, d0
 8007846:	e67b      	b.n	8007540 <_strtod_l+0x88>
 8007848:	9b05      	ldr	r3, [sp, #20]
 800784a:	9807      	ldr	r0, [sp, #28]
 800784c:	1af3      	subs	r3, r6, r3
 800784e:	2f00      	cmp	r7, #0
 8007850:	bf08      	it	eq
 8007852:	462f      	moveq	r7, r5
 8007854:	2d10      	cmp	r5, #16
 8007856:	9306      	str	r3, [sp, #24]
 8007858:	46a8      	mov	r8, r5
 800785a:	bfa8      	it	ge
 800785c:	f04f 0810 	movge.w	r8, #16
 8007860:	f7f8 fe78 	bl	8000554 <__aeabi_ui2d>
 8007864:	2d09      	cmp	r5, #9
 8007866:	4682      	mov	sl, r0
 8007868:	468b      	mov	fp, r1
 800786a:	dd13      	ble.n	8007894 <_strtod_l+0x3dc>
 800786c:	4b7b      	ldr	r3, [pc, #492]	; (8007a5c <_strtod_l+0x5a4>)
 800786e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007872:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007876:	f7f8 fee7 	bl	8000648 <__aeabi_dmul>
 800787a:	4682      	mov	sl, r0
 800787c:	4648      	mov	r0, r9
 800787e:	468b      	mov	fp, r1
 8007880:	f7f8 fe68 	bl	8000554 <__aeabi_ui2d>
 8007884:	4602      	mov	r2, r0
 8007886:	460b      	mov	r3, r1
 8007888:	4650      	mov	r0, sl
 800788a:	4659      	mov	r1, fp
 800788c:	f7f8 fd26 	bl	80002dc <__adddf3>
 8007890:	4682      	mov	sl, r0
 8007892:	468b      	mov	fp, r1
 8007894:	2d0f      	cmp	r5, #15
 8007896:	dc38      	bgt.n	800790a <_strtod_l+0x452>
 8007898:	9b06      	ldr	r3, [sp, #24]
 800789a:	2b00      	cmp	r3, #0
 800789c:	f43f ae50 	beq.w	8007540 <_strtod_l+0x88>
 80078a0:	dd24      	ble.n	80078ec <_strtod_l+0x434>
 80078a2:	2b16      	cmp	r3, #22
 80078a4:	dc0b      	bgt.n	80078be <_strtod_l+0x406>
 80078a6:	496d      	ldr	r1, [pc, #436]	; (8007a5c <_strtod_l+0x5a4>)
 80078a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80078ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078b0:	4652      	mov	r2, sl
 80078b2:	465b      	mov	r3, fp
 80078b4:	f7f8 fec8 	bl	8000648 <__aeabi_dmul>
 80078b8:	4682      	mov	sl, r0
 80078ba:	468b      	mov	fp, r1
 80078bc:	e640      	b.n	8007540 <_strtod_l+0x88>
 80078be:	9a06      	ldr	r2, [sp, #24]
 80078c0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80078c4:	4293      	cmp	r3, r2
 80078c6:	db20      	blt.n	800790a <_strtod_l+0x452>
 80078c8:	4c64      	ldr	r4, [pc, #400]	; (8007a5c <_strtod_l+0x5a4>)
 80078ca:	f1c5 050f 	rsb	r5, r5, #15
 80078ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80078d2:	4652      	mov	r2, sl
 80078d4:	465b      	mov	r3, fp
 80078d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078da:	f7f8 feb5 	bl	8000648 <__aeabi_dmul>
 80078de:	9b06      	ldr	r3, [sp, #24]
 80078e0:	1b5d      	subs	r5, r3, r5
 80078e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80078e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80078ea:	e7e3      	b.n	80078b4 <_strtod_l+0x3fc>
 80078ec:	9b06      	ldr	r3, [sp, #24]
 80078ee:	3316      	adds	r3, #22
 80078f0:	db0b      	blt.n	800790a <_strtod_l+0x452>
 80078f2:	9b05      	ldr	r3, [sp, #20]
 80078f4:	1b9e      	subs	r6, r3, r6
 80078f6:	4b59      	ldr	r3, [pc, #356]	; (8007a5c <_strtod_l+0x5a4>)
 80078f8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80078fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007900:	4650      	mov	r0, sl
 8007902:	4659      	mov	r1, fp
 8007904:	f7f8 ffca 	bl	800089c <__aeabi_ddiv>
 8007908:	e7d6      	b.n	80078b8 <_strtod_l+0x400>
 800790a:	9b06      	ldr	r3, [sp, #24]
 800790c:	eba5 0808 	sub.w	r8, r5, r8
 8007910:	4498      	add	r8, r3
 8007912:	f1b8 0f00 	cmp.w	r8, #0
 8007916:	dd74      	ble.n	8007a02 <_strtod_l+0x54a>
 8007918:	f018 030f 	ands.w	r3, r8, #15
 800791c:	d00a      	beq.n	8007934 <_strtod_l+0x47c>
 800791e:	494f      	ldr	r1, [pc, #316]	; (8007a5c <_strtod_l+0x5a4>)
 8007920:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007924:	4652      	mov	r2, sl
 8007926:	465b      	mov	r3, fp
 8007928:	e9d1 0100 	ldrd	r0, r1, [r1]
 800792c:	f7f8 fe8c 	bl	8000648 <__aeabi_dmul>
 8007930:	4682      	mov	sl, r0
 8007932:	468b      	mov	fp, r1
 8007934:	f038 080f 	bics.w	r8, r8, #15
 8007938:	d04f      	beq.n	80079da <_strtod_l+0x522>
 800793a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800793e:	dd22      	ble.n	8007986 <_strtod_l+0x4ce>
 8007940:	2500      	movs	r5, #0
 8007942:	462e      	mov	r6, r5
 8007944:	9507      	str	r5, [sp, #28]
 8007946:	9505      	str	r5, [sp, #20]
 8007948:	2322      	movs	r3, #34	; 0x22
 800794a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8007a64 <_strtod_l+0x5ac>
 800794e:	6023      	str	r3, [r4, #0]
 8007950:	f04f 0a00 	mov.w	sl, #0
 8007954:	9b07      	ldr	r3, [sp, #28]
 8007956:	2b00      	cmp	r3, #0
 8007958:	f43f adf2 	beq.w	8007540 <_strtod_l+0x88>
 800795c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800795e:	4620      	mov	r0, r4
 8007960:	f001 ff88 	bl	8009874 <_Bfree>
 8007964:	9905      	ldr	r1, [sp, #20]
 8007966:	4620      	mov	r0, r4
 8007968:	f001 ff84 	bl	8009874 <_Bfree>
 800796c:	4631      	mov	r1, r6
 800796e:	4620      	mov	r0, r4
 8007970:	f001 ff80 	bl	8009874 <_Bfree>
 8007974:	9907      	ldr	r1, [sp, #28]
 8007976:	4620      	mov	r0, r4
 8007978:	f001 ff7c 	bl	8009874 <_Bfree>
 800797c:	4629      	mov	r1, r5
 800797e:	4620      	mov	r0, r4
 8007980:	f001 ff78 	bl	8009874 <_Bfree>
 8007984:	e5dc      	b.n	8007540 <_strtod_l+0x88>
 8007986:	4b36      	ldr	r3, [pc, #216]	; (8007a60 <_strtod_l+0x5a8>)
 8007988:	9304      	str	r3, [sp, #16]
 800798a:	2300      	movs	r3, #0
 800798c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007990:	4650      	mov	r0, sl
 8007992:	4659      	mov	r1, fp
 8007994:	4699      	mov	r9, r3
 8007996:	f1b8 0f01 	cmp.w	r8, #1
 800799a:	dc21      	bgt.n	80079e0 <_strtod_l+0x528>
 800799c:	b10b      	cbz	r3, 80079a2 <_strtod_l+0x4ea>
 800799e:	4682      	mov	sl, r0
 80079a0:	468b      	mov	fp, r1
 80079a2:	4b2f      	ldr	r3, [pc, #188]	; (8007a60 <_strtod_l+0x5a8>)
 80079a4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80079a8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80079ac:	4652      	mov	r2, sl
 80079ae:	465b      	mov	r3, fp
 80079b0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80079b4:	f7f8 fe48 	bl	8000648 <__aeabi_dmul>
 80079b8:	4b2a      	ldr	r3, [pc, #168]	; (8007a64 <_strtod_l+0x5ac>)
 80079ba:	460a      	mov	r2, r1
 80079bc:	400b      	ands	r3, r1
 80079be:	492a      	ldr	r1, [pc, #168]	; (8007a68 <_strtod_l+0x5b0>)
 80079c0:	428b      	cmp	r3, r1
 80079c2:	4682      	mov	sl, r0
 80079c4:	d8bc      	bhi.n	8007940 <_strtod_l+0x488>
 80079c6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80079ca:	428b      	cmp	r3, r1
 80079cc:	bf86      	itte	hi
 80079ce:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007a6c <_strtod_l+0x5b4>
 80079d2:	f04f 3aff 	movhi.w	sl, #4294967295
 80079d6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80079da:	2300      	movs	r3, #0
 80079dc:	9304      	str	r3, [sp, #16]
 80079de:	e084      	b.n	8007aea <_strtod_l+0x632>
 80079e0:	f018 0f01 	tst.w	r8, #1
 80079e4:	d005      	beq.n	80079f2 <_strtod_l+0x53a>
 80079e6:	9b04      	ldr	r3, [sp, #16]
 80079e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ec:	f7f8 fe2c 	bl	8000648 <__aeabi_dmul>
 80079f0:	2301      	movs	r3, #1
 80079f2:	9a04      	ldr	r2, [sp, #16]
 80079f4:	3208      	adds	r2, #8
 80079f6:	f109 0901 	add.w	r9, r9, #1
 80079fa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80079fe:	9204      	str	r2, [sp, #16]
 8007a00:	e7c9      	b.n	8007996 <_strtod_l+0x4de>
 8007a02:	d0ea      	beq.n	80079da <_strtod_l+0x522>
 8007a04:	f1c8 0800 	rsb	r8, r8, #0
 8007a08:	f018 020f 	ands.w	r2, r8, #15
 8007a0c:	d00a      	beq.n	8007a24 <_strtod_l+0x56c>
 8007a0e:	4b13      	ldr	r3, [pc, #76]	; (8007a5c <_strtod_l+0x5a4>)
 8007a10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a14:	4650      	mov	r0, sl
 8007a16:	4659      	mov	r1, fp
 8007a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a1c:	f7f8 ff3e 	bl	800089c <__aeabi_ddiv>
 8007a20:	4682      	mov	sl, r0
 8007a22:	468b      	mov	fp, r1
 8007a24:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007a28:	d0d7      	beq.n	80079da <_strtod_l+0x522>
 8007a2a:	f1b8 0f1f 	cmp.w	r8, #31
 8007a2e:	dd1f      	ble.n	8007a70 <_strtod_l+0x5b8>
 8007a30:	2500      	movs	r5, #0
 8007a32:	462e      	mov	r6, r5
 8007a34:	9507      	str	r5, [sp, #28]
 8007a36:	9505      	str	r5, [sp, #20]
 8007a38:	2322      	movs	r3, #34	; 0x22
 8007a3a:	f04f 0a00 	mov.w	sl, #0
 8007a3e:	f04f 0b00 	mov.w	fp, #0
 8007a42:	6023      	str	r3, [r4, #0]
 8007a44:	e786      	b.n	8007954 <_strtod_l+0x49c>
 8007a46:	bf00      	nop
 8007a48:	0800b0a1 	.word	0x0800b0a1
 8007a4c:	0800b0e4 	.word	0x0800b0e4
 8007a50:	0800b099 	.word	0x0800b099
 8007a54:	0800b224 	.word	0x0800b224
 8007a58:	0800b538 	.word	0x0800b538
 8007a5c:	0800b418 	.word	0x0800b418
 8007a60:	0800b3f0 	.word	0x0800b3f0
 8007a64:	7ff00000 	.word	0x7ff00000
 8007a68:	7ca00000 	.word	0x7ca00000
 8007a6c:	7fefffff 	.word	0x7fefffff
 8007a70:	f018 0310 	ands.w	r3, r8, #16
 8007a74:	bf18      	it	ne
 8007a76:	236a      	movne	r3, #106	; 0x6a
 8007a78:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007e28 <_strtod_l+0x970>
 8007a7c:	9304      	str	r3, [sp, #16]
 8007a7e:	4650      	mov	r0, sl
 8007a80:	4659      	mov	r1, fp
 8007a82:	2300      	movs	r3, #0
 8007a84:	f018 0f01 	tst.w	r8, #1
 8007a88:	d004      	beq.n	8007a94 <_strtod_l+0x5dc>
 8007a8a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007a8e:	f7f8 fddb 	bl	8000648 <__aeabi_dmul>
 8007a92:	2301      	movs	r3, #1
 8007a94:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007a98:	f109 0908 	add.w	r9, r9, #8
 8007a9c:	d1f2      	bne.n	8007a84 <_strtod_l+0x5cc>
 8007a9e:	b10b      	cbz	r3, 8007aa4 <_strtod_l+0x5ec>
 8007aa0:	4682      	mov	sl, r0
 8007aa2:	468b      	mov	fp, r1
 8007aa4:	9b04      	ldr	r3, [sp, #16]
 8007aa6:	b1c3      	cbz	r3, 8007ada <_strtod_l+0x622>
 8007aa8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007aac:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	4659      	mov	r1, fp
 8007ab4:	dd11      	ble.n	8007ada <_strtod_l+0x622>
 8007ab6:	2b1f      	cmp	r3, #31
 8007ab8:	f340 8124 	ble.w	8007d04 <_strtod_l+0x84c>
 8007abc:	2b34      	cmp	r3, #52	; 0x34
 8007abe:	bfde      	ittt	le
 8007ac0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007ac4:	f04f 33ff 	movle.w	r3, #4294967295
 8007ac8:	fa03 f202 	lslle.w	r2, r3, r2
 8007acc:	f04f 0a00 	mov.w	sl, #0
 8007ad0:	bfcc      	ite	gt
 8007ad2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007ad6:	ea02 0b01 	andle.w	fp, r2, r1
 8007ada:	2200      	movs	r2, #0
 8007adc:	2300      	movs	r3, #0
 8007ade:	4650      	mov	r0, sl
 8007ae0:	4659      	mov	r1, fp
 8007ae2:	f7f9 f819 	bl	8000b18 <__aeabi_dcmpeq>
 8007ae6:	2800      	cmp	r0, #0
 8007ae8:	d1a2      	bne.n	8007a30 <_strtod_l+0x578>
 8007aea:	9b07      	ldr	r3, [sp, #28]
 8007aec:	9300      	str	r3, [sp, #0]
 8007aee:	9908      	ldr	r1, [sp, #32]
 8007af0:	462b      	mov	r3, r5
 8007af2:	463a      	mov	r2, r7
 8007af4:	4620      	mov	r0, r4
 8007af6:	f001 ff25 	bl	8009944 <__s2b>
 8007afa:	9007      	str	r0, [sp, #28]
 8007afc:	2800      	cmp	r0, #0
 8007afe:	f43f af1f 	beq.w	8007940 <_strtod_l+0x488>
 8007b02:	9b05      	ldr	r3, [sp, #20]
 8007b04:	1b9e      	subs	r6, r3, r6
 8007b06:	9b06      	ldr	r3, [sp, #24]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	bfb4      	ite	lt
 8007b0c:	4633      	movlt	r3, r6
 8007b0e:	2300      	movge	r3, #0
 8007b10:	930c      	str	r3, [sp, #48]	; 0x30
 8007b12:	9b06      	ldr	r3, [sp, #24]
 8007b14:	2500      	movs	r5, #0
 8007b16:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007b1a:	9312      	str	r3, [sp, #72]	; 0x48
 8007b1c:	462e      	mov	r6, r5
 8007b1e:	9b07      	ldr	r3, [sp, #28]
 8007b20:	4620      	mov	r0, r4
 8007b22:	6859      	ldr	r1, [r3, #4]
 8007b24:	f001 fe66 	bl	80097f4 <_Balloc>
 8007b28:	9005      	str	r0, [sp, #20]
 8007b2a:	2800      	cmp	r0, #0
 8007b2c:	f43f af0c 	beq.w	8007948 <_strtod_l+0x490>
 8007b30:	9b07      	ldr	r3, [sp, #28]
 8007b32:	691a      	ldr	r2, [r3, #16]
 8007b34:	3202      	adds	r2, #2
 8007b36:	f103 010c 	add.w	r1, r3, #12
 8007b3a:	0092      	lsls	r2, r2, #2
 8007b3c:	300c      	adds	r0, #12
 8007b3e:	f001 fe4b 	bl	80097d8 <memcpy>
 8007b42:	ec4b ab10 	vmov	d0, sl, fp
 8007b46:	aa1a      	add	r2, sp, #104	; 0x68
 8007b48:	a919      	add	r1, sp, #100	; 0x64
 8007b4a:	4620      	mov	r0, r4
 8007b4c:	f002 fa40 	bl	8009fd0 <__d2b>
 8007b50:	ec4b ab18 	vmov	d8, sl, fp
 8007b54:	9018      	str	r0, [sp, #96]	; 0x60
 8007b56:	2800      	cmp	r0, #0
 8007b58:	f43f aef6 	beq.w	8007948 <_strtod_l+0x490>
 8007b5c:	2101      	movs	r1, #1
 8007b5e:	4620      	mov	r0, r4
 8007b60:	f001 ff8a 	bl	8009a78 <__i2b>
 8007b64:	4606      	mov	r6, r0
 8007b66:	2800      	cmp	r0, #0
 8007b68:	f43f aeee 	beq.w	8007948 <_strtod_l+0x490>
 8007b6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b6e:	9904      	ldr	r1, [sp, #16]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	bfab      	itete	ge
 8007b74:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8007b76:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007b78:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007b7a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8007b7e:	bfac      	ite	ge
 8007b80:	eb03 0902 	addge.w	r9, r3, r2
 8007b84:	1ad7      	sublt	r7, r2, r3
 8007b86:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007b88:	eba3 0801 	sub.w	r8, r3, r1
 8007b8c:	4490      	add	r8, r2
 8007b8e:	4ba1      	ldr	r3, [pc, #644]	; (8007e14 <_strtod_l+0x95c>)
 8007b90:	f108 38ff 	add.w	r8, r8, #4294967295
 8007b94:	4598      	cmp	r8, r3
 8007b96:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007b9a:	f280 80c7 	bge.w	8007d2c <_strtod_l+0x874>
 8007b9e:	eba3 0308 	sub.w	r3, r3, r8
 8007ba2:	2b1f      	cmp	r3, #31
 8007ba4:	eba2 0203 	sub.w	r2, r2, r3
 8007ba8:	f04f 0101 	mov.w	r1, #1
 8007bac:	f300 80b1 	bgt.w	8007d12 <_strtod_l+0x85a>
 8007bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8007bb4:	930d      	str	r3, [sp, #52]	; 0x34
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	9308      	str	r3, [sp, #32]
 8007bba:	eb09 0802 	add.w	r8, r9, r2
 8007bbe:	9b04      	ldr	r3, [sp, #16]
 8007bc0:	45c1      	cmp	r9, r8
 8007bc2:	4417      	add	r7, r2
 8007bc4:	441f      	add	r7, r3
 8007bc6:	464b      	mov	r3, r9
 8007bc8:	bfa8      	it	ge
 8007bca:	4643      	movge	r3, r8
 8007bcc:	42bb      	cmp	r3, r7
 8007bce:	bfa8      	it	ge
 8007bd0:	463b      	movge	r3, r7
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	bfc2      	ittt	gt
 8007bd6:	eba8 0803 	subgt.w	r8, r8, r3
 8007bda:	1aff      	subgt	r7, r7, r3
 8007bdc:	eba9 0903 	subgt.w	r9, r9, r3
 8007be0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	dd17      	ble.n	8007c16 <_strtod_l+0x75e>
 8007be6:	4631      	mov	r1, r6
 8007be8:	461a      	mov	r2, r3
 8007bea:	4620      	mov	r0, r4
 8007bec:	f002 f804 	bl	8009bf8 <__pow5mult>
 8007bf0:	4606      	mov	r6, r0
 8007bf2:	2800      	cmp	r0, #0
 8007bf4:	f43f aea8 	beq.w	8007948 <_strtod_l+0x490>
 8007bf8:	4601      	mov	r1, r0
 8007bfa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007bfc:	4620      	mov	r0, r4
 8007bfe:	f001 ff51 	bl	8009aa4 <__multiply>
 8007c02:	900b      	str	r0, [sp, #44]	; 0x2c
 8007c04:	2800      	cmp	r0, #0
 8007c06:	f43f ae9f 	beq.w	8007948 <_strtod_l+0x490>
 8007c0a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007c0c:	4620      	mov	r0, r4
 8007c0e:	f001 fe31 	bl	8009874 <_Bfree>
 8007c12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c14:	9318      	str	r3, [sp, #96]	; 0x60
 8007c16:	f1b8 0f00 	cmp.w	r8, #0
 8007c1a:	f300 808c 	bgt.w	8007d36 <_strtod_l+0x87e>
 8007c1e:	9b06      	ldr	r3, [sp, #24]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	dd08      	ble.n	8007c36 <_strtod_l+0x77e>
 8007c24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007c26:	9905      	ldr	r1, [sp, #20]
 8007c28:	4620      	mov	r0, r4
 8007c2a:	f001 ffe5 	bl	8009bf8 <__pow5mult>
 8007c2e:	9005      	str	r0, [sp, #20]
 8007c30:	2800      	cmp	r0, #0
 8007c32:	f43f ae89 	beq.w	8007948 <_strtod_l+0x490>
 8007c36:	2f00      	cmp	r7, #0
 8007c38:	dd08      	ble.n	8007c4c <_strtod_l+0x794>
 8007c3a:	9905      	ldr	r1, [sp, #20]
 8007c3c:	463a      	mov	r2, r7
 8007c3e:	4620      	mov	r0, r4
 8007c40:	f002 f834 	bl	8009cac <__lshift>
 8007c44:	9005      	str	r0, [sp, #20]
 8007c46:	2800      	cmp	r0, #0
 8007c48:	f43f ae7e 	beq.w	8007948 <_strtod_l+0x490>
 8007c4c:	f1b9 0f00 	cmp.w	r9, #0
 8007c50:	dd08      	ble.n	8007c64 <_strtod_l+0x7ac>
 8007c52:	4631      	mov	r1, r6
 8007c54:	464a      	mov	r2, r9
 8007c56:	4620      	mov	r0, r4
 8007c58:	f002 f828 	bl	8009cac <__lshift>
 8007c5c:	4606      	mov	r6, r0
 8007c5e:	2800      	cmp	r0, #0
 8007c60:	f43f ae72 	beq.w	8007948 <_strtod_l+0x490>
 8007c64:	9a05      	ldr	r2, [sp, #20]
 8007c66:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007c68:	4620      	mov	r0, r4
 8007c6a:	f002 f8ab 	bl	8009dc4 <__mdiff>
 8007c6e:	4605      	mov	r5, r0
 8007c70:	2800      	cmp	r0, #0
 8007c72:	f43f ae69 	beq.w	8007948 <_strtod_l+0x490>
 8007c76:	68c3      	ldr	r3, [r0, #12]
 8007c78:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	60c3      	str	r3, [r0, #12]
 8007c7e:	4631      	mov	r1, r6
 8007c80:	f002 f884 	bl	8009d8c <__mcmp>
 8007c84:	2800      	cmp	r0, #0
 8007c86:	da60      	bge.n	8007d4a <_strtod_l+0x892>
 8007c88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c8a:	ea53 030a 	orrs.w	r3, r3, sl
 8007c8e:	f040 8082 	bne.w	8007d96 <_strtod_l+0x8de>
 8007c92:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d17d      	bne.n	8007d96 <_strtod_l+0x8de>
 8007c9a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007c9e:	0d1b      	lsrs	r3, r3, #20
 8007ca0:	051b      	lsls	r3, r3, #20
 8007ca2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007ca6:	d976      	bls.n	8007d96 <_strtod_l+0x8de>
 8007ca8:	696b      	ldr	r3, [r5, #20]
 8007caa:	b913      	cbnz	r3, 8007cb2 <_strtod_l+0x7fa>
 8007cac:	692b      	ldr	r3, [r5, #16]
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	dd71      	ble.n	8007d96 <_strtod_l+0x8de>
 8007cb2:	4629      	mov	r1, r5
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	f001 fff8 	bl	8009cac <__lshift>
 8007cbc:	4631      	mov	r1, r6
 8007cbe:	4605      	mov	r5, r0
 8007cc0:	f002 f864 	bl	8009d8c <__mcmp>
 8007cc4:	2800      	cmp	r0, #0
 8007cc6:	dd66      	ble.n	8007d96 <_strtod_l+0x8de>
 8007cc8:	9904      	ldr	r1, [sp, #16]
 8007cca:	4a53      	ldr	r2, [pc, #332]	; (8007e18 <_strtod_l+0x960>)
 8007ccc:	465b      	mov	r3, fp
 8007cce:	2900      	cmp	r1, #0
 8007cd0:	f000 8081 	beq.w	8007dd6 <_strtod_l+0x91e>
 8007cd4:	ea02 010b 	and.w	r1, r2, fp
 8007cd8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007cdc:	dc7b      	bgt.n	8007dd6 <_strtod_l+0x91e>
 8007cde:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007ce2:	f77f aea9 	ble.w	8007a38 <_strtod_l+0x580>
 8007ce6:	4b4d      	ldr	r3, [pc, #308]	; (8007e1c <_strtod_l+0x964>)
 8007ce8:	4650      	mov	r0, sl
 8007cea:	4659      	mov	r1, fp
 8007cec:	2200      	movs	r2, #0
 8007cee:	f7f8 fcab 	bl	8000648 <__aeabi_dmul>
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	4303      	orrs	r3, r0
 8007cf6:	bf08      	it	eq
 8007cf8:	2322      	moveq	r3, #34	; 0x22
 8007cfa:	4682      	mov	sl, r0
 8007cfc:	468b      	mov	fp, r1
 8007cfe:	bf08      	it	eq
 8007d00:	6023      	streq	r3, [r4, #0]
 8007d02:	e62b      	b.n	800795c <_strtod_l+0x4a4>
 8007d04:	f04f 32ff 	mov.w	r2, #4294967295
 8007d08:	fa02 f303 	lsl.w	r3, r2, r3
 8007d0c:	ea03 0a0a 	and.w	sl, r3, sl
 8007d10:	e6e3      	b.n	8007ada <_strtod_l+0x622>
 8007d12:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007d16:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007d1a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007d1e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007d22:	fa01 f308 	lsl.w	r3, r1, r8
 8007d26:	9308      	str	r3, [sp, #32]
 8007d28:	910d      	str	r1, [sp, #52]	; 0x34
 8007d2a:	e746      	b.n	8007bba <_strtod_l+0x702>
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	9308      	str	r3, [sp, #32]
 8007d30:	2301      	movs	r3, #1
 8007d32:	930d      	str	r3, [sp, #52]	; 0x34
 8007d34:	e741      	b.n	8007bba <_strtod_l+0x702>
 8007d36:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007d38:	4642      	mov	r2, r8
 8007d3a:	4620      	mov	r0, r4
 8007d3c:	f001 ffb6 	bl	8009cac <__lshift>
 8007d40:	9018      	str	r0, [sp, #96]	; 0x60
 8007d42:	2800      	cmp	r0, #0
 8007d44:	f47f af6b 	bne.w	8007c1e <_strtod_l+0x766>
 8007d48:	e5fe      	b.n	8007948 <_strtod_l+0x490>
 8007d4a:	465f      	mov	r7, fp
 8007d4c:	d16e      	bne.n	8007e2c <_strtod_l+0x974>
 8007d4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007d50:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d54:	b342      	cbz	r2, 8007da8 <_strtod_l+0x8f0>
 8007d56:	4a32      	ldr	r2, [pc, #200]	; (8007e20 <_strtod_l+0x968>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d128      	bne.n	8007dae <_strtod_l+0x8f6>
 8007d5c:	9b04      	ldr	r3, [sp, #16]
 8007d5e:	4651      	mov	r1, sl
 8007d60:	b1eb      	cbz	r3, 8007d9e <_strtod_l+0x8e6>
 8007d62:	4b2d      	ldr	r3, [pc, #180]	; (8007e18 <_strtod_l+0x960>)
 8007d64:	403b      	ands	r3, r7
 8007d66:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8007d6e:	d819      	bhi.n	8007da4 <_strtod_l+0x8ec>
 8007d70:	0d1b      	lsrs	r3, r3, #20
 8007d72:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007d76:	fa02 f303 	lsl.w	r3, r2, r3
 8007d7a:	4299      	cmp	r1, r3
 8007d7c:	d117      	bne.n	8007dae <_strtod_l+0x8f6>
 8007d7e:	4b29      	ldr	r3, [pc, #164]	; (8007e24 <_strtod_l+0x96c>)
 8007d80:	429f      	cmp	r7, r3
 8007d82:	d102      	bne.n	8007d8a <_strtod_l+0x8d2>
 8007d84:	3101      	adds	r1, #1
 8007d86:	f43f addf 	beq.w	8007948 <_strtod_l+0x490>
 8007d8a:	4b23      	ldr	r3, [pc, #140]	; (8007e18 <_strtod_l+0x960>)
 8007d8c:	403b      	ands	r3, r7
 8007d8e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007d92:	f04f 0a00 	mov.w	sl, #0
 8007d96:	9b04      	ldr	r3, [sp, #16]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d1a4      	bne.n	8007ce6 <_strtod_l+0x82e>
 8007d9c:	e5de      	b.n	800795c <_strtod_l+0x4a4>
 8007d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8007da2:	e7ea      	b.n	8007d7a <_strtod_l+0x8c2>
 8007da4:	4613      	mov	r3, r2
 8007da6:	e7e8      	b.n	8007d7a <_strtod_l+0x8c2>
 8007da8:	ea53 030a 	orrs.w	r3, r3, sl
 8007dac:	d08c      	beq.n	8007cc8 <_strtod_l+0x810>
 8007dae:	9b08      	ldr	r3, [sp, #32]
 8007db0:	b1db      	cbz	r3, 8007dea <_strtod_l+0x932>
 8007db2:	423b      	tst	r3, r7
 8007db4:	d0ef      	beq.n	8007d96 <_strtod_l+0x8de>
 8007db6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007db8:	9a04      	ldr	r2, [sp, #16]
 8007dba:	4650      	mov	r0, sl
 8007dbc:	4659      	mov	r1, fp
 8007dbe:	b1c3      	cbz	r3, 8007df2 <_strtod_l+0x93a>
 8007dc0:	f7ff fb5c 	bl	800747c <sulp>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	460b      	mov	r3, r1
 8007dc8:	ec51 0b18 	vmov	r0, r1, d8
 8007dcc:	f7f8 fa86 	bl	80002dc <__adddf3>
 8007dd0:	4682      	mov	sl, r0
 8007dd2:	468b      	mov	fp, r1
 8007dd4:	e7df      	b.n	8007d96 <_strtod_l+0x8de>
 8007dd6:	4013      	ands	r3, r2
 8007dd8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007ddc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007de0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007de4:	f04f 3aff 	mov.w	sl, #4294967295
 8007de8:	e7d5      	b.n	8007d96 <_strtod_l+0x8de>
 8007dea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007dec:	ea13 0f0a 	tst.w	r3, sl
 8007df0:	e7e0      	b.n	8007db4 <_strtod_l+0x8fc>
 8007df2:	f7ff fb43 	bl	800747c <sulp>
 8007df6:	4602      	mov	r2, r0
 8007df8:	460b      	mov	r3, r1
 8007dfa:	ec51 0b18 	vmov	r0, r1, d8
 8007dfe:	f7f8 fa6b 	bl	80002d8 <__aeabi_dsub>
 8007e02:	2200      	movs	r2, #0
 8007e04:	2300      	movs	r3, #0
 8007e06:	4682      	mov	sl, r0
 8007e08:	468b      	mov	fp, r1
 8007e0a:	f7f8 fe85 	bl	8000b18 <__aeabi_dcmpeq>
 8007e0e:	2800      	cmp	r0, #0
 8007e10:	d0c1      	beq.n	8007d96 <_strtod_l+0x8de>
 8007e12:	e611      	b.n	8007a38 <_strtod_l+0x580>
 8007e14:	fffffc02 	.word	0xfffffc02
 8007e18:	7ff00000 	.word	0x7ff00000
 8007e1c:	39500000 	.word	0x39500000
 8007e20:	000fffff 	.word	0x000fffff
 8007e24:	7fefffff 	.word	0x7fefffff
 8007e28:	0800b0f8 	.word	0x0800b0f8
 8007e2c:	4631      	mov	r1, r6
 8007e2e:	4628      	mov	r0, r5
 8007e30:	f002 f92a 	bl	800a088 <__ratio>
 8007e34:	ec59 8b10 	vmov	r8, r9, d0
 8007e38:	ee10 0a10 	vmov	r0, s0
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007e42:	4649      	mov	r1, r9
 8007e44:	f7f8 fe7c 	bl	8000b40 <__aeabi_dcmple>
 8007e48:	2800      	cmp	r0, #0
 8007e4a:	d07a      	beq.n	8007f42 <_strtod_l+0xa8a>
 8007e4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d04a      	beq.n	8007ee8 <_strtod_l+0xa30>
 8007e52:	4b95      	ldr	r3, [pc, #596]	; (80080a8 <_strtod_l+0xbf0>)
 8007e54:	2200      	movs	r2, #0
 8007e56:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007e5a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80080a8 <_strtod_l+0xbf0>
 8007e5e:	f04f 0800 	mov.w	r8, #0
 8007e62:	4b92      	ldr	r3, [pc, #584]	; (80080ac <_strtod_l+0xbf4>)
 8007e64:	403b      	ands	r3, r7
 8007e66:	930d      	str	r3, [sp, #52]	; 0x34
 8007e68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007e6a:	4b91      	ldr	r3, [pc, #580]	; (80080b0 <_strtod_l+0xbf8>)
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	f040 80b0 	bne.w	8007fd2 <_strtod_l+0xb1a>
 8007e72:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007e76:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007e7a:	ec4b ab10 	vmov	d0, sl, fp
 8007e7e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007e82:	f002 f829 	bl	8009ed8 <__ulp>
 8007e86:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007e8a:	ec53 2b10 	vmov	r2, r3, d0
 8007e8e:	f7f8 fbdb 	bl	8000648 <__aeabi_dmul>
 8007e92:	4652      	mov	r2, sl
 8007e94:	465b      	mov	r3, fp
 8007e96:	f7f8 fa21 	bl	80002dc <__adddf3>
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	4983      	ldr	r1, [pc, #524]	; (80080ac <_strtod_l+0xbf4>)
 8007e9e:	4a85      	ldr	r2, [pc, #532]	; (80080b4 <_strtod_l+0xbfc>)
 8007ea0:	4019      	ands	r1, r3
 8007ea2:	4291      	cmp	r1, r2
 8007ea4:	4682      	mov	sl, r0
 8007ea6:	d960      	bls.n	8007f6a <_strtod_l+0xab2>
 8007ea8:	ee18 3a90 	vmov	r3, s17
 8007eac:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d104      	bne.n	8007ebe <_strtod_l+0xa06>
 8007eb4:	ee18 3a10 	vmov	r3, s16
 8007eb8:	3301      	adds	r3, #1
 8007eba:	f43f ad45 	beq.w	8007948 <_strtod_l+0x490>
 8007ebe:	f8df b200 	ldr.w	fp, [pc, #512]	; 80080c0 <_strtod_l+0xc08>
 8007ec2:	f04f 3aff 	mov.w	sl, #4294967295
 8007ec6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007ec8:	4620      	mov	r0, r4
 8007eca:	f001 fcd3 	bl	8009874 <_Bfree>
 8007ece:	9905      	ldr	r1, [sp, #20]
 8007ed0:	4620      	mov	r0, r4
 8007ed2:	f001 fccf 	bl	8009874 <_Bfree>
 8007ed6:	4631      	mov	r1, r6
 8007ed8:	4620      	mov	r0, r4
 8007eda:	f001 fccb 	bl	8009874 <_Bfree>
 8007ede:	4629      	mov	r1, r5
 8007ee0:	4620      	mov	r0, r4
 8007ee2:	f001 fcc7 	bl	8009874 <_Bfree>
 8007ee6:	e61a      	b.n	8007b1e <_strtod_l+0x666>
 8007ee8:	f1ba 0f00 	cmp.w	sl, #0
 8007eec:	d11b      	bne.n	8007f26 <_strtod_l+0xa6e>
 8007eee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ef2:	b9f3      	cbnz	r3, 8007f32 <_strtod_l+0xa7a>
 8007ef4:	4b6c      	ldr	r3, [pc, #432]	; (80080a8 <_strtod_l+0xbf0>)
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	4640      	mov	r0, r8
 8007efa:	4649      	mov	r1, r9
 8007efc:	f7f8 fe16 	bl	8000b2c <__aeabi_dcmplt>
 8007f00:	b9d0      	cbnz	r0, 8007f38 <_strtod_l+0xa80>
 8007f02:	4640      	mov	r0, r8
 8007f04:	4649      	mov	r1, r9
 8007f06:	4b6c      	ldr	r3, [pc, #432]	; (80080b8 <_strtod_l+0xc00>)
 8007f08:	2200      	movs	r2, #0
 8007f0a:	f7f8 fb9d 	bl	8000648 <__aeabi_dmul>
 8007f0e:	4680      	mov	r8, r0
 8007f10:	4689      	mov	r9, r1
 8007f12:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007f16:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007f1a:	9315      	str	r3, [sp, #84]	; 0x54
 8007f1c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007f20:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007f24:	e79d      	b.n	8007e62 <_strtod_l+0x9aa>
 8007f26:	f1ba 0f01 	cmp.w	sl, #1
 8007f2a:	d102      	bne.n	8007f32 <_strtod_l+0xa7a>
 8007f2c:	2f00      	cmp	r7, #0
 8007f2e:	f43f ad83 	beq.w	8007a38 <_strtod_l+0x580>
 8007f32:	4b62      	ldr	r3, [pc, #392]	; (80080bc <_strtod_l+0xc04>)
 8007f34:	2200      	movs	r2, #0
 8007f36:	e78e      	b.n	8007e56 <_strtod_l+0x99e>
 8007f38:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80080b8 <_strtod_l+0xc00>
 8007f3c:	f04f 0800 	mov.w	r8, #0
 8007f40:	e7e7      	b.n	8007f12 <_strtod_l+0xa5a>
 8007f42:	4b5d      	ldr	r3, [pc, #372]	; (80080b8 <_strtod_l+0xc00>)
 8007f44:	4640      	mov	r0, r8
 8007f46:	4649      	mov	r1, r9
 8007f48:	2200      	movs	r2, #0
 8007f4a:	f7f8 fb7d 	bl	8000648 <__aeabi_dmul>
 8007f4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f50:	4680      	mov	r8, r0
 8007f52:	4689      	mov	r9, r1
 8007f54:	b933      	cbnz	r3, 8007f64 <_strtod_l+0xaac>
 8007f56:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f5a:	900e      	str	r0, [sp, #56]	; 0x38
 8007f5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f5e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007f62:	e7dd      	b.n	8007f20 <_strtod_l+0xa68>
 8007f64:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007f68:	e7f9      	b.n	8007f5e <_strtod_l+0xaa6>
 8007f6a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007f6e:	9b04      	ldr	r3, [sp, #16]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d1a8      	bne.n	8007ec6 <_strtod_l+0xa0e>
 8007f74:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007f78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f7a:	0d1b      	lsrs	r3, r3, #20
 8007f7c:	051b      	lsls	r3, r3, #20
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d1a1      	bne.n	8007ec6 <_strtod_l+0xa0e>
 8007f82:	4640      	mov	r0, r8
 8007f84:	4649      	mov	r1, r9
 8007f86:	f7f8 febf 	bl	8000d08 <__aeabi_d2lz>
 8007f8a:	f7f8 fb2f 	bl	80005ec <__aeabi_l2d>
 8007f8e:	4602      	mov	r2, r0
 8007f90:	460b      	mov	r3, r1
 8007f92:	4640      	mov	r0, r8
 8007f94:	4649      	mov	r1, r9
 8007f96:	f7f8 f99f 	bl	80002d8 <__aeabi_dsub>
 8007f9a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007f9c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007fa0:	ea43 030a 	orr.w	r3, r3, sl
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	4680      	mov	r8, r0
 8007fa8:	4689      	mov	r9, r1
 8007faa:	d055      	beq.n	8008058 <_strtod_l+0xba0>
 8007fac:	a336      	add	r3, pc, #216	; (adr r3, 8008088 <_strtod_l+0xbd0>)
 8007fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb2:	f7f8 fdbb 	bl	8000b2c <__aeabi_dcmplt>
 8007fb6:	2800      	cmp	r0, #0
 8007fb8:	f47f acd0 	bne.w	800795c <_strtod_l+0x4a4>
 8007fbc:	a334      	add	r3, pc, #208	; (adr r3, 8008090 <_strtod_l+0xbd8>)
 8007fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc2:	4640      	mov	r0, r8
 8007fc4:	4649      	mov	r1, r9
 8007fc6:	f7f8 fdcf 	bl	8000b68 <__aeabi_dcmpgt>
 8007fca:	2800      	cmp	r0, #0
 8007fcc:	f43f af7b 	beq.w	8007ec6 <_strtod_l+0xa0e>
 8007fd0:	e4c4      	b.n	800795c <_strtod_l+0x4a4>
 8007fd2:	9b04      	ldr	r3, [sp, #16]
 8007fd4:	b333      	cbz	r3, 8008024 <_strtod_l+0xb6c>
 8007fd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fd8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007fdc:	d822      	bhi.n	8008024 <_strtod_l+0xb6c>
 8007fde:	a32e      	add	r3, pc, #184	; (adr r3, 8008098 <_strtod_l+0xbe0>)
 8007fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe4:	4640      	mov	r0, r8
 8007fe6:	4649      	mov	r1, r9
 8007fe8:	f7f8 fdaa 	bl	8000b40 <__aeabi_dcmple>
 8007fec:	b1a0      	cbz	r0, 8008018 <_strtod_l+0xb60>
 8007fee:	4649      	mov	r1, r9
 8007ff0:	4640      	mov	r0, r8
 8007ff2:	f7f8 fe01 	bl	8000bf8 <__aeabi_d2uiz>
 8007ff6:	2801      	cmp	r0, #1
 8007ff8:	bf38      	it	cc
 8007ffa:	2001      	movcc	r0, #1
 8007ffc:	f7f8 faaa 	bl	8000554 <__aeabi_ui2d>
 8008000:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008002:	4680      	mov	r8, r0
 8008004:	4689      	mov	r9, r1
 8008006:	bb23      	cbnz	r3, 8008052 <_strtod_l+0xb9a>
 8008008:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800800c:	9010      	str	r0, [sp, #64]	; 0x40
 800800e:	9311      	str	r3, [sp, #68]	; 0x44
 8008010:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008014:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800801a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800801c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008020:	1a9b      	subs	r3, r3, r2
 8008022:	9309      	str	r3, [sp, #36]	; 0x24
 8008024:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008028:	eeb0 0a48 	vmov.f32	s0, s16
 800802c:	eef0 0a68 	vmov.f32	s1, s17
 8008030:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008034:	f001 ff50 	bl	8009ed8 <__ulp>
 8008038:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800803c:	ec53 2b10 	vmov	r2, r3, d0
 8008040:	f7f8 fb02 	bl	8000648 <__aeabi_dmul>
 8008044:	ec53 2b18 	vmov	r2, r3, d8
 8008048:	f7f8 f948 	bl	80002dc <__adddf3>
 800804c:	4682      	mov	sl, r0
 800804e:	468b      	mov	fp, r1
 8008050:	e78d      	b.n	8007f6e <_strtod_l+0xab6>
 8008052:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8008056:	e7db      	b.n	8008010 <_strtod_l+0xb58>
 8008058:	a311      	add	r3, pc, #68	; (adr r3, 80080a0 <_strtod_l+0xbe8>)
 800805a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800805e:	f7f8 fd65 	bl	8000b2c <__aeabi_dcmplt>
 8008062:	e7b2      	b.n	8007fca <_strtod_l+0xb12>
 8008064:	2300      	movs	r3, #0
 8008066:	930a      	str	r3, [sp, #40]	; 0x28
 8008068:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800806a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800806c:	6013      	str	r3, [r2, #0]
 800806e:	f7ff ba6b 	b.w	8007548 <_strtod_l+0x90>
 8008072:	2a65      	cmp	r2, #101	; 0x65
 8008074:	f43f ab5f 	beq.w	8007736 <_strtod_l+0x27e>
 8008078:	2a45      	cmp	r2, #69	; 0x45
 800807a:	f43f ab5c 	beq.w	8007736 <_strtod_l+0x27e>
 800807e:	2301      	movs	r3, #1
 8008080:	f7ff bb94 	b.w	80077ac <_strtod_l+0x2f4>
 8008084:	f3af 8000 	nop.w
 8008088:	94a03595 	.word	0x94a03595
 800808c:	3fdfffff 	.word	0x3fdfffff
 8008090:	35afe535 	.word	0x35afe535
 8008094:	3fe00000 	.word	0x3fe00000
 8008098:	ffc00000 	.word	0xffc00000
 800809c:	41dfffff 	.word	0x41dfffff
 80080a0:	94a03595 	.word	0x94a03595
 80080a4:	3fcfffff 	.word	0x3fcfffff
 80080a8:	3ff00000 	.word	0x3ff00000
 80080ac:	7ff00000 	.word	0x7ff00000
 80080b0:	7fe00000 	.word	0x7fe00000
 80080b4:	7c9fffff 	.word	0x7c9fffff
 80080b8:	3fe00000 	.word	0x3fe00000
 80080bc:	bff00000 	.word	0xbff00000
 80080c0:	7fefffff 	.word	0x7fefffff

080080c4 <_strtod_r>:
 80080c4:	4b01      	ldr	r3, [pc, #4]	; (80080cc <_strtod_r+0x8>)
 80080c6:	f7ff b9f7 	b.w	80074b8 <_strtod_l>
 80080ca:	bf00      	nop
 80080cc:	20000074 	.word	0x20000074

080080d0 <_strtol_l.constprop.0>:
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080d6:	d001      	beq.n	80080dc <_strtol_l.constprop.0+0xc>
 80080d8:	2b24      	cmp	r3, #36	; 0x24
 80080da:	d906      	bls.n	80080ea <_strtol_l.constprop.0+0x1a>
 80080dc:	f7fe fae4 	bl	80066a8 <__errno>
 80080e0:	2316      	movs	r3, #22
 80080e2:	6003      	str	r3, [r0, #0]
 80080e4:	2000      	movs	r0, #0
 80080e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080ea:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80081d0 <_strtol_l.constprop.0+0x100>
 80080ee:	460d      	mov	r5, r1
 80080f0:	462e      	mov	r6, r5
 80080f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80080f6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80080fa:	f017 0708 	ands.w	r7, r7, #8
 80080fe:	d1f7      	bne.n	80080f0 <_strtol_l.constprop.0+0x20>
 8008100:	2c2d      	cmp	r4, #45	; 0x2d
 8008102:	d132      	bne.n	800816a <_strtol_l.constprop.0+0x9a>
 8008104:	782c      	ldrb	r4, [r5, #0]
 8008106:	2701      	movs	r7, #1
 8008108:	1cb5      	adds	r5, r6, #2
 800810a:	2b00      	cmp	r3, #0
 800810c:	d05b      	beq.n	80081c6 <_strtol_l.constprop.0+0xf6>
 800810e:	2b10      	cmp	r3, #16
 8008110:	d109      	bne.n	8008126 <_strtol_l.constprop.0+0x56>
 8008112:	2c30      	cmp	r4, #48	; 0x30
 8008114:	d107      	bne.n	8008126 <_strtol_l.constprop.0+0x56>
 8008116:	782c      	ldrb	r4, [r5, #0]
 8008118:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800811c:	2c58      	cmp	r4, #88	; 0x58
 800811e:	d14d      	bne.n	80081bc <_strtol_l.constprop.0+0xec>
 8008120:	786c      	ldrb	r4, [r5, #1]
 8008122:	2310      	movs	r3, #16
 8008124:	3502      	adds	r5, #2
 8008126:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800812a:	f108 38ff 	add.w	r8, r8, #4294967295
 800812e:	f04f 0c00 	mov.w	ip, #0
 8008132:	fbb8 f9f3 	udiv	r9, r8, r3
 8008136:	4666      	mov	r6, ip
 8008138:	fb03 8a19 	mls	sl, r3, r9, r8
 800813c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008140:	f1be 0f09 	cmp.w	lr, #9
 8008144:	d816      	bhi.n	8008174 <_strtol_l.constprop.0+0xa4>
 8008146:	4674      	mov	r4, lr
 8008148:	42a3      	cmp	r3, r4
 800814a:	dd24      	ble.n	8008196 <_strtol_l.constprop.0+0xc6>
 800814c:	f1bc 0f00 	cmp.w	ip, #0
 8008150:	db1e      	blt.n	8008190 <_strtol_l.constprop.0+0xc0>
 8008152:	45b1      	cmp	r9, r6
 8008154:	d31c      	bcc.n	8008190 <_strtol_l.constprop.0+0xc0>
 8008156:	d101      	bne.n	800815c <_strtol_l.constprop.0+0x8c>
 8008158:	45a2      	cmp	sl, r4
 800815a:	db19      	blt.n	8008190 <_strtol_l.constprop.0+0xc0>
 800815c:	fb06 4603 	mla	r6, r6, r3, r4
 8008160:	f04f 0c01 	mov.w	ip, #1
 8008164:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008168:	e7e8      	b.n	800813c <_strtol_l.constprop.0+0x6c>
 800816a:	2c2b      	cmp	r4, #43	; 0x2b
 800816c:	bf04      	itt	eq
 800816e:	782c      	ldrbeq	r4, [r5, #0]
 8008170:	1cb5      	addeq	r5, r6, #2
 8008172:	e7ca      	b.n	800810a <_strtol_l.constprop.0+0x3a>
 8008174:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008178:	f1be 0f19 	cmp.w	lr, #25
 800817c:	d801      	bhi.n	8008182 <_strtol_l.constprop.0+0xb2>
 800817e:	3c37      	subs	r4, #55	; 0x37
 8008180:	e7e2      	b.n	8008148 <_strtol_l.constprop.0+0x78>
 8008182:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008186:	f1be 0f19 	cmp.w	lr, #25
 800818a:	d804      	bhi.n	8008196 <_strtol_l.constprop.0+0xc6>
 800818c:	3c57      	subs	r4, #87	; 0x57
 800818e:	e7db      	b.n	8008148 <_strtol_l.constprop.0+0x78>
 8008190:	f04f 3cff 	mov.w	ip, #4294967295
 8008194:	e7e6      	b.n	8008164 <_strtol_l.constprop.0+0x94>
 8008196:	f1bc 0f00 	cmp.w	ip, #0
 800819a:	da05      	bge.n	80081a8 <_strtol_l.constprop.0+0xd8>
 800819c:	2322      	movs	r3, #34	; 0x22
 800819e:	6003      	str	r3, [r0, #0]
 80081a0:	4646      	mov	r6, r8
 80081a2:	b942      	cbnz	r2, 80081b6 <_strtol_l.constprop.0+0xe6>
 80081a4:	4630      	mov	r0, r6
 80081a6:	e79e      	b.n	80080e6 <_strtol_l.constprop.0+0x16>
 80081a8:	b107      	cbz	r7, 80081ac <_strtol_l.constprop.0+0xdc>
 80081aa:	4276      	negs	r6, r6
 80081ac:	2a00      	cmp	r2, #0
 80081ae:	d0f9      	beq.n	80081a4 <_strtol_l.constprop.0+0xd4>
 80081b0:	f1bc 0f00 	cmp.w	ip, #0
 80081b4:	d000      	beq.n	80081b8 <_strtol_l.constprop.0+0xe8>
 80081b6:	1e69      	subs	r1, r5, #1
 80081b8:	6011      	str	r1, [r2, #0]
 80081ba:	e7f3      	b.n	80081a4 <_strtol_l.constprop.0+0xd4>
 80081bc:	2430      	movs	r4, #48	; 0x30
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d1b1      	bne.n	8008126 <_strtol_l.constprop.0+0x56>
 80081c2:	2308      	movs	r3, #8
 80081c4:	e7af      	b.n	8008126 <_strtol_l.constprop.0+0x56>
 80081c6:	2c30      	cmp	r4, #48	; 0x30
 80081c8:	d0a5      	beq.n	8008116 <_strtol_l.constprop.0+0x46>
 80081ca:	230a      	movs	r3, #10
 80081cc:	e7ab      	b.n	8008126 <_strtol_l.constprop.0+0x56>
 80081ce:	bf00      	nop
 80081d0:	0800b121 	.word	0x0800b121

080081d4 <_strtol_r>:
 80081d4:	f7ff bf7c 	b.w	80080d0 <_strtol_l.constprop.0>

080081d8 <quorem>:
 80081d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081dc:	6903      	ldr	r3, [r0, #16]
 80081de:	690c      	ldr	r4, [r1, #16]
 80081e0:	42a3      	cmp	r3, r4
 80081e2:	4607      	mov	r7, r0
 80081e4:	f2c0 8081 	blt.w	80082ea <quorem+0x112>
 80081e8:	3c01      	subs	r4, #1
 80081ea:	f101 0814 	add.w	r8, r1, #20
 80081ee:	f100 0514 	add.w	r5, r0, #20
 80081f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081f6:	9301      	str	r3, [sp, #4]
 80081f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80081fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008200:	3301      	adds	r3, #1
 8008202:	429a      	cmp	r2, r3
 8008204:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008208:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800820c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008210:	d331      	bcc.n	8008276 <quorem+0x9e>
 8008212:	f04f 0e00 	mov.w	lr, #0
 8008216:	4640      	mov	r0, r8
 8008218:	46ac      	mov	ip, r5
 800821a:	46f2      	mov	sl, lr
 800821c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008220:	b293      	uxth	r3, r2
 8008222:	fb06 e303 	mla	r3, r6, r3, lr
 8008226:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800822a:	b29b      	uxth	r3, r3
 800822c:	ebaa 0303 	sub.w	r3, sl, r3
 8008230:	f8dc a000 	ldr.w	sl, [ip]
 8008234:	0c12      	lsrs	r2, r2, #16
 8008236:	fa13 f38a 	uxtah	r3, r3, sl
 800823a:	fb06 e202 	mla	r2, r6, r2, lr
 800823e:	9300      	str	r3, [sp, #0]
 8008240:	9b00      	ldr	r3, [sp, #0]
 8008242:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008246:	b292      	uxth	r2, r2
 8008248:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800824c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008250:	f8bd 3000 	ldrh.w	r3, [sp]
 8008254:	4581      	cmp	r9, r0
 8008256:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800825a:	f84c 3b04 	str.w	r3, [ip], #4
 800825e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008262:	d2db      	bcs.n	800821c <quorem+0x44>
 8008264:	f855 300b 	ldr.w	r3, [r5, fp]
 8008268:	b92b      	cbnz	r3, 8008276 <quorem+0x9e>
 800826a:	9b01      	ldr	r3, [sp, #4]
 800826c:	3b04      	subs	r3, #4
 800826e:	429d      	cmp	r5, r3
 8008270:	461a      	mov	r2, r3
 8008272:	d32e      	bcc.n	80082d2 <quorem+0xfa>
 8008274:	613c      	str	r4, [r7, #16]
 8008276:	4638      	mov	r0, r7
 8008278:	f001 fd88 	bl	8009d8c <__mcmp>
 800827c:	2800      	cmp	r0, #0
 800827e:	db24      	blt.n	80082ca <quorem+0xf2>
 8008280:	3601      	adds	r6, #1
 8008282:	4628      	mov	r0, r5
 8008284:	f04f 0c00 	mov.w	ip, #0
 8008288:	f858 2b04 	ldr.w	r2, [r8], #4
 800828c:	f8d0 e000 	ldr.w	lr, [r0]
 8008290:	b293      	uxth	r3, r2
 8008292:	ebac 0303 	sub.w	r3, ip, r3
 8008296:	0c12      	lsrs	r2, r2, #16
 8008298:	fa13 f38e 	uxtah	r3, r3, lr
 800829c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80082a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082aa:	45c1      	cmp	r9, r8
 80082ac:	f840 3b04 	str.w	r3, [r0], #4
 80082b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80082b4:	d2e8      	bcs.n	8008288 <quorem+0xb0>
 80082b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80082ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80082be:	b922      	cbnz	r2, 80082ca <quorem+0xf2>
 80082c0:	3b04      	subs	r3, #4
 80082c2:	429d      	cmp	r5, r3
 80082c4:	461a      	mov	r2, r3
 80082c6:	d30a      	bcc.n	80082de <quorem+0x106>
 80082c8:	613c      	str	r4, [r7, #16]
 80082ca:	4630      	mov	r0, r6
 80082cc:	b003      	add	sp, #12
 80082ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082d2:	6812      	ldr	r2, [r2, #0]
 80082d4:	3b04      	subs	r3, #4
 80082d6:	2a00      	cmp	r2, #0
 80082d8:	d1cc      	bne.n	8008274 <quorem+0x9c>
 80082da:	3c01      	subs	r4, #1
 80082dc:	e7c7      	b.n	800826e <quorem+0x96>
 80082de:	6812      	ldr	r2, [r2, #0]
 80082e0:	3b04      	subs	r3, #4
 80082e2:	2a00      	cmp	r2, #0
 80082e4:	d1f0      	bne.n	80082c8 <quorem+0xf0>
 80082e6:	3c01      	subs	r4, #1
 80082e8:	e7eb      	b.n	80082c2 <quorem+0xea>
 80082ea:	2000      	movs	r0, #0
 80082ec:	e7ee      	b.n	80082cc <quorem+0xf4>
	...

080082f0 <_dtoa_r>:
 80082f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082f4:	ed2d 8b04 	vpush	{d8-d9}
 80082f8:	ec57 6b10 	vmov	r6, r7, d0
 80082fc:	b093      	sub	sp, #76	; 0x4c
 80082fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008300:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008304:	9106      	str	r1, [sp, #24]
 8008306:	ee10 aa10 	vmov	sl, s0
 800830a:	4604      	mov	r4, r0
 800830c:	9209      	str	r2, [sp, #36]	; 0x24
 800830e:	930c      	str	r3, [sp, #48]	; 0x30
 8008310:	46bb      	mov	fp, r7
 8008312:	b975      	cbnz	r5, 8008332 <_dtoa_r+0x42>
 8008314:	2010      	movs	r0, #16
 8008316:	f001 fa45 	bl	80097a4 <malloc>
 800831a:	4602      	mov	r2, r0
 800831c:	6260      	str	r0, [r4, #36]	; 0x24
 800831e:	b920      	cbnz	r0, 800832a <_dtoa_r+0x3a>
 8008320:	4ba7      	ldr	r3, [pc, #668]	; (80085c0 <_dtoa_r+0x2d0>)
 8008322:	21ea      	movs	r1, #234	; 0xea
 8008324:	48a7      	ldr	r0, [pc, #668]	; (80085c4 <_dtoa_r+0x2d4>)
 8008326:	f002 fc23 	bl	800ab70 <__assert_func>
 800832a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800832e:	6005      	str	r5, [r0, #0]
 8008330:	60c5      	str	r5, [r0, #12]
 8008332:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008334:	6819      	ldr	r1, [r3, #0]
 8008336:	b151      	cbz	r1, 800834e <_dtoa_r+0x5e>
 8008338:	685a      	ldr	r2, [r3, #4]
 800833a:	604a      	str	r2, [r1, #4]
 800833c:	2301      	movs	r3, #1
 800833e:	4093      	lsls	r3, r2
 8008340:	608b      	str	r3, [r1, #8]
 8008342:	4620      	mov	r0, r4
 8008344:	f001 fa96 	bl	8009874 <_Bfree>
 8008348:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800834a:	2200      	movs	r2, #0
 800834c:	601a      	str	r2, [r3, #0]
 800834e:	1e3b      	subs	r3, r7, #0
 8008350:	bfaa      	itet	ge
 8008352:	2300      	movge	r3, #0
 8008354:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008358:	f8c8 3000 	strge.w	r3, [r8]
 800835c:	4b9a      	ldr	r3, [pc, #616]	; (80085c8 <_dtoa_r+0x2d8>)
 800835e:	bfbc      	itt	lt
 8008360:	2201      	movlt	r2, #1
 8008362:	f8c8 2000 	strlt.w	r2, [r8]
 8008366:	ea33 030b 	bics.w	r3, r3, fp
 800836a:	d11b      	bne.n	80083a4 <_dtoa_r+0xb4>
 800836c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800836e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008372:	6013      	str	r3, [r2, #0]
 8008374:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008378:	4333      	orrs	r3, r6
 800837a:	f000 8592 	beq.w	8008ea2 <_dtoa_r+0xbb2>
 800837e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008380:	b963      	cbnz	r3, 800839c <_dtoa_r+0xac>
 8008382:	4b92      	ldr	r3, [pc, #584]	; (80085cc <_dtoa_r+0x2dc>)
 8008384:	e022      	b.n	80083cc <_dtoa_r+0xdc>
 8008386:	4b92      	ldr	r3, [pc, #584]	; (80085d0 <_dtoa_r+0x2e0>)
 8008388:	9301      	str	r3, [sp, #4]
 800838a:	3308      	adds	r3, #8
 800838c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800838e:	6013      	str	r3, [r2, #0]
 8008390:	9801      	ldr	r0, [sp, #4]
 8008392:	b013      	add	sp, #76	; 0x4c
 8008394:	ecbd 8b04 	vpop	{d8-d9}
 8008398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800839c:	4b8b      	ldr	r3, [pc, #556]	; (80085cc <_dtoa_r+0x2dc>)
 800839e:	9301      	str	r3, [sp, #4]
 80083a0:	3303      	adds	r3, #3
 80083a2:	e7f3      	b.n	800838c <_dtoa_r+0x9c>
 80083a4:	2200      	movs	r2, #0
 80083a6:	2300      	movs	r3, #0
 80083a8:	4650      	mov	r0, sl
 80083aa:	4659      	mov	r1, fp
 80083ac:	f7f8 fbb4 	bl	8000b18 <__aeabi_dcmpeq>
 80083b0:	ec4b ab19 	vmov	d9, sl, fp
 80083b4:	4680      	mov	r8, r0
 80083b6:	b158      	cbz	r0, 80083d0 <_dtoa_r+0xe0>
 80083b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80083ba:	2301      	movs	r3, #1
 80083bc:	6013      	str	r3, [r2, #0]
 80083be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	f000 856b 	beq.w	8008e9c <_dtoa_r+0xbac>
 80083c6:	4883      	ldr	r0, [pc, #524]	; (80085d4 <_dtoa_r+0x2e4>)
 80083c8:	6018      	str	r0, [r3, #0]
 80083ca:	1e43      	subs	r3, r0, #1
 80083cc:	9301      	str	r3, [sp, #4]
 80083ce:	e7df      	b.n	8008390 <_dtoa_r+0xa0>
 80083d0:	ec4b ab10 	vmov	d0, sl, fp
 80083d4:	aa10      	add	r2, sp, #64	; 0x40
 80083d6:	a911      	add	r1, sp, #68	; 0x44
 80083d8:	4620      	mov	r0, r4
 80083da:	f001 fdf9 	bl	8009fd0 <__d2b>
 80083de:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80083e2:	ee08 0a10 	vmov	s16, r0
 80083e6:	2d00      	cmp	r5, #0
 80083e8:	f000 8084 	beq.w	80084f4 <_dtoa_r+0x204>
 80083ec:	ee19 3a90 	vmov	r3, s19
 80083f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083f4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80083f8:	4656      	mov	r6, sl
 80083fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80083fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008402:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008406:	4b74      	ldr	r3, [pc, #464]	; (80085d8 <_dtoa_r+0x2e8>)
 8008408:	2200      	movs	r2, #0
 800840a:	4630      	mov	r0, r6
 800840c:	4639      	mov	r1, r7
 800840e:	f7f7 ff63 	bl	80002d8 <__aeabi_dsub>
 8008412:	a365      	add	r3, pc, #404	; (adr r3, 80085a8 <_dtoa_r+0x2b8>)
 8008414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008418:	f7f8 f916 	bl	8000648 <__aeabi_dmul>
 800841c:	a364      	add	r3, pc, #400	; (adr r3, 80085b0 <_dtoa_r+0x2c0>)
 800841e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008422:	f7f7 ff5b 	bl	80002dc <__adddf3>
 8008426:	4606      	mov	r6, r0
 8008428:	4628      	mov	r0, r5
 800842a:	460f      	mov	r7, r1
 800842c:	f7f8 f8a2 	bl	8000574 <__aeabi_i2d>
 8008430:	a361      	add	r3, pc, #388	; (adr r3, 80085b8 <_dtoa_r+0x2c8>)
 8008432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008436:	f7f8 f907 	bl	8000648 <__aeabi_dmul>
 800843a:	4602      	mov	r2, r0
 800843c:	460b      	mov	r3, r1
 800843e:	4630      	mov	r0, r6
 8008440:	4639      	mov	r1, r7
 8008442:	f7f7 ff4b 	bl	80002dc <__adddf3>
 8008446:	4606      	mov	r6, r0
 8008448:	460f      	mov	r7, r1
 800844a:	f7f8 fbad 	bl	8000ba8 <__aeabi_d2iz>
 800844e:	2200      	movs	r2, #0
 8008450:	9000      	str	r0, [sp, #0]
 8008452:	2300      	movs	r3, #0
 8008454:	4630      	mov	r0, r6
 8008456:	4639      	mov	r1, r7
 8008458:	f7f8 fb68 	bl	8000b2c <__aeabi_dcmplt>
 800845c:	b150      	cbz	r0, 8008474 <_dtoa_r+0x184>
 800845e:	9800      	ldr	r0, [sp, #0]
 8008460:	f7f8 f888 	bl	8000574 <__aeabi_i2d>
 8008464:	4632      	mov	r2, r6
 8008466:	463b      	mov	r3, r7
 8008468:	f7f8 fb56 	bl	8000b18 <__aeabi_dcmpeq>
 800846c:	b910      	cbnz	r0, 8008474 <_dtoa_r+0x184>
 800846e:	9b00      	ldr	r3, [sp, #0]
 8008470:	3b01      	subs	r3, #1
 8008472:	9300      	str	r3, [sp, #0]
 8008474:	9b00      	ldr	r3, [sp, #0]
 8008476:	2b16      	cmp	r3, #22
 8008478:	d85a      	bhi.n	8008530 <_dtoa_r+0x240>
 800847a:	9a00      	ldr	r2, [sp, #0]
 800847c:	4b57      	ldr	r3, [pc, #348]	; (80085dc <_dtoa_r+0x2ec>)
 800847e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008486:	ec51 0b19 	vmov	r0, r1, d9
 800848a:	f7f8 fb4f 	bl	8000b2c <__aeabi_dcmplt>
 800848e:	2800      	cmp	r0, #0
 8008490:	d050      	beq.n	8008534 <_dtoa_r+0x244>
 8008492:	9b00      	ldr	r3, [sp, #0]
 8008494:	3b01      	subs	r3, #1
 8008496:	9300      	str	r3, [sp, #0]
 8008498:	2300      	movs	r3, #0
 800849a:	930b      	str	r3, [sp, #44]	; 0x2c
 800849c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800849e:	1b5d      	subs	r5, r3, r5
 80084a0:	1e6b      	subs	r3, r5, #1
 80084a2:	9305      	str	r3, [sp, #20]
 80084a4:	bf45      	ittet	mi
 80084a6:	f1c5 0301 	rsbmi	r3, r5, #1
 80084aa:	9304      	strmi	r3, [sp, #16]
 80084ac:	2300      	movpl	r3, #0
 80084ae:	2300      	movmi	r3, #0
 80084b0:	bf4c      	ite	mi
 80084b2:	9305      	strmi	r3, [sp, #20]
 80084b4:	9304      	strpl	r3, [sp, #16]
 80084b6:	9b00      	ldr	r3, [sp, #0]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	db3d      	blt.n	8008538 <_dtoa_r+0x248>
 80084bc:	9b05      	ldr	r3, [sp, #20]
 80084be:	9a00      	ldr	r2, [sp, #0]
 80084c0:	920a      	str	r2, [sp, #40]	; 0x28
 80084c2:	4413      	add	r3, r2
 80084c4:	9305      	str	r3, [sp, #20]
 80084c6:	2300      	movs	r3, #0
 80084c8:	9307      	str	r3, [sp, #28]
 80084ca:	9b06      	ldr	r3, [sp, #24]
 80084cc:	2b09      	cmp	r3, #9
 80084ce:	f200 8089 	bhi.w	80085e4 <_dtoa_r+0x2f4>
 80084d2:	2b05      	cmp	r3, #5
 80084d4:	bfc4      	itt	gt
 80084d6:	3b04      	subgt	r3, #4
 80084d8:	9306      	strgt	r3, [sp, #24]
 80084da:	9b06      	ldr	r3, [sp, #24]
 80084dc:	f1a3 0302 	sub.w	r3, r3, #2
 80084e0:	bfcc      	ite	gt
 80084e2:	2500      	movgt	r5, #0
 80084e4:	2501      	movle	r5, #1
 80084e6:	2b03      	cmp	r3, #3
 80084e8:	f200 8087 	bhi.w	80085fa <_dtoa_r+0x30a>
 80084ec:	e8df f003 	tbb	[pc, r3]
 80084f0:	59383a2d 	.word	0x59383a2d
 80084f4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80084f8:	441d      	add	r5, r3
 80084fa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80084fe:	2b20      	cmp	r3, #32
 8008500:	bfc1      	itttt	gt
 8008502:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008506:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800850a:	fa0b f303 	lslgt.w	r3, fp, r3
 800850e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008512:	bfda      	itte	le
 8008514:	f1c3 0320 	rsble	r3, r3, #32
 8008518:	fa06 f003 	lslle.w	r0, r6, r3
 800851c:	4318      	orrgt	r0, r3
 800851e:	f7f8 f819 	bl	8000554 <__aeabi_ui2d>
 8008522:	2301      	movs	r3, #1
 8008524:	4606      	mov	r6, r0
 8008526:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800852a:	3d01      	subs	r5, #1
 800852c:	930e      	str	r3, [sp, #56]	; 0x38
 800852e:	e76a      	b.n	8008406 <_dtoa_r+0x116>
 8008530:	2301      	movs	r3, #1
 8008532:	e7b2      	b.n	800849a <_dtoa_r+0x1aa>
 8008534:	900b      	str	r0, [sp, #44]	; 0x2c
 8008536:	e7b1      	b.n	800849c <_dtoa_r+0x1ac>
 8008538:	9b04      	ldr	r3, [sp, #16]
 800853a:	9a00      	ldr	r2, [sp, #0]
 800853c:	1a9b      	subs	r3, r3, r2
 800853e:	9304      	str	r3, [sp, #16]
 8008540:	4253      	negs	r3, r2
 8008542:	9307      	str	r3, [sp, #28]
 8008544:	2300      	movs	r3, #0
 8008546:	930a      	str	r3, [sp, #40]	; 0x28
 8008548:	e7bf      	b.n	80084ca <_dtoa_r+0x1da>
 800854a:	2300      	movs	r3, #0
 800854c:	9308      	str	r3, [sp, #32]
 800854e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008550:	2b00      	cmp	r3, #0
 8008552:	dc55      	bgt.n	8008600 <_dtoa_r+0x310>
 8008554:	2301      	movs	r3, #1
 8008556:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800855a:	461a      	mov	r2, r3
 800855c:	9209      	str	r2, [sp, #36]	; 0x24
 800855e:	e00c      	b.n	800857a <_dtoa_r+0x28a>
 8008560:	2301      	movs	r3, #1
 8008562:	e7f3      	b.n	800854c <_dtoa_r+0x25c>
 8008564:	2300      	movs	r3, #0
 8008566:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008568:	9308      	str	r3, [sp, #32]
 800856a:	9b00      	ldr	r3, [sp, #0]
 800856c:	4413      	add	r3, r2
 800856e:	9302      	str	r3, [sp, #8]
 8008570:	3301      	adds	r3, #1
 8008572:	2b01      	cmp	r3, #1
 8008574:	9303      	str	r3, [sp, #12]
 8008576:	bfb8      	it	lt
 8008578:	2301      	movlt	r3, #1
 800857a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800857c:	2200      	movs	r2, #0
 800857e:	6042      	str	r2, [r0, #4]
 8008580:	2204      	movs	r2, #4
 8008582:	f102 0614 	add.w	r6, r2, #20
 8008586:	429e      	cmp	r6, r3
 8008588:	6841      	ldr	r1, [r0, #4]
 800858a:	d93d      	bls.n	8008608 <_dtoa_r+0x318>
 800858c:	4620      	mov	r0, r4
 800858e:	f001 f931 	bl	80097f4 <_Balloc>
 8008592:	9001      	str	r0, [sp, #4]
 8008594:	2800      	cmp	r0, #0
 8008596:	d13b      	bne.n	8008610 <_dtoa_r+0x320>
 8008598:	4b11      	ldr	r3, [pc, #68]	; (80085e0 <_dtoa_r+0x2f0>)
 800859a:	4602      	mov	r2, r0
 800859c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80085a0:	e6c0      	b.n	8008324 <_dtoa_r+0x34>
 80085a2:	2301      	movs	r3, #1
 80085a4:	e7df      	b.n	8008566 <_dtoa_r+0x276>
 80085a6:	bf00      	nop
 80085a8:	636f4361 	.word	0x636f4361
 80085ac:	3fd287a7 	.word	0x3fd287a7
 80085b0:	8b60c8b3 	.word	0x8b60c8b3
 80085b4:	3fc68a28 	.word	0x3fc68a28
 80085b8:	509f79fb 	.word	0x509f79fb
 80085bc:	3fd34413 	.word	0x3fd34413
 80085c0:	0800b22e 	.word	0x0800b22e
 80085c4:	0800b245 	.word	0x0800b245
 80085c8:	7ff00000 	.word	0x7ff00000
 80085cc:	0800b22a 	.word	0x0800b22a
 80085d0:	0800b221 	.word	0x0800b221
 80085d4:	0800b0a5 	.word	0x0800b0a5
 80085d8:	3ff80000 	.word	0x3ff80000
 80085dc:	0800b418 	.word	0x0800b418
 80085e0:	0800b2a0 	.word	0x0800b2a0
 80085e4:	2501      	movs	r5, #1
 80085e6:	2300      	movs	r3, #0
 80085e8:	9306      	str	r3, [sp, #24]
 80085ea:	9508      	str	r5, [sp, #32]
 80085ec:	f04f 33ff 	mov.w	r3, #4294967295
 80085f0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80085f4:	2200      	movs	r2, #0
 80085f6:	2312      	movs	r3, #18
 80085f8:	e7b0      	b.n	800855c <_dtoa_r+0x26c>
 80085fa:	2301      	movs	r3, #1
 80085fc:	9308      	str	r3, [sp, #32]
 80085fe:	e7f5      	b.n	80085ec <_dtoa_r+0x2fc>
 8008600:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008602:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008606:	e7b8      	b.n	800857a <_dtoa_r+0x28a>
 8008608:	3101      	adds	r1, #1
 800860a:	6041      	str	r1, [r0, #4]
 800860c:	0052      	lsls	r2, r2, #1
 800860e:	e7b8      	b.n	8008582 <_dtoa_r+0x292>
 8008610:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008612:	9a01      	ldr	r2, [sp, #4]
 8008614:	601a      	str	r2, [r3, #0]
 8008616:	9b03      	ldr	r3, [sp, #12]
 8008618:	2b0e      	cmp	r3, #14
 800861a:	f200 809d 	bhi.w	8008758 <_dtoa_r+0x468>
 800861e:	2d00      	cmp	r5, #0
 8008620:	f000 809a 	beq.w	8008758 <_dtoa_r+0x468>
 8008624:	9b00      	ldr	r3, [sp, #0]
 8008626:	2b00      	cmp	r3, #0
 8008628:	dd32      	ble.n	8008690 <_dtoa_r+0x3a0>
 800862a:	4ab7      	ldr	r2, [pc, #732]	; (8008908 <_dtoa_r+0x618>)
 800862c:	f003 030f 	and.w	r3, r3, #15
 8008630:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008634:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008638:	9b00      	ldr	r3, [sp, #0]
 800863a:	05d8      	lsls	r0, r3, #23
 800863c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008640:	d516      	bpl.n	8008670 <_dtoa_r+0x380>
 8008642:	4bb2      	ldr	r3, [pc, #712]	; (800890c <_dtoa_r+0x61c>)
 8008644:	ec51 0b19 	vmov	r0, r1, d9
 8008648:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800864c:	f7f8 f926 	bl	800089c <__aeabi_ddiv>
 8008650:	f007 070f 	and.w	r7, r7, #15
 8008654:	4682      	mov	sl, r0
 8008656:	468b      	mov	fp, r1
 8008658:	2503      	movs	r5, #3
 800865a:	4eac      	ldr	r6, [pc, #688]	; (800890c <_dtoa_r+0x61c>)
 800865c:	b957      	cbnz	r7, 8008674 <_dtoa_r+0x384>
 800865e:	4642      	mov	r2, r8
 8008660:	464b      	mov	r3, r9
 8008662:	4650      	mov	r0, sl
 8008664:	4659      	mov	r1, fp
 8008666:	f7f8 f919 	bl	800089c <__aeabi_ddiv>
 800866a:	4682      	mov	sl, r0
 800866c:	468b      	mov	fp, r1
 800866e:	e028      	b.n	80086c2 <_dtoa_r+0x3d2>
 8008670:	2502      	movs	r5, #2
 8008672:	e7f2      	b.n	800865a <_dtoa_r+0x36a>
 8008674:	07f9      	lsls	r1, r7, #31
 8008676:	d508      	bpl.n	800868a <_dtoa_r+0x39a>
 8008678:	4640      	mov	r0, r8
 800867a:	4649      	mov	r1, r9
 800867c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008680:	f7f7 ffe2 	bl	8000648 <__aeabi_dmul>
 8008684:	3501      	adds	r5, #1
 8008686:	4680      	mov	r8, r0
 8008688:	4689      	mov	r9, r1
 800868a:	107f      	asrs	r7, r7, #1
 800868c:	3608      	adds	r6, #8
 800868e:	e7e5      	b.n	800865c <_dtoa_r+0x36c>
 8008690:	f000 809b 	beq.w	80087ca <_dtoa_r+0x4da>
 8008694:	9b00      	ldr	r3, [sp, #0]
 8008696:	4f9d      	ldr	r7, [pc, #628]	; (800890c <_dtoa_r+0x61c>)
 8008698:	425e      	negs	r6, r3
 800869a:	4b9b      	ldr	r3, [pc, #620]	; (8008908 <_dtoa_r+0x618>)
 800869c:	f006 020f 	and.w	r2, r6, #15
 80086a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a8:	ec51 0b19 	vmov	r0, r1, d9
 80086ac:	f7f7 ffcc 	bl	8000648 <__aeabi_dmul>
 80086b0:	1136      	asrs	r6, r6, #4
 80086b2:	4682      	mov	sl, r0
 80086b4:	468b      	mov	fp, r1
 80086b6:	2300      	movs	r3, #0
 80086b8:	2502      	movs	r5, #2
 80086ba:	2e00      	cmp	r6, #0
 80086bc:	d17a      	bne.n	80087b4 <_dtoa_r+0x4c4>
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d1d3      	bne.n	800866a <_dtoa_r+0x37a>
 80086c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	f000 8082 	beq.w	80087ce <_dtoa_r+0x4de>
 80086ca:	4b91      	ldr	r3, [pc, #580]	; (8008910 <_dtoa_r+0x620>)
 80086cc:	2200      	movs	r2, #0
 80086ce:	4650      	mov	r0, sl
 80086d0:	4659      	mov	r1, fp
 80086d2:	f7f8 fa2b 	bl	8000b2c <__aeabi_dcmplt>
 80086d6:	2800      	cmp	r0, #0
 80086d8:	d079      	beq.n	80087ce <_dtoa_r+0x4de>
 80086da:	9b03      	ldr	r3, [sp, #12]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d076      	beq.n	80087ce <_dtoa_r+0x4de>
 80086e0:	9b02      	ldr	r3, [sp, #8]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	dd36      	ble.n	8008754 <_dtoa_r+0x464>
 80086e6:	9b00      	ldr	r3, [sp, #0]
 80086e8:	4650      	mov	r0, sl
 80086ea:	4659      	mov	r1, fp
 80086ec:	1e5f      	subs	r7, r3, #1
 80086ee:	2200      	movs	r2, #0
 80086f0:	4b88      	ldr	r3, [pc, #544]	; (8008914 <_dtoa_r+0x624>)
 80086f2:	f7f7 ffa9 	bl	8000648 <__aeabi_dmul>
 80086f6:	9e02      	ldr	r6, [sp, #8]
 80086f8:	4682      	mov	sl, r0
 80086fa:	468b      	mov	fp, r1
 80086fc:	3501      	adds	r5, #1
 80086fe:	4628      	mov	r0, r5
 8008700:	f7f7 ff38 	bl	8000574 <__aeabi_i2d>
 8008704:	4652      	mov	r2, sl
 8008706:	465b      	mov	r3, fp
 8008708:	f7f7 ff9e 	bl	8000648 <__aeabi_dmul>
 800870c:	4b82      	ldr	r3, [pc, #520]	; (8008918 <_dtoa_r+0x628>)
 800870e:	2200      	movs	r2, #0
 8008710:	f7f7 fde4 	bl	80002dc <__adddf3>
 8008714:	46d0      	mov	r8, sl
 8008716:	46d9      	mov	r9, fp
 8008718:	4682      	mov	sl, r0
 800871a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800871e:	2e00      	cmp	r6, #0
 8008720:	d158      	bne.n	80087d4 <_dtoa_r+0x4e4>
 8008722:	4b7e      	ldr	r3, [pc, #504]	; (800891c <_dtoa_r+0x62c>)
 8008724:	2200      	movs	r2, #0
 8008726:	4640      	mov	r0, r8
 8008728:	4649      	mov	r1, r9
 800872a:	f7f7 fdd5 	bl	80002d8 <__aeabi_dsub>
 800872e:	4652      	mov	r2, sl
 8008730:	465b      	mov	r3, fp
 8008732:	4680      	mov	r8, r0
 8008734:	4689      	mov	r9, r1
 8008736:	f7f8 fa17 	bl	8000b68 <__aeabi_dcmpgt>
 800873a:	2800      	cmp	r0, #0
 800873c:	f040 8295 	bne.w	8008c6a <_dtoa_r+0x97a>
 8008740:	4652      	mov	r2, sl
 8008742:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008746:	4640      	mov	r0, r8
 8008748:	4649      	mov	r1, r9
 800874a:	f7f8 f9ef 	bl	8000b2c <__aeabi_dcmplt>
 800874e:	2800      	cmp	r0, #0
 8008750:	f040 8289 	bne.w	8008c66 <_dtoa_r+0x976>
 8008754:	ec5b ab19 	vmov	sl, fp, d9
 8008758:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800875a:	2b00      	cmp	r3, #0
 800875c:	f2c0 8148 	blt.w	80089f0 <_dtoa_r+0x700>
 8008760:	9a00      	ldr	r2, [sp, #0]
 8008762:	2a0e      	cmp	r2, #14
 8008764:	f300 8144 	bgt.w	80089f0 <_dtoa_r+0x700>
 8008768:	4b67      	ldr	r3, [pc, #412]	; (8008908 <_dtoa_r+0x618>)
 800876a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800876e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008772:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008774:	2b00      	cmp	r3, #0
 8008776:	f280 80d5 	bge.w	8008924 <_dtoa_r+0x634>
 800877a:	9b03      	ldr	r3, [sp, #12]
 800877c:	2b00      	cmp	r3, #0
 800877e:	f300 80d1 	bgt.w	8008924 <_dtoa_r+0x634>
 8008782:	f040 826f 	bne.w	8008c64 <_dtoa_r+0x974>
 8008786:	4b65      	ldr	r3, [pc, #404]	; (800891c <_dtoa_r+0x62c>)
 8008788:	2200      	movs	r2, #0
 800878a:	4640      	mov	r0, r8
 800878c:	4649      	mov	r1, r9
 800878e:	f7f7 ff5b 	bl	8000648 <__aeabi_dmul>
 8008792:	4652      	mov	r2, sl
 8008794:	465b      	mov	r3, fp
 8008796:	f7f8 f9dd 	bl	8000b54 <__aeabi_dcmpge>
 800879a:	9e03      	ldr	r6, [sp, #12]
 800879c:	4637      	mov	r7, r6
 800879e:	2800      	cmp	r0, #0
 80087a0:	f040 8245 	bne.w	8008c2e <_dtoa_r+0x93e>
 80087a4:	9d01      	ldr	r5, [sp, #4]
 80087a6:	2331      	movs	r3, #49	; 0x31
 80087a8:	f805 3b01 	strb.w	r3, [r5], #1
 80087ac:	9b00      	ldr	r3, [sp, #0]
 80087ae:	3301      	adds	r3, #1
 80087b0:	9300      	str	r3, [sp, #0]
 80087b2:	e240      	b.n	8008c36 <_dtoa_r+0x946>
 80087b4:	07f2      	lsls	r2, r6, #31
 80087b6:	d505      	bpl.n	80087c4 <_dtoa_r+0x4d4>
 80087b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087bc:	f7f7 ff44 	bl	8000648 <__aeabi_dmul>
 80087c0:	3501      	adds	r5, #1
 80087c2:	2301      	movs	r3, #1
 80087c4:	1076      	asrs	r6, r6, #1
 80087c6:	3708      	adds	r7, #8
 80087c8:	e777      	b.n	80086ba <_dtoa_r+0x3ca>
 80087ca:	2502      	movs	r5, #2
 80087cc:	e779      	b.n	80086c2 <_dtoa_r+0x3d2>
 80087ce:	9f00      	ldr	r7, [sp, #0]
 80087d0:	9e03      	ldr	r6, [sp, #12]
 80087d2:	e794      	b.n	80086fe <_dtoa_r+0x40e>
 80087d4:	9901      	ldr	r1, [sp, #4]
 80087d6:	4b4c      	ldr	r3, [pc, #304]	; (8008908 <_dtoa_r+0x618>)
 80087d8:	4431      	add	r1, r6
 80087da:	910d      	str	r1, [sp, #52]	; 0x34
 80087dc:	9908      	ldr	r1, [sp, #32]
 80087de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80087e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80087e6:	2900      	cmp	r1, #0
 80087e8:	d043      	beq.n	8008872 <_dtoa_r+0x582>
 80087ea:	494d      	ldr	r1, [pc, #308]	; (8008920 <_dtoa_r+0x630>)
 80087ec:	2000      	movs	r0, #0
 80087ee:	f7f8 f855 	bl	800089c <__aeabi_ddiv>
 80087f2:	4652      	mov	r2, sl
 80087f4:	465b      	mov	r3, fp
 80087f6:	f7f7 fd6f 	bl	80002d8 <__aeabi_dsub>
 80087fa:	9d01      	ldr	r5, [sp, #4]
 80087fc:	4682      	mov	sl, r0
 80087fe:	468b      	mov	fp, r1
 8008800:	4649      	mov	r1, r9
 8008802:	4640      	mov	r0, r8
 8008804:	f7f8 f9d0 	bl	8000ba8 <__aeabi_d2iz>
 8008808:	4606      	mov	r6, r0
 800880a:	f7f7 feb3 	bl	8000574 <__aeabi_i2d>
 800880e:	4602      	mov	r2, r0
 8008810:	460b      	mov	r3, r1
 8008812:	4640      	mov	r0, r8
 8008814:	4649      	mov	r1, r9
 8008816:	f7f7 fd5f 	bl	80002d8 <__aeabi_dsub>
 800881a:	3630      	adds	r6, #48	; 0x30
 800881c:	f805 6b01 	strb.w	r6, [r5], #1
 8008820:	4652      	mov	r2, sl
 8008822:	465b      	mov	r3, fp
 8008824:	4680      	mov	r8, r0
 8008826:	4689      	mov	r9, r1
 8008828:	f7f8 f980 	bl	8000b2c <__aeabi_dcmplt>
 800882c:	2800      	cmp	r0, #0
 800882e:	d163      	bne.n	80088f8 <_dtoa_r+0x608>
 8008830:	4642      	mov	r2, r8
 8008832:	464b      	mov	r3, r9
 8008834:	4936      	ldr	r1, [pc, #216]	; (8008910 <_dtoa_r+0x620>)
 8008836:	2000      	movs	r0, #0
 8008838:	f7f7 fd4e 	bl	80002d8 <__aeabi_dsub>
 800883c:	4652      	mov	r2, sl
 800883e:	465b      	mov	r3, fp
 8008840:	f7f8 f974 	bl	8000b2c <__aeabi_dcmplt>
 8008844:	2800      	cmp	r0, #0
 8008846:	f040 80b5 	bne.w	80089b4 <_dtoa_r+0x6c4>
 800884a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800884c:	429d      	cmp	r5, r3
 800884e:	d081      	beq.n	8008754 <_dtoa_r+0x464>
 8008850:	4b30      	ldr	r3, [pc, #192]	; (8008914 <_dtoa_r+0x624>)
 8008852:	2200      	movs	r2, #0
 8008854:	4650      	mov	r0, sl
 8008856:	4659      	mov	r1, fp
 8008858:	f7f7 fef6 	bl	8000648 <__aeabi_dmul>
 800885c:	4b2d      	ldr	r3, [pc, #180]	; (8008914 <_dtoa_r+0x624>)
 800885e:	4682      	mov	sl, r0
 8008860:	468b      	mov	fp, r1
 8008862:	4640      	mov	r0, r8
 8008864:	4649      	mov	r1, r9
 8008866:	2200      	movs	r2, #0
 8008868:	f7f7 feee 	bl	8000648 <__aeabi_dmul>
 800886c:	4680      	mov	r8, r0
 800886e:	4689      	mov	r9, r1
 8008870:	e7c6      	b.n	8008800 <_dtoa_r+0x510>
 8008872:	4650      	mov	r0, sl
 8008874:	4659      	mov	r1, fp
 8008876:	f7f7 fee7 	bl	8000648 <__aeabi_dmul>
 800887a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800887c:	9d01      	ldr	r5, [sp, #4]
 800887e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008880:	4682      	mov	sl, r0
 8008882:	468b      	mov	fp, r1
 8008884:	4649      	mov	r1, r9
 8008886:	4640      	mov	r0, r8
 8008888:	f7f8 f98e 	bl	8000ba8 <__aeabi_d2iz>
 800888c:	4606      	mov	r6, r0
 800888e:	f7f7 fe71 	bl	8000574 <__aeabi_i2d>
 8008892:	3630      	adds	r6, #48	; 0x30
 8008894:	4602      	mov	r2, r0
 8008896:	460b      	mov	r3, r1
 8008898:	4640      	mov	r0, r8
 800889a:	4649      	mov	r1, r9
 800889c:	f7f7 fd1c 	bl	80002d8 <__aeabi_dsub>
 80088a0:	f805 6b01 	strb.w	r6, [r5], #1
 80088a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088a6:	429d      	cmp	r5, r3
 80088a8:	4680      	mov	r8, r0
 80088aa:	4689      	mov	r9, r1
 80088ac:	f04f 0200 	mov.w	r2, #0
 80088b0:	d124      	bne.n	80088fc <_dtoa_r+0x60c>
 80088b2:	4b1b      	ldr	r3, [pc, #108]	; (8008920 <_dtoa_r+0x630>)
 80088b4:	4650      	mov	r0, sl
 80088b6:	4659      	mov	r1, fp
 80088b8:	f7f7 fd10 	bl	80002dc <__adddf3>
 80088bc:	4602      	mov	r2, r0
 80088be:	460b      	mov	r3, r1
 80088c0:	4640      	mov	r0, r8
 80088c2:	4649      	mov	r1, r9
 80088c4:	f7f8 f950 	bl	8000b68 <__aeabi_dcmpgt>
 80088c8:	2800      	cmp	r0, #0
 80088ca:	d173      	bne.n	80089b4 <_dtoa_r+0x6c4>
 80088cc:	4652      	mov	r2, sl
 80088ce:	465b      	mov	r3, fp
 80088d0:	4913      	ldr	r1, [pc, #76]	; (8008920 <_dtoa_r+0x630>)
 80088d2:	2000      	movs	r0, #0
 80088d4:	f7f7 fd00 	bl	80002d8 <__aeabi_dsub>
 80088d8:	4602      	mov	r2, r0
 80088da:	460b      	mov	r3, r1
 80088dc:	4640      	mov	r0, r8
 80088de:	4649      	mov	r1, r9
 80088e0:	f7f8 f924 	bl	8000b2c <__aeabi_dcmplt>
 80088e4:	2800      	cmp	r0, #0
 80088e6:	f43f af35 	beq.w	8008754 <_dtoa_r+0x464>
 80088ea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80088ec:	1e6b      	subs	r3, r5, #1
 80088ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80088f0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80088f4:	2b30      	cmp	r3, #48	; 0x30
 80088f6:	d0f8      	beq.n	80088ea <_dtoa_r+0x5fa>
 80088f8:	9700      	str	r7, [sp, #0]
 80088fa:	e049      	b.n	8008990 <_dtoa_r+0x6a0>
 80088fc:	4b05      	ldr	r3, [pc, #20]	; (8008914 <_dtoa_r+0x624>)
 80088fe:	f7f7 fea3 	bl	8000648 <__aeabi_dmul>
 8008902:	4680      	mov	r8, r0
 8008904:	4689      	mov	r9, r1
 8008906:	e7bd      	b.n	8008884 <_dtoa_r+0x594>
 8008908:	0800b418 	.word	0x0800b418
 800890c:	0800b3f0 	.word	0x0800b3f0
 8008910:	3ff00000 	.word	0x3ff00000
 8008914:	40240000 	.word	0x40240000
 8008918:	401c0000 	.word	0x401c0000
 800891c:	40140000 	.word	0x40140000
 8008920:	3fe00000 	.word	0x3fe00000
 8008924:	9d01      	ldr	r5, [sp, #4]
 8008926:	4656      	mov	r6, sl
 8008928:	465f      	mov	r7, fp
 800892a:	4642      	mov	r2, r8
 800892c:	464b      	mov	r3, r9
 800892e:	4630      	mov	r0, r6
 8008930:	4639      	mov	r1, r7
 8008932:	f7f7 ffb3 	bl	800089c <__aeabi_ddiv>
 8008936:	f7f8 f937 	bl	8000ba8 <__aeabi_d2iz>
 800893a:	4682      	mov	sl, r0
 800893c:	f7f7 fe1a 	bl	8000574 <__aeabi_i2d>
 8008940:	4642      	mov	r2, r8
 8008942:	464b      	mov	r3, r9
 8008944:	f7f7 fe80 	bl	8000648 <__aeabi_dmul>
 8008948:	4602      	mov	r2, r0
 800894a:	460b      	mov	r3, r1
 800894c:	4630      	mov	r0, r6
 800894e:	4639      	mov	r1, r7
 8008950:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008954:	f7f7 fcc0 	bl	80002d8 <__aeabi_dsub>
 8008958:	f805 6b01 	strb.w	r6, [r5], #1
 800895c:	9e01      	ldr	r6, [sp, #4]
 800895e:	9f03      	ldr	r7, [sp, #12]
 8008960:	1bae      	subs	r6, r5, r6
 8008962:	42b7      	cmp	r7, r6
 8008964:	4602      	mov	r2, r0
 8008966:	460b      	mov	r3, r1
 8008968:	d135      	bne.n	80089d6 <_dtoa_r+0x6e6>
 800896a:	f7f7 fcb7 	bl	80002dc <__adddf3>
 800896e:	4642      	mov	r2, r8
 8008970:	464b      	mov	r3, r9
 8008972:	4606      	mov	r6, r0
 8008974:	460f      	mov	r7, r1
 8008976:	f7f8 f8f7 	bl	8000b68 <__aeabi_dcmpgt>
 800897a:	b9d0      	cbnz	r0, 80089b2 <_dtoa_r+0x6c2>
 800897c:	4642      	mov	r2, r8
 800897e:	464b      	mov	r3, r9
 8008980:	4630      	mov	r0, r6
 8008982:	4639      	mov	r1, r7
 8008984:	f7f8 f8c8 	bl	8000b18 <__aeabi_dcmpeq>
 8008988:	b110      	cbz	r0, 8008990 <_dtoa_r+0x6a0>
 800898a:	f01a 0f01 	tst.w	sl, #1
 800898e:	d110      	bne.n	80089b2 <_dtoa_r+0x6c2>
 8008990:	4620      	mov	r0, r4
 8008992:	ee18 1a10 	vmov	r1, s16
 8008996:	f000 ff6d 	bl	8009874 <_Bfree>
 800899a:	2300      	movs	r3, #0
 800899c:	9800      	ldr	r0, [sp, #0]
 800899e:	702b      	strb	r3, [r5, #0]
 80089a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089a2:	3001      	adds	r0, #1
 80089a4:	6018      	str	r0, [r3, #0]
 80089a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	f43f acf1 	beq.w	8008390 <_dtoa_r+0xa0>
 80089ae:	601d      	str	r5, [r3, #0]
 80089b0:	e4ee      	b.n	8008390 <_dtoa_r+0xa0>
 80089b2:	9f00      	ldr	r7, [sp, #0]
 80089b4:	462b      	mov	r3, r5
 80089b6:	461d      	mov	r5, r3
 80089b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089bc:	2a39      	cmp	r2, #57	; 0x39
 80089be:	d106      	bne.n	80089ce <_dtoa_r+0x6de>
 80089c0:	9a01      	ldr	r2, [sp, #4]
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d1f7      	bne.n	80089b6 <_dtoa_r+0x6c6>
 80089c6:	9901      	ldr	r1, [sp, #4]
 80089c8:	2230      	movs	r2, #48	; 0x30
 80089ca:	3701      	adds	r7, #1
 80089cc:	700a      	strb	r2, [r1, #0]
 80089ce:	781a      	ldrb	r2, [r3, #0]
 80089d0:	3201      	adds	r2, #1
 80089d2:	701a      	strb	r2, [r3, #0]
 80089d4:	e790      	b.n	80088f8 <_dtoa_r+0x608>
 80089d6:	4ba6      	ldr	r3, [pc, #664]	; (8008c70 <_dtoa_r+0x980>)
 80089d8:	2200      	movs	r2, #0
 80089da:	f7f7 fe35 	bl	8000648 <__aeabi_dmul>
 80089de:	2200      	movs	r2, #0
 80089e0:	2300      	movs	r3, #0
 80089e2:	4606      	mov	r6, r0
 80089e4:	460f      	mov	r7, r1
 80089e6:	f7f8 f897 	bl	8000b18 <__aeabi_dcmpeq>
 80089ea:	2800      	cmp	r0, #0
 80089ec:	d09d      	beq.n	800892a <_dtoa_r+0x63a>
 80089ee:	e7cf      	b.n	8008990 <_dtoa_r+0x6a0>
 80089f0:	9a08      	ldr	r2, [sp, #32]
 80089f2:	2a00      	cmp	r2, #0
 80089f4:	f000 80d7 	beq.w	8008ba6 <_dtoa_r+0x8b6>
 80089f8:	9a06      	ldr	r2, [sp, #24]
 80089fa:	2a01      	cmp	r2, #1
 80089fc:	f300 80ba 	bgt.w	8008b74 <_dtoa_r+0x884>
 8008a00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a02:	2a00      	cmp	r2, #0
 8008a04:	f000 80b2 	beq.w	8008b6c <_dtoa_r+0x87c>
 8008a08:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008a0c:	9e07      	ldr	r6, [sp, #28]
 8008a0e:	9d04      	ldr	r5, [sp, #16]
 8008a10:	9a04      	ldr	r2, [sp, #16]
 8008a12:	441a      	add	r2, r3
 8008a14:	9204      	str	r2, [sp, #16]
 8008a16:	9a05      	ldr	r2, [sp, #20]
 8008a18:	2101      	movs	r1, #1
 8008a1a:	441a      	add	r2, r3
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	9205      	str	r2, [sp, #20]
 8008a20:	f001 f82a 	bl	8009a78 <__i2b>
 8008a24:	4607      	mov	r7, r0
 8008a26:	2d00      	cmp	r5, #0
 8008a28:	dd0c      	ble.n	8008a44 <_dtoa_r+0x754>
 8008a2a:	9b05      	ldr	r3, [sp, #20]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	dd09      	ble.n	8008a44 <_dtoa_r+0x754>
 8008a30:	42ab      	cmp	r3, r5
 8008a32:	9a04      	ldr	r2, [sp, #16]
 8008a34:	bfa8      	it	ge
 8008a36:	462b      	movge	r3, r5
 8008a38:	1ad2      	subs	r2, r2, r3
 8008a3a:	9204      	str	r2, [sp, #16]
 8008a3c:	9a05      	ldr	r2, [sp, #20]
 8008a3e:	1aed      	subs	r5, r5, r3
 8008a40:	1ad3      	subs	r3, r2, r3
 8008a42:	9305      	str	r3, [sp, #20]
 8008a44:	9b07      	ldr	r3, [sp, #28]
 8008a46:	b31b      	cbz	r3, 8008a90 <_dtoa_r+0x7a0>
 8008a48:	9b08      	ldr	r3, [sp, #32]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	f000 80af 	beq.w	8008bae <_dtoa_r+0x8be>
 8008a50:	2e00      	cmp	r6, #0
 8008a52:	dd13      	ble.n	8008a7c <_dtoa_r+0x78c>
 8008a54:	4639      	mov	r1, r7
 8008a56:	4632      	mov	r2, r6
 8008a58:	4620      	mov	r0, r4
 8008a5a:	f001 f8cd 	bl	8009bf8 <__pow5mult>
 8008a5e:	ee18 2a10 	vmov	r2, s16
 8008a62:	4601      	mov	r1, r0
 8008a64:	4607      	mov	r7, r0
 8008a66:	4620      	mov	r0, r4
 8008a68:	f001 f81c 	bl	8009aa4 <__multiply>
 8008a6c:	ee18 1a10 	vmov	r1, s16
 8008a70:	4680      	mov	r8, r0
 8008a72:	4620      	mov	r0, r4
 8008a74:	f000 fefe 	bl	8009874 <_Bfree>
 8008a78:	ee08 8a10 	vmov	s16, r8
 8008a7c:	9b07      	ldr	r3, [sp, #28]
 8008a7e:	1b9a      	subs	r2, r3, r6
 8008a80:	d006      	beq.n	8008a90 <_dtoa_r+0x7a0>
 8008a82:	ee18 1a10 	vmov	r1, s16
 8008a86:	4620      	mov	r0, r4
 8008a88:	f001 f8b6 	bl	8009bf8 <__pow5mult>
 8008a8c:	ee08 0a10 	vmov	s16, r0
 8008a90:	2101      	movs	r1, #1
 8008a92:	4620      	mov	r0, r4
 8008a94:	f000 fff0 	bl	8009a78 <__i2b>
 8008a98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	4606      	mov	r6, r0
 8008a9e:	f340 8088 	ble.w	8008bb2 <_dtoa_r+0x8c2>
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	4601      	mov	r1, r0
 8008aa6:	4620      	mov	r0, r4
 8008aa8:	f001 f8a6 	bl	8009bf8 <__pow5mult>
 8008aac:	9b06      	ldr	r3, [sp, #24]
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	4606      	mov	r6, r0
 8008ab2:	f340 8081 	ble.w	8008bb8 <_dtoa_r+0x8c8>
 8008ab6:	f04f 0800 	mov.w	r8, #0
 8008aba:	6933      	ldr	r3, [r6, #16]
 8008abc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008ac0:	6918      	ldr	r0, [r3, #16]
 8008ac2:	f000 ff89 	bl	80099d8 <__hi0bits>
 8008ac6:	f1c0 0020 	rsb	r0, r0, #32
 8008aca:	9b05      	ldr	r3, [sp, #20]
 8008acc:	4418      	add	r0, r3
 8008ace:	f010 001f 	ands.w	r0, r0, #31
 8008ad2:	f000 8092 	beq.w	8008bfa <_dtoa_r+0x90a>
 8008ad6:	f1c0 0320 	rsb	r3, r0, #32
 8008ada:	2b04      	cmp	r3, #4
 8008adc:	f340 808a 	ble.w	8008bf4 <_dtoa_r+0x904>
 8008ae0:	f1c0 001c 	rsb	r0, r0, #28
 8008ae4:	9b04      	ldr	r3, [sp, #16]
 8008ae6:	4403      	add	r3, r0
 8008ae8:	9304      	str	r3, [sp, #16]
 8008aea:	9b05      	ldr	r3, [sp, #20]
 8008aec:	4403      	add	r3, r0
 8008aee:	4405      	add	r5, r0
 8008af0:	9305      	str	r3, [sp, #20]
 8008af2:	9b04      	ldr	r3, [sp, #16]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	dd07      	ble.n	8008b08 <_dtoa_r+0x818>
 8008af8:	ee18 1a10 	vmov	r1, s16
 8008afc:	461a      	mov	r2, r3
 8008afe:	4620      	mov	r0, r4
 8008b00:	f001 f8d4 	bl	8009cac <__lshift>
 8008b04:	ee08 0a10 	vmov	s16, r0
 8008b08:	9b05      	ldr	r3, [sp, #20]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	dd05      	ble.n	8008b1a <_dtoa_r+0x82a>
 8008b0e:	4631      	mov	r1, r6
 8008b10:	461a      	mov	r2, r3
 8008b12:	4620      	mov	r0, r4
 8008b14:	f001 f8ca 	bl	8009cac <__lshift>
 8008b18:	4606      	mov	r6, r0
 8008b1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d06e      	beq.n	8008bfe <_dtoa_r+0x90e>
 8008b20:	ee18 0a10 	vmov	r0, s16
 8008b24:	4631      	mov	r1, r6
 8008b26:	f001 f931 	bl	8009d8c <__mcmp>
 8008b2a:	2800      	cmp	r0, #0
 8008b2c:	da67      	bge.n	8008bfe <_dtoa_r+0x90e>
 8008b2e:	9b00      	ldr	r3, [sp, #0]
 8008b30:	3b01      	subs	r3, #1
 8008b32:	ee18 1a10 	vmov	r1, s16
 8008b36:	9300      	str	r3, [sp, #0]
 8008b38:	220a      	movs	r2, #10
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	4620      	mov	r0, r4
 8008b3e:	f000 febb 	bl	80098b8 <__multadd>
 8008b42:	9b08      	ldr	r3, [sp, #32]
 8008b44:	ee08 0a10 	vmov	s16, r0
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	f000 81b1 	beq.w	8008eb0 <_dtoa_r+0xbc0>
 8008b4e:	2300      	movs	r3, #0
 8008b50:	4639      	mov	r1, r7
 8008b52:	220a      	movs	r2, #10
 8008b54:	4620      	mov	r0, r4
 8008b56:	f000 feaf 	bl	80098b8 <__multadd>
 8008b5a:	9b02      	ldr	r3, [sp, #8]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	4607      	mov	r7, r0
 8008b60:	f300 808e 	bgt.w	8008c80 <_dtoa_r+0x990>
 8008b64:	9b06      	ldr	r3, [sp, #24]
 8008b66:	2b02      	cmp	r3, #2
 8008b68:	dc51      	bgt.n	8008c0e <_dtoa_r+0x91e>
 8008b6a:	e089      	b.n	8008c80 <_dtoa_r+0x990>
 8008b6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b6e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008b72:	e74b      	b.n	8008a0c <_dtoa_r+0x71c>
 8008b74:	9b03      	ldr	r3, [sp, #12]
 8008b76:	1e5e      	subs	r6, r3, #1
 8008b78:	9b07      	ldr	r3, [sp, #28]
 8008b7a:	42b3      	cmp	r3, r6
 8008b7c:	bfbf      	itttt	lt
 8008b7e:	9b07      	ldrlt	r3, [sp, #28]
 8008b80:	9607      	strlt	r6, [sp, #28]
 8008b82:	1af2      	sublt	r2, r6, r3
 8008b84:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008b86:	bfb6      	itet	lt
 8008b88:	189b      	addlt	r3, r3, r2
 8008b8a:	1b9e      	subge	r6, r3, r6
 8008b8c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008b8e:	9b03      	ldr	r3, [sp, #12]
 8008b90:	bfb8      	it	lt
 8008b92:	2600      	movlt	r6, #0
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	bfb7      	itett	lt
 8008b98:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008b9c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008ba0:	1a9d      	sublt	r5, r3, r2
 8008ba2:	2300      	movlt	r3, #0
 8008ba4:	e734      	b.n	8008a10 <_dtoa_r+0x720>
 8008ba6:	9e07      	ldr	r6, [sp, #28]
 8008ba8:	9d04      	ldr	r5, [sp, #16]
 8008baa:	9f08      	ldr	r7, [sp, #32]
 8008bac:	e73b      	b.n	8008a26 <_dtoa_r+0x736>
 8008bae:	9a07      	ldr	r2, [sp, #28]
 8008bb0:	e767      	b.n	8008a82 <_dtoa_r+0x792>
 8008bb2:	9b06      	ldr	r3, [sp, #24]
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	dc18      	bgt.n	8008bea <_dtoa_r+0x8fa>
 8008bb8:	f1ba 0f00 	cmp.w	sl, #0
 8008bbc:	d115      	bne.n	8008bea <_dtoa_r+0x8fa>
 8008bbe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008bc2:	b993      	cbnz	r3, 8008bea <_dtoa_r+0x8fa>
 8008bc4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008bc8:	0d1b      	lsrs	r3, r3, #20
 8008bca:	051b      	lsls	r3, r3, #20
 8008bcc:	b183      	cbz	r3, 8008bf0 <_dtoa_r+0x900>
 8008bce:	9b04      	ldr	r3, [sp, #16]
 8008bd0:	3301      	adds	r3, #1
 8008bd2:	9304      	str	r3, [sp, #16]
 8008bd4:	9b05      	ldr	r3, [sp, #20]
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	9305      	str	r3, [sp, #20]
 8008bda:	f04f 0801 	mov.w	r8, #1
 8008bde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	f47f af6a 	bne.w	8008aba <_dtoa_r+0x7ca>
 8008be6:	2001      	movs	r0, #1
 8008be8:	e76f      	b.n	8008aca <_dtoa_r+0x7da>
 8008bea:	f04f 0800 	mov.w	r8, #0
 8008bee:	e7f6      	b.n	8008bde <_dtoa_r+0x8ee>
 8008bf0:	4698      	mov	r8, r3
 8008bf2:	e7f4      	b.n	8008bde <_dtoa_r+0x8ee>
 8008bf4:	f43f af7d 	beq.w	8008af2 <_dtoa_r+0x802>
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	301c      	adds	r0, #28
 8008bfc:	e772      	b.n	8008ae4 <_dtoa_r+0x7f4>
 8008bfe:	9b03      	ldr	r3, [sp, #12]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	dc37      	bgt.n	8008c74 <_dtoa_r+0x984>
 8008c04:	9b06      	ldr	r3, [sp, #24]
 8008c06:	2b02      	cmp	r3, #2
 8008c08:	dd34      	ble.n	8008c74 <_dtoa_r+0x984>
 8008c0a:	9b03      	ldr	r3, [sp, #12]
 8008c0c:	9302      	str	r3, [sp, #8]
 8008c0e:	9b02      	ldr	r3, [sp, #8]
 8008c10:	b96b      	cbnz	r3, 8008c2e <_dtoa_r+0x93e>
 8008c12:	4631      	mov	r1, r6
 8008c14:	2205      	movs	r2, #5
 8008c16:	4620      	mov	r0, r4
 8008c18:	f000 fe4e 	bl	80098b8 <__multadd>
 8008c1c:	4601      	mov	r1, r0
 8008c1e:	4606      	mov	r6, r0
 8008c20:	ee18 0a10 	vmov	r0, s16
 8008c24:	f001 f8b2 	bl	8009d8c <__mcmp>
 8008c28:	2800      	cmp	r0, #0
 8008c2a:	f73f adbb 	bgt.w	80087a4 <_dtoa_r+0x4b4>
 8008c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c30:	9d01      	ldr	r5, [sp, #4]
 8008c32:	43db      	mvns	r3, r3
 8008c34:	9300      	str	r3, [sp, #0]
 8008c36:	f04f 0800 	mov.w	r8, #0
 8008c3a:	4631      	mov	r1, r6
 8008c3c:	4620      	mov	r0, r4
 8008c3e:	f000 fe19 	bl	8009874 <_Bfree>
 8008c42:	2f00      	cmp	r7, #0
 8008c44:	f43f aea4 	beq.w	8008990 <_dtoa_r+0x6a0>
 8008c48:	f1b8 0f00 	cmp.w	r8, #0
 8008c4c:	d005      	beq.n	8008c5a <_dtoa_r+0x96a>
 8008c4e:	45b8      	cmp	r8, r7
 8008c50:	d003      	beq.n	8008c5a <_dtoa_r+0x96a>
 8008c52:	4641      	mov	r1, r8
 8008c54:	4620      	mov	r0, r4
 8008c56:	f000 fe0d 	bl	8009874 <_Bfree>
 8008c5a:	4639      	mov	r1, r7
 8008c5c:	4620      	mov	r0, r4
 8008c5e:	f000 fe09 	bl	8009874 <_Bfree>
 8008c62:	e695      	b.n	8008990 <_dtoa_r+0x6a0>
 8008c64:	2600      	movs	r6, #0
 8008c66:	4637      	mov	r7, r6
 8008c68:	e7e1      	b.n	8008c2e <_dtoa_r+0x93e>
 8008c6a:	9700      	str	r7, [sp, #0]
 8008c6c:	4637      	mov	r7, r6
 8008c6e:	e599      	b.n	80087a4 <_dtoa_r+0x4b4>
 8008c70:	40240000 	.word	0x40240000
 8008c74:	9b08      	ldr	r3, [sp, #32]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	f000 80ca 	beq.w	8008e10 <_dtoa_r+0xb20>
 8008c7c:	9b03      	ldr	r3, [sp, #12]
 8008c7e:	9302      	str	r3, [sp, #8]
 8008c80:	2d00      	cmp	r5, #0
 8008c82:	dd05      	ble.n	8008c90 <_dtoa_r+0x9a0>
 8008c84:	4639      	mov	r1, r7
 8008c86:	462a      	mov	r2, r5
 8008c88:	4620      	mov	r0, r4
 8008c8a:	f001 f80f 	bl	8009cac <__lshift>
 8008c8e:	4607      	mov	r7, r0
 8008c90:	f1b8 0f00 	cmp.w	r8, #0
 8008c94:	d05b      	beq.n	8008d4e <_dtoa_r+0xa5e>
 8008c96:	6879      	ldr	r1, [r7, #4]
 8008c98:	4620      	mov	r0, r4
 8008c9a:	f000 fdab 	bl	80097f4 <_Balloc>
 8008c9e:	4605      	mov	r5, r0
 8008ca0:	b928      	cbnz	r0, 8008cae <_dtoa_r+0x9be>
 8008ca2:	4b87      	ldr	r3, [pc, #540]	; (8008ec0 <_dtoa_r+0xbd0>)
 8008ca4:	4602      	mov	r2, r0
 8008ca6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008caa:	f7ff bb3b 	b.w	8008324 <_dtoa_r+0x34>
 8008cae:	693a      	ldr	r2, [r7, #16]
 8008cb0:	3202      	adds	r2, #2
 8008cb2:	0092      	lsls	r2, r2, #2
 8008cb4:	f107 010c 	add.w	r1, r7, #12
 8008cb8:	300c      	adds	r0, #12
 8008cba:	f000 fd8d 	bl	80097d8 <memcpy>
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	4629      	mov	r1, r5
 8008cc2:	4620      	mov	r0, r4
 8008cc4:	f000 fff2 	bl	8009cac <__lshift>
 8008cc8:	9b01      	ldr	r3, [sp, #4]
 8008cca:	f103 0901 	add.w	r9, r3, #1
 8008cce:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008cd2:	4413      	add	r3, r2
 8008cd4:	9305      	str	r3, [sp, #20]
 8008cd6:	f00a 0301 	and.w	r3, sl, #1
 8008cda:	46b8      	mov	r8, r7
 8008cdc:	9304      	str	r3, [sp, #16]
 8008cde:	4607      	mov	r7, r0
 8008ce0:	4631      	mov	r1, r6
 8008ce2:	ee18 0a10 	vmov	r0, s16
 8008ce6:	f7ff fa77 	bl	80081d8 <quorem>
 8008cea:	4641      	mov	r1, r8
 8008cec:	9002      	str	r0, [sp, #8]
 8008cee:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008cf2:	ee18 0a10 	vmov	r0, s16
 8008cf6:	f001 f849 	bl	8009d8c <__mcmp>
 8008cfa:	463a      	mov	r2, r7
 8008cfc:	9003      	str	r0, [sp, #12]
 8008cfe:	4631      	mov	r1, r6
 8008d00:	4620      	mov	r0, r4
 8008d02:	f001 f85f 	bl	8009dc4 <__mdiff>
 8008d06:	68c2      	ldr	r2, [r0, #12]
 8008d08:	f109 3bff 	add.w	fp, r9, #4294967295
 8008d0c:	4605      	mov	r5, r0
 8008d0e:	bb02      	cbnz	r2, 8008d52 <_dtoa_r+0xa62>
 8008d10:	4601      	mov	r1, r0
 8008d12:	ee18 0a10 	vmov	r0, s16
 8008d16:	f001 f839 	bl	8009d8c <__mcmp>
 8008d1a:	4602      	mov	r2, r0
 8008d1c:	4629      	mov	r1, r5
 8008d1e:	4620      	mov	r0, r4
 8008d20:	9207      	str	r2, [sp, #28]
 8008d22:	f000 fda7 	bl	8009874 <_Bfree>
 8008d26:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008d2a:	ea43 0102 	orr.w	r1, r3, r2
 8008d2e:	9b04      	ldr	r3, [sp, #16]
 8008d30:	430b      	orrs	r3, r1
 8008d32:	464d      	mov	r5, r9
 8008d34:	d10f      	bne.n	8008d56 <_dtoa_r+0xa66>
 8008d36:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008d3a:	d02a      	beq.n	8008d92 <_dtoa_r+0xaa2>
 8008d3c:	9b03      	ldr	r3, [sp, #12]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	dd02      	ble.n	8008d48 <_dtoa_r+0xa58>
 8008d42:	9b02      	ldr	r3, [sp, #8]
 8008d44:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008d48:	f88b a000 	strb.w	sl, [fp]
 8008d4c:	e775      	b.n	8008c3a <_dtoa_r+0x94a>
 8008d4e:	4638      	mov	r0, r7
 8008d50:	e7ba      	b.n	8008cc8 <_dtoa_r+0x9d8>
 8008d52:	2201      	movs	r2, #1
 8008d54:	e7e2      	b.n	8008d1c <_dtoa_r+0xa2c>
 8008d56:	9b03      	ldr	r3, [sp, #12]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	db04      	blt.n	8008d66 <_dtoa_r+0xa76>
 8008d5c:	9906      	ldr	r1, [sp, #24]
 8008d5e:	430b      	orrs	r3, r1
 8008d60:	9904      	ldr	r1, [sp, #16]
 8008d62:	430b      	orrs	r3, r1
 8008d64:	d122      	bne.n	8008dac <_dtoa_r+0xabc>
 8008d66:	2a00      	cmp	r2, #0
 8008d68:	ddee      	ble.n	8008d48 <_dtoa_r+0xa58>
 8008d6a:	ee18 1a10 	vmov	r1, s16
 8008d6e:	2201      	movs	r2, #1
 8008d70:	4620      	mov	r0, r4
 8008d72:	f000 ff9b 	bl	8009cac <__lshift>
 8008d76:	4631      	mov	r1, r6
 8008d78:	ee08 0a10 	vmov	s16, r0
 8008d7c:	f001 f806 	bl	8009d8c <__mcmp>
 8008d80:	2800      	cmp	r0, #0
 8008d82:	dc03      	bgt.n	8008d8c <_dtoa_r+0xa9c>
 8008d84:	d1e0      	bne.n	8008d48 <_dtoa_r+0xa58>
 8008d86:	f01a 0f01 	tst.w	sl, #1
 8008d8a:	d0dd      	beq.n	8008d48 <_dtoa_r+0xa58>
 8008d8c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008d90:	d1d7      	bne.n	8008d42 <_dtoa_r+0xa52>
 8008d92:	2339      	movs	r3, #57	; 0x39
 8008d94:	f88b 3000 	strb.w	r3, [fp]
 8008d98:	462b      	mov	r3, r5
 8008d9a:	461d      	mov	r5, r3
 8008d9c:	3b01      	subs	r3, #1
 8008d9e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008da2:	2a39      	cmp	r2, #57	; 0x39
 8008da4:	d071      	beq.n	8008e8a <_dtoa_r+0xb9a>
 8008da6:	3201      	adds	r2, #1
 8008da8:	701a      	strb	r2, [r3, #0]
 8008daa:	e746      	b.n	8008c3a <_dtoa_r+0x94a>
 8008dac:	2a00      	cmp	r2, #0
 8008dae:	dd07      	ble.n	8008dc0 <_dtoa_r+0xad0>
 8008db0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008db4:	d0ed      	beq.n	8008d92 <_dtoa_r+0xaa2>
 8008db6:	f10a 0301 	add.w	r3, sl, #1
 8008dba:	f88b 3000 	strb.w	r3, [fp]
 8008dbe:	e73c      	b.n	8008c3a <_dtoa_r+0x94a>
 8008dc0:	9b05      	ldr	r3, [sp, #20]
 8008dc2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008dc6:	4599      	cmp	r9, r3
 8008dc8:	d047      	beq.n	8008e5a <_dtoa_r+0xb6a>
 8008dca:	ee18 1a10 	vmov	r1, s16
 8008dce:	2300      	movs	r3, #0
 8008dd0:	220a      	movs	r2, #10
 8008dd2:	4620      	mov	r0, r4
 8008dd4:	f000 fd70 	bl	80098b8 <__multadd>
 8008dd8:	45b8      	cmp	r8, r7
 8008dda:	ee08 0a10 	vmov	s16, r0
 8008dde:	f04f 0300 	mov.w	r3, #0
 8008de2:	f04f 020a 	mov.w	r2, #10
 8008de6:	4641      	mov	r1, r8
 8008de8:	4620      	mov	r0, r4
 8008dea:	d106      	bne.n	8008dfa <_dtoa_r+0xb0a>
 8008dec:	f000 fd64 	bl	80098b8 <__multadd>
 8008df0:	4680      	mov	r8, r0
 8008df2:	4607      	mov	r7, r0
 8008df4:	f109 0901 	add.w	r9, r9, #1
 8008df8:	e772      	b.n	8008ce0 <_dtoa_r+0x9f0>
 8008dfa:	f000 fd5d 	bl	80098b8 <__multadd>
 8008dfe:	4639      	mov	r1, r7
 8008e00:	4680      	mov	r8, r0
 8008e02:	2300      	movs	r3, #0
 8008e04:	220a      	movs	r2, #10
 8008e06:	4620      	mov	r0, r4
 8008e08:	f000 fd56 	bl	80098b8 <__multadd>
 8008e0c:	4607      	mov	r7, r0
 8008e0e:	e7f1      	b.n	8008df4 <_dtoa_r+0xb04>
 8008e10:	9b03      	ldr	r3, [sp, #12]
 8008e12:	9302      	str	r3, [sp, #8]
 8008e14:	9d01      	ldr	r5, [sp, #4]
 8008e16:	ee18 0a10 	vmov	r0, s16
 8008e1a:	4631      	mov	r1, r6
 8008e1c:	f7ff f9dc 	bl	80081d8 <quorem>
 8008e20:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008e24:	9b01      	ldr	r3, [sp, #4]
 8008e26:	f805 ab01 	strb.w	sl, [r5], #1
 8008e2a:	1aea      	subs	r2, r5, r3
 8008e2c:	9b02      	ldr	r3, [sp, #8]
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	dd09      	ble.n	8008e46 <_dtoa_r+0xb56>
 8008e32:	ee18 1a10 	vmov	r1, s16
 8008e36:	2300      	movs	r3, #0
 8008e38:	220a      	movs	r2, #10
 8008e3a:	4620      	mov	r0, r4
 8008e3c:	f000 fd3c 	bl	80098b8 <__multadd>
 8008e40:	ee08 0a10 	vmov	s16, r0
 8008e44:	e7e7      	b.n	8008e16 <_dtoa_r+0xb26>
 8008e46:	9b02      	ldr	r3, [sp, #8]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	bfc8      	it	gt
 8008e4c:	461d      	movgt	r5, r3
 8008e4e:	9b01      	ldr	r3, [sp, #4]
 8008e50:	bfd8      	it	le
 8008e52:	2501      	movle	r5, #1
 8008e54:	441d      	add	r5, r3
 8008e56:	f04f 0800 	mov.w	r8, #0
 8008e5a:	ee18 1a10 	vmov	r1, s16
 8008e5e:	2201      	movs	r2, #1
 8008e60:	4620      	mov	r0, r4
 8008e62:	f000 ff23 	bl	8009cac <__lshift>
 8008e66:	4631      	mov	r1, r6
 8008e68:	ee08 0a10 	vmov	s16, r0
 8008e6c:	f000 ff8e 	bl	8009d8c <__mcmp>
 8008e70:	2800      	cmp	r0, #0
 8008e72:	dc91      	bgt.n	8008d98 <_dtoa_r+0xaa8>
 8008e74:	d102      	bne.n	8008e7c <_dtoa_r+0xb8c>
 8008e76:	f01a 0f01 	tst.w	sl, #1
 8008e7a:	d18d      	bne.n	8008d98 <_dtoa_r+0xaa8>
 8008e7c:	462b      	mov	r3, r5
 8008e7e:	461d      	mov	r5, r3
 8008e80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e84:	2a30      	cmp	r2, #48	; 0x30
 8008e86:	d0fa      	beq.n	8008e7e <_dtoa_r+0xb8e>
 8008e88:	e6d7      	b.n	8008c3a <_dtoa_r+0x94a>
 8008e8a:	9a01      	ldr	r2, [sp, #4]
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d184      	bne.n	8008d9a <_dtoa_r+0xaaa>
 8008e90:	9b00      	ldr	r3, [sp, #0]
 8008e92:	3301      	adds	r3, #1
 8008e94:	9300      	str	r3, [sp, #0]
 8008e96:	2331      	movs	r3, #49	; 0x31
 8008e98:	7013      	strb	r3, [r2, #0]
 8008e9a:	e6ce      	b.n	8008c3a <_dtoa_r+0x94a>
 8008e9c:	4b09      	ldr	r3, [pc, #36]	; (8008ec4 <_dtoa_r+0xbd4>)
 8008e9e:	f7ff ba95 	b.w	80083cc <_dtoa_r+0xdc>
 8008ea2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	f47f aa6e 	bne.w	8008386 <_dtoa_r+0x96>
 8008eaa:	4b07      	ldr	r3, [pc, #28]	; (8008ec8 <_dtoa_r+0xbd8>)
 8008eac:	f7ff ba8e 	b.w	80083cc <_dtoa_r+0xdc>
 8008eb0:	9b02      	ldr	r3, [sp, #8]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	dcae      	bgt.n	8008e14 <_dtoa_r+0xb24>
 8008eb6:	9b06      	ldr	r3, [sp, #24]
 8008eb8:	2b02      	cmp	r3, #2
 8008eba:	f73f aea8 	bgt.w	8008c0e <_dtoa_r+0x91e>
 8008ebe:	e7a9      	b.n	8008e14 <_dtoa_r+0xb24>
 8008ec0:	0800b2a0 	.word	0x0800b2a0
 8008ec4:	0800b0a4 	.word	0x0800b0a4
 8008ec8:	0800b221 	.word	0x0800b221

08008ecc <std>:
 8008ecc:	2300      	movs	r3, #0
 8008ece:	b510      	push	{r4, lr}
 8008ed0:	4604      	mov	r4, r0
 8008ed2:	e9c0 3300 	strd	r3, r3, [r0]
 8008ed6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008eda:	6083      	str	r3, [r0, #8]
 8008edc:	8181      	strh	r1, [r0, #12]
 8008ede:	6643      	str	r3, [r0, #100]	; 0x64
 8008ee0:	81c2      	strh	r2, [r0, #14]
 8008ee2:	6183      	str	r3, [r0, #24]
 8008ee4:	4619      	mov	r1, r3
 8008ee6:	2208      	movs	r2, #8
 8008ee8:	305c      	adds	r0, #92	; 0x5c
 8008eea:	f7fd fc07 	bl	80066fc <memset>
 8008eee:	4b05      	ldr	r3, [pc, #20]	; (8008f04 <std+0x38>)
 8008ef0:	6263      	str	r3, [r4, #36]	; 0x24
 8008ef2:	4b05      	ldr	r3, [pc, #20]	; (8008f08 <std+0x3c>)
 8008ef4:	62a3      	str	r3, [r4, #40]	; 0x28
 8008ef6:	4b05      	ldr	r3, [pc, #20]	; (8008f0c <std+0x40>)
 8008ef8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008efa:	4b05      	ldr	r3, [pc, #20]	; (8008f10 <std+0x44>)
 8008efc:	6224      	str	r4, [r4, #32]
 8008efe:	6323      	str	r3, [r4, #48]	; 0x30
 8008f00:	bd10      	pop	{r4, pc}
 8008f02:	bf00      	nop
 8008f04:	0800a901 	.word	0x0800a901
 8008f08:	0800a923 	.word	0x0800a923
 8008f0c:	0800a95b 	.word	0x0800a95b
 8008f10:	0800a97f 	.word	0x0800a97f

08008f14 <_cleanup_r>:
 8008f14:	4901      	ldr	r1, [pc, #4]	; (8008f1c <_cleanup_r+0x8>)
 8008f16:	f000 b8af 	b.w	8009078 <_fwalk_reent>
 8008f1a:	bf00      	nop
 8008f1c:	0800acd9 	.word	0x0800acd9

08008f20 <__sfmoreglue>:
 8008f20:	b570      	push	{r4, r5, r6, lr}
 8008f22:	2268      	movs	r2, #104	; 0x68
 8008f24:	1e4d      	subs	r5, r1, #1
 8008f26:	4355      	muls	r5, r2
 8008f28:	460e      	mov	r6, r1
 8008f2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008f2e:	f001 f9a5 	bl	800a27c <_malloc_r>
 8008f32:	4604      	mov	r4, r0
 8008f34:	b140      	cbz	r0, 8008f48 <__sfmoreglue+0x28>
 8008f36:	2100      	movs	r1, #0
 8008f38:	e9c0 1600 	strd	r1, r6, [r0]
 8008f3c:	300c      	adds	r0, #12
 8008f3e:	60a0      	str	r0, [r4, #8]
 8008f40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008f44:	f7fd fbda 	bl	80066fc <memset>
 8008f48:	4620      	mov	r0, r4
 8008f4a:	bd70      	pop	{r4, r5, r6, pc}

08008f4c <__sfp_lock_acquire>:
 8008f4c:	4801      	ldr	r0, [pc, #4]	; (8008f54 <__sfp_lock_acquire+0x8>)
 8008f4e:	f000 bc26 	b.w	800979e <__retarget_lock_acquire_recursive>
 8008f52:	bf00      	nop
 8008f54:	2000038d 	.word	0x2000038d

08008f58 <__sfp_lock_release>:
 8008f58:	4801      	ldr	r0, [pc, #4]	; (8008f60 <__sfp_lock_release+0x8>)
 8008f5a:	f000 bc21 	b.w	80097a0 <__retarget_lock_release_recursive>
 8008f5e:	bf00      	nop
 8008f60:	2000038d 	.word	0x2000038d

08008f64 <__sinit_lock_acquire>:
 8008f64:	4801      	ldr	r0, [pc, #4]	; (8008f6c <__sinit_lock_acquire+0x8>)
 8008f66:	f000 bc1a 	b.w	800979e <__retarget_lock_acquire_recursive>
 8008f6a:	bf00      	nop
 8008f6c:	2000038e 	.word	0x2000038e

08008f70 <__sinit_lock_release>:
 8008f70:	4801      	ldr	r0, [pc, #4]	; (8008f78 <__sinit_lock_release+0x8>)
 8008f72:	f000 bc15 	b.w	80097a0 <__retarget_lock_release_recursive>
 8008f76:	bf00      	nop
 8008f78:	2000038e 	.word	0x2000038e

08008f7c <__sinit>:
 8008f7c:	b510      	push	{r4, lr}
 8008f7e:	4604      	mov	r4, r0
 8008f80:	f7ff fff0 	bl	8008f64 <__sinit_lock_acquire>
 8008f84:	69a3      	ldr	r3, [r4, #24]
 8008f86:	b11b      	cbz	r3, 8008f90 <__sinit+0x14>
 8008f88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f8c:	f7ff bff0 	b.w	8008f70 <__sinit_lock_release>
 8008f90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008f94:	6523      	str	r3, [r4, #80]	; 0x50
 8008f96:	4b13      	ldr	r3, [pc, #76]	; (8008fe4 <__sinit+0x68>)
 8008f98:	4a13      	ldr	r2, [pc, #76]	; (8008fe8 <__sinit+0x6c>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	62a2      	str	r2, [r4, #40]	; 0x28
 8008f9e:	42a3      	cmp	r3, r4
 8008fa0:	bf04      	itt	eq
 8008fa2:	2301      	moveq	r3, #1
 8008fa4:	61a3      	streq	r3, [r4, #24]
 8008fa6:	4620      	mov	r0, r4
 8008fa8:	f000 f820 	bl	8008fec <__sfp>
 8008fac:	6060      	str	r0, [r4, #4]
 8008fae:	4620      	mov	r0, r4
 8008fb0:	f000 f81c 	bl	8008fec <__sfp>
 8008fb4:	60a0      	str	r0, [r4, #8]
 8008fb6:	4620      	mov	r0, r4
 8008fb8:	f000 f818 	bl	8008fec <__sfp>
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	60e0      	str	r0, [r4, #12]
 8008fc0:	2104      	movs	r1, #4
 8008fc2:	6860      	ldr	r0, [r4, #4]
 8008fc4:	f7ff ff82 	bl	8008ecc <std>
 8008fc8:	68a0      	ldr	r0, [r4, #8]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	2109      	movs	r1, #9
 8008fce:	f7ff ff7d 	bl	8008ecc <std>
 8008fd2:	68e0      	ldr	r0, [r4, #12]
 8008fd4:	2202      	movs	r2, #2
 8008fd6:	2112      	movs	r1, #18
 8008fd8:	f7ff ff78 	bl	8008ecc <std>
 8008fdc:	2301      	movs	r3, #1
 8008fde:	61a3      	str	r3, [r4, #24]
 8008fe0:	e7d2      	b.n	8008f88 <__sinit+0xc>
 8008fe2:	bf00      	nop
 8008fe4:	0800b090 	.word	0x0800b090
 8008fe8:	08008f15 	.word	0x08008f15

08008fec <__sfp>:
 8008fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fee:	4607      	mov	r7, r0
 8008ff0:	f7ff ffac 	bl	8008f4c <__sfp_lock_acquire>
 8008ff4:	4b1e      	ldr	r3, [pc, #120]	; (8009070 <__sfp+0x84>)
 8008ff6:	681e      	ldr	r6, [r3, #0]
 8008ff8:	69b3      	ldr	r3, [r6, #24]
 8008ffa:	b913      	cbnz	r3, 8009002 <__sfp+0x16>
 8008ffc:	4630      	mov	r0, r6
 8008ffe:	f7ff ffbd 	bl	8008f7c <__sinit>
 8009002:	3648      	adds	r6, #72	; 0x48
 8009004:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009008:	3b01      	subs	r3, #1
 800900a:	d503      	bpl.n	8009014 <__sfp+0x28>
 800900c:	6833      	ldr	r3, [r6, #0]
 800900e:	b30b      	cbz	r3, 8009054 <__sfp+0x68>
 8009010:	6836      	ldr	r6, [r6, #0]
 8009012:	e7f7      	b.n	8009004 <__sfp+0x18>
 8009014:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009018:	b9d5      	cbnz	r5, 8009050 <__sfp+0x64>
 800901a:	4b16      	ldr	r3, [pc, #88]	; (8009074 <__sfp+0x88>)
 800901c:	60e3      	str	r3, [r4, #12]
 800901e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009022:	6665      	str	r5, [r4, #100]	; 0x64
 8009024:	f000 fbba 	bl	800979c <__retarget_lock_init_recursive>
 8009028:	f7ff ff96 	bl	8008f58 <__sfp_lock_release>
 800902c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009030:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009034:	6025      	str	r5, [r4, #0]
 8009036:	61a5      	str	r5, [r4, #24]
 8009038:	2208      	movs	r2, #8
 800903a:	4629      	mov	r1, r5
 800903c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009040:	f7fd fb5c 	bl	80066fc <memset>
 8009044:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009048:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800904c:	4620      	mov	r0, r4
 800904e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009050:	3468      	adds	r4, #104	; 0x68
 8009052:	e7d9      	b.n	8009008 <__sfp+0x1c>
 8009054:	2104      	movs	r1, #4
 8009056:	4638      	mov	r0, r7
 8009058:	f7ff ff62 	bl	8008f20 <__sfmoreglue>
 800905c:	4604      	mov	r4, r0
 800905e:	6030      	str	r0, [r6, #0]
 8009060:	2800      	cmp	r0, #0
 8009062:	d1d5      	bne.n	8009010 <__sfp+0x24>
 8009064:	f7ff ff78 	bl	8008f58 <__sfp_lock_release>
 8009068:	230c      	movs	r3, #12
 800906a:	603b      	str	r3, [r7, #0]
 800906c:	e7ee      	b.n	800904c <__sfp+0x60>
 800906e:	bf00      	nop
 8009070:	0800b090 	.word	0x0800b090
 8009074:	ffff0001 	.word	0xffff0001

08009078 <_fwalk_reent>:
 8009078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800907c:	4606      	mov	r6, r0
 800907e:	4688      	mov	r8, r1
 8009080:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009084:	2700      	movs	r7, #0
 8009086:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800908a:	f1b9 0901 	subs.w	r9, r9, #1
 800908e:	d505      	bpl.n	800909c <_fwalk_reent+0x24>
 8009090:	6824      	ldr	r4, [r4, #0]
 8009092:	2c00      	cmp	r4, #0
 8009094:	d1f7      	bne.n	8009086 <_fwalk_reent+0xe>
 8009096:	4638      	mov	r0, r7
 8009098:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800909c:	89ab      	ldrh	r3, [r5, #12]
 800909e:	2b01      	cmp	r3, #1
 80090a0:	d907      	bls.n	80090b2 <_fwalk_reent+0x3a>
 80090a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80090a6:	3301      	adds	r3, #1
 80090a8:	d003      	beq.n	80090b2 <_fwalk_reent+0x3a>
 80090aa:	4629      	mov	r1, r5
 80090ac:	4630      	mov	r0, r6
 80090ae:	47c0      	blx	r8
 80090b0:	4307      	orrs	r7, r0
 80090b2:	3568      	adds	r5, #104	; 0x68
 80090b4:	e7e9      	b.n	800908a <_fwalk_reent+0x12>

080090b6 <rshift>:
 80090b6:	6903      	ldr	r3, [r0, #16]
 80090b8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80090bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80090c0:	ea4f 1261 	mov.w	r2, r1, asr #5
 80090c4:	f100 0414 	add.w	r4, r0, #20
 80090c8:	dd45      	ble.n	8009156 <rshift+0xa0>
 80090ca:	f011 011f 	ands.w	r1, r1, #31
 80090ce:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80090d2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80090d6:	d10c      	bne.n	80090f2 <rshift+0x3c>
 80090d8:	f100 0710 	add.w	r7, r0, #16
 80090dc:	4629      	mov	r1, r5
 80090de:	42b1      	cmp	r1, r6
 80090e0:	d334      	bcc.n	800914c <rshift+0x96>
 80090e2:	1a9b      	subs	r3, r3, r2
 80090e4:	009b      	lsls	r3, r3, #2
 80090e6:	1eea      	subs	r2, r5, #3
 80090e8:	4296      	cmp	r6, r2
 80090ea:	bf38      	it	cc
 80090ec:	2300      	movcc	r3, #0
 80090ee:	4423      	add	r3, r4
 80090f0:	e015      	b.n	800911e <rshift+0x68>
 80090f2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80090f6:	f1c1 0820 	rsb	r8, r1, #32
 80090fa:	40cf      	lsrs	r7, r1
 80090fc:	f105 0e04 	add.w	lr, r5, #4
 8009100:	46a1      	mov	r9, r4
 8009102:	4576      	cmp	r6, lr
 8009104:	46f4      	mov	ip, lr
 8009106:	d815      	bhi.n	8009134 <rshift+0x7e>
 8009108:	1a9a      	subs	r2, r3, r2
 800910a:	0092      	lsls	r2, r2, #2
 800910c:	3a04      	subs	r2, #4
 800910e:	3501      	adds	r5, #1
 8009110:	42ae      	cmp	r6, r5
 8009112:	bf38      	it	cc
 8009114:	2200      	movcc	r2, #0
 8009116:	18a3      	adds	r3, r4, r2
 8009118:	50a7      	str	r7, [r4, r2]
 800911a:	b107      	cbz	r7, 800911e <rshift+0x68>
 800911c:	3304      	adds	r3, #4
 800911e:	1b1a      	subs	r2, r3, r4
 8009120:	42a3      	cmp	r3, r4
 8009122:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009126:	bf08      	it	eq
 8009128:	2300      	moveq	r3, #0
 800912a:	6102      	str	r2, [r0, #16]
 800912c:	bf08      	it	eq
 800912e:	6143      	streq	r3, [r0, #20]
 8009130:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009134:	f8dc c000 	ldr.w	ip, [ip]
 8009138:	fa0c fc08 	lsl.w	ip, ip, r8
 800913c:	ea4c 0707 	orr.w	r7, ip, r7
 8009140:	f849 7b04 	str.w	r7, [r9], #4
 8009144:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009148:	40cf      	lsrs	r7, r1
 800914a:	e7da      	b.n	8009102 <rshift+0x4c>
 800914c:	f851 cb04 	ldr.w	ip, [r1], #4
 8009150:	f847 cf04 	str.w	ip, [r7, #4]!
 8009154:	e7c3      	b.n	80090de <rshift+0x28>
 8009156:	4623      	mov	r3, r4
 8009158:	e7e1      	b.n	800911e <rshift+0x68>

0800915a <__hexdig_fun>:
 800915a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800915e:	2b09      	cmp	r3, #9
 8009160:	d802      	bhi.n	8009168 <__hexdig_fun+0xe>
 8009162:	3820      	subs	r0, #32
 8009164:	b2c0      	uxtb	r0, r0
 8009166:	4770      	bx	lr
 8009168:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800916c:	2b05      	cmp	r3, #5
 800916e:	d801      	bhi.n	8009174 <__hexdig_fun+0x1a>
 8009170:	3847      	subs	r0, #71	; 0x47
 8009172:	e7f7      	b.n	8009164 <__hexdig_fun+0xa>
 8009174:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009178:	2b05      	cmp	r3, #5
 800917a:	d801      	bhi.n	8009180 <__hexdig_fun+0x26>
 800917c:	3827      	subs	r0, #39	; 0x27
 800917e:	e7f1      	b.n	8009164 <__hexdig_fun+0xa>
 8009180:	2000      	movs	r0, #0
 8009182:	4770      	bx	lr

08009184 <__gethex>:
 8009184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009188:	ed2d 8b02 	vpush	{d8}
 800918c:	b089      	sub	sp, #36	; 0x24
 800918e:	ee08 0a10 	vmov	s16, r0
 8009192:	9304      	str	r3, [sp, #16]
 8009194:	4bb4      	ldr	r3, [pc, #720]	; (8009468 <__gethex+0x2e4>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	9301      	str	r3, [sp, #4]
 800919a:	4618      	mov	r0, r3
 800919c:	468b      	mov	fp, r1
 800919e:	4690      	mov	r8, r2
 80091a0:	f7f7 f83e 	bl	8000220 <strlen>
 80091a4:	9b01      	ldr	r3, [sp, #4]
 80091a6:	f8db 2000 	ldr.w	r2, [fp]
 80091aa:	4403      	add	r3, r0
 80091ac:	4682      	mov	sl, r0
 80091ae:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80091b2:	9305      	str	r3, [sp, #20]
 80091b4:	1c93      	adds	r3, r2, #2
 80091b6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80091ba:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80091be:	32fe      	adds	r2, #254	; 0xfe
 80091c0:	18d1      	adds	r1, r2, r3
 80091c2:	461f      	mov	r7, r3
 80091c4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80091c8:	9100      	str	r1, [sp, #0]
 80091ca:	2830      	cmp	r0, #48	; 0x30
 80091cc:	d0f8      	beq.n	80091c0 <__gethex+0x3c>
 80091ce:	f7ff ffc4 	bl	800915a <__hexdig_fun>
 80091d2:	4604      	mov	r4, r0
 80091d4:	2800      	cmp	r0, #0
 80091d6:	d13a      	bne.n	800924e <__gethex+0xca>
 80091d8:	9901      	ldr	r1, [sp, #4]
 80091da:	4652      	mov	r2, sl
 80091dc:	4638      	mov	r0, r7
 80091de:	f001 fbd2 	bl	800a986 <strncmp>
 80091e2:	4605      	mov	r5, r0
 80091e4:	2800      	cmp	r0, #0
 80091e6:	d168      	bne.n	80092ba <__gethex+0x136>
 80091e8:	f817 000a 	ldrb.w	r0, [r7, sl]
 80091ec:	eb07 060a 	add.w	r6, r7, sl
 80091f0:	f7ff ffb3 	bl	800915a <__hexdig_fun>
 80091f4:	2800      	cmp	r0, #0
 80091f6:	d062      	beq.n	80092be <__gethex+0x13a>
 80091f8:	4633      	mov	r3, r6
 80091fa:	7818      	ldrb	r0, [r3, #0]
 80091fc:	2830      	cmp	r0, #48	; 0x30
 80091fe:	461f      	mov	r7, r3
 8009200:	f103 0301 	add.w	r3, r3, #1
 8009204:	d0f9      	beq.n	80091fa <__gethex+0x76>
 8009206:	f7ff ffa8 	bl	800915a <__hexdig_fun>
 800920a:	2301      	movs	r3, #1
 800920c:	fab0 f480 	clz	r4, r0
 8009210:	0964      	lsrs	r4, r4, #5
 8009212:	4635      	mov	r5, r6
 8009214:	9300      	str	r3, [sp, #0]
 8009216:	463a      	mov	r2, r7
 8009218:	4616      	mov	r6, r2
 800921a:	3201      	adds	r2, #1
 800921c:	7830      	ldrb	r0, [r6, #0]
 800921e:	f7ff ff9c 	bl	800915a <__hexdig_fun>
 8009222:	2800      	cmp	r0, #0
 8009224:	d1f8      	bne.n	8009218 <__gethex+0x94>
 8009226:	9901      	ldr	r1, [sp, #4]
 8009228:	4652      	mov	r2, sl
 800922a:	4630      	mov	r0, r6
 800922c:	f001 fbab 	bl	800a986 <strncmp>
 8009230:	b980      	cbnz	r0, 8009254 <__gethex+0xd0>
 8009232:	b94d      	cbnz	r5, 8009248 <__gethex+0xc4>
 8009234:	eb06 050a 	add.w	r5, r6, sl
 8009238:	462a      	mov	r2, r5
 800923a:	4616      	mov	r6, r2
 800923c:	3201      	adds	r2, #1
 800923e:	7830      	ldrb	r0, [r6, #0]
 8009240:	f7ff ff8b 	bl	800915a <__hexdig_fun>
 8009244:	2800      	cmp	r0, #0
 8009246:	d1f8      	bne.n	800923a <__gethex+0xb6>
 8009248:	1bad      	subs	r5, r5, r6
 800924a:	00ad      	lsls	r5, r5, #2
 800924c:	e004      	b.n	8009258 <__gethex+0xd4>
 800924e:	2400      	movs	r4, #0
 8009250:	4625      	mov	r5, r4
 8009252:	e7e0      	b.n	8009216 <__gethex+0x92>
 8009254:	2d00      	cmp	r5, #0
 8009256:	d1f7      	bne.n	8009248 <__gethex+0xc4>
 8009258:	7833      	ldrb	r3, [r6, #0]
 800925a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800925e:	2b50      	cmp	r3, #80	; 0x50
 8009260:	d13b      	bne.n	80092da <__gethex+0x156>
 8009262:	7873      	ldrb	r3, [r6, #1]
 8009264:	2b2b      	cmp	r3, #43	; 0x2b
 8009266:	d02c      	beq.n	80092c2 <__gethex+0x13e>
 8009268:	2b2d      	cmp	r3, #45	; 0x2d
 800926a:	d02e      	beq.n	80092ca <__gethex+0x146>
 800926c:	1c71      	adds	r1, r6, #1
 800926e:	f04f 0900 	mov.w	r9, #0
 8009272:	7808      	ldrb	r0, [r1, #0]
 8009274:	f7ff ff71 	bl	800915a <__hexdig_fun>
 8009278:	1e43      	subs	r3, r0, #1
 800927a:	b2db      	uxtb	r3, r3
 800927c:	2b18      	cmp	r3, #24
 800927e:	d82c      	bhi.n	80092da <__gethex+0x156>
 8009280:	f1a0 0210 	sub.w	r2, r0, #16
 8009284:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009288:	f7ff ff67 	bl	800915a <__hexdig_fun>
 800928c:	1e43      	subs	r3, r0, #1
 800928e:	b2db      	uxtb	r3, r3
 8009290:	2b18      	cmp	r3, #24
 8009292:	d91d      	bls.n	80092d0 <__gethex+0x14c>
 8009294:	f1b9 0f00 	cmp.w	r9, #0
 8009298:	d000      	beq.n	800929c <__gethex+0x118>
 800929a:	4252      	negs	r2, r2
 800929c:	4415      	add	r5, r2
 800929e:	f8cb 1000 	str.w	r1, [fp]
 80092a2:	b1e4      	cbz	r4, 80092de <__gethex+0x15a>
 80092a4:	9b00      	ldr	r3, [sp, #0]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	bf14      	ite	ne
 80092aa:	2700      	movne	r7, #0
 80092ac:	2706      	moveq	r7, #6
 80092ae:	4638      	mov	r0, r7
 80092b0:	b009      	add	sp, #36	; 0x24
 80092b2:	ecbd 8b02 	vpop	{d8}
 80092b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092ba:	463e      	mov	r6, r7
 80092bc:	4625      	mov	r5, r4
 80092be:	2401      	movs	r4, #1
 80092c0:	e7ca      	b.n	8009258 <__gethex+0xd4>
 80092c2:	f04f 0900 	mov.w	r9, #0
 80092c6:	1cb1      	adds	r1, r6, #2
 80092c8:	e7d3      	b.n	8009272 <__gethex+0xee>
 80092ca:	f04f 0901 	mov.w	r9, #1
 80092ce:	e7fa      	b.n	80092c6 <__gethex+0x142>
 80092d0:	230a      	movs	r3, #10
 80092d2:	fb03 0202 	mla	r2, r3, r2, r0
 80092d6:	3a10      	subs	r2, #16
 80092d8:	e7d4      	b.n	8009284 <__gethex+0x100>
 80092da:	4631      	mov	r1, r6
 80092dc:	e7df      	b.n	800929e <__gethex+0x11a>
 80092de:	1bf3      	subs	r3, r6, r7
 80092e0:	3b01      	subs	r3, #1
 80092e2:	4621      	mov	r1, r4
 80092e4:	2b07      	cmp	r3, #7
 80092e6:	dc0b      	bgt.n	8009300 <__gethex+0x17c>
 80092e8:	ee18 0a10 	vmov	r0, s16
 80092ec:	f000 fa82 	bl	80097f4 <_Balloc>
 80092f0:	4604      	mov	r4, r0
 80092f2:	b940      	cbnz	r0, 8009306 <__gethex+0x182>
 80092f4:	4b5d      	ldr	r3, [pc, #372]	; (800946c <__gethex+0x2e8>)
 80092f6:	4602      	mov	r2, r0
 80092f8:	21de      	movs	r1, #222	; 0xde
 80092fa:	485d      	ldr	r0, [pc, #372]	; (8009470 <__gethex+0x2ec>)
 80092fc:	f001 fc38 	bl	800ab70 <__assert_func>
 8009300:	3101      	adds	r1, #1
 8009302:	105b      	asrs	r3, r3, #1
 8009304:	e7ee      	b.n	80092e4 <__gethex+0x160>
 8009306:	f100 0914 	add.w	r9, r0, #20
 800930a:	f04f 0b00 	mov.w	fp, #0
 800930e:	f1ca 0301 	rsb	r3, sl, #1
 8009312:	f8cd 9008 	str.w	r9, [sp, #8]
 8009316:	f8cd b000 	str.w	fp, [sp]
 800931a:	9306      	str	r3, [sp, #24]
 800931c:	42b7      	cmp	r7, r6
 800931e:	d340      	bcc.n	80093a2 <__gethex+0x21e>
 8009320:	9802      	ldr	r0, [sp, #8]
 8009322:	9b00      	ldr	r3, [sp, #0]
 8009324:	f840 3b04 	str.w	r3, [r0], #4
 8009328:	eba0 0009 	sub.w	r0, r0, r9
 800932c:	1080      	asrs	r0, r0, #2
 800932e:	0146      	lsls	r6, r0, #5
 8009330:	6120      	str	r0, [r4, #16]
 8009332:	4618      	mov	r0, r3
 8009334:	f000 fb50 	bl	80099d8 <__hi0bits>
 8009338:	1a30      	subs	r0, r6, r0
 800933a:	f8d8 6000 	ldr.w	r6, [r8]
 800933e:	42b0      	cmp	r0, r6
 8009340:	dd63      	ble.n	800940a <__gethex+0x286>
 8009342:	1b87      	subs	r7, r0, r6
 8009344:	4639      	mov	r1, r7
 8009346:	4620      	mov	r0, r4
 8009348:	f000 fef4 	bl	800a134 <__any_on>
 800934c:	4682      	mov	sl, r0
 800934e:	b1a8      	cbz	r0, 800937c <__gethex+0x1f8>
 8009350:	1e7b      	subs	r3, r7, #1
 8009352:	1159      	asrs	r1, r3, #5
 8009354:	f003 021f 	and.w	r2, r3, #31
 8009358:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800935c:	f04f 0a01 	mov.w	sl, #1
 8009360:	fa0a f202 	lsl.w	r2, sl, r2
 8009364:	420a      	tst	r2, r1
 8009366:	d009      	beq.n	800937c <__gethex+0x1f8>
 8009368:	4553      	cmp	r3, sl
 800936a:	dd05      	ble.n	8009378 <__gethex+0x1f4>
 800936c:	1eb9      	subs	r1, r7, #2
 800936e:	4620      	mov	r0, r4
 8009370:	f000 fee0 	bl	800a134 <__any_on>
 8009374:	2800      	cmp	r0, #0
 8009376:	d145      	bne.n	8009404 <__gethex+0x280>
 8009378:	f04f 0a02 	mov.w	sl, #2
 800937c:	4639      	mov	r1, r7
 800937e:	4620      	mov	r0, r4
 8009380:	f7ff fe99 	bl	80090b6 <rshift>
 8009384:	443d      	add	r5, r7
 8009386:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800938a:	42ab      	cmp	r3, r5
 800938c:	da4c      	bge.n	8009428 <__gethex+0x2a4>
 800938e:	ee18 0a10 	vmov	r0, s16
 8009392:	4621      	mov	r1, r4
 8009394:	f000 fa6e 	bl	8009874 <_Bfree>
 8009398:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800939a:	2300      	movs	r3, #0
 800939c:	6013      	str	r3, [r2, #0]
 800939e:	27a3      	movs	r7, #163	; 0xa3
 80093a0:	e785      	b.n	80092ae <__gethex+0x12a>
 80093a2:	1e73      	subs	r3, r6, #1
 80093a4:	9a05      	ldr	r2, [sp, #20]
 80093a6:	9303      	str	r3, [sp, #12]
 80093a8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d019      	beq.n	80093e4 <__gethex+0x260>
 80093b0:	f1bb 0f20 	cmp.w	fp, #32
 80093b4:	d107      	bne.n	80093c6 <__gethex+0x242>
 80093b6:	9b02      	ldr	r3, [sp, #8]
 80093b8:	9a00      	ldr	r2, [sp, #0]
 80093ba:	f843 2b04 	str.w	r2, [r3], #4
 80093be:	9302      	str	r3, [sp, #8]
 80093c0:	2300      	movs	r3, #0
 80093c2:	9300      	str	r3, [sp, #0]
 80093c4:	469b      	mov	fp, r3
 80093c6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80093ca:	f7ff fec6 	bl	800915a <__hexdig_fun>
 80093ce:	9b00      	ldr	r3, [sp, #0]
 80093d0:	f000 000f 	and.w	r0, r0, #15
 80093d4:	fa00 f00b 	lsl.w	r0, r0, fp
 80093d8:	4303      	orrs	r3, r0
 80093da:	9300      	str	r3, [sp, #0]
 80093dc:	f10b 0b04 	add.w	fp, fp, #4
 80093e0:	9b03      	ldr	r3, [sp, #12]
 80093e2:	e00d      	b.n	8009400 <__gethex+0x27c>
 80093e4:	9b03      	ldr	r3, [sp, #12]
 80093e6:	9a06      	ldr	r2, [sp, #24]
 80093e8:	4413      	add	r3, r2
 80093ea:	42bb      	cmp	r3, r7
 80093ec:	d3e0      	bcc.n	80093b0 <__gethex+0x22c>
 80093ee:	4618      	mov	r0, r3
 80093f0:	9901      	ldr	r1, [sp, #4]
 80093f2:	9307      	str	r3, [sp, #28]
 80093f4:	4652      	mov	r2, sl
 80093f6:	f001 fac6 	bl	800a986 <strncmp>
 80093fa:	9b07      	ldr	r3, [sp, #28]
 80093fc:	2800      	cmp	r0, #0
 80093fe:	d1d7      	bne.n	80093b0 <__gethex+0x22c>
 8009400:	461e      	mov	r6, r3
 8009402:	e78b      	b.n	800931c <__gethex+0x198>
 8009404:	f04f 0a03 	mov.w	sl, #3
 8009408:	e7b8      	b.n	800937c <__gethex+0x1f8>
 800940a:	da0a      	bge.n	8009422 <__gethex+0x29e>
 800940c:	1a37      	subs	r7, r6, r0
 800940e:	4621      	mov	r1, r4
 8009410:	ee18 0a10 	vmov	r0, s16
 8009414:	463a      	mov	r2, r7
 8009416:	f000 fc49 	bl	8009cac <__lshift>
 800941a:	1bed      	subs	r5, r5, r7
 800941c:	4604      	mov	r4, r0
 800941e:	f100 0914 	add.w	r9, r0, #20
 8009422:	f04f 0a00 	mov.w	sl, #0
 8009426:	e7ae      	b.n	8009386 <__gethex+0x202>
 8009428:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800942c:	42a8      	cmp	r0, r5
 800942e:	dd72      	ble.n	8009516 <__gethex+0x392>
 8009430:	1b45      	subs	r5, r0, r5
 8009432:	42ae      	cmp	r6, r5
 8009434:	dc36      	bgt.n	80094a4 <__gethex+0x320>
 8009436:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800943a:	2b02      	cmp	r3, #2
 800943c:	d02a      	beq.n	8009494 <__gethex+0x310>
 800943e:	2b03      	cmp	r3, #3
 8009440:	d02c      	beq.n	800949c <__gethex+0x318>
 8009442:	2b01      	cmp	r3, #1
 8009444:	d11c      	bne.n	8009480 <__gethex+0x2fc>
 8009446:	42ae      	cmp	r6, r5
 8009448:	d11a      	bne.n	8009480 <__gethex+0x2fc>
 800944a:	2e01      	cmp	r6, #1
 800944c:	d112      	bne.n	8009474 <__gethex+0x2f0>
 800944e:	9a04      	ldr	r2, [sp, #16]
 8009450:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009454:	6013      	str	r3, [r2, #0]
 8009456:	2301      	movs	r3, #1
 8009458:	6123      	str	r3, [r4, #16]
 800945a:	f8c9 3000 	str.w	r3, [r9]
 800945e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009460:	2762      	movs	r7, #98	; 0x62
 8009462:	601c      	str	r4, [r3, #0]
 8009464:	e723      	b.n	80092ae <__gethex+0x12a>
 8009466:	bf00      	nop
 8009468:	0800b37c 	.word	0x0800b37c
 800946c:	0800b2a0 	.word	0x0800b2a0
 8009470:	0800b314 	.word	0x0800b314
 8009474:	1e71      	subs	r1, r6, #1
 8009476:	4620      	mov	r0, r4
 8009478:	f000 fe5c 	bl	800a134 <__any_on>
 800947c:	2800      	cmp	r0, #0
 800947e:	d1e6      	bne.n	800944e <__gethex+0x2ca>
 8009480:	ee18 0a10 	vmov	r0, s16
 8009484:	4621      	mov	r1, r4
 8009486:	f000 f9f5 	bl	8009874 <_Bfree>
 800948a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800948c:	2300      	movs	r3, #0
 800948e:	6013      	str	r3, [r2, #0]
 8009490:	2750      	movs	r7, #80	; 0x50
 8009492:	e70c      	b.n	80092ae <__gethex+0x12a>
 8009494:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009496:	2b00      	cmp	r3, #0
 8009498:	d1f2      	bne.n	8009480 <__gethex+0x2fc>
 800949a:	e7d8      	b.n	800944e <__gethex+0x2ca>
 800949c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d1d5      	bne.n	800944e <__gethex+0x2ca>
 80094a2:	e7ed      	b.n	8009480 <__gethex+0x2fc>
 80094a4:	1e6f      	subs	r7, r5, #1
 80094a6:	f1ba 0f00 	cmp.w	sl, #0
 80094aa:	d131      	bne.n	8009510 <__gethex+0x38c>
 80094ac:	b127      	cbz	r7, 80094b8 <__gethex+0x334>
 80094ae:	4639      	mov	r1, r7
 80094b0:	4620      	mov	r0, r4
 80094b2:	f000 fe3f 	bl	800a134 <__any_on>
 80094b6:	4682      	mov	sl, r0
 80094b8:	117b      	asrs	r3, r7, #5
 80094ba:	2101      	movs	r1, #1
 80094bc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80094c0:	f007 071f 	and.w	r7, r7, #31
 80094c4:	fa01 f707 	lsl.w	r7, r1, r7
 80094c8:	421f      	tst	r7, r3
 80094ca:	4629      	mov	r1, r5
 80094cc:	4620      	mov	r0, r4
 80094ce:	bf18      	it	ne
 80094d0:	f04a 0a02 	orrne.w	sl, sl, #2
 80094d4:	1b76      	subs	r6, r6, r5
 80094d6:	f7ff fdee 	bl	80090b6 <rshift>
 80094da:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80094de:	2702      	movs	r7, #2
 80094e0:	f1ba 0f00 	cmp.w	sl, #0
 80094e4:	d048      	beq.n	8009578 <__gethex+0x3f4>
 80094e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80094ea:	2b02      	cmp	r3, #2
 80094ec:	d015      	beq.n	800951a <__gethex+0x396>
 80094ee:	2b03      	cmp	r3, #3
 80094f0:	d017      	beq.n	8009522 <__gethex+0x39e>
 80094f2:	2b01      	cmp	r3, #1
 80094f4:	d109      	bne.n	800950a <__gethex+0x386>
 80094f6:	f01a 0f02 	tst.w	sl, #2
 80094fa:	d006      	beq.n	800950a <__gethex+0x386>
 80094fc:	f8d9 0000 	ldr.w	r0, [r9]
 8009500:	ea4a 0a00 	orr.w	sl, sl, r0
 8009504:	f01a 0f01 	tst.w	sl, #1
 8009508:	d10e      	bne.n	8009528 <__gethex+0x3a4>
 800950a:	f047 0710 	orr.w	r7, r7, #16
 800950e:	e033      	b.n	8009578 <__gethex+0x3f4>
 8009510:	f04f 0a01 	mov.w	sl, #1
 8009514:	e7d0      	b.n	80094b8 <__gethex+0x334>
 8009516:	2701      	movs	r7, #1
 8009518:	e7e2      	b.n	80094e0 <__gethex+0x35c>
 800951a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800951c:	f1c3 0301 	rsb	r3, r3, #1
 8009520:	9315      	str	r3, [sp, #84]	; 0x54
 8009522:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009524:	2b00      	cmp	r3, #0
 8009526:	d0f0      	beq.n	800950a <__gethex+0x386>
 8009528:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800952c:	f104 0314 	add.w	r3, r4, #20
 8009530:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009534:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009538:	f04f 0c00 	mov.w	ip, #0
 800953c:	4618      	mov	r0, r3
 800953e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009542:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009546:	d01c      	beq.n	8009582 <__gethex+0x3fe>
 8009548:	3201      	adds	r2, #1
 800954a:	6002      	str	r2, [r0, #0]
 800954c:	2f02      	cmp	r7, #2
 800954e:	f104 0314 	add.w	r3, r4, #20
 8009552:	d13f      	bne.n	80095d4 <__gethex+0x450>
 8009554:	f8d8 2000 	ldr.w	r2, [r8]
 8009558:	3a01      	subs	r2, #1
 800955a:	42b2      	cmp	r2, r6
 800955c:	d10a      	bne.n	8009574 <__gethex+0x3f0>
 800955e:	1171      	asrs	r1, r6, #5
 8009560:	2201      	movs	r2, #1
 8009562:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009566:	f006 061f 	and.w	r6, r6, #31
 800956a:	fa02 f606 	lsl.w	r6, r2, r6
 800956e:	421e      	tst	r6, r3
 8009570:	bf18      	it	ne
 8009572:	4617      	movne	r7, r2
 8009574:	f047 0720 	orr.w	r7, r7, #32
 8009578:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800957a:	601c      	str	r4, [r3, #0]
 800957c:	9b04      	ldr	r3, [sp, #16]
 800957e:	601d      	str	r5, [r3, #0]
 8009580:	e695      	b.n	80092ae <__gethex+0x12a>
 8009582:	4299      	cmp	r1, r3
 8009584:	f843 cc04 	str.w	ip, [r3, #-4]
 8009588:	d8d8      	bhi.n	800953c <__gethex+0x3b8>
 800958a:	68a3      	ldr	r3, [r4, #8]
 800958c:	459b      	cmp	fp, r3
 800958e:	db19      	blt.n	80095c4 <__gethex+0x440>
 8009590:	6861      	ldr	r1, [r4, #4]
 8009592:	ee18 0a10 	vmov	r0, s16
 8009596:	3101      	adds	r1, #1
 8009598:	f000 f92c 	bl	80097f4 <_Balloc>
 800959c:	4681      	mov	r9, r0
 800959e:	b918      	cbnz	r0, 80095a8 <__gethex+0x424>
 80095a0:	4b1a      	ldr	r3, [pc, #104]	; (800960c <__gethex+0x488>)
 80095a2:	4602      	mov	r2, r0
 80095a4:	2184      	movs	r1, #132	; 0x84
 80095a6:	e6a8      	b.n	80092fa <__gethex+0x176>
 80095a8:	6922      	ldr	r2, [r4, #16]
 80095aa:	3202      	adds	r2, #2
 80095ac:	f104 010c 	add.w	r1, r4, #12
 80095b0:	0092      	lsls	r2, r2, #2
 80095b2:	300c      	adds	r0, #12
 80095b4:	f000 f910 	bl	80097d8 <memcpy>
 80095b8:	4621      	mov	r1, r4
 80095ba:	ee18 0a10 	vmov	r0, s16
 80095be:	f000 f959 	bl	8009874 <_Bfree>
 80095c2:	464c      	mov	r4, r9
 80095c4:	6923      	ldr	r3, [r4, #16]
 80095c6:	1c5a      	adds	r2, r3, #1
 80095c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80095cc:	6122      	str	r2, [r4, #16]
 80095ce:	2201      	movs	r2, #1
 80095d0:	615a      	str	r2, [r3, #20]
 80095d2:	e7bb      	b.n	800954c <__gethex+0x3c8>
 80095d4:	6922      	ldr	r2, [r4, #16]
 80095d6:	455a      	cmp	r2, fp
 80095d8:	dd0b      	ble.n	80095f2 <__gethex+0x46e>
 80095da:	2101      	movs	r1, #1
 80095dc:	4620      	mov	r0, r4
 80095de:	f7ff fd6a 	bl	80090b6 <rshift>
 80095e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80095e6:	3501      	adds	r5, #1
 80095e8:	42ab      	cmp	r3, r5
 80095ea:	f6ff aed0 	blt.w	800938e <__gethex+0x20a>
 80095ee:	2701      	movs	r7, #1
 80095f0:	e7c0      	b.n	8009574 <__gethex+0x3f0>
 80095f2:	f016 061f 	ands.w	r6, r6, #31
 80095f6:	d0fa      	beq.n	80095ee <__gethex+0x46a>
 80095f8:	4453      	add	r3, sl
 80095fa:	f1c6 0620 	rsb	r6, r6, #32
 80095fe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009602:	f000 f9e9 	bl	80099d8 <__hi0bits>
 8009606:	42b0      	cmp	r0, r6
 8009608:	dbe7      	blt.n	80095da <__gethex+0x456>
 800960a:	e7f0      	b.n	80095ee <__gethex+0x46a>
 800960c:	0800b2a0 	.word	0x0800b2a0

08009610 <L_shift>:
 8009610:	f1c2 0208 	rsb	r2, r2, #8
 8009614:	0092      	lsls	r2, r2, #2
 8009616:	b570      	push	{r4, r5, r6, lr}
 8009618:	f1c2 0620 	rsb	r6, r2, #32
 800961c:	6843      	ldr	r3, [r0, #4]
 800961e:	6804      	ldr	r4, [r0, #0]
 8009620:	fa03 f506 	lsl.w	r5, r3, r6
 8009624:	432c      	orrs	r4, r5
 8009626:	40d3      	lsrs	r3, r2
 8009628:	6004      	str	r4, [r0, #0]
 800962a:	f840 3f04 	str.w	r3, [r0, #4]!
 800962e:	4288      	cmp	r0, r1
 8009630:	d3f4      	bcc.n	800961c <L_shift+0xc>
 8009632:	bd70      	pop	{r4, r5, r6, pc}

08009634 <__match>:
 8009634:	b530      	push	{r4, r5, lr}
 8009636:	6803      	ldr	r3, [r0, #0]
 8009638:	3301      	adds	r3, #1
 800963a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800963e:	b914      	cbnz	r4, 8009646 <__match+0x12>
 8009640:	6003      	str	r3, [r0, #0]
 8009642:	2001      	movs	r0, #1
 8009644:	bd30      	pop	{r4, r5, pc}
 8009646:	f813 2b01 	ldrb.w	r2, [r3], #1
 800964a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800964e:	2d19      	cmp	r5, #25
 8009650:	bf98      	it	ls
 8009652:	3220      	addls	r2, #32
 8009654:	42a2      	cmp	r2, r4
 8009656:	d0f0      	beq.n	800963a <__match+0x6>
 8009658:	2000      	movs	r0, #0
 800965a:	e7f3      	b.n	8009644 <__match+0x10>

0800965c <__hexnan>:
 800965c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009660:	680b      	ldr	r3, [r1, #0]
 8009662:	115e      	asrs	r6, r3, #5
 8009664:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009668:	f013 031f 	ands.w	r3, r3, #31
 800966c:	b087      	sub	sp, #28
 800966e:	bf18      	it	ne
 8009670:	3604      	addne	r6, #4
 8009672:	2500      	movs	r5, #0
 8009674:	1f37      	subs	r7, r6, #4
 8009676:	4690      	mov	r8, r2
 8009678:	6802      	ldr	r2, [r0, #0]
 800967a:	9301      	str	r3, [sp, #4]
 800967c:	4682      	mov	sl, r0
 800967e:	f846 5c04 	str.w	r5, [r6, #-4]
 8009682:	46b9      	mov	r9, r7
 8009684:	463c      	mov	r4, r7
 8009686:	9502      	str	r5, [sp, #8]
 8009688:	46ab      	mov	fp, r5
 800968a:	7851      	ldrb	r1, [r2, #1]
 800968c:	1c53      	adds	r3, r2, #1
 800968e:	9303      	str	r3, [sp, #12]
 8009690:	b341      	cbz	r1, 80096e4 <__hexnan+0x88>
 8009692:	4608      	mov	r0, r1
 8009694:	9205      	str	r2, [sp, #20]
 8009696:	9104      	str	r1, [sp, #16]
 8009698:	f7ff fd5f 	bl	800915a <__hexdig_fun>
 800969c:	2800      	cmp	r0, #0
 800969e:	d14f      	bne.n	8009740 <__hexnan+0xe4>
 80096a0:	9904      	ldr	r1, [sp, #16]
 80096a2:	9a05      	ldr	r2, [sp, #20]
 80096a4:	2920      	cmp	r1, #32
 80096a6:	d818      	bhi.n	80096da <__hexnan+0x7e>
 80096a8:	9b02      	ldr	r3, [sp, #8]
 80096aa:	459b      	cmp	fp, r3
 80096ac:	dd13      	ble.n	80096d6 <__hexnan+0x7a>
 80096ae:	454c      	cmp	r4, r9
 80096b0:	d206      	bcs.n	80096c0 <__hexnan+0x64>
 80096b2:	2d07      	cmp	r5, #7
 80096b4:	dc04      	bgt.n	80096c0 <__hexnan+0x64>
 80096b6:	462a      	mov	r2, r5
 80096b8:	4649      	mov	r1, r9
 80096ba:	4620      	mov	r0, r4
 80096bc:	f7ff ffa8 	bl	8009610 <L_shift>
 80096c0:	4544      	cmp	r4, r8
 80096c2:	d950      	bls.n	8009766 <__hexnan+0x10a>
 80096c4:	2300      	movs	r3, #0
 80096c6:	f1a4 0904 	sub.w	r9, r4, #4
 80096ca:	f844 3c04 	str.w	r3, [r4, #-4]
 80096ce:	f8cd b008 	str.w	fp, [sp, #8]
 80096d2:	464c      	mov	r4, r9
 80096d4:	461d      	mov	r5, r3
 80096d6:	9a03      	ldr	r2, [sp, #12]
 80096d8:	e7d7      	b.n	800968a <__hexnan+0x2e>
 80096da:	2929      	cmp	r1, #41	; 0x29
 80096dc:	d156      	bne.n	800978c <__hexnan+0x130>
 80096de:	3202      	adds	r2, #2
 80096e0:	f8ca 2000 	str.w	r2, [sl]
 80096e4:	f1bb 0f00 	cmp.w	fp, #0
 80096e8:	d050      	beq.n	800978c <__hexnan+0x130>
 80096ea:	454c      	cmp	r4, r9
 80096ec:	d206      	bcs.n	80096fc <__hexnan+0xa0>
 80096ee:	2d07      	cmp	r5, #7
 80096f0:	dc04      	bgt.n	80096fc <__hexnan+0xa0>
 80096f2:	462a      	mov	r2, r5
 80096f4:	4649      	mov	r1, r9
 80096f6:	4620      	mov	r0, r4
 80096f8:	f7ff ff8a 	bl	8009610 <L_shift>
 80096fc:	4544      	cmp	r4, r8
 80096fe:	d934      	bls.n	800976a <__hexnan+0x10e>
 8009700:	f1a8 0204 	sub.w	r2, r8, #4
 8009704:	4623      	mov	r3, r4
 8009706:	f853 1b04 	ldr.w	r1, [r3], #4
 800970a:	f842 1f04 	str.w	r1, [r2, #4]!
 800970e:	429f      	cmp	r7, r3
 8009710:	d2f9      	bcs.n	8009706 <__hexnan+0xaa>
 8009712:	1b3b      	subs	r3, r7, r4
 8009714:	f023 0303 	bic.w	r3, r3, #3
 8009718:	3304      	adds	r3, #4
 800971a:	3401      	adds	r4, #1
 800971c:	3e03      	subs	r6, #3
 800971e:	42b4      	cmp	r4, r6
 8009720:	bf88      	it	hi
 8009722:	2304      	movhi	r3, #4
 8009724:	4443      	add	r3, r8
 8009726:	2200      	movs	r2, #0
 8009728:	f843 2b04 	str.w	r2, [r3], #4
 800972c:	429f      	cmp	r7, r3
 800972e:	d2fb      	bcs.n	8009728 <__hexnan+0xcc>
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	b91b      	cbnz	r3, 800973c <__hexnan+0xe0>
 8009734:	4547      	cmp	r7, r8
 8009736:	d127      	bne.n	8009788 <__hexnan+0x12c>
 8009738:	2301      	movs	r3, #1
 800973a:	603b      	str	r3, [r7, #0]
 800973c:	2005      	movs	r0, #5
 800973e:	e026      	b.n	800978e <__hexnan+0x132>
 8009740:	3501      	adds	r5, #1
 8009742:	2d08      	cmp	r5, #8
 8009744:	f10b 0b01 	add.w	fp, fp, #1
 8009748:	dd06      	ble.n	8009758 <__hexnan+0xfc>
 800974a:	4544      	cmp	r4, r8
 800974c:	d9c3      	bls.n	80096d6 <__hexnan+0x7a>
 800974e:	2300      	movs	r3, #0
 8009750:	f844 3c04 	str.w	r3, [r4, #-4]
 8009754:	2501      	movs	r5, #1
 8009756:	3c04      	subs	r4, #4
 8009758:	6822      	ldr	r2, [r4, #0]
 800975a:	f000 000f 	and.w	r0, r0, #15
 800975e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009762:	6022      	str	r2, [r4, #0]
 8009764:	e7b7      	b.n	80096d6 <__hexnan+0x7a>
 8009766:	2508      	movs	r5, #8
 8009768:	e7b5      	b.n	80096d6 <__hexnan+0x7a>
 800976a:	9b01      	ldr	r3, [sp, #4]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d0df      	beq.n	8009730 <__hexnan+0xd4>
 8009770:	f04f 32ff 	mov.w	r2, #4294967295
 8009774:	f1c3 0320 	rsb	r3, r3, #32
 8009778:	fa22 f303 	lsr.w	r3, r2, r3
 800977c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009780:	401a      	ands	r2, r3
 8009782:	f846 2c04 	str.w	r2, [r6, #-4]
 8009786:	e7d3      	b.n	8009730 <__hexnan+0xd4>
 8009788:	3f04      	subs	r7, #4
 800978a:	e7d1      	b.n	8009730 <__hexnan+0xd4>
 800978c:	2004      	movs	r0, #4
 800978e:	b007      	add	sp, #28
 8009790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009794 <_localeconv_r>:
 8009794:	4800      	ldr	r0, [pc, #0]	; (8009798 <_localeconv_r+0x4>)
 8009796:	4770      	bx	lr
 8009798:	20000164 	.word	0x20000164

0800979c <__retarget_lock_init_recursive>:
 800979c:	4770      	bx	lr

0800979e <__retarget_lock_acquire_recursive>:
 800979e:	4770      	bx	lr

080097a0 <__retarget_lock_release_recursive>:
 80097a0:	4770      	bx	lr
	...

080097a4 <malloc>:
 80097a4:	4b02      	ldr	r3, [pc, #8]	; (80097b0 <malloc+0xc>)
 80097a6:	4601      	mov	r1, r0
 80097a8:	6818      	ldr	r0, [r3, #0]
 80097aa:	f000 bd67 	b.w	800a27c <_malloc_r>
 80097ae:	bf00      	nop
 80097b0:	2000000c 	.word	0x2000000c

080097b4 <__ascii_mbtowc>:
 80097b4:	b082      	sub	sp, #8
 80097b6:	b901      	cbnz	r1, 80097ba <__ascii_mbtowc+0x6>
 80097b8:	a901      	add	r1, sp, #4
 80097ba:	b142      	cbz	r2, 80097ce <__ascii_mbtowc+0x1a>
 80097bc:	b14b      	cbz	r3, 80097d2 <__ascii_mbtowc+0x1e>
 80097be:	7813      	ldrb	r3, [r2, #0]
 80097c0:	600b      	str	r3, [r1, #0]
 80097c2:	7812      	ldrb	r2, [r2, #0]
 80097c4:	1e10      	subs	r0, r2, #0
 80097c6:	bf18      	it	ne
 80097c8:	2001      	movne	r0, #1
 80097ca:	b002      	add	sp, #8
 80097cc:	4770      	bx	lr
 80097ce:	4610      	mov	r0, r2
 80097d0:	e7fb      	b.n	80097ca <__ascii_mbtowc+0x16>
 80097d2:	f06f 0001 	mvn.w	r0, #1
 80097d6:	e7f8      	b.n	80097ca <__ascii_mbtowc+0x16>

080097d8 <memcpy>:
 80097d8:	440a      	add	r2, r1
 80097da:	4291      	cmp	r1, r2
 80097dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80097e0:	d100      	bne.n	80097e4 <memcpy+0xc>
 80097e2:	4770      	bx	lr
 80097e4:	b510      	push	{r4, lr}
 80097e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097ee:	4291      	cmp	r1, r2
 80097f0:	d1f9      	bne.n	80097e6 <memcpy+0xe>
 80097f2:	bd10      	pop	{r4, pc}

080097f4 <_Balloc>:
 80097f4:	b570      	push	{r4, r5, r6, lr}
 80097f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80097f8:	4604      	mov	r4, r0
 80097fa:	460d      	mov	r5, r1
 80097fc:	b976      	cbnz	r6, 800981c <_Balloc+0x28>
 80097fe:	2010      	movs	r0, #16
 8009800:	f7ff ffd0 	bl	80097a4 <malloc>
 8009804:	4602      	mov	r2, r0
 8009806:	6260      	str	r0, [r4, #36]	; 0x24
 8009808:	b920      	cbnz	r0, 8009814 <_Balloc+0x20>
 800980a:	4b18      	ldr	r3, [pc, #96]	; (800986c <_Balloc+0x78>)
 800980c:	4818      	ldr	r0, [pc, #96]	; (8009870 <_Balloc+0x7c>)
 800980e:	2166      	movs	r1, #102	; 0x66
 8009810:	f001 f9ae 	bl	800ab70 <__assert_func>
 8009814:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009818:	6006      	str	r6, [r0, #0]
 800981a:	60c6      	str	r6, [r0, #12]
 800981c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800981e:	68f3      	ldr	r3, [r6, #12]
 8009820:	b183      	cbz	r3, 8009844 <_Balloc+0x50>
 8009822:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009824:	68db      	ldr	r3, [r3, #12]
 8009826:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800982a:	b9b8      	cbnz	r0, 800985c <_Balloc+0x68>
 800982c:	2101      	movs	r1, #1
 800982e:	fa01 f605 	lsl.w	r6, r1, r5
 8009832:	1d72      	adds	r2, r6, #5
 8009834:	0092      	lsls	r2, r2, #2
 8009836:	4620      	mov	r0, r4
 8009838:	f000 fc9d 	bl	800a176 <_calloc_r>
 800983c:	b160      	cbz	r0, 8009858 <_Balloc+0x64>
 800983e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009842:	e00e      	b.n	8009862 <_Balloc+0x6e>
 8009844:	2221      	movs	r2, #33	; 0x21
 8009846:	2104      	movs	r1, #4
 8009848:	4620      	mov	r0, r4
 800984a:	f000 fc94 	bl	800a176 <_calloc_r>
 800984e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009850:	60f0      	str	r0, [r6, #12]
 8009852:	68db      	ldr	r3, [r3, #12]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d1e4      	bne.n	8009822 <_Balloc+0x2e>
 8009858:	2000      	movs	r0, #0
 800985a:	bd70      	pop	{r4, r5, r6, pc}
 800985c:	6802      	ldr	r2, [r0, #0]
 800985e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009862:	2300      	movs	r3, #0
 8009864:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009868:	e7f7      	b.n	800985a <_Balloc+0x66>
 800986a:	bf00      	nop
 800986c:	0800b22e 	.word	0x0800b22e
 8009870:	0800b390 	.word	0x0800b390

08009874 <_Bfree>:
 8009874:	b570      	push	{r4, r5, r6, lr}
 8009876:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009878:	4605      	mov	r5, r0
 800987a:	460c      	mov	r4, r1
 800987c:	b976      	cbnz	r6, 800989c <_Bfree+0x28>
 800987e:	2010      	movs	r0, #16
 8009880:	f7ff ff90 	bl	80097a4 <malloc>
 8009884:	4602      	mov	r2, r0
 8009886:	6268      	str	r0, [r5, #36]	; 0x24
 8009888:	b920      	cbnz	r0, 8009894 <_Bfree+0x20>
 800988a:	4b09      	ldr	r3, [pc, #36]	; (80098b0 <_Bfree+0x3c>)
 800988c:	4809      	ldr	r0, [pc, #36]	; (80098b4 <_Bfree+0x40>)
 800988e:	218a      	movs	r1, #138	; 0x8a
 8009890:	f001 f96e 	bl	800ab70 <__assert_func>
 8009894:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009898:	6006      	str	r6, [r0, #0]
 800989a:	60c6      	str	r6, [r0, #12]
 800989c:	b13c      	cbz	r4, 80098ae <_Bfree+0x3a>
 800989e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80098a0:	6862      	ldr	r2, [r4, #4]
 80098a2:	68db      	ldr	r3, [r3, #12]
 80098a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80098a8:	6021      	str	r1, [r4, #0]
 80098aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80098ae:	bd70      	pop	{r4, r5, r6, pc}
 80098b0:	0800b22e 	.word	0x0800b22e
 80098b4:	0800b390 	.word	0x0800b390

080098b8 <__multadd>:
 80098b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098bc:	690d      	ldr	r5, [r1, #16]
 80098be:	4607      	mov	r7, r0
 80098c0:	460c      	mov	r4, r1
 80098c2:	461e      	mov	r6, r3
 80098c4:	f101 0c14 	add.w	ip, r1, #20
 80098c8:	2000      	movs	r0, #0
 80098ca:	f8dc 3000 	ldr.w	r3, [ip]
 80098ce:	b299      	uxth	r1, r3
 80098d0:	fb02 6101 	mla	r1, r2, r1, r6
 80098d4:	0c1e      	lsrs	r6, r3, #16
 80098d6:	0c0b      	lsrs	r3, r1, #16
 80098d8:	fb02 3306 	mla	r3, r2, r6, r3
 80098dc:	b289      	uxth	r1, r1
 80098de:	3001      	adds	r0, #1
 80098e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80098e4:	4285      	cmp	r5, r0
 80098e6:	f84c 1b04 	str.w	r1, [ip], #4
 80098ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80098ee:	dcec      	bgt.n	80098ca <__multadd+0x12>
 80098f0:	b30e      	cbz	r6, 8009936 <__multadd+0x7e>
 80098f2:	68a3      	ldr	r3, [r4, #8]
 80098f4:	42ab      	cmp	r3, r5
 80098f6:	dc19      	bgt.n	800992c <__multadd+0x74>
 80098f8:	6861      	ldr	r1, [r4, #4]
 80098fa:	4638      	mov	r0, r7
 80098fc:	3101      	adds	r1, #1
 80098fe:	f7ff ff79 	bl	80097f4 <_Balloc>
 8009902:	4680      	mov	r8, r0
 8009904:	b928      	cbnz	r0, 8009912 <__multadd+0x5a>
 8009906:	4602      	mov	r2, r0
 8009908:	4b0c      	ldr	r3, [pc, #48]	; (800993c <__multadd+0x84>)
 800990a:	480d      	ldr	r0, [pc, #52]	; (8009940 <__multadd+0x88>)
 800990c:	21b5      	movs	r1, #181	; 0xb5
 800990e:	f001 f92f 	bl	800ab70 <__assert_func>
 8009912:	6922      	ldr	r2, [r4, #16]
 8009914:	3202      	adds	r2, #2
 8009916:	f104 010c 	add.w	r1, r4, #12
 800991a:	0092      	lsls	r2, r2, #2
 800991c:	300c      	adds	r0, #12
 800991e:	f7ff ff5b 	bl	80097d8 <memcpy>
 8009922:	4621      	mov	r1, r4
 8009924:	4638      	mov	r0, r7
 8009926:	f7ff ffa5 	bl	8009874 <_Bfree>
 800992a:	4644      	mov	r4, r8
 800992c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009930:	3501      	adds	r5, #1
 8009932:	615e      	str	r6, [r3, #20]
 8009934:	6125      	str	r5, [r4, #16]
 8009936:	4620      	mov	r0, r4
 8009938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800993c:	0800b2a0 	.word	0x0800b2a0
 8009940:	0800b390 	.word	0x0800b390

08009944 <__s2b>:
 8009944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009948:	460c      	mov	r4, r1
 800994a:	4615      	mov	r5, r2
 800994c:	461f      	mov	r7, r3
 800994e:	2209      	movs	r2, #9
 8009950:	3308      	adds	r3, #8
 8009952:	4606      	mov	r6, r0
 8009954:	fb93 f3f2 	sdiv	r3, r3, r2
 8009958:	2100      	movs	r1, #0
 800995a:	2201      	movs	r2, #1
 800995c:	429a      	cmp	r2, r3
 800995e:	db09      	blt.n	8009974 <__s2b+0x30>
 8009960:	4630      	mov	r0, r6
 8009962:	f7ff ff47 	bl	80097f4 <_Balloc>
 8009966:	b940      	cbnz	r0, 800997a <__s2b+0x36>
 8009968:	4602      	mov	r2, r0
 800996a:	4b19      	ldr	r3, [pc, #100]	; (80099d0 <__s2b+0x8c>)
 800996c:	4819      	ldr	r0, [pc, #100]	; (80099d4 <__s2b+0x90>)
 800996e:	21ce      	movs	r1, #206	; 0xce
 8009970:	f001 f8fe 	bl	800ab70 <__assert_func>
 8009974:	0052      	lsls	r2, r2, #1
 8009976:	3101      	adds	r1, #1
 8009978:	e7f0      	b.n	800995c <__s2b+0x18>
 800997a:	9b08      	ldr	r3, [sp, #32]
 800997c:	6143      	str	r3, [r0, #20]
 800997e:	2d09      	cmp	r5, #9
 8009980:	f04f 0301 	mov.w	r3, #1
 8009984:	6103      	str	r3, [r0, #16]
 8009986:	dd16      	ble.n	80099b6 <__s2b+0x72>
 8009988:	f104 0909 	add.w	r9, r4, #9
 800998c:	46c8      	mov	r8, r9
 800998e:	442c      	add	r4, r5
 8009990:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009994:	4601      	mov	r1, r0
 8009996:	3b30      	subs	r3, #48	; 0x30
 8009998:	220a      	movs	r2, #10
 800999a:	4630      	mov	r0, r6
 800999c:	f7ff ff8c 	bl	80098b8 <__multadd>
 80099a0:	45a0      	cmp	r8, r4
 80099a2:	d1f5      	bne.n	8009990 <__s2b+0x4c>
 80099a4:	f1a5 0408 	sub.w	r4, r5, #8
 80099a8:	444c      	add	r4, r9
 80099aa:	1b2d      	subs	r5, r5, r4
 80099ac:	1963      	adds	r3, r4, r5
 80099ae:	42bb      	cmp	r3, r7
 80099b0:	db04      	blt.n	80099bc <__s2b+0x78>
 80099b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099b6:	340a      	adds	r4, #10
 80099b8:	2509      	movs	r5, #9
 80099ba:	e7f6      	b.n	80099aa <__s2b+0x66>
 80099bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80099c0:	4601      	mov	r1, r0
 80099c2:	3b30      	subs	r3, #48	; 0x30
 80099c4:	220a      	movs	r2, #10
 80099c6:	4630      	mov	r0, r6
 80099c8:	f7ff ff76 	bl	80098b8 <__multadd>
 80099cc:	e7ee      	b.n	80099ac <__s2b+0x68>
 80099ce:	bf00      	nop
 80099d0:	0800b2a0 	.word	0x0800b2a0
 80099d4:	0800b390 	.word	0x0800b390

080099d8 <__hi0bits>:
 80099d8:	0c03      	lsrs	r3, r0, #16
 80099da:	041b      	lsls	r3, r3, #16
 80099dc:	b9d3      	cbnz	r3, 8009a14 <__hi0bits+0x3c>
 80099de:	0400      	lsls	r0, r0, #16
 80099e0:	2310      	movs	r3, #16
 80099e2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80099e6:	bf04      	itt	eq
 80099e8:	0200      	lsleq	r0, r0, #8
 80099ea:	3308      	addeq	r3, #8
 80099ec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80099f0:	bf04      	itt	eq
 80099f2:	0100      	lsleq	r0, r0, #4
 80099f4:	3304      	addeq	r3, #4
 80099f6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80099fa:	bf04      	itt	eq
 80099fc:	0080      	lsleq	r0, r0, #2
 80099fe:	3302      	addeq	r3, #2
 8009a00:	2800      	cmp	r0, #0
 8009a02:	db05      	blt.n	8009a10 <__hi0bits+0x38>
 8009a04:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009a08:	f103 0301 	add.w	r3, r3, #1
 8009a0c:	bf08      	it	eq
 8009a0e:	2320      	moveq	r3, #32
 8009a10:	4618      	mov	r0, r3
 8009a12:	4770      	bx	lr
 8009a14:	2300      	movs	r3, #0
 8009a16:	e7e4      	b.n	80099e2 <__hi0bits+0xa>

08009a18 <__lo0bits>:
 8009a18:	6803      	ldr	r3, [r0, #0]
 8009a1a:	f013 0207 	ands.w	r2, r3, #7
 8009a1e:	4601      	mov	r1, r0
 8009a20:	d00b      	beq.n	8009a3a <__lo0bits+0x22>
 8009a22:	07da      	lsls	r2, r3, #31
 8009a24:	d423      	bmi.n	8009a6e <__lo0bits+0x56>
 8009a26:	0798      	lsls	r0, r3, #30
 8009a28:	bf49      	itett	mi
 8009a2a:	085b      	lsrmi	r3, r3, #1
 8009a2c:	089b      	lsrpl	r3, r3, #2
 8009a2e:	2001      	movmi	r0, #1
 8009a30:	600b      	strmi	r3, [r1, #0]
 8009a32:	bf5c      	itt	pl
 8009a34:	600b      	strpl	r3, [r1, #0]
 8009a36:	2002      	movpl	r0, #2
 8009a38:	4770      	bx	lr
 8009a3a:	b298      	uxth	r0, r3
 8009a3c:	b9a8      	cbnz	r0, 8009a6a <__lo0bits+0x52>
 8009a3e:	0c1b      	lsrs	r3, r3, #16
 8009a40:	2010      	movs	r0, #16
 8009a42:	b2da      	uxtb	r2, r3
 8009a44:	b90a      	cbnz	r2, 8009a4a <__lo0bits+0x32>
 8009a46:	3008      	adds	r0, #8
 8009a48:	0a1b      	lsrs	r3, r3, #8
 8009a4a:	071a      	lsls	r2, r3, #28
 8009a4c:	bf04      	itt	eq
 8009a4e:	091b      	lsreq	r3, r3, #4
 8009a50:	3004      	addeq	r0, #4
 8009a52:	079a      	lsls	r2, r3, #30
 8009a54:	bf04      	itt	eq
 8009a56:	089b      	lsreq	r3, r3, #2
 8009a58:	3002      	addeq	r0, #2
 8009a5a:	07da      	lsls	r2, r3, #31
 8009a5c:	d403      	bmi.n	8009a66 <__lo0bits+0x4e>
 8009a5e:	085b      	lsrs	r3, r3, #1
 8009a60:	f100 0001 	add.w	r0, r0, #1
 8009a64:	d005      	beq.n	8009a72 <__lo0bits+0x5a>
 8009a66:	600b      	str	r3, [r1, #0]
 8009a68:	4770      	bx	lr
 8009a6a:	4610      	mov	r0, r2
 8009a6c:	e7e9      	b.n	8009a42 <__lo0bits+0x2a>
 8009a6e:	2000      	movs	r0, #0
 8009a70:	4770      	bx	lr
 8009a72:	2020      	movs	r0, #32
 8009a74:	4770      	bx	lr
	...

08009a78 <__i2b>:
 8009a78:	b510      	push	{r4, lr}
 8009a7a:	460c      	mov	r4, r1
 8009a7c:	2101      	movs	r1, #1
 8009a7e:	f7ff feb9 	bl	80097f4 <_Balloc>
 8009a82:	4602      	mov	r2, r0
 8009a84:	b928      	cbnz	r0, 8009a92 <__i2b+0x1a>
 8009a86:	4b05      	ldr	r3, [pc, #20]	; (8009a9c <__i2b+0x24>)
 8009a88:	4805      	ldr	r0, [pc, #20]	; (8009aa0 <__i2b+0x28>)
 8009a8a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009a8e:	f001 f86f 	bl	800ab70 <__assert_func>
 8009a92:	2301      	movs	r3, #1
 8009a94:	6144      	str	r4, [r0, #20]
 8009a96:	6103      	str	r3, [r0, #16]
 8009a98:	bd10      	pop	{r4, pc}
 8009a9a:	bf00      	nop
 8009a9c:	0800b2a0 	.word	0x0800b2a0
 8009aa0:	0800b390 	.word	0x0800b390

08009aa4 <__multiply>:
 8009aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aa8:	4691      	mov	r9, r2
 8009aaa:	690a      	ldr	r2, [r1, #16]
 8009aac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	bfb8      	it	lt
 8009ab4:	460b      	movlt	r3, r1
 8009ab6:	460c      	mov	r4, r1
 8009ab8:	bfbc      	itt	lt
 8009aba:	464c      	movlt	r4, r9
 8009abc:	4699      	movlt	r9, r3
 8009abe:	6927      	ldr	r7, [r4, #16]
 8009ac0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009ac4:	68a3      	ldr	r3, [r4, #8]
 8009ac6:	6861      	ldr	r1, [r4, #4]
 8009ac8:	eb07 060a 	add.w	r6, r7, sl
 8009acc:	42b3      	cmp	r3, r6
 8009ace:	b085      	sub	sp, #20
 8009ad0:	bfb8      	it	lt
 8009ad2:	3101      	addlt	r1, #1
 8009ad4:	f7ff fe8e 	bl	80097f4 <_Balloc>
 8009ad8:	b930      	cbnz	r0, 8009ae8 <__multiply+0x44>
 8009ada:	4602      	mov	r2, r0
 8009adc:	4b44      	ldr	r3, [pc, #272]	; (8009bf0 <__multiply+0x14c>)
 8009ade:	4845      	ldr	r0, [pc, #276]	; (8009bf4 <__multiply+0x150>)
 8009ae0:	f240 115d 	movw	r1, #349	; 0x15d
 8009ae4:	f001 f844 	bl	800ab70 <__assert_func>
 8009ae8:	f100 0514 	add.w	r5, r0, #20
 8009aec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009af0:	462b      	mov	r3, r5
 8009af2:	2200      	movs	r2, #0
 8009af4:	4543      	cmp	r3, r8
 8009af6:	d321      	bcc.n	8009b3c <__multiply+0x98>
 8009af8:	f104 0314 	add.w	r3, r4, #20
 8009afc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009b00:	f109 0314 	add.w	r3, r9, #20
 8009b04:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009b08:	9202      	str	r2, [sp, #8]
 8009b0a:	1b3a      	subs	r2, r7, r4
 8009b0c:	3a15      	subs	r2, #21
 8009b0e:	f022 0203 	bic.w	r2, r2, #3
 8009b12:	3204      	adds	r2, #4
 8009b14:	f104 0115 	add.w	r1, r4, #21
 8009b18:	428f      	cmp	r7, r1
 8009b1a:	bf38      	it	cc
 8009b1c:	2204      	movcc	r2, #4
 8009b1e:	9201      	str	r2, [sp, #4]
 8009b20:	9a02      	ldr	r2, [sp, #8]
 8009b22:	9303      	str	r3, [sp, #12]
 8009b24:	429a      	cmp	r2, r3
 8009b26:	d80c      	bhi.n	8009b42 <__multiply+0x9e>
 8009b28:	2e00      	cmp	r6, #0
 8009b2a:	dd03      	ble.n	8009b34 <__multiply+0x90>
 8009b2c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d05a      	beq.n	8009bea <__multiply+0x146>
 8009b34:	6106      	str	r6, [r0, #16]
 8009b36:	b005      	add	sp, #20
 8009b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b3c:	f843 2b04 	str.w	r2, [r3], #4
 8009b40:	e7d8      	b.n	8009af4 <__multiply+0x50>
 8009b42:	f8b3 a000 	ldrh.w	sl, [r3]
 8009b46:	f1ba 0f00 	cmp.w	sl, #0
 8009b4a:	d024      	beq.n	8009b96 <__multiply+0xf2>
 8009b4c:	f104 0e14 	add.w	lr, r4, #20
 8009b50:	46a9      	mov	r9, r5
 8009b52:	f04f 0c00 	mov.w	ip, #0
 8009b56:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009b5a:	f8d9 1000 	ldr.w	r1, [r9]
 8009b5e:	fa1f fb82 	uxth.w	fp, r2
 8009b62:	b289      	uxth	r1, r1
 8009b64:	fb0a 110b 	mla	r1, sl, fp, r1
 8009b68:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009b6c:	f8d9 2000 	ldr.w	r2, [r9]
 8009b70:	4461      	add	r1, ip
 8009b72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009b76:	fb0a c20b 	mla	r2, sl, fp, ip
 8009b7a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009b7e:	b289      	uxth	r1, r1
 8009b80:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009b84:	4577      	cmp	r7, lr
 8009b86:	f849 1b04 	str.w	r1, [r9], #4
 8009b8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009b8e:	d8e2      	bhi.n	8009b56 <__multiply+0xb2>
 8009b90:	9a01      	ldr	r2, [sp, #4]
 8009b92:	f845 c002 	str.w	ip, [r5, r2]
 8009b96:	9a03      	ldr	r2, [sp, #12]
 8009b98:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009b9c:	3304      	adds	r3, #4
 8009b9e:	f1b9 0f00 	cmp.w	r9, #0
 8009ba2:	d020      	beq.n	8009be6 <__multiply+0x142>
 8009ba4:	6829      	ldr	r1, [r5, #0]
 8009ba6:	f104 0c14 	add.w	ip, r4, #20
 8009baa:	46ae      	mov	lr, r5
 8009bac:	f04f 0a00 	mov.w	sl, #0
 8009bb0:	f8bc b000 	ldrh.w	fp, [ip]
 8009bb4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009bb8:	fb09 220b 	mla	r2, r9, fp, r2
 8009bbc:	4492      	add	sl, r2
 8009bbe:	b289      	uxth	r1, r1
 8009bc0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009bc4:	f84e 1b04 	str.w	r1, [lr], #4
 8009bc8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009bcc:	f8be 1000 	ldrh.w	r1, [lr]
 8009bd0:	0c12      	lsrs	r2, r2, #16
 8009bd2:	fb09 1102 	mla	r1, r9, r2, r1
 8009bd6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009bda:	4567      	cmp	r7, ip
 8009bdc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009be0:	d8e6      	bhi.n	8009bb0 <__multiply+0x10c>
 8009be2:	9a01      	ldr	r2, [sp, #4]
 8009be4:	50a9      	str	r1, [r5, r2]
 8009be6:	3504      	adds	r5, #4
 8009be8:	e79a      	b.n	8009b20 <__multiply+0x7c>
 8009bea:	3e01      	subs	r6, #1
 8009bec:	e79c      	b.n	8009b28 <__multiply+0x84>
 8009bee:	bf00      	nop
 8009bf0:	0800b2a0 	.word	0x0800b2a0
 8009bf4:	0800b390 	.word	0x0800b390

08009bf8 <__pow5mult>:
 8009bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bfc:	4615      	mov	r5, r2
 8009bfe:	f012 0203 	ands.w	r2, r2, #3
 8009c02:	4606      	mov	r6, r0
 8009c04:	460f      	mov	r7, r1
 8009c06:	d007      	beq.n	8009c18 <__pow5mult+0x20>
 8009c08:	4c25      	ldr	r4, [pc, #148]	; (8009ca0 <__pow5mult+0xa8>)
 8009c0a:	3a01      	subs	r2, #1
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009c12:	f7ff fe51 	bl	80098b8 <__multadd>
 8009c16:	4607      	mov	r7, r0
 8009c18:	10ad      	asrs	r5, r5, #2
 8009c1a:	d03d      	beq.n	8009c98 <__pow5mult+0xa0>
 8009c1c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009c1e:	b97c      	cbnz	r4, 8009c40 <__pow5mult+0x48>
 8009c20:	2010      	movs	r0, #16
 8009c22:	f7ff fdbf 	bl	80097a4 <malloc>
 8009c26:	4602      	mov	r2, r0
 8009c28:	6270      	str	r0, [r6, #36]	; 0x24
 8009c2a:	b928      	cbnz	r0, 8009c38 <__pow5mult+0x40>
 8009c2c:	4b1d      	ldr	r3, [pc, #116]	; (8009ca4 <__pow5mult+0xac>)
 8009c2e:	481e      	ldr	r0, [pc, #120]	; (8009ca8 <__pow5mult+0xb0>)
 8009c30:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009c34:	f000 ff9c 	bl	800ab70 <__assert_func>
 8009c38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009c3c:	6004      	str	r4, [r0, #0]
 8009c3e:	60c4      	str	r4, [r0, #12]
 8009c40:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009c44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009c48:	b94c      	cbnz	r4, 8009c5e <__pow5mult+0x66>
 8009c4a:	f240 2171 	movw	r1, #625	; 0x271
 8009c4e:	4630      	mov	r0, r6
 8009c50:	f7ff ff12 	bl	8009a78 <__i2b>
 8009c54:	2300      	movs	r3, #0
 8009c56:	f8c8 0008 	str.w	r0, [r8, #8]
 8009c5a:	4604      	mov	r4, r0
 8009c5c:	6003      	str	r3, [r0, #0]
 8009c5e:	f04f 0900 	mov.w	r9, #0
 8009c62:	07eb      	lsls	r3, r5, #31
 8009c64:	d50a      	bpl.n	8009c7c <__pow5mult+0x84>
 8009c66:	4639      	mov	r1, r7
 8009c68:	4622      	mov	r2, r4
 8009c6a:	4630      	mov	r0, r6
 8009c6c:	f7ff ff1a 	bl	8009aa4 <__multiply>
 8009c70:	4639      	mov	r1, r7
 8009c72:	4680      	mov	r8, r0
 8009c74:	4630      	mov	r0, r6
 8009c76:	f7ff fdfd 	bl	8009874 <_Bfree>
 8009c7a:	4647      	mov	r7, r8
 8009c7c:	106d      	asrs	r5, r5, #1
 8009c7e:	d00b      	beq.n	8009c98 <__pow5mult+0xa0>
 8009c80:	6820      	ldr	r0, [r4, #0]
 8009c82:	b938      	cbnz	r0, 8009c94 <__pow5mult+0x9c>
 8009c84:	4622      	mov	r2, r4
 8009c86:	4621      	mov	r1, r4
 8009c88:	4630      	mov	r0, r6
 8009c8a:	f7ff ff0b 	bl	8009aa4 <__multiply>
 8009c8e:	6020      	str	r0, [r4, #0]
 8009c90:	f8c0 9000 	str.w	r9, [r0]
 8009c94:	4604      	mov	r4, r0
 8009c96:	e7e4      	b.n	8009c62 <__pow5mult+0x6a>
 8009c98:	4638      	mov	r0, r7
 8009c9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c9e:	bf00      	nop
 8009ca0:	0800b4e0 	.word	0x0800b4e0
 8009ca4:	0800b22e 	.word	0x0800b22e
 8009ca8:	0800b390 	.word	0x0800b390

08009cac <__lshift>:
 8009cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cb0:	460c      	mov	r4, r1
 8009cb2:	6849      	ldr	r1, [r1, #4]
 8009cb4:	6923      	ldr	r3, [r4, #16]
 8009cb6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009cba:	68a3      	ldr	r3, [r4, #8]
 8009cbc:	4607      	mov	r7, r0
 8009cbe:	4691      	mov	r9, r2
 8009cc0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009cc4:	f108 0601 	add.w	r6, r8, #1
 8009cc8:	42b3      	cmp	r3, r6
 8009cca:	db0b      	blt.n	8009ce4 <__lshift+0x38>
 8009ccc:	4638      	mov	r0, r7
 8009cce:	f7ff fd91 	bl	80097f4 <_Balloc>
 8009cd2:	4605      	mov	r5, r0
 8009cd4:	b948      	cbnz	r0, 8009cea <__lshift+0x3e>
 8009cd6:	4602      	mov	r2, r0
 8009cd8:	4b2a      	ldr	r3, [pc, #168]	; (8009d84 <__lshift+0xd8>)
 8009cda:	482b      	ldr	r0, [pc, #172]	; (8009d88 <__lshift+0xdc>)
 8009cdc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009ce0:	f000 ff46 	bl	800ab70 <__assert_func>
 8009ce4:	3101      	adds	r1, #1
 8009ce6:	005b      	lsls	r3, r3, #1
 8009ce8:	e7ee      	b.n	8009cc8 <__lshift+0x1c>
 8009cea:	2300      	movs	r3, #0
 8009cec:	f100 0114 	add.w	r1, r0, #20
 8009cf0:	f100 0210 	add.w	r2, r0, #16
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	4553      	cmp	r3, sl
 8009cf8:	db37      	blt.n	8009d6a <__lshift+0xbe>
 8009cfa:	6920      	ldr	r0, [r4, #16]
 8009cfc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009d00:	f104 0314 	add.w	r3, r4, #20
 8009d04:	f019 091f 	ands.w	r9, r9, #31
 8009d08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009d0c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009d10:	d02f      	beq.n	8009d72 <__lshift+0xc6>
 8009d12:	f1c9 0e20 	rsb	lr, r9, #32
 8009d16:	468a      	mov	sl, r1
 8009d18:	f04f 0c00 	mov.w	ip, #0
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	fa02 f209 	lsl.w	r2, r2, r9
 8009d22:	ea42 020c 	orr.w	r2, r2, ip
 8009d26:	f84a 2b04 	str.w	r2, [sl], #4
 8009d2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d2e:	4298      	cmp	r0, r3
 8009d30:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009d34:	d8f2      	bhi.n	8009d1c <__lshift+0x70>
 8009d36:	1b03      	subs	r3, r0, r4
 8009d38:	3b15      	subs	r3, #21
 8009d3a:	f023 0303 	bic.w	r3, r3, #3
 8009d3e:	3304      	adds	r3, #4
 8009d40:	f104 0215 	add.w	r2, r4, #21
 8009d44:	4290      	cmp	r0, r2
 8009d46:	bf38      	it	cc
 8009d48:	2304      	movcc	r3, #4
 8009d4a:	f841 c003 	str.w	ip, [r1, r3]
 8009d4e:	f1bc 0f00 	cmp.w	ip, #0
 8009d52:	d001      	beq.n	8009d58 <__lshift+0xac>
 8009d54:	f108 0602 	add.w	r6, r8, #2
 8009d58:	3e01      	subs	r6, #1
 8009d5a:	4638      	mov	r0, r7
 8009d5c:	612e      	str	r6, [r5, #16]
 8009d5e:	4621      	mov	r1, r4
 8009d60:	f7ff fd88 	bl	8009874 <_Bfree>
 8009d64:	4628      	mov	r0, r5
 8009d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d6a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009d6e:	3301      	adds	r3, #1
 8009d70:	e7c1      	b.n	8009cf6 <__lshift+0x4a>
 8009d72:	3904      	subs	r1, #4
 8009d74:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d78:	f841 2f04 	str.w	r2, [r1, #4]!
 8009d7c:	4298      	cmp	r0, r3
 8009d7e:	d8f9      	bhi.n	8009d74 <__lshift+0xc8>
 8009d80:	e7ea      	b.n	8009d58 <__lshift+0xac>
 8009d82:	bf00      	nop
 8009d84:	0800b2a0 	.word	0x0800b2a0
 8009d88:	0800b390 	.word	0x0800b390

08009d8c <__mcmp>:
 8009d8c:	b530      	push	{r4, r5, lr}
 8009d8e:	6902      	ldr	r2, [r0, #16]
 8009d90:	690c      	ldr	r4, [r1, #16]
 8009d92:	1b12      	subs	r2, r2, r4
 8009d94:	d10e      	bne.n	8009db4 <__mcmp+0x28>
 8009d96:	f100 0314 	add.w	r3, r0, #20
 8009d9a:	3114      	adds	r1, #20
 8009d9c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009da0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009da4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009da8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009dac:	42a5      	cmp	r5, r4
 8009dae:	d003      	beq.n	8009db8 <__mcmp+0x2c>
 8009db0:	d305      	bcc.n	8009dbe <__mcmp+0x32>
 8009db2:	2201      	movs	r2, #1
 8009db4:	4610      	mov	r0, r2
 8009db6:	bd30      	pop	{r4, r5, pc}
 8009db8:	4283      	cmp	r3, r0
 8009dba:	d3f3      	bcc.n	8009da4 <__mcmp+0x18>
 8009dbc:	e7fa      	b.n	8009db4 <__mcmp+0x28>
 8009dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8009dc2:	e7f7      	b.n	8009db4 <__mcmp+0x28>

08009dc4 <__mdiff>:
 8009dc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dc8:	460c      	mov	r4, r1
 8009dca:	4606      	mov	r6, r0
 8009dcc:	4611      	mov	r1, r2
 8009dce:	4620      	mov	r0, r4
 8009dd0:	4690      	mov	r8, r2
 8009dd2:	f7ff ffdb 	bl	8009d8c <__mcmp>
 8009dd6:	1e05      	subs	r5, r0, #0
 8009dd8:	d110      	bne.n	8009dfc <__mdiff+0x38>
 8009dda:	4629      	mov	r1, r5
 8009ddc:	4630      	mov	r0, r6
 8009dde:	f7ff fd09 	bl	80097f4 <_Balloc>
 8009de2:	b930      	cbnz	r0, 8009df2 <__mdiff+0x2e>
 8009de4:	4b3a      	ldr	r3, [pc, #232]	; (8009ed0 <__mdiff+0x10c>)
 8009de6:	4602      	mov	r2, r0
 8009de8:	f240 2132 	movw	r1, #562	; 0x232
 8009dec:	4839      	ldr	r0, [pc, #228]	; (8009ed4 <__mdiff+0x110>)
 8009dee:	f000 febf 	bl	800ab70 <__assert_func>
 8009df2:	2301      	movs	r3, #1
 8009df4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009df8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dfc:	bfa4      	itt	ge
 8009dfe:	4643      	movge	r3, r8
 8009e00:	46a0      	movge	r8, r4
 8009e02:	4630      	mov	r0, r6
 8009e04:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009e08:	bfa6      	itte	ge
 8009e0a:	461c      	movge	r4, r3
 8009e0c:	2500      	movge	r5, #0
 8009e0e:	2501      	movlt	r5, #1
 8009e10:	f7ff fcf0 	bl	80097f4 <_Balloc>
 8009e14:	b920      	cbnz	r0, 8009e20 <__mdiff+0x5c>
 8009e16:	4b2e      	ldr	r3, [pc, #184]	; (8009ed0 <__mdiff+0x10c>)
 8009e18:	4602      	mov	r2, r0
 8009e1a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009e1e:	e7e5      	b.n	8009dec <__mdiff+0x28>
 8009e20:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009e24:	6926      	ldr	r6, [r4, #16]
 8009e26:	60c5      	str	r5, [r0, #12]
 8009e28:	f104 0914 	add.w	r9, r4, #20
 8009e2c:	f108 0514 	add.w	r5, r8, #20
 8009e30:	f100 0e14 	add.w	lr, r0, #20
 8009e34:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009e38:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009e3c:	f108 0210 	add.w	r2, r8, #16
 8009e40:	46f2      	mov	sl, lr
 8009e42:	2100      	movs	r1, #0
 8009e44:	f859 3b04 	ldr.w	r3, [r9], #4
 8009e48:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009e4c:	fa1f f883 	uxth.w	r8, r3
 8009e50:	fa11 f18b 	uxtah	r1, r1, fp
 8009e54:	0c1b      	lsrs	r3, r3, #16
 8009e56:	eba1 0808 	sub.w	r8, r1, r8
 8009e5a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009e5e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009e62:	fa1f f888 	uxth.w	r8, r8
 8009e66:	1419      	asrs	r1, r3, #16
 8009e68:	454e      	cmp	r6, r9
 8009e6a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009e6e:	f84a 3b04 	str.w	r3, [sl], #4
 8009e72:	d8e7      	bhi.n	8009e44 <__mdiff+0x80>
 8009e74:	1b33      	subs	r3, r6, r4
 8009e76:	3b15      	subs	r3, #21
 8009e78:	f023 0303 	bic.w	r3, r3, #3
 8009e7c:	3304      	adds	r3, #4
 8009e7e:	3415      	adds	r4, #21
 8009e80:	42a6      	cmp	r6, r4
 8009e82:	bf38      	it	cc
 8009e84:	2304      	movcc	r3, #4
 8009e86:	441d      	add	r5, r3
 8009e88:	4473      	add	r3, lr
 8009e8a:	469e      	mov	lr, r3
 8009e8c:	462e      	mov	r6, r5
 8009e8e:	4566      	cmp	r6, ip
 8009e90:	d30e      	bcc.n	8009eb0 <__mdiff+0xec>
 8009e92:	f10c 0203 	add.w	r2, ip, #3
 8009e96:	1b52      	subs	r2, r2, r5
 8009e98:	f022 0203 	bic.w	r2, r2, #3
 8009e9c:	3d03      	subs	r5, #3
 8009e9e:	45ac      	cmp	ip, r5
 8009ea0:	bf38      	it	cc
 8009ea2:	2200      	movcc	r2, #0
 8009ea4:	441a      	add	r2, r3
 8009ea6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009eaa:	b17b      	cbz	r3, 8009ecc <__mdiff+0x108>
 8009eac:	6107      	str	r7, [r0, #16]
 8009eae:	e7a3      	b.n	8009df8 <__mdiff+0x34>
 8009eb0:	f856 8b04 	ldr.w	r8, [r6], #4
 8009eb4:	fa11 f288 	uxtah	r2, r1, r8
 8009eb8:	1414      	asrs	r4, r2, #16
 8009eba:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009ebe:	b292      	uxth	r2, r2
 8009ec0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009ec4:	f84e 2b04 	str.w	r2, [lr], #4
 8009ec8:	1421      	asrs	r1, r4, #16
 8009eca:	e7e0      	b.n	8009e8e <__mdiff+0xca>
 8009ecc:	3f01      	subs	r7, #1
 8009ece:	e7ea      	b.n	8009ea6 <__mdiff+0xe2>
 8009ed0:	0800b2a0 	.word	0x0800b2a0
 8009ed4:	0800b390 	.word	0x0800b390

08009ed8 <__ulp>:
 8009ed8:	b082      	sub	sp, #8
 8009eda:	ed8d 0b00 	vstr	d0, [sp]
 8009ede:	9b01      	ldr	r3, [sp, #4]
 8009ee0:	4912      	ldr	r1, [pc, #72]	; (8009f2c <__ulp+0x54>)
 8009ee2:	4019      	ands	r1, r3
 8009ee4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009ee8:	2900      	cmp	r1, #0
 8009eea:	dd05      	ble.n	8009ef8 <__ulp+0x20>
 8009eec:	2200      	movs	r2, #0
 8009eee:	460b      	mov	r3, r1
 8009ef0:	ec43 2b10 	vmov	d0, r2, r3
 8009ef4:	b002      	add	sp, #8
 8009ef6:	4770      	bx	lr
 8009ef8:	4249      	negs	r1, r1
 8009efa:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009efe:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009f02:	f04f 0200 	mov.w	r2, #0
 8009f06:	f04f 0300 	mov.w	r3, #0
 8009f0a:	da04      	bge.n	8009f16 <__ulp+0x3e>
 8009f0c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009f10:	fa41 f300 	asr.w	r3, r1, r0
 8009f14:	e7ec      	b.n	8009ef0 <__ulp+0x18>
 8009f16:	f1a0 0114 	sub.w	r1, r0, #20
 8009f1a:	291e      	cmp	r1, #30
 8009f1c:	bfda      	itte	le
 8009f1e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009f22:	fa20 f101 	lsrle.w	r1, r0, r1
 8009f26:	2101      	movgt	r1, #1
 8009f28:	460a      	mov	r2, r1
 8009f2a:	e7e1      	b.n	8009ef0 <__ulp+0x18>
 8009f2c:	7ff00000 	.word	0x7ff00000

08009f30 <__b2d>:
 8009f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f32:	6905      	ldr	r5, [r0, #16]
 8009f34:	f100 0714 	add.w	r7, r0, #20
 8009f38:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009f3c:	1f2e      	subs	r6, r5, #4
 8009f3e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009f42:	4620      	mov	r0, r4
 8009f44:	f7ff fd48 	bl	80099d8 <__hi0bits>
 8009f48:	f1c0 0320 	rsb	r3, r0, #32
 8009f4c:	280a      	cmp	r0, #10
 8009f4e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009fcc <__b2d+0x9c>
 8009f52:	600b      	str	r3, [r1, #0]
 8009f54:	dc14      	bgt.n	8009f80 <__b2d+0x50>
 8009f56:	f1c0 0e0b 	rsb	lr, r0, #11
 8009f5a:	fa24 f10e 	lsr.w	r1, r4, lr
 8009f5e:	42b7      	cmp	r7, r6
 8009f60:	ea41 030c 	orr.w	r3, r1, ip
 8009f64:	bf34      	ite	cc
 8009f66:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009f6a:	2100      	movcs	r1, #0
 8009f6c:	3015      	adds	r0, #21
 8009f6e:	fa04 f000 	lsl.w	r0, r4, r0
 8009f72:	fa21 f10e 	lsr.w	r1, r1, lr
 8009f76:	ea40 0201 	orr.w	r2, r0, r1
 8009f7a:	ec43 2b10 	vmov	d0, r2, r3
 8009f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f80:	42b7      	cmp	r7, r6
 8009f82:	bf3a      	itte	cc
 8009f84:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009f88:	f1a5 0608 	subcc.w	r6, r5, #8
 8009f8c:	2100      	movcs	r1, #0
 8009f8e:	380b      	subs	r0, #11
 8009f90:	d017      	beq.n	8009fc2 <__b2d+0x92>
 8009f92:	f1c0 0c20 	rsb	ip, r0, #32
 8009f96:	fa04 f500 	lsl.w	r5, r4, r0
 8009f9a:	42be      	cmp	r6, r7
 8009f9c:	fa21 f40c 	lsr.w	r4, r1, ip
 8009fa0:	ea45 0504 	orr.w	r5, r5, r4
 8009fa4:	bf8c      	ite	hi
 8009fa6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009faa:	2400      	movls	r4, #0
 8009fac:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009fb0:	fa01 f000 	lsl.w	r0, r1, r0
 8009fb4:	fa24 f40c 	lsr.w	r4, r4, ip
 8009fb8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009fbc:	ea40 0204 	orr.w	r2, r0, r4
 8009fc0:	e7db      	b.n	8009f7a <__b2d+0x4a>
 8009fc2:	ea44 030c 	orr.w	r3, r4, ip
 8009fc6:	460a      	mov	r2, r1
 8009fc8:	e7d7      	b.n	8009f7a <__b2d+0x4a>
 8009fca:	bf00      	nop
 8009fcc:	3ff00000 	.word	0x3ff00000

08009fd0 <__d2b>:
 8009fd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009fd4:	4689      	mov	r9, r1
 8009fd6:	2101      	movs	r1, #1
 8009fd8:	ec57 6b10 	vmov	r6, r7, d0
 8009fdc:	4690      	mov	r8, r2
 8009fde:	f7ff fc09 	bl	80097f4 <_Balloc>
 8009fe2:	4604      	mov	r4, r0
 8009fe4:	b930      	cbnz	r0, 8009ff4 <__d2b+0x24>
 8009fe6:	4602      	mov	r2, r0
 8009fe8:	4b25      	ldr	r3, [pc, #148]	; (800a080 <__d2b+0xb0>)
 8009fea:	4826      	ldr	r0, [pc, #152]	; (800a084 <__d2b+0xb4>)
 8009fec:	f240 310a 	movw	r1, #778	; 0x30a
 8009ff0:	f000 fdbe 	bl	800ab70 <__assert_func>
 8009ff4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009ff8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009ffc:	bb35      	cbnz	r5, 800a04c <__d2b+0x7c>
 8009ffe:	2e00      	cmp	r6, #0
 800a000:	9301      	str	r3, [sp, #4]
 800a002:	d028      	beq.n	800a056 <__d2b+0x86>
 800a004:	4668      	mov	r0, sp
 800a006:	9600      	str	r6, [sp, #0]
 800a008:	f7ff fd06 	bl	8009a18 <__lo0bits>
 800a00c:	9900      	ldr	r1, [sp, #0]
 800a00e:	b300      	cbz	r0, 800a052 <__d2b+0x82>
 800a010:	9a01      	ldr	r2, [sp, #4]
 800a012:	f1c0 0320 	rsb	r3, r0, #32
 800a016:	fa02 f303 	lsl.w	r3, r2, r3
 800a01a:	430b      	orrs	r3, r1
 800a01c:	40c2      	lsrs	r2, r0
 800a01e:	6163      	str	r3, [r4, #20]
 800a020:	9201      	str	r2, [sp, #4]
 800a022:	9b01      	ldr	r3, [sp, #4]
 800a024:	61a3      	str	r3, [r4, #24]
 800a026:	2b00      	cmp	r3, #0
 800a028:	bf14      	ite	ne
 800a02a:	2202      	movne	r2, #2
 800a02c:	2201      	moveq	r2, #1
 800a02e:	6122      	str	r2, [r4, #16]
 800a030:	b1d5      	cbz	r5, 800a068 <__d2b+0x98>
 800a032:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a036:	4405      	add	r5, r0
 800a038:	f8c9 5000 	str.w	r5, [r9]
 800a03c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a040:	f8c8 0000 	str.w	r0, [r8]
 800a044:	4620      	mov	r0, r4
 800a046:	b003      	add	sp, #12
 800a048:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a04c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a050:	e7d5      	b.n	8009ffe <__d2b+0x2e>
 800a052:	6161      	str	r1, [r4, #20]
 800a054:	e7e5      	b.n	800a022 <__d2b+0x52>
 800a056:	a801      	add	r0, sp, #4
 800a058:	f7ff fcde 	bl	8009a18 <__lo0bits>
 800a05c:	9b01      	ldr	r3, [sp, #4]
 800a05e:	6163      	str	r3, [r4, #20]
 800a060:	2201      	movs	r2, #1
 800a062:	6122      	str	r2, [r4, #16]
 800a064:	3020      	adds	r0, #32
 800a066:	e7e3      	b.n	800a030 <__d2b+0x60>
 800a068:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a06c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a070:	f8c9 0000 	str.w	r0, [r9]
 800a074:	6918      	ldr	r0, [r3, #16]
 800a076:	f7ff fcaf 	bl	80099d8 <__hi0bits>
 800a07a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a07e:	e7df      	b.n	800a040 <__d2b+0x70>
 800a080:	0800b2a0 	.word	0x0800b2a0
 800a084:	0800b390 	.word	0x0800b390

0800a088 <__ratio>:
 800a088:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a08c:	4688      	mov	r8, r1
 800a08e:	4669      	mov	r1, sp
 800a090:	4681      	mov	r9, r0
 800a092:	f7ff ff4d 	bl	8009f30 <__b2d>
 800a096:	a901      	add	r1, sp, #4
 800a098:	4640      	mov	r0, r8
 800a09a:	ec55 4b10 	vmov	r4, r5, d0
 800a09e:	f7ff ff47 	bl	8009f30 <__b2d>
 800a0a2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a0a6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a0aa:	eba3 0c02 	sub.w	ip, r3, r2
 800a0ae:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a0b2:	1a9b      	subs	r3, r3, r2
 800a0b4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a0b8:	ec51 0b10 	vmov	r0, r1, d0
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	bfd6      	itet	le
 800a0c0:	460a      	movle	r2, r1
 800a0c2:	462a      	movgt	r2, r5
 800a0c4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a0c8:	468b      	mov	fp, r1
 800a0ca:	462f      	mov	r7, r5
 800a0cc:	bfd4      	ite	le
 800a0ce:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a0d2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a0d6:	4620      	mov	r0, r4
 800a0d8:	ee10 2a10 	vmov	r2, s0
 800a0dc:	465b      	mov	r3, fp
 800a0de:	4639      	mov	r1, r7
 800a0e0:	f7f6 fbdc 	bl	800089c <__aeabi_ddiv>
 800a0e4:	ec41 0b10 	vmov	d0, r0, r1
 800a0e8:	b003      	add	sp, #12
 800a0ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a0ee <__copybits>:
 800a0ee:	3901      	subs	r1, #1
 800a0f0:	b570      	push	{r4, r5, r6, lr}
 800a0f2:	1149      	asrs	r1, r1, #5
 800a0f4:	6914      	ldr	r4, [r2, #16]
 800a0f6:	3101      	adds	r1, #1
 800a0f8:	f102 0314 	add.w	r3, r2, #20
 800a0fc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a100:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a104:	1f05      	subs	r5, r0, #4
 800a106:	42a3      	cmp	r3, r4
 800a108:	d30c      	bcc.n	800a124 <__copybits+0x36>
 800a10a:	1aa3      	subs	r3, r4, r2
 800a10c:	3b11      	subs	r3, #17
 800a10e:	f023 0303 	bic.w	r3, r3, #3
 800a112:	3211      	adds	r2, #17
 800a114:	42a2      	cmp	r2, r4
 800a116:	bf88      	it	hi
 800a118:	2300      	movhi	r3, #0
 800a11a:	4418      	add	r0, r3
 800a11c:	2300      	movs	r3, #0
 800a11e:	4288      	cmp	r0, r1
 800a120:	d305      	bcc.n	800a12e <__copybits+0x40>
 800a122:	bd70      	pop	{r4, r5, r6, pc}
 800a124:	f853 6b04 	ldr.w	r6, [r3], #4
 800a128:	f845 6f04 	str.w	r6, [r5, #4]!
 800a12c:	e7eb      	b.n	800a106 <__copybits+0x18>
 800a12e:	f840 3b04 	str.w	r3, [r0], #4
 800a132:	e7f4      	b.n	800a11e <__copybits+0x30>

0800a134 <__any_on>:
 800a134:	f100 0214 	add.w	r2, r0, #20
 800a138:	6900      	ldr	r0, [r0, #16]
 800a13a:	114b      	asrs	r3, r1, #5
 800a13c:	4298      	cmp	r0, r3
 800a13e:	b510      	push	{r4, lr}
 800a140:	db11      	blt.n	800a166 <__any_on+0x32>
 800a142:	dd0a      	ble.n	800a15a <__any_on+0x26>
 800a144:	f011 011f 	ands.w	r1, r1, #31
 800a148:	d007      	beq.n	800a15a <__any_on+0x26>
 800a14a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a14e:	fa24 f001 	lsr.w	r0, r4, r1
 800a152:	fa00 f101 	lsl.w	r1, r0, r1
 800a156:	428c      	cmp	r4, r1
 800a158:	d10b      	bne.n	800a172 <__any_on+0x3e>
 800a15a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a15e:	4293      	cmp	r3, r2
 800a160:	d803      	bhi.n	800a16a <__any_on+0x36>
 800a162:	2000      	movs	r0, #0
 800a164:	bd10      	pop	{r4, pc}
 800a166:	4603      	mov	r3, r0
 800a168:	e7f7      	b.n	800a15a <__any_on+0x26>
 800a16a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a16e:	2900      	cmp	r1, #0
 800a170:	d0f5      	beq.n	800a15e <__any_on+0x2a>
 800a172:	2001      	movs	r0, #1
 800a174:	e7f6      	b.n	800a164 <__any_on+0x30>

0800a176 <_calloc_r>:
 800a176:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a178:	fba1 2402 	umull	r2, r4, r1, r2
 800a17c:	b94c      	cbnz	r4, 800a192 <_calloc_r+0x1c>
 800a17e:	4611      	mov	r1, r2
 800a180:	9201      	str	r2, [sp, #4]
 800a182:	f000 f87b 	bl	800a27c <_malloc_r>
 800a186:	9a01      	ldr	r2, [sp, #4]
 800a188:	4605      	mov	r5, r0
 800a18a:	b930      	cbnz	r0, 800a19a <_calloc_r+0x24>
 800a18c:	4628      	mov	r0, r5
 800a18e:	b003      	add	sp, #12
 800a190:	bd30      	pop	{r4, r5, pc}
 800a192:	220c      	movs	r2, #12
 800a194:	6002      	str	r2, [r0, #0]
 800a196:	2500      	movs	r5, #0
 800a198:	e7f8      	b.n	800a18c <_calloc_r+0x16>
 800a19a:	4621      	mov	r1, r4
 800a19c:	f7fc faae 	bl	80066fc <memset>
 800a1a0:	e7f4      	b.n	800a18c <_calloc_r+0x16>
	...

0800a1a4 <_free_r>:
 800a1a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a1a6:	2900      	cmp	r1, #0
 800a1a8:	d044      	beq.n	800a234 <_free_r+0x90>
 800a1aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1ae:	9001      	str	r0, [sp, #4]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	f1a1 0404 	sub.w	r4, r1, #4
 800a1b6:	bfb8      	it	lt
 800a1b8:	18e4      	addlt	r4, r4, r3
 800a1ba:	f000 fe6d 	bl	800ae98 <__malloc_lock>
 800a1be:	4a1e      	ldr	r2, [pc, #120]	; (800a238 <_free_r+0x94>)
 800a1c0:	9801      	ldr	r0, [sp, #4]
 800a1c2:	6813      	ldr	r3, [r2, #0]
 800a1c4:	b933      	cbnz	r3, 800a1d4 <_free_r+0x30>
 800a1c6:	6063      	str	r3, [r4, #4]
 800a1c8:	6014      	str	r4, [r2, #0]
 800a1ca:	b003      	add	sp, #12
 800a1cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a1d0:	f000 be68 	b.w	800aea4 <__malloc_unlock>
 800a1d4:	42a3      	cmp	r3, r4
 800a1d6:	d908      	bls.n	800a1ea <_free_r+0x46>
 800a1d8:	6825      	ldr	r5, [r4, #0]
 800a1da:	1961      	adds	r1, r4, r5
 800a1dc:	428b      	cmp	r3, r1
 800a1de:	bf01      	itttt	eq
 800a1e0:	6819      	ldreq	r1, [r3, #0]
 800a1e2:	685b      	ldreq	r3, [r3, #4]
 800a1e4:	1949      	addeq	r1, r1, r5
 800a1e6:	6021      	streq	r1, [r4, #0]
 800a1e8:	e7ed      	b.n	800a1c6 <_free_r+0x22>
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	b10b      	cbz	r3, 800a1f4 <_free_r+0x50>
 800a1f0:	42a3      	cmp	r3, r4
 800a1f2:	d9fa      	bls.n	800a1ea <_free_r+0x46>
 800a1f4:	6811      	ldr	r1, [r2, #0]
 800a1f6:	1855      	adds	r5, r2, r1
 800a1f8:	42a5      	cmp	r5, r4
 800a1fa:	d10b      	bne.n	800a214 <_free_r+0x70>
 800a1fc:	6824      	ldr	r4, [r4, #0]
 800a1fe:	4421      	add	r1, r4
 800a200:	1854      	adds	r4, r2, r1
 800a202:	42a3      	cmp	r3, r4
 800a204:	6011      	str	r1, [r2, #0]
 800a206:	d1e0      	bne.n	800a1ca <_free_r+0x26>
 800a208:	681c      	ldr	r4, [r3, #0]
 800a20a:	685b      	ldr	r3, [r3, #4]
 800a20c:	6053      	str	r3, [r2, #4]
 800a20e:	4421      	add	r1, r4
 800a210:	6011      	str	r1, [r2, #0]
 800a212:	e7da      	b.n	800a1ca <_free_r+0x26>
 800a214:	d902      	bls.n	800a21c <_free_r+0x78>
 800a216:	230c      	movs	r3, #12
 800a218:	6003      	str	r3, [r0, #0]
 800a21a:	e7d6      	b.n	800a1ca <_free_r+0x26>
 800a21c:	6825      	ldr	r5, [r4, #0]
 800a21e:	1961      	adds	r1, r4, r5
 800a220:	428b      	cmp	r3, r1
 800a222:	bf04      	itt	eq
 800a224:	6819      	ldreq	r1, [r3, #0]
 800a226:	685b      	ldreq	r3, [r3, #4]
 800a228:	6063      	str	r3, [r4, #4]
 800a22a:	bf04      	itt	eq
 800a22c:	1949      	addeq	r1, r1, r5
 800a22e:	6021      	streq	r1, [r4, #0]
 800a230:	6054      	str	r4, [r2, #4]
 800a232:	e7ca      	b.n	800a1ca <_free_r+0x26>
 800a234:	b003      	add	sp, #12
 800a236:	bd30      	pop	{r4, r5, pc}
 800a238:	20000390 	.word	0x20000390

0800a23c <sbrk_aligned>:
 800a23c:	b570      	push	{r4, r5, r6, lr}
 800a23e:	4e0e      	ldr	r6, [pc, #56]	; (800a278 <sbrk_aligned+0x3c>)
 800a240:	460c      	mov	r4, r1
 800a242:	6831      	ldr	r1, [r6, #0]
 800a244:	4605      	mov	r5, r0
 800a246:	b911      	cbnz	r1, 800a24e <sbrk_aligned+0x12>
 800a248:	f000 fb4a 	bl	800a8e0 <_sbrk_r>
 800a24c:	6030      	str	r0, [r6, #0]
 800a24e:	4621      	mov	r1, r4
 800a250:	4628      	mov	r0, r5
 800a252:	f000 fb45 	bl	800a8e0 <_sbrk_r>
 800a256:	1c43      	adds	r3, r0, #1
 800a258:	d00a      	beq.n	800a270 <sbrk_aligned+0x34>
 800a25a:	1cc4      	adds	r4, r0, #3
 800a25c:	f024 0403 	bic.w	r4, r4, #3
 800a260:	42a0      	cmp	r0, r4
 800a262:	d007      	beq.n	800a274 <sbrk_aligned+0x38>
 800a264:	1a21      	subs	r1, r4, r0
 800a266:	4628      	mov	r0, r5
 800a268:	f000 fb3a 	bl	800a8e0 <_sbrk_r>
 800a26c:	3001      	adds	r0, #1
 800a26e:	d101      	bne.n	800a274 <sbrk_aligned+0x38>
 800a270:	f04f 34ff 	mov.w	r4, #4294967295
 800a274:	4620      	mov	r0, r4
 800a276:	bd70      	pop	{r4, r5, r6, pc}
 800a278:	20000394 	.word	0x20000394

0800a27c <_malloc_r>:
 800a27c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a280:	1ccd      	adds	r5, r1, #3
 800a282:	f025 0503 	bic.w	r5, r5, #3
 800a286:	3508      	adds	r5, #8
 800a288:	2d0c      	cmp	r5, #12
 800a28a:	bf38      	it	cc
 800a28c:	250c      	movcc	r5, #12
 800a28e:	2d00      	cmp	r5, #0
 800a290:	4607      	mov	r7, r0
 800a292:	db01      	blt.n	800a298 <_malloc_r+0x1c>
 800a294:	42a9      	cmp	r1, r5
 800a296:	d905      	bls.n	800a2a4 <_malloc_r+0x28>
 800a298:	230c      	movs	r3, #12
 800a29a:	603b      	str	r3, [r7, #0]
 800a29c:	2600      	movs	r6, #0
 800a29e:	4630      	mov	r0, r6
 800a2a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2a4:	4e2e      	ldr	r6, [pc, #184]	; (800a360 <_malloc_r+0xe4>)
 800a2a6:	f000 fdf7 	bl	800ae98 <__malloc_lock>
 800a2aa:	6833      	ldr	r3, [r6, #0]
 800a2ac:	461c      	mov	r4, r3
 800a2ae:	bb34      	cbnz	r4, 800a2fe <_malloc_r+0x82>
 800a2b0:	4629      	mov	r1, r5
 800a2b2:	4638      	mov	r0, r7
 800a2b4:	f7ff ffc2 	bl	800a23c <sbrk_aligned>
 800a2b8:	1c43      	adds	r3, r0, #1
 800a2ba:	4604      	mov	r4, r0
 800a2bc:	d14d      	bne.n	800a35a <_malloc_r+0xde>
 800a2be:	6834      	ldr	r4, [r6, #0]
 800a2c0:	4626      	mov	r6, r4
 800a2c2:	2e00      	cmp	r6, #0
 800a2c4:	d140      	bne.n	800a348 <_malloc_r+0xcc>
 800a2c6:	6823      	ldr	r3, [r4, #0]
 800a2c8:	4631      	mov	r1, r6
 800a2ca:	4638      	mov	r0, r7
 800a2cc:	eb04 0803 	add.w	r8, r4, r3
 800a2d0:	f000 fb06 	bl	800a8e0 <_sbrk_r>
 800a2d4:	4580      	cmp	r8, r0
 800a2d6:	d13a      	bne.n	800a34e <_malloc_r+0xd2>
 800a2d8:	6821      	ldr	r1, [r4, #0]
 800a2da:	3503      	adds	r5, #3
 800a2dc:	1a6d      	subs	r5, r5, r1
 800a2de:	f025 0503 	bic.w	r5, r5, #3
 800a2e2:	3508      	adds	r5, #8
 800a2e4:	2d0c      	cmp	r5, #12
 800a2e6:	bf38      	it	cc
 800a2e8:	250c      	movcc	r5, #12
 800a2ea:	4629      	mov	r1, r5
 800a2ec:	4638      	mov	r0, r7
 800a2ee:	f7ff ffa5 	bl	800a23c <sbrk_aligned>
 800a2f2:	3001      	adds	r0, #1
 800a2f4:	d02b      	beq.n	800a34e <_malloc_r+0xd2>
 800a2f6:	6823      	ldr	r3, [r4, #0]
 800a2f8:	442b      	add	r3, r5
 800a2fa:	6023      	str	r3, [r4, #0]
 800a2fc:	e00e      	b.n	800a31c <_malloc_r+0xa0>
 800a2fe:	6822      	ldr	r2, [r4, #0]
 800a300:	1b52      	subs	r2, r2, r5
 800a302:	d41e      	bmi.n	800a342 <_malloc_r+0xc6>
 800a304:	2a0b      	cmp	r2, #11
 800a306:	d916      	bls.n	800a336 <_malloc_r+0xba>
 800a308:	1961      	adds	r1, r4, r5
 800a30a:	42a3      	cmp	r3, r4
 800a30c:	6025      	str	r5, [r4, #0]
 800a30e:	bf18      	it	ne
 800a310:	6059      	strne	r1, [r3, #4]
 800a312:	6863      	ldr	r3, [r4, #4]
 800a314:	bf08      	it	eq
 800a316:	6031      	streq	r1, [r6, #0]
 800a318:	5162      	str	r2, [r4, r5]
 800a31a:	604b      	str	r3, [r1, #4]
 800a31c:	4638      	mov	r0, r7
 800a31e:	f104 060b 	add.w	r6, r4, #11
 800a322:	f000 fdbf 	bl	800aea4 <__malloc_unlock>
 800a326:	f026 0607 	bic.w	r6, r6, #7
 800a32a:	1d23      	adds	r3, r4, #4
 800a32c:	1af2      	subs	r2, r6, r3
 800a32e:	d0b6      	beq.n	800a29e <_malloc_r+0x22>
 800a330:	1b9b      	subs	r3, r3, r6
 800a332:	50a3      	str	r3, [r4, r2]
 800a334:	e7b3      	b.n	800a29e <_malloc_r+0x22>
 800a336:	6862      	ldr	r2, [r4, #4]
 800a338:	42a3      	cmp	r3, r4
 800a33a:	bf0c      	ite	eq
 800a33c:	6032      	streq	r2, [r6, #0]
 800a33e:	605a      	strne	r2, [r3, #4]
 800a340:	e7ec      	b.n	800a31c <_malloc_r+0xa0>
 800a342:	4623      	mov	r3, r4
 800a344:	6864      	ldr	r4, [r4, #4]
 800a346:	e7b2      	b.n	800a2ae <_malloc_r+0x32>
 800a348:	4634      	mov	r4, r6
 800a34a:	6876      	ldr	r6, [r6, #4]
 800a34c:	e7b9      	b.n	800a2c2 <_malloc_r+0x46>
 800a34e:	230c      	movs	r3, #12
 800a350:	603b      	str	r3, [r7, #0]
 800a352:	4638      	mov	r0, r7
 800a354:	f000 fda6 	bl	800aea4 <__malloc_unlock>
 800a358:	e7a1      	b.n	800a29e <_malloc_r+0x22>
 800a35a:	6025      	str	r5, [r4, #0]
 800a35c:	e7de      	b.n	800a31c <_malloc_r+0xa0>
 800a35e:	bf00      	nop
 800a360:	20000390 	.word	0x20000390

0800a364 <__ssputs_r>:
 800a364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a368:	688e      	ldr	r6, [r1, #8]
 800a36a:	429e      	cmp	r6, r3
 800a36c:	4682      	mov	sl, r0
 800a36e:	460c      	mov	r4, r1
 800a370:	4690      	mov	r8, r2
 800a372:	461f      	mov	r7, r3
 800a374:	d838      	bhi.n	800a3e8 <__ssputs_r+0x84>
 800a376:	898a      	ldrh	r2, [r1, #12]
 800a378:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a37c:	d032      	beq.n	800a3e4 <__ssputs_r+0x80>
 800a37e:	6825      	ldr	r5, [r4, #0]
 800a380:	6909      	ldr	r1, [r1, #16]
 800a382:	eba5 0901 	sub.w	r9, r5, r1
 800a386:	6965      	ldr	r5, [r4, #20]
 800a388:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a38c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a390:	3301      	adds	r3, #1
 800a392:	444b      	add	r3, r9
 800a394:	106d      	asrs	r5, r5, #1
 800a396:	429d      	cmp	r5, r3
 800a398:	bf38      	it	cc
 800a39a:	461d      	movcc	r5, r3
 800a39c:	0553      	lsls	r3, r2, #21
 800a39e:	d531      	bpl.n	800a404 <__ssputs_r+0xa0>
 800a3a0:	4629      	mov	r1, r5
 800a3a2:	f7ff ff6b 	bl	800a27c <_malloc_r>
 800a3a6:	4606      	mov	r6, r0
 800a3a8:	b950      	cbnz	r0, 800a3c0 <__ssputs_r+0x5c>
 800a3aa:	230c      	movs	r3, #12
 800a3ac:	f8ca 3000 	str.w	r3, [sl]
 800a3b0:	89a3      	ldrh	r3, [r4, #12]
 800a3b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3b6:	81a3      	strh	r3, [r4, #12]
 800a3b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a3bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3c0:	6921      	ldr	r1, [r4, #16]
 800a3c2:	464a      	mov	r2, r9
 800a3c4:	f7ff fa08 	bl	80097d8 <memcpy>
 800a3c8:	89a3      	ldrh	r3, [r4, #12]
 800a3ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a3ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3d2:	81a3      	strh	r3, [r4, #12]
 800a3d4:	6126      	str	r6, [r4, #16]
 800a3d6:	6165      	str	r5, [r4, #20]
 800a3d8:	444e      	add	r6, r9
 800a3da:	eba5 0509 	sub.w	r5, r5, r9
 800a3de:	6026      	str	r6, [r4, #0]
 800a3e0:	60a5      	str	r5, [r4, #8]
 800a3e2:	463e      	mov	r6, r7
 800a3e4:	42be      	cmp	r6, r7
 800a3e6:	d900      	bls.n	800a3ea <__ssputs_r+0x86>
 800a3e8:	463e      	mov	r6, r7
 800a3ea:	6820      	ldr	r0, [r4, #0]
 800a3ec:	4632      	mov	r2, r6
 800a3ee:	4641      	mov	r1, r8
 800a3f0:	f000 fd38 	bl	800ae64 <memmove>
 800a3f4:	68a3      	ldr	r3, [r4, #8]
 800a3f6:	1b9b      	subs	r3, r3, r6
 800a3f8:	60a3      	str	r3, [r4, #8]
 800a3fa:	6823      	ldr	r3, [r4, #0]
 800a3fc:	4433      	add	r3, r6
 800a3fe:	6023      	str	r3, [r4, #0]
 800a400:	2000      	movs	r0, #0
 800a402:	e7db      	b.n	800a3bc <__ssputs_r+0x58>
 800a404:	462a      	mov	r2, r5
 800a406:	f000 fd53 	bl	800aeb0 <_realloc_r>
 800a40a:	4606      	mov	r6, r0
 800a40c:	2800      	cmp	r0, #0
 800a40e:	d1e1      	bne.n	800a3d4 <__ssputs_r+0x70>
 800a410:	6921      	ldr	r1, [r4, #16]
 800a412:	4650      	mov	r0, sl
 800a414:	f7ff fec6 	bl	800a1a4 <_free_r>
 800a418:	e7c7      	b.n	800a3aa <__ssputs_r+0x46>
	...

0800a41c <_svfiprintf_r>:
 800a41c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a420:	4698      	mov	r8, r3
 800a422:	898b      	ldrh	r3, [r1, #12]
 800a424:	061b      	lsls	r3, r3, #24
 800a426:	b09d      	sub	sp, #116	; 0x74
 800a428:	4607      	mov	r7, r0
 800a42a:	460d      	mov	r5, r1
 800a42c:	4614      	mov	r4, r2
 800a42e:	d50e      	bpl.n	800a44e <_svfiprintf_r+0x32>
 800a430:	690b      	ldr	r3, [r1, #16]
 800a432:	b963      	cbnz	r3, 800a44e <_svfiprintf_r+0x32>
 800a434:	2140      	movs	r1, #64	; 0x40
 800a436:	f7ff ff21 	bl	800a27c <_malloc_r>
 800a43a:	6028      	str	r0, [r5, #0]
 800a43c:	6128      	str	r0, [r5, #16]
 800a43e:	b920      	cbnz	r0, 800a44a <_svfiprintf_r+0x2e>
 800a440:	230c      	movs	r3, #12
 800a442:	603b      	str	r3, [r7, #0]
 800a444:	f04f 30ff 	mov.w	r0, #4294967295
 800a448:	e0d1      	b.n	800a5ee <_svfiprintf_r+0x1d2>
 800a44a:	2340      	movs	r3, #64	; 0x40
 800a44c:	616b      	str	r3, [r5, #20]
 800a44e:	2300      	movs	r3, #0
 800a450:	9309      	str	r3, [sp, #36]	; 0x24
 800a452:	2320      	movs	r3, #32
 800a454:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a458:	f8cd 800c 	str.w	r8, [sp, #12]
 800a45c:	2330      	movs	r3, #48	; 0x30
 800a45e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a608 <_svfiprintf_r+0x1ec>
 800a462:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a466:	f04f 0901 	mov.w	r9, #1
 800a46a:	4623      	mov	r3, r4
 800a46c:	469a      	mov	sl, r3
 800a46e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a472:	b10a      	cbz	r2, 800a478 <_svfiprintf_r+0x5c>
 800a474:	2a25      	cmp	r2, #37	; 0x25
 800a476:	d1f9      	bne.n	800a46c <_svfiprintf_r+0x50>
 800a478:	ebba 0b04 	subs.w	fp, sl, r4
 800a47c:	d00b      	beq.n	800a496 <_svfiprintf_r+0x7a>
 800a47e:	465b      	mov	r3, fp
 800a480:	4622      	mov	r2, r4
 800a482:	4629      	mov	r1, r5
 800a484:	4638      	mov	r0, r7
 800a486:	f7ff ff6d 	bl	800a364 <__ssputs_r>
 800a48a:	3001      	adds	r0, #1
 800a48c:	f000 80aa 	beq.w	800a5e4 <_svfiprintf_r+0x1c8>
 800a490:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a492:	445a      	add	r2, fp
 800a494:	9209      	str	r2, [sp, #36]	; 0x24
 800a496:	f89a 3000 	ldrb.w	r3, [sl]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	f000 80a2 	beq.w	800a5e4 <_svfiprintf_r+0x1c8>
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	f04f 32ff 	mov.w	r2, #4294967295
 800a4a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4aa:	f10a 0a01 	add.w	sl, sl, #1
 800a4ae:	9304      	str	r3, [sp, #16]
 800a4b0:	9307      	str	r3, [sp, #28]
 800a4b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4b6:	931a      	str	r3, [sp, #104]	; 0x68
 800a4b8:	4654      	mov	r4, sl
 800a4ba:	2205      	movs	r2, #5
 800a4bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4c0:	4851      	ldr	r0, [pc, #324]	; (800a608 <_svfiprintf_r+0x1ec>)
 800a4c2:	f7f5 feb5 	bl	8000230 <memchr>
 800a4c6:	9a04      	ldr	r2, [sp, #16]
 800a4c8:	b9d8      	cbnz	r0, 800a502 <_svfiprintf_r+0xe6>
 800a4ca:	06d0      	lsls	r0, r2, #27
 800a4cc:	bf44      	itt	mi
 800a4ce:	2320      	movmi	r3, #32
 800a4d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4d4:	0711      	lsls	r1, r2, #28
 800a4d6:	bf44      	itt	mi
 800a4d8:	232b      	movmi	r3, #43	; 0x2b
 800a4da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4de:	f89a 3000 	ldrb.w	r3, [sl]
 800a4e2:	2b2a      	cmp	r3, #42	; 0x2a
 800a4e4:	d015      	beq.n	800a512 <_svfiprintf_r+0xf6>
 800a4e6:	9a07      	ldr	r2, [sp, #28]
 800a4e8:	4654      	mov	r4, sl
 800a4ea:	2000      	movs	r0, #0
 800a4ec:	f04f 0c0a 	mov.w	ip, #10
 800a4f0:	4621      	mov	r1, r4
 800a4f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4f6:	3b30      	subs	r3, #48	; 0x30
 800a4f8:	2b09      	cmp	r3, #9
 800a4fa:	d94e      	bls.n	800a59a <_svfiprintf_r+0x17e>
 800a4fc:	b1b0      	cbz	r0, 800a52c <_svfiprintf_r+0x110>
 800a4fe:	9207      	str	r2, [sp, #28]
 800a500:	e014      	b.n	800a52c <_svfiprintf_r+0x110>
 800a502:	eba0 0308 	sub.w	r3, r0, r8
 800a506:	fa09 f303 	lsl.w	r3, r9, r3
 800a50a:	4313      	orrs	r3, r2
 800a50c:	9304      	str	r3, [sp, #16]
 800a50e:	46a2      	mov	sl, r4
 800a510:	e7d2      	b.n	800a4b8 <_svfiprintf_r+0x9c>
 800a512:	9b03      	ldr	r3, [sp, #12]
 800a514:	1d19      	adds	r1, r3, #4
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	9103      	str	r1, [sp, #12]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	bfbb      	ittet	lt
 800a51e:	425b      	neglt	r3, r3
 800a520:	f042 0202 	orrlt.w	r2, r2, #2
 800a524:	9307      	strge	r3, [sp, #28]
 800a526:	9307      	strlt	r3, [sp, #28]
 800a528:	bfb8      	it	lt
 800a52a:	9204      	strlt	r2, [sp, #16]
 800a52c:	7823      	ldrb	r3, [r4, #0]
 800a52e:	2b2e      	cmp	r3, #46	; 0x2e
 800a530:	d10c      	bne.n	800a54c <_svfiprintf_r+0x130>
 800a532:	7863      	ldrb	r3, [r4, #1]
 800a534:	2b2a      	cmp	r3, #42	; 0x2a
 800a536:	d135      	bne.n	800a5a4 <_svfiprintf_r+0x188>
 800a538:	9b03      	ldr	r3, [sp, #12]
 800a53a:	1d1a      	adds	r2, r3, #4
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	9203      	str	r2, [sp, #12]
 800a540:	2b00      	cmp	r3, #0
 800a542:	bfb8      	it	lt
 800a544:	f04f 33ff 	movlt.w	r3, #4294967295
 800a548:	3402      	adds	r4, #2
 800a54a:	9305      	str	r3, [sp, #20]
 800a54c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a618 <_svfiprintf_r+0x1fc>
 800a550:	7821      	ldrb	r1, [r4, #0]
 800a552:	2203      	movs	r2, #3
 800a554:	4650      	mov	r0, sl
 800a556:	f7f5 fe6b 	bl	8000230 <memchr>
 800a55a:	b140      	cbz	r0, 800a56e <_svfiprintf_r+0x152>
 800a55c:	2340      	movs	r3, #64	; 0x40
 800a55e:	eba0 000a 	sub.w	r0, r0, sl
 800a562:	fa03 f000 	lsl.w	r0, r3, r0
 800a566:	9b04      	ldr	r3, [sp, #16]
 800a568:	4303      	orrs	r3, r0
 800a56a:	3401      	adds	r4, #1
 800a56c:	9304      	str	r3, [sp, #16]
 800a56e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a572:	4826      	ldr	r0, [pc, #152]	; (800a60c <_svfiprintf_r+0x1f0>)
 800a574:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a578:	2206      	movs	r2, #6
 800a57a:	f7f5 fe59 	bl	8000230 <memchr>
 800a57e:	2800      	cmp	r0, #0
 800a580:	d038      	beq.n	800a5f4 <_svfiprintf_r+0x1d8>
 800a582:	4b23      	ldr	r3, [pc, #140]	; (800a610 <_svfiprintf_r+0x1f4>)
 800a584:	bb1b      	cbnz	r3, 800a5ce <_svfiprintf_r+0x1b2>
 800a586:	9b03      	ldr	r3, [sp, #12]
 800a588:	3307      	adds	r3, #7
 800a58a:	f023 0307 	bic.w	r3, r3, #7
 800a58e:	3308      	adds	r3, #8
 800a590:	9303      	str	r3, [sp, #12]
 800a592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a594:	4433      	add	r3, r6
 800a596:	9309      	str	r3, [sp, #36]	; 0x24
 800a598:	e767      	b.n	800a46a <_svfiprintf_r+0x4e>
 800a59a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a59e:	460c      	mov	r4, r1
 800a5a0:	2001      	movs	r0, #1
 800a5a2:	e7a5      	b.n	800a4f0 <_svfiprintf_r+0xd4>
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	3401      	adds	r4, #1
 800a5a8:	9305      	str	r3, [sp, #20]
 800a5aa:	4619      	mov	r1, r3
 800a5ac:	f04f 0c0a 	mov.w	ip, #10
 800a5b0:	4620      	mov	r0, r4
 800a5b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5b6:	3a30      	subs	r2, #48	; 0x30
 800a5b8:	2a09      	cmp	r2, #9
 800a5ba:	d903      	bls.n	800a5c4 <_svfiprintf_r+0x1a8>
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d0c5      	beq.n	800a54c <_svfiprintf_r+0x130>
 800a5c0:	9105      	str	r1, [sp, #20]
 800a5c2:	e7c3      	b.n	800a54c <_svfiprintf_r+0x130>
 800a5c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5c8:	4604      	mov	r4, r0
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	e7f0      	b.n	800a5b0 <_svfiprintf_r+0x194>
 800a5ce:	ab03      	add	r3, sp, #12
 800a5d0:	9300      	str	r3, [sp, #0]
 800a5d2:	462a      	mov	r2, r5
 800a5d4:	4b0f      	ldr	r3, [pc, #60]	; (800a614 <_svfiprintf_r+0x1f8>)
 800a5d6:	a904      	add	r1, sp, #16
 800a5d8:	4638      	mov	r0, r7
 800a5da:	f7fc f937 	bl	800684c <_printf_float>
 800a5de:	1c42      	adds	r2, r0, #1
 800a5e0:	4606      	mov	r6, r0
 800a5e2:	d1d6      	bne.n	800a592 <_svfiprintf_r+0x176>
 800a5e4:	89ab      	ldrh	r3, [r5, #12]
 800a5e6:	065b      	lsls	r3, r3, #25
 800a5e8:	f53f af2c 	bmi.w	800a444 <_svfiprintf_r+0x28>
 800a5ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5ee:	b01d      	add	sp, #116	; 0x74
 800a5f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5f4:	ab03      	add	r3, sp, #12
 800a5f6:	9300      	str	r3, [sp, #0]
 800a5f8:	462a      	mov	r2, r5
 800a5fa:	4b06      	ldr	r3, [pc, #24]	; (800a614 <_svfiprintf_r+0x1f8>)
 800a5fc:	a904      	add	r1, sp, #16
 800a5fe:	4638      	mov	r0, r7
 800a600:	f7fc fbc8 	bl	8006d94 <_printf_i>
 800a604:	e7eb      	b.n	800a5de <_svfiprintf_r+0x1c2>
 800a606:	bf00      	nop
 800a608:	0800b4ec 	.word	0x0800b4ec
 800a60c:	0800b4f6 	.word	0x0800b4f6
 800a610:	0800684d 	.word	0x0800684d
 800a614:	0800a365 	.word	0x0800a365
 800a618:	0800b4f2 	.word	0x0800b4f2

0800a61c <__sfputc_r>:
 800a61c:	6893      	ldr	r3, [r2, #8]
 800a61e:	3b01      	subs	r3, #1
 800a620:	2b00      	cmp	r3, #0
 800a622:	b410      	push	{r4}
 800a624:	6093      	str	r3, [r2, #8]
 800a626:	da08      	bge.n	800a63a <__sfputc_r+0x1e>
 800a628:	6994      	ldr	r4, [r2, #24]
 800a62a:	42a3      	cmp	r3, r4
 800a62c:	db01      	blt.n	800a632 <__sfputc_r+0x16>
 800a62e:	290a      	cmp	r1, #10
 800a630:	d103      	bne.n	800a63a <__sfputc_r+0x1e>
 800a632:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a636:	f000 b9bb 	b.w	800a9b0 <__swbuf_r>
 800a63a:	6813      	ldr	r3, [r2, #0]
 800a63c:	1c58      	adds	r0, r3, #1
 800a63e:	6010      	str	r0, [r2, #0]
 800a640:	7019      	strb	r1, [r3, #0]
 800a642:	4608      	mov	r0, r1
 800a644:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a648:	4770      	bx	lr

0800a64a <__sfputs_r>:
 800a64a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a64c:	4606      	mov	r6, r0
 800a64e:	460f      	mov	r7, r1
 800a650:	4614      	mov	r4, r2
 800a652:	18d5      	adds	r5, r2, r3
 800a654:	42ac      	cmp	r4, r5
 800a656:	d101      	bne.n	800a65c <__sfputs_r+0x12>
 800a658:	2000      	movs	r0, #0
 800a65a:	e007      	b.n	800a66c <__sfputs_r+0x22>
 800a65c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a660:	463a      	mov	r2, r7
 800a662:	4630      	mov	r0, r6
 800a664:	f7ff ffda 	bl	800a61c <__sfputc_r>
 800a668:	1c43      	adds	r3, r0, #1
 800a66a:	d1f3      	bne.n	800a654 <__sfputs_r+0xa>
 800a66c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a670 <_vfiprintf_r>:
 800a670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a674:	460d      	mov	r5, r1
 800a676:	b09d      	sub	sp, #116	; 0x74
 800a678:	4614      	mov	r4, r2
 800a67a:	4698      	mov	r8, r3
 800a67c:	4606      	mov	r6, r0
 800a67e:	b118      	cbz	r0, 800a688 <_vfiprintf_r+0x18>
 800a680:	6983      	ldr	r3, [r0, #24]
 800a682:	b90b      	cbnz	r3, 800a688 <_vfiprintf_r+0x18>
 800a684:	f7fe fc7a 	bl	8008f7c <__sinit>
 800a688:	4b89      	ldr	r3, [pc, #548]	; (800a8b0 <_vfiprintf_r+0x240>)
 800a68a:	429d      	cmp	r5, r3
 800a68c:	d11b      	bne.n	800a6c6 <_vfiprintf_r+0x56>
 800a68e:	6875      	ldr	r5, [r6, #4]
 800a690:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a692:	07d9      	lsls	r1, r3, #31
 800a694:	d405      	bmi.n	800a6a2 <_vfiprintf_r+0x32>
 800a696:	89ab      	ldrh	r3, [r5, #12]
 800a698:	059a      	lsls	r2, r3, #22
 800a69a:	d402      	bmi.n	800a6a2 <_vfiprintf_r+0x32>
 800a69c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a69e:	f7ff f87e 	bl	800979e <__retarget_lock_acquire_recursive>
 800a6a2:	89ab      	ldrh	r3, [r5, #12]
 800a6a4:	071b      	lsls	r3, r3, #28
 800a6a6:	d501      	bpl.n	800a6ac <_vfiprintf_r+0x3c>
 800a6a8:	692b      	ldr	r3, [r5, #16]
 800a6aa:	b9eb      	cbnz	r3, 800a6e8 <_vfiprintf_r+0x78>
 800a6ac:	4629      	mov	r1, r5
 800a6ae:	4630      	mov	r0, r6
 800a6b0:	f000 f9f0 	bl	800aa94 <__swsetup_r>
 800a6b4:	b1c0      	cbz	r0, 800a6e8 <_vfiprintf_r+0x78>
 800a6b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6b8:	07dc      	lsls	r4, r3, #31
 800a6ba:	d50e      	bpl.n	800a6da <_vfiprintf_r+0x6a>
 800a6bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a6c0:	b01d      	add	sp, #116	; 0x74
 800a6c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6c6:	4b7b      	ldr	r3, [pc, #492]	; (800a8b4 <_vfiprintf_r+0x244>)
 800a6c8:	429d      	cmp	r5, r3
 800a6ca:	d101      	bne.n	800a6d0 <_vfiprintf_r+0x60>
 800a6cc:	68b5      	ldr	r5, [r6, #8]
 800a6ce:	e7df      	b.n	800a690 <_vfiprintf_r+0x20>
 800a6d0:	4b79      	ldr	r3, [pc, #484]	; (800a8b8 <_vfiprintf_r+0x248>)
 800a6d2:	429d      	cmp	r5, r3
 800a6d4:	bf08      	it	eq
 800a6d6:	68f5      	ldreq	r5, [r6, #12]
 800a6d8:	e7da      	b.n	800a690 <_vfiprintf_r+0x20>
 800a6da:	89ab      	ldrh	r3, [r5, #12]
 800a6dc:	0598      	lsls	r0, r3, #22
 800a6de:	d4ed      	bmi.n	800a6bc <_vfiprintf_r+0x4c>
 800a6e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6e2:	f7ff f85d 	bl	80097a0 <__retarget_lock_release_recursive>
 800a6e6:	e7e9      	b.n	800a6bc <_vfiprintf_r+0x4c>
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	9309      	str	r3, [sp, #36]	; 0x24
 800a6ec:	2320      	movs	r3, #32
 800a6ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a6f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6f6:	2330      	movs	r3, #48	; 0x30
 800a6f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a8bc <_vfiprintf_r+0x24c>
 800a6fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a700:	f04f 0901 	mov.w	r9, #1
 800a704:	4623      	mov	r3, r4
 800a706:	469a      	mov	sl, r3
 800a708:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a70c:	b10a      	cbz	r2, 800a712 <_vfiprintf_r+0xa2>
 800a70e:	2a25      	cmp	r2, #37	; 0x25
 800a710:	d1f9      	bne.n	800a706 <_vfiprintf_r+0x96>
 800a712:	ebba 0b04 	subs.w	fp, sl, r4
 800a716:	d00b      	beq.n	800a730 <_vfiprintf_r+0xc0>
 800a718:	465b      	mov	r3, fp
 800a71a:	4622      	mov	r2, r4
 800a71c:	4629      	mov	r1, r5
 800a71e:	4630      	mov	r0, r6
 800a720:	f7ff ff93 	bl	800a64a <__sfputs_r>
 800a724:	3001      	adds	r0, #1
 800a726:	f000 80aa 	beq.w	800a87e <_vfiprintf_r+0x20e>
 800a72a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a72c:	445a      	add	r2, fp
 800a72e:	9209      	str	r2, [sp, #36]	; 0x24
 800a730:	f89a 3000 	ldrb.w	r3, [sl]
 800a734:	2b00      	cmp	r3, #0
 800a736:	f000 80a2 	beq.w	800a87e <_vfiprintf_r+0x20e>
 800a73a:	2300      	movs	r3, #0
 800a73c:	f04f 32ff 	mov.w	r2, #4294967295
 800a740:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a744:	f10a 0a01 	add.w	sl, sl, #1
 800a748:	9304      	str	r3, [sp, #16]
 800a74a:	9307      	str	r3, [sp, #28]
 800a74c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a750:	931a      	str	r3, [sp, #104]	; 0x68
 800a752:	4654      	mov	r4, sl
 800a754:	2205      	movs	r2, #5
 800a756:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a75a:	4858      	ldr	r0, [pc, #352]	; (800a8bc <_vfiprintf_r+0x24c>)
 800a75c:	f7f5 fd68 	bl	8000230 <memchr>
 800a760:	9a04      	ldr	r2, [sp, #16]
 800a762:	b9d8      	cbnz	r0, 800a79c <_vfiprintf_r+0x12c>
 800a764:	06d1      	lsls	r1, r2, #27
 800a766:	bf44      	itt	mi
 800a768:	2320      	movmi	r3, #32
 800a76a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a76e:	0713      	lsls	r3, r2, #28
 800a770:	bf44      	itt	mi
 800a772:	232b      	movmi	r3, #43	; 0x2b
 800a774:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a778:	f89a 3000 	ldrb.w	r3, [sl]
 800a77c:	2b2a      	cmp	r3, #42	; 0x2a
 800a77e:	d015      	beq.n	800a7ac <_vfiprintf_r+0x13c>
 800a780:	9a07      	ldr	r2, [sp, #28]
 800a782:	4654      	mov	r4, sl
 800a784:	2000      	movs	r0, #0
 800a786:	f04f 0c0a 	mov.w	ip, #10
 800a78a:	4621      	mov	r1, r4
 800a78c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a790:	3b30      	subs	r3, #48	; 0x30
 800a792:	2b09      	cmp	r3, #9
 800a794:	d94e      	bls.n	800a834 <_vfiprintf_r+0x1c4>
 800a796:	b1b0      	cbz	r0, 800a7c6 <_vfiprintf_r+0x156>
 800a798:	9207      	str	r2, [sp, #28]
 800a79a:	e014      	b.n	800a7c6 <_vfiprintf_r+0x156>
 800a79c:	eba0 0308 	sub.w	r3, r0, r8
 800a7a0:	fa09 f303 	lsl.w	r3, r9, r3
 800a7a4:	4313      	orrs	r3, r2
 800a7a6:	9304      	str	r3, [sp, #16]
 800a7a8:	46a2      	mov	sl, r4
 800a7aa:	e7d2      	b.n	800a752 <_vfiprintf_r+0xe2>
 800a7ac:	9b03      	ldr	r3, [sp, #12]
 800a7ae:	1d19      	adds	r1, r3, #4
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	9103      	str	r1, [sp, #12]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	bfbb      	ittet	lt
 800a7b8:	425b      	neglt	r3, r3
 800a7ba:	f042 0202 	orrlt.w	r2, r2, #2
 800a7be:	9307      	strge	r3, [sp, #28]
 800a7c0:	9307      	strlt	r3, [sp, #28]
 800a7c2:	bfb8      	it	lt
 800a7c4:	9204      	strlt	r2, [sp, #16]
 800a7c6:	7823      	ldrb	r3, [r4, #0]
 800a7c8:	2b2e      	cmp	r3, #46	; 0x2e
 800a7ca:	d10c      	bne.n	800a7e6 <_vfiprintf_r+0x176>
 800a7cc:	7863      	ldrb	r3, [r4, #1]
 800a7ce:	2b2a      	cmp	r3, #42	; 0x2a
 800a7d0:	d135      	bne.n	800a83e <_vfiprintf_r+0x1ce>
 800a7d2:	9b03      	ldr	r3, [sp, #12]
 800a7d4:	1d1a      	adds	r2, r3, #4
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	9203      	str	r2, [sp, #12]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	bfb8      	it	lt
 800a7de:	f04f 33ff 	movlt.w	r3, #4294967295
 800a7e2:	3402      	adds	r4, #2
 800a7e4:	9305      	str	r3, [sp, #20]
 800a7e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a8cc <_vfiprintf_r+0x25c>
 800a7ea:	7821      	ldrb	r1, [r4, #0]
 800a7ec:	2203      	movs	r2, #3
 800a7ee:	4650      	mov	r0, sl
 800a7f0:	f7f5 fd1e 	bl	8000230 <memchr>
 800a7f4:	b140      	cbz	r0, 800a808 <_vfiprintf_r+0x198>
 800a7f6:	2340      	movs	r3, #64	; 0x40
 800a7f8:	eba0 000a 	sub.w	r0, r0, sl
 800a7fc:	fa03 f000 	lsl.w	r0, r3, r0
 800a800:	9b04      	ldr	r3, [sp, #16]
 800a802:	4303      	orrs	r3, r0
 800a804:	3401      	adds	r4, #1
 800a806:	9304      	str	r3, [sp, #16]
 800a808:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a80c:	482c      	ldr	r0, [pc, #176]	; (800a8c0 <_vfiprintf_r+0x250>)
 800a80e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a812:	2206      	movs	r2, #6
 800a814:	f7f5 fd0c 	bl	8000230 <memchr>
 800a818:	2800      	cmp	r0, #0
 800a81a:	d03f      	beq.n	800a89c <_vfiprintf_r+0x22c>
 800a81c:	4b29      	ldr	r3, [pc, #164]	; (800a8c4 <_vfiprintf_r+0x254>)
 800a81e:	bb1b      	cbnz	r3, 800a868 <_vfiprintf_r+0x1f8>
 800a820:	9b03      	ldr	r3, [sp, #12]
 800a822:	3307      	adds	r3, #7
 800a824:	f023 0307 	bic.w	r3, r3, #7
 800a828:	3308      	adds	r3, #8
 800a82a:	9303      	str	r3, [sp, #12]
 800a82c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a82e:	443b      	add	r3, r7
 800a830:	9309      	str	r3, [sp, #36]	; 0x24
 800a832:	e767      	b.n	800a704 <_vfiprintf_r+0x94>
 800a834:	fb0c 3202 	mla	r2, ip, r2, r3
 800a838:	460c      	mov	r4, r1
 800a83a:	2001      	movs	r0, #1
 800a83c:	e7a5      	b.n	800a78a <_vfiprintf_r+0x11a>
 800a83e:	2300      	movs	r3, #0
 800a840:	3401      	adds	r4, #1
 800a842:	9305      	str	r3, [sp, #20]
 800a844:	4619      	mov	r1, r3
 800a846:	f04f 0c0a 	mov.w	ip, #10
 800a84a:	4620      	mov	r0, r4
 800a84c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a850:	3a30      	subs	r2, #48	; 0x30
 800a852:	2a09      	cmp	r2, #9
 800a854:	d903      	bls.n	800a85e <_vfiprintf_r+0x1ee>
 800a856:	2b00      	cmp	r3, #0
 800a858:	d0c5      	beq.n	800a7e6 <_vfiprintf_r+0x176>
 800a85a:	9105      	str	r1, [sp, #20]
 800a85c:	e7c3      	b.n	800a7e6 <_vfiprintf_r+0x176>
 800a85e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a862:	4604      	mov	r4, r0
 800a864:	2301      	movs	r3, #1
 800a866:	e7f0      	b.n	800a84a <_vfiprintf_r+0x1da>
 800a868:	ab03      	add	r3, sp, #12
 800a86a:	9300      	str	r3, [sp, #0]
 800a86c:	462a      	mov	r2, r5
 800a86e:	4b16      	ldr	r3, [pc, #88]	; (800a8c8 <_vfiprintf_r+0x258>)
 800a870:	a904      	add	r1, sp, #16
 800a872:	4630      	mov	r0, r6
 800a874:	f7fb ffea 	bl	800684c <_printf_float>
 800a878:	4607      	mov	r7, r0
 800a87a:	1c78      	adds	r0, r7, #1
 800a87c:	d1d6      	bne.n	800a82c <_vfiprintf_r+0x1bc>
 800a87e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a880:	07d9      	lsls	r1, r3, #31
 800a882:	d405      	bmi.n	800a890 <_vfiprintf_r+0x220>
 800a884:	89ab      	ldrh	r3, [r5, #12]
 800a886:	059a      	lsls	r2, r3, #22
 800a888:	d402      	bmi.n	800a890 <_vfiprintf_r+0x220>
 800a88a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a88c:	f7fe ff88 	bl	80097a0 <__retarget_lock_release_recursive>
 800a890:	89ab      	ldrh	r3, [r5, #12]
 800a892:	065b      	lsls	r3, r3, #25
 800a894:	f53f af12 	bmi.w	800a6bc <_vfiprintf_r+0x4c>
 800a898:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a89a:	e711      	b.n	800a6c0 <_vfiprintf_r+0x50>
 800a89c:	ab03      	add	r3, sp, #12
 800a89e:	9300      	str	r3, [sp, #0]
 800a8a0:	462a      	mov	r2, r5
 800a8a2:	4b09      	ldr	r3, [pc, #36]	; (800a8c8 <_vfiprintf_r+0x258>)
 800a8a4:	a904      	add	r1, sp, #16
 800a8a6:	4630      	mov	r0, r6
 800a8a8:	f7fc fa74 	bl	8006d94 <_printf_i>
 800a8ac:	e7e4      	b.n	800a878 <_vfiprintf_r+0x208>
 800a8ae:	bf00      	nop
 800a8b0:	0800b2d4 	.word	0x0800b2d4
 800a8b4:	0800b2f4 	.word	0x0800b2f4
 800a8b8:	0800b2b4 	.word	0x0800b2b4
 800a8bc:	0800b4ec 	.word	0x0800b4ec
 800a8c0:	0800b4f6 	.word	0x0800b4f6
 800a8c4:	0800684d 	.word	0x0800684d
 800a8c8:	0800a64b 	.word	0x0800a64b
 800a8cc:	0800b4f2 	.word	0x0800b4f2

0800a8d0 <nan>:
 800a8d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a8d8 <nan+0x8>
 800a8d4:	4770      	bx	lr
 800a8d6:	bf00      	nop
 800a8d8:	00000000 	.word	0x00000000
 800a8dc:	7ff80000 	.word	0x7ff80000

0800a8e0 <_sbrk_r>:
 800a8e0:	b538      	push	{r3, r4, r5, lr}
 800a8e2:	4d06      	ldr	r5, [pc, #24]	; (800a8fc <_sbrk_r+0x1c>)
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	4604      	mov	r4, r0
 800a8e8:	4608      	mov	r0, r1
 800a8ea:	602b      	str	r3, [r5, #0]
 800a8ec:	f7f7 f924 	bl	8001b38 <_sbrk>
 800a8f0:	1c43      	adds	r3, r0, #1
 800a8f2:	d102      	bne.n	800a8fa <_sbrk_r+0x1a>
 800a8f4:	682b      	ldr	r3, [r5, #0]
 800a8f6:	b103      	cbz	r3, 800a8fa <_sbrk_r+0x1a>
 800a8f8:	6023      	str	r3, [r4, #0]
 800a8fa:	bd38      	pop	{r3, r4, r5, pc}
 800a8fc:	20000398 	.word	0x20000398

0800a900 <__sread>:
 800a900:	b510      	push	{r4, lr}
 800a902:	460c      	mov	r4, r1
 800a904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a908:	f000 fb02 	bl	800af10 <_read_r>
 800a90c:	2800      	cmp	r0, #0
 800a90e:	bfab      	itete	ge
 800a910:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a912:	89a3      	ldrhlt	r3, [r4, #12]
 800a914:	181b      	addge	r3, r3, r0
 800a916:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a91a:	bfac      	ite	ge
 800a91c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a91e:	81a3      	strhlt	r3, [r4, #12]
 800a920:	bd10      	pop	{r4, pc}

0800a922 <__swrite>:
 800a922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a926:	461f      	mov	r7, r3
 800a928:	898b      	ldrh	r3, [r1, #12]
 800a92a:	05db      	lsls	r3, r3, #23
 800a92c:	4605      	mov	r5, r0
 800a92e:	460c      	mov	r4, r1
 800a930:	4616      	mov	r6, r2
 800a932:	d505      	bpl.n	800a940 <__swrite+0x1e>
 800a934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a938:	2302      	movs	r3, #2
 800a93a:	2200      	movs	r2, #0
 800a93c:	f000 fa1a 	bl	800ad74 <_lseek_r>
 800a940:	89a3      	ldrh	r3, [r4, #12]
 800a942:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a946:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a94a:	81a3      	strh	r3, [r4, #12]
 800a94c:	4632      	mov	r2, r6
 800a94e:	463b      	mov	r3, r7
 800a950:	4628      	mov	r0, r5
 800a952:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a956:	f000 b88b 	b.w	800aa70 <_write_r>

0800a95a <__sseek>:
 800a95a:	b510      	push	{r4, lr}
 800a95c:	460c      	mov	r4, r1
 800a95e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a962:	f000 fa07 	bl	800ad74 <_lseek_r>
 800a966:	1c43      	adds	r3, r0, #1
 800a968:	89a3      	ldrh	r3, [r4, #12]
 800a96a:	bf15      	itete	ne
 800a96c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a96e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a972:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a976:	81a3      	strheq	r3, [r4, #12]
 800a978:	bf18      	it	ne
 800a97a:	81a3      	strhne	r3, [r4, #12]
 800a97c:	bd10      	pop	{r4, pc}

0800a97e <__sclose>:
 800a97e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a982:	f000 b913 	b.w	800abac <_close_r>

0800a986 <strncmp>:
 800a986:	b510      	push	{r4, lr}
 800a988:	b17a      	cbz	r2, 800a9aa <strncmp+0x24>
 800a98a:	4603      	mov	r3, r0
 800a98c:	3901      	subs	r1, #1
 800a98e:	1884      	adds	r4, r0, r2
 800a990:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a994:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a998:	4290      	cmp	r0, r2
 800a99a:	d101      	bne.n	800a9a0 <strncmp+0x1a>
 800a99c:	42a3      	cmp	r3, r4
 800a99e:	d101      	bne.n	800a9a4 <strncmp+0x1e>
 800a9a0:	1a80      	subs	r0, r0, r2
 800a9a2:	bd10      	pop	{r4, pc}
 800a9a4:	2800      	cmp	r0, #0
 800a9a6:	d1f3      	bne.n	800a990 <strncmp+0xa>
 800a9a8:	e7fa      	b.n	800a9a0 <strncmp+0x1a>
 800a9aa:	4610      	mov	r0, r2
 800a9ac:	e7f9      	b.n	800a9a2 <strncmp+0x1c>
	...

0800a9b0 <__swbuf_r>:
 800a9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9b2:	460e      	mov	r6, r1
 800a9b4:	4614      	mov	r4, r2
 800a9b6:	4605      	mov	r5, r0
 800a9b8:	b118      	cbz	r0, 800a9c2 <__swbuf_r+0x12>
 800a9ba:	6983      	ldr	r3, [r0, #24]
 800a9bc:	b90b      	cbnz	r3, 800a9c2 <__swbuf_r+0x12>
 800a9be:	f7fe fadd 	bl	8008f7c <__sinit>
 800a9c2:	4b21      	ldr	r3, [pc, #132]	; (800aa48 <__swbuf_r+0x98>)
 800a9c4:	429c      	cmp	r4, r3
 800a9c6:	d12b      	bne.n	800aa20 <__swbuf_r+0x70>
 800a9c8:	686c      	ldr	r4, [r5, #4]
 800a9ca:	69a3      	ldr	r3, [r4, #24]
 800a9cc:	60a3      	str	r3, [r4, #8]
 800a9ce:	89a3      	ldrh	r3, [r4, #12]
 800a9d0:	071a      	lsls	r2, r3, #28
 800a9d2:	d52f      	bpl.n	800aa34 <__swbuf_r+0x84>
 800a9d4:	6923      	ldr	r3, [r4, #16]
 800a9d6:	b36b      	cbz	r3, 800aa34 <__swbuf_r+0x84>
 800a9d8:	6923      	ldr	r3, [r4, #16]
 800a9da:	6820      	ldr	r0, [r4, #0]
 800a9dc:	1ac0      	subs	r0, r0, r3
 800a9de:	6963      	ldr	r3, [r4, #20]
 800a9e0:	b2f6      	uxtb	r6, r6
 800a9e2:	4283      	cmp	r3, r0
 800a9e4:	4637      	mov	r7, r6
 800a9e6:	dc04      	bgt.n	800a9f2 <__swbuf_r+0x42>
 800a9e8:	4621      	mov	r1, r4
 800a9ea:	4628      	mov	r0, r5
 800a9ec:	f000 f974 	bl	800acd8 <_fflush_r>
 800a9f0:	bb30      	cbnz	r0, 800aa40 <__swbuf_r+0x90>
 800a9f2:	68a3      	ldr	r3, [r4, #8]
 800a9f4:	3b01      	subs	r3, #1
 800a9f6:	60a3      	str	r3, [r4, #8]
 800a9f8:	6823      	ldr	r3, [r4, #0]
 800a9fa:	1c5a      	adds	r2, r3, #1
 800a9fc:	6022      	str	r2, [r4, #0]
 800a9fe:	701e      	strb	r6, [r3, #0]
 800aa00:	6963      	ldr	r3, [r4, #20]
 800aa02:	3001      	adds	r0, #1
 800aa04:	4283      	cmp	r3, r0
 800aa06:	d004      	beq.n	800aa12 <__swbuf_r+0x62>
 800aa08:	89a3      	ldrh	r3, [r4, #12]
 800aa0a:	07db      	lsls	r3, r3, #31
 800aa0c:	d506      	bpl.n	800aa1c <__swbuf_r+0x6c>
 800aa0e:	2e0a      	cmp	r6, #10
 800aa10:	d104      	bne.n	800aa1c <__swbuf_r+0x6c>
 800aa12:	4621      	mov	r1, r4
 800aa14:	4628      	mov	r0, r5
 800aa16:	f000 f95f 	bl	800acd8 <_fflush_r>
 800aa1a:	b988      	cbnz	r0, 800aa40 <__swbuf_r+0x90>
 800aa1c:	4638      	mov	r0, r7
 800aa1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa20:	4b0a      	ldr	r3, [pc, #40]	; (800aa4c <__swbuf_r+0x9c>)
 800aa22:	429c      	cmp	r4, r3
 800aa24:	d101      	bne.n	800aa2a <__swbuf_r+0x7a>
 800aa26:	68ac      	ldr	r4, [r5, #8]
 800aa28:	e7cf      	b.n	800a9ca <__swbuf_r+0x1a>
 800aa2a:	4b09      	ldr	r3, [pc, #36]	; (800aa50 <__swbuf_r+0xa0>)
 800aa2c:	429c      	cmp	r4, r3
 800aa2e:	bf08      	it	eq
 800aa30:	68ec      	ldreq	r4, [r5, #12]
 800aa32:	e7ca      	b.n	800a9ca <__swbuf_r+0x1a>
 800aa34:	4621      	mov	r1, r4
 800aa36:	4628      	mov	r0, r5
 800aa38:	f000 f82c 	bl	800aa94 <__swsetup_r>
 800aa3c:	2800      	cmp	r0, #0
 800aa3e:	d0cb      	beq.n	800a9d8 <__swbuf_r+0x28>
 800aa40:	f04f 37ff 	mov.w	r7, #4294967295
 800aa44:	e7ea      	b.n	800aa1c <__swbuf_r+0x6c>
 800aa46:	bf00      	nop
 800aa48:	0800b2d4 	.word	0x0800b2d4
 800aa4c:	0800b2f4 	.word	0x0800b2f4
 800aa50:	0800b2b4 	.word	0x0800b2b4

0800aa54 <__ascii_wctomb>:
 800aa54:	b149      	cbz	r1, 800aa6a <__ascii_wctomb+0x16>
 800aa56:	2aff      	cmp	r2, #255	; 0xff
 800aa58:	bf85      	ittet	hi
 800aa5a:	238a      	movhi	r3, #138	; 0x8a
 800aa5c:	6003      	strhi	r3, [r0, #0]
 800aa5e:	700a      	strbls	r2, [r1, #0]
 800aa60:	f04f 30ff 	movhi.w	r0, #4294967295
 800aa64:	bf98      	it	ls
 800aa66:	2001      	movls	r0, #1
 800aa68:	4770      	bx	lr
 800aa6a:	4608      	mov	r0, r1
 800aa6c:	4770      	bx	lr
	...

0800aa70 <_write_r>:
 800aa70:	b538      	push	{r3, r4, r5, lr}
 800aa72:	4d07      	ldr	r5, [pc, #28]	; (800aa90 <_write_r+0x20>)
 800aa74:	4604      	mov	r4, r0
 800aa76:	4608      	mov	r0, r1
 800aa78:	4611      	mov	r1, r2
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	602a      	str	r2, [r5, #0]
 800aa7e:	461a      	mov	r2, r3
 800aa80:	f7f7 f809 	bl	8001a96 <_write>
 800aa84:	1c43      	adds	r3, r0, #1
 800aa86:	d102      	bne.n	800aa8e <_write_r+0x1e>
 800aa88:	682b      	ldr	r3, [r5, #0]
 800aa8a:	b103      	cbz	r3, 800aa8e <_write_r+0x1e>
 800aa8c:	6023      	str	r3, [r4, #0]
 800aa8e:	bd38      	pop	{r3, r4, r5, pc}
 800aa90:	20000398 	.word	0x20000398

0800aa94 <__swsetup_r>:
 800aa94:	4b32      	ldr	r3, [pc, #200]	; (800ab60 <__swsetup_r+0xcc>)
 800aa96:	b570      	push	{r4, r5, r6, lr}
 800aa98:	681d      	ldr	r5, [r3, #0]
 800aa9a:	4606      	mov	r6, r0
 800aa9c:	460c      	mov	r4, r1
 800aa9e:	b125      	cbz	r5, 800aaaa <__swsetup_r+0x16>
 800aaa0:	69ab      	ldr	r3, [r5, #24]
 800aaa2:	b913      	cbnz	r3, 800aaaa <__swsetup_r+0x16>
 800aaa4:	4628      	mov	r0, r5
 800aaa6:	f7fe fa69 	bl	8008f7c <__sinit>
 800aaaa:	4b2e      	ldr	r3, [pc, #184]	; (800ab64 <__swsetup_r+0xd0>)
 800aaac:	429c      	cmp	r4, r3
 800aaae:	d10f      	bne.n	800aad0 <__swsetup_r+0x3c>
 800aab0:	686c      	ldr	r4, [r5, #4]
 800aab2:	89a3      	ldrh	r3, [r4, #12]
 800aab4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aab8:	0719      	lsls	r1, r3, #28
 800aaba:	d42c      	bmi.n	800ab16 <__swsetup_r+0x82>
 800aabc:	06dd      	lsls	r5, r3, #27
 800aabe:	d411      	bmi.n	800aae4 <__swsetup_r+0x50>
 800aac0:	2309      	movs	r3, #9
 800aac2:	6033      	str	r3, [r6, #0]
 800aac4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aac8:	81a3      	strh	r3, [r4, #12]
 800aaca:	f04f 30ff 	mov.w	r0, #4294967295
 800aace:	e03e      	b.n	800ab4e <__swsetup_r+0xba>
 800aad0:	4b25      	ldr	r3, [pc, #148]	; (800ab68 <__swsetup_r+0xd4>)
 800aad2:	429c      	cmp	r4, r3
 800aad4:	d101      	bne.n	800aada <__swsetup_r+0x46>
 800aad6:	68ac      	ldr	r4, [r5, #8]
 800aad8:	e7eb      	b.n	800aab2 <__swsetup_r+0x1e>
 800aada:	4b24      	ldr	r3, [pc, #144]	; (800ab6c <__swsetup_r+0xd8>)
 800aadc:	429c      	cmp	r4, r3
 800aade:	bf08      	it	eq
 800aae0:	68ec      	ldreq	r4, [r5, #12]
 800aae2:	e7e6      	b.n	800aab2 <__swsetup_r+0x1e>
 800aae4:	0758      	lsls	r0, r3, #29
 800aae6:	d512      	bpl.n	800ab0e <__swsetup_r+0x7a>
 800aae8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aaea:	b141      	cbz	r1, 800aafe <__swsetup_r+0x6a>
 800aaec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aaf0:	4299      	cmp	r1, r3
 800aaf2:	d002      	beq.n	800aafa <__swsetup_r+0x66>
 800aaf4:	4630      	mov	r0, r6
 800aaf6:	f7ff fb55 	bl	800a1a4 <_free_r>
 800aafa:	2300      	movs	r3, #0
 800aafc:	6363      	str	r3, [r4, #52]	; 0x34
 800aafe:	89a3      	ldrh	r3, [r4, #12]
 800ab00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ab04:	81a3      	strh	r3, [r4, #12]
 800ab06:	2300      	movs	r3, #0
 800ab08:	6063      	str	r3, [r4, #4]
 800ab0a:	6923      	ldr	r3, [r4, #16]
 800ab0c:	6023      	str	r3, [r4, #0]
 800ab0e:	89a3      	ldrh	r3, [r4, #12]
 800ab10:	f043 0308 	orr.w	r3, r3, #8
 800ab14:	81a3      	strh	r3, [r4, #12]
 800ab16:	6923      	ldr	r3, [r4, #16]
 800ab18:	b94b      	cbnz	r3, 800ab2e <__swsetup_r+0x9a>
 800ab1a:	89a3      	ldrh	r3, [r4, #12]
 800ab1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ab20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab24:	d003      	beq.n	800ab2e <__swsetup_r+0x9a>
 800ab26:	4621      	mov	r1, r4
 800ab28:	4630      	mov	r0, r6
 800ab2a:	f000 f95b 	bl	800ade4 <__smakebuf_r>
 800ab2e:	89a0      	ldrh	r0, [r4, #12]
 800ab30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab34:	f010 0301 	ands.w	r3, r0, #1
 800ab38:	d00a      	beq.n	800ab50 <__swsetup_r+0xbc>
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	60a3      	str	r3, [r4, #8]
 800ab3e:	6963      	ldr	r3, [r4, #20]
 800ab40:	425b      	negs	r3, r3
 800ab42:	61a3      	str	r3, [r4, #24]
 800ab44:	6923      	ldr	r3, [r4, #16]
 800ab46:	b943      	cbnz	r3, 800ab5a <__swsetup_r+0xc6>
 800ab48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ab4c:	d1ba      	bne.n	800aac4 <__swsetup_r+0x30>
 800ab4e:	bd70      	pop	{r4, r5, r6, pc}
 800ab50:	0781      	lsls	r1, r0, #30
 800ab52:	bf58      	it	pl
 800ab54:	6963      	ldrpl	r3, [r4, #20]
 800ab56:	60a3      	str	r3, [r4, #8]
 800ab58:	e7f4      	b.n	800ab44 <__swsetup_r+0xb0>
 800ab5a:	2000      	movs	r0, #0
 800ab5c:	e7f7      	b.n	800ab4e <__swsetup_r+0xba>
 800ab5e:	bf00      	nop
 800ab60:	2000000c 	.word	0x2000000c
 800ab64:	0800b2d4 	.word	0x0800b2d4
 800ab68:	0800b2f4 	.word	0x0800b2f4
 800ab6c:	0800b2b4 	.word	0x0800b2b4

0800ab70 <__assert_func>:
 800ab70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ab72:	4614      	mov	r4, r2
 800ab74:	461a      	mov	r2, r3
 800ab76:	4b09      	ldr	r3, [pc, #36]	; (800ab9c <__assert_func+0x2c>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	4605      	mov	r5, r0
 800ab7c:	68d8      	ldr	r0, [r3, #12]
 800ab7e:	b14c      	cbz	r4, 800ab94 <__assert_func+0x24>
 800ab80:	4b07      	ldr	r3, [pc, #28]	; (800aba0 <__assert_func+0x30>)
 800ab82:	9100      	str	r1, [sp, #0]
 800ab84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ab88:	4906      	ldr	r1, [pc, #24]	; (800aba4 <__assert_func+0x34>)
 800ab8a:	462b      	mov	r3, r5
 800ab8c:	f000 f8e0 	bl	800ad50 <fiprintf>
 800ab90:	f000 f9d0 	bl	800af34 <abort>
 800ab94:	4b04      	ldr	r3, [pc, #16]	; (800aba8 <__assert_func+0x38>)
 800ab96:	461c      	mov	r4, r3
 800ab98:	e7f3      	b.n	800ab82 <__assert_func+0x12>
 800ab9a:	bf00      	nop
 800ab9c:	2000000c 	.word	0x2000000c
 800aba0:	0800b4fd 	.word	0x0800b4fd
 800aba4:	0800b50a 	.word	0x0800b50a
 800aba8:	0800b538 	.word	0x0800b538

0800abac <_close_r>:
 800abac:	b538      	push	{r3, r4, r5, lr}
 800abae:	4d06      	ldr	r5, [pc, #24]	; (800abc8 <_close_r+0x1c>)
 800abb0:	2300      	movs	r3, #0
 800abb2:	4604      	mov	r4, r0
 800abb4:	4608      	mov	r0, r1
 800abb6:	602b      	str	r3, [r5, #0]
 800abb8:	f7f6 ff89 	bl	8001ace <_close>
 800abbc:	1c43      	adds	r3, r0, #1
 800abbe:	d102      	bne.n	800abc6 <_close_r+0x1a>
 800abc0:	682b      	ldr	r3, [r5, #0]
 800abc2:	b103      	cbz	r3, 800abc6 <_close_r+0x1a>
 800abc4:	6023      	str	r3, [r4, #0]
 800abc6:	bd38      	pop	{r3, r4, r5, pc}
 800abc8:	20000398 	.word	0x20000398

0800abcc <__sflush_r>:
 800abcc:	898a      	ldrh	r2, [r1, #12]
 800abce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abd2:	4605      	mov	r5, r0
 800abd4:	0710      	lsls	r0, r2, #28
 800abd6:	460c      	mov	r4, r1
 800abd8:	d458      	bmi.n	800ac8c <__sflush_r+0xc0>
 800abda:	684b      	ldr	r3, [r1, #4]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	dc05      	bgt.n	800abec <__sflush_r+0x20>
 800abe0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	dc02      	bgt.n	800abec <__sflush_r+0x20>
 800abe6:	2000      	movs	r0, #0
 800abe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800abee:	2e00      	cmp	r6, #0
 800abf0:	d0f9      	beq.n	800abe6 <__sflush_r+0x1a>
 800abf2:	2300      	movs	r3, #0
 800abf4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800abf8:	682f      	ldr	r7, [r5, #0]
 800abfa:	602b      	str	r3, [r5, #0]
 800abfc:	d032      	beq.n	800ac64 <__sflush_r+0x98>
 800abfe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ac00:	89a3      	ldrh	r3, [r4, #12]
 800ac02:	075a      	lsls	r2, r3, #29
 800ac04:	d505      	bpl.n	800ac12 <__sflush_r+0x46>
 800ac06:	6863      	ldr	r3, [r4, #4]
 800ac08:	1ac0      	subs	r0, r0, r3
 800ac0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ac0c:	b10b      	cbz	r3, 800ac12 <__sflush_r+0x46>
 800ac0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ac10:	1ac0      	subs	r0, r0, r3
 800ac12:	2300      	movs	r3, #0
 800ac14:	4602      	mov	r2, r0
 800ac16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac18:	6a21      	ldr	r1, [r4, #32]
 800ac1a:	4628      	mov	r0, r5
 800ac1c:	47b0      	blx	r6
 800ac1e:	1c43      	adds	r3, r0, #1
 800ac20:	89a3      	ldrh	r3, [r4, #12]
 800ac22:	d106      	bne.n	800ac32 <__sflush_r+0x66>
 800ac24:	6829      	ldr	r1, [r5, #0]
 800ac26:	291d      	cmp	r1, #29
 800ac28:	d82c      	bhi.n	800ac84 <__sflush_r+0xb8>
 800ac2a:	4a2a      	ldr	r2, [pc, #168]	; (800acd4 <__sflush_r+0x108>)
 800ac2c:	40ca      	lsrs	r2, r1
 800ac2e:	07d6      	lsls	r6, r2, #31
 800ac30:	d528      	bpl.n	800ac84 <__sflush_r+0xb8>
 800ac32:	2200      	movs	r2, #0
 800ac34:	6062      	str	r2, [r4, #4]
 800ac36:	04d9      	lsls	r1, r3, #19
 800ac38:	6922      	ldr	r2, [r4, #16]
 800ac3a:	6022      	str	r2, [r4, #0]
 800ac3c:	d504      	bpl.n	800ac48 <__sflush_r+0x7c>
 800ac3e:	1c42      	adds	r2, r0, #1
 800ac40:	d101      	bne.n	800ac46 <__sflush_r+0x7a>
 800ac42:	682b      	ldr	r3, [r5, #0]
 800ac44:	b903      	cbnz	r3, 800ac48 <__sflush_r+0x7c>
 800ac46:	6560      	str	r0, [r4, #84]	; 0x54
 800ac48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac4a:	602f      	str	r7, [r5, #0]
 800ac4c:	2900      	cmp	r1, #0
 800ac4e:	d0ca      	beq.n	800abe6 <__sflush_r+0x1a>
 800ac50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac54:	4299      	cmp	r1, r3
 800ac56:	d002      	beq.n	800ac5e <__sflush_r+0x92>
 800ac58:	4628      	mov	r0, r5
 800ac5a:	f7ff faa3 	bl	800a1a4 <_free_r>
 800ac5e:	2000      	movs	r0, #0
 800ac60:	6360      	str	r0, [r4, #52]	; 0x34
 800ac62:	e7c1      	b.n	800abe8 <__sflush_r+0x1c>
 800ac64:	6a21      	ldr	r1, [r4, #32]
 800ac66:	2301      	movs	r3, #1
 800ac68:	4628      	mov	r0, r5
 800ac6a:	47b0      	blx	r6
 800ac6c:	1c41      	adds	r1, r0, #1
 800ac6e:	d1c7      	bne.n	800ac00 <__sflush_r+0x34>
 800ac70:	682b      	ldr	r3, [r5, #0]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d0c4      	beq.n	800ac00 <__sflush_r+0x34>
 800ac76:	2b1d      	cmp	r3, #29
 800ac78:	d001      	beq.n	800ac7e <__sflush_r+0xb2>
 800ac7a:	2b16      	cmp	r3, #22
 800ac7c:	d101      	bne.n	800ac82 <__sflush_r+0xb6>
 800ac7e:	602f      	str	r7, [r5, #0]
 800ac80:	e7b1      	b.n	800abe6 <__sflush_r+0x1a>
 800ac82:	89a3      	ldrh	r3, [r4, #12]
 800ac84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac88:	81a3      	strh	r3, [r4, #12]
 800ac8a:	e7ad      	b.n	800abe8 <__sflush_r+0x1c>
 800ac8c:	690f      	ldr	r7, [r1, #16]
 800ac8e:	2f00      	cmp	r7, #0
 800ac90:	d0a9      	beq.n	800abe6 <__sflush_r+0x1a>
 800ac92:	0793      	lsls	r3, r2, #30
 800ac94:	680e      	ldr	r6, [r1, #0]
 800ac96:	bf08      	it	eq
 800ac98:	694b      	ldreq	r3, [r1, #20]
 800ac9a:	600f      	str	r7, [r1, #0]
 800ac9c:	bf18      	it	ne
 800ac9e:	2300      	movne	r3, #0
 800aca0:	eba6 0807 	sub.w	r8, r6, r7
 800aca4:	608b      	str	r3, [r1, #8]
 800aca6:	f1b8 0f00 	cmp.w	r8, #0
 800acaa:	dd9c      	ble.n	800abe6 <__sflush_r+0x1a>
 800acac:	6a21      	ldr	r1, [r4, #32]
 800acae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800acb0:	4643      	mov	r3, r8
 800acb2:	463a      	mov	r2, r7
 800acb4:	4628      	mov	r0, r5
 800acb6:	47b0      	blx	r6
 800acb8:	2800      	cmp	r0, #0
 800acba:	dc06      	bgt.n	800acca <__sflush_r+0xfe>
 800acbc:	89a3      	ldrh	r3, [r4, #12]
 800acbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acc2:	81a3      	strh	r3, [r4, #12]
 800acc4:	f04f 30ff 	mov.w	r0, #4294967295
 800acc8:	e78e      	b.n	800abe8 <__sflush_r+0x1c>
 800acca:	4407      	add	r7, r0
 800accc:	eba8 0800 	sub.w	r8, r8, r0
 800acd0:	e7e9      	b.n	800aca6 <__sflush_r+0xda>
 800acd2:	bf00      	nop
 800acd4:	20400001 	.word	0x20400001

0800acd8 <_fflush_r>:
 800acd8:	b538      	push	{r3, r4, r5, lr}
 800acda:	690b      	ldr	r3, [r1, #16]
 800acdc:	4605      	mov	r5, r0
 800acde:	460c      	mov	r4, r1
 800ace0:	b913      	cbnz	r3, 800ace8 <_fflush_r+0x10>
 800ace2:	2500      	movs	r5, #0
 800ace4:	4628      	mov	r0, r5
 800ace6:	bd38      	pop	{r3, r4, r5, pc}
 800ace8:	b118      	cbz	r0, 800acf2 <_fflush_r+0x1a>
 800acea:	6983      	ldr	r3, [r0, #24]
 800acec:	b90b      	cbnz	r3, 800acf2 <_fflush_r+0x1a>
 800acee:	f7fe f945 	bl	8008f7c <__sinit>
 800acf2:	4b14      	ldr	r3, [pc, #80]	; (800ad44 <_fflush_r+0x6c>)
 800acf4:	429c      	cmp	r4, r3
 800acf6:	d11b      	bne.n	800ad30 <_fflush_r+0x58>
 800acf8:	686c      	ldr	r4, [r5, #4]
 800acfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d0ef      	beq.n	800ace2 <_fflush_r+0xa>
 800ad02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ad04:	07d0      	lsls	r0, r2, #31
 800ad06:	d404      	bmi.n	800ad12 <_fflush_r+0x3a>
 800ad08:	0599      	lsls	r1, r3, #22
 800ad0a:	d402      	bmi.n	800ad12 <_fflush_r+0x3a>
 800ad0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad0e:	f7fe fd46 	bl	800979e <__retarget_lock_acquire_recursive>
 800ad12:	4628      	mov	r0, r5
 800ad14:	4621      	mov	r1, r4
 800ad16:	f7ff ff59 	bl	800abcc <__sflush_r>
 800ad1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad1c:	07da      	lsls	r2, r3, #31
 800ad1e:	4605      	mov	r5, r0
 800ad20:	d4e0      	bmi.n	800ace4 <_fflush_r+0xc>
 800ad22:	89a3      	ldrh	r3, [r4, #12]
 800ad24:	059b      	lsls	r3, r3, #22
 800ad26:	d4dd      	bmi.n	800ace4 <_fflush_r+0xc>
 800ad28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad2a:	f7fe fd39 	bl	80097a0 <__retarget_lock_release_recursive>
 800ad2e:	e7d9      	b.n	800ace4 <_fflush_r+0xc>
 800ad30:	4b05      	ldr	r3, [pc, #20]	; (800ad48 <_fflush_r+0x70>)
 800ad32:	429c      	cmp	r4, r3
 800ad34:	d101      	bne.n	800ad3a <_fflush_r+0x62>
 800ad36:	68ac      	ldr	r4, [r5, #8]
 800ad38:	e7df      	b.n	800acfa <_fflush_r+0x22>
 800ad3a:	4b04      	ldr	r3, [pc, #16]	; (800ad4c <_fflush_r+0x74>)
 800ad3c:	429c      	cmp	r4, r3
 800ad3e:	bf08      	it	eq
 800ad40:	68ec      	ldreq	r4, [r5, #12]
 800ad42:	e7da      	b.n	800acfa <_fflush_r+0x22>
 800ad44:	0800b2d4 	.word	0x0800b2d4
 800ad48:	0800b2f4 	.word	0x0800b2f4
 800ad4c:	0800b2b4 	.word	0x0800b2b4

0800ad50 <fiprintf>:
 800ad50:	b40e      	push	{r1, r2, r3}
 800ad52:	b503      	push	{r0, r1, lr}
 800ad54:	4601      	mov	r1, r0
 800ad56:	ab03      	add	r3, sp, #12
 800ad58:	4805      	ldr	r0, [pc, #20]	; (800ad70 <fiprintf+0x20>)
 800ad5a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad5e:	6800      	ldr	r0, [r0, #0]
 800ad60:	9301      	str	r3, [sp, #4]
 800ad62:	f7ff fc85 	bl	800a670 <_vfiprintf_r>
 800ad66:	b002      	add	sp, #8
 800ad68:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad6c:	b003      	add	sp, #12
 800ad6e:	4770      	bx	lr
 800ad70:	2000000c 	.word	0x2000000c

0800ad74 <_lseek_r>:
 800ad74:	b538      	push	{r3, r4, r5, lr}
 800ad76:	4d07      	ldr	r5, [pc, #28]	; (800ad94 <_lseek_r+0x20>)
 800ad78:	4604      	mov	r4, r0
 800ad7a:	4608      	mov	r0, r1
 800ad7c:	4611      	mov	r1, r2
 800ad7e:	2200      	movs	r2, #0
 800ad80:	602a      	str	r2, [r5, #0]
 800ad82:	461a      	mov	r2, r3
 800ad84:	f7f6 feca 	bl	8001b1c <_lseek>
 800ad88:	1c43      	adds	r3, r0, #1
 800ad8a:	d102      	bne.n	800ad92 <_lseek_r+0x1e>
 800ad8c:	682b      	ldr	r3, [r5, #0]
 800ad8e:	b103      	cbz	r3, 800ad92 <_lseek_r+0x1e>
 800ad90:	6023      	str	r3, [r4, #0]
 800ad92:	bd38      	pop	{r3, r4, r5, pc}
 800ad94:	20000398 	.word	0x20000398

0800ad98 <__swhatbuf_r>:
 800ad98:	b570      	push	{r4, r5, r6, lr}
 800ad9a:	460e      	mov	r6, r1
 800ad9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ada0:	2900      	cmp	r1, #0
 800ada2:	b096      	sub	sp, #88	; 0x58
 800ada4:	4614      	mov	r4, r2
 800ada6:	461d      	mov	r5, r3
 800ada8:	da08      	bge.n	800adbc <__swhatbuf_r+0x24>
 800adaa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800adae:	2200      	movs	r2, #0
 800adb0:	602a      	str	r2, [r5, #0]
 800adb2:	061a      	lsls	r2, r3, #24
 800adb4:	d410      	bmi.n	800add8 <__swhatbuf_r+0x40>
 800adb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adba:	e00e      	b.n	800adda <__swhatbuf_r+0x42>
 800adbc:	466a      	mov	r2, sp
 800adbe:	f000 f8c1 	bl	800af44 <_fstat_r>
 800adc2:	2800      	cmp	r0, #0
 800adc4:	dbf1      	blt.n	800adaa <__swhatbuf_r+0x12>
 800adc6:	9a01      	ldr	r2, [sp, #4]
 800adc8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800adcc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800add0:	425a      	negs	r2, r3
 800add2:	415a      	adcs	r2, r3
 800add4:	602a      	str	r2, [r5, #0]
 800add6:	e7ee      	b.n	800adb6 <__swhatbuf_r+0x1e>
 800add8:	2340      	movs	r3, #64	; 0x40
 800adda:	2000      	movs	r0, #0
 800addc:	6023      	str	r3, [r4, #0]
 800adde:	b016      	add	sp, #88	; 0x58
 800ade0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ade4 <__smakebuf_r>:
 800ade4:	898b      	ldrh	r3, [r1, #12]
 800ade6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ade8:	079d      	lsls	r5, r3, #30
 800adea:	4606      	mov	r6, r0
 800adec:	460c      	mov	r4, r1
 800adee:	d507      	bpl.n	800ae00 <__smakebuf_r+0x1c>
 800adf0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800adf4:	6023      	str	r3, [r4, #0]
 800adf6:	6123      	str	r3, [r4, #16]
 800adf8:	2301      	movs	r3, #1
 800adfa:	6163      	str	r3, [r4, #20]
 800adfc:	b002      	add	sp, #8
 800adfe:	bd70      	pop	{r4, r5, r6, pc}
 800ae00:	ab01      	add	r3, sp, #4
 800ae02:	466a      	mov	r2, sp
 800ae04:	f7ff ffc8 	bl	800ad98 <__swhatbuf_r>
 800ae08:	9900      	ldr	r1, [sp, #0]
 800ae0a:	4605      	mov	r5, r0
 800ae0c:	4630      	mov	r0, r6
 800ae0e:	f7ff fa35 	bl	800a27c <_malloc_r>
 800ae12:	b948      	cbnz	r0, 800ae28 <__smakebuf_r+0x44>
 800ae14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae18:	059a      	lsls	r2, r3, #22
 800ae1a:	d4ef      	bmi.n	800adfc <__smakebuf_r+0x18>
 800ae1c:	f023 0303 	bic.w	r3, r3, #3
 800ae20:	f043 0302 	orr.w	r3, r3, #2
 800ae24:	81a3      	strh	r3, [r4, #12]
 800ae26:	e7e3      	b.n	800adf0 <__smakebuf_r+0xc>
 800ae28:	4b0d      	ldr	r3, [pc, #52]	; (800ae60 <__smakebuf_r+0x7c>)
 800ae2a:	62b3      	str	r3, [r6, #40]	; 0x28
 800ae2c:	89a3      	ldrh	r3, [r4, #12]
 800ae2e:	6020      	str	r0, [r4, #0]
 800ae30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae34:	81a3      	strh	r3, [r4, #12]
 800ae36:	9b00      	ldr	r3, [sp, #0]
 800ae38:	6163      	str	r3, [r4, #20]
 800ae3a:	9b01      	ldr	r3, [sp, #4]
 800ae3c:	6120      	str	r0, [r4, #16]
 800ae3e:	b15b      	cbz	r3, 800ae58 <__smakebuf_r+0x74>
 800ae40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae44:	4630      	mov	r0, r6
 800ae46:	f000 f88f 	bl	800af68 <_isatty_r>
 800ae4a:	b128      	cbz	r0, 800ae58 <__smakebuf_r+0x74>
 800ae4c:	89a3      	ldrh	r3, [r4, #12]
 800ae4e:	f023 0303 	bic.w	r3, r3, #3
 800ae52:	f043 0301 	orr.w	r3, r3, #1
 800ae56:	81a3      	strh	r3, [r4, #12]
 800ae58:	89a0      	ldrh	r0, [r4, #12]
 800ae5a:	4305      	orrs	r5, r0
 800ae5c:	81a5      	strh	r5, [r4, #12]
 800ae5e:	e7cd      	b.n	800adfc <__smakebuf_r+0x18>
 800ae60:	08008f15 	.word	0x08008f15

0800ae64 <memmove>:
 800ae64:	4288      	cmp	r0, r1
 800ae66:	b510      	push	{r4, lr}
 800ae68:	eb01 0402 	add.w	r4, r1, r2
 800ae6c:	d902      	bls.n	800ae74 <memmove+0x10>
 800ae6e:	4284      	cmp	r4, r0
 800ae70:	4623      	mov	r3, r4
 800ae72:	d807      	bhi.n	800ae84 <memmove+0x20>
 800ae74:	1e43      	subs	r3, r0, #1
 800ae76:	42a1      	cmp	r1, r4
 800ae78:	d008      	beq.n	800ae8c <memmove+0x28>
 800ae7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ae82:	e7f8      	b.n	800ae76 <memmove+0x12>
 800ae84:	4402      	add	r2, r0
 800ae86:	4601      	mov	r1, r0
 800ae88:	428a      	cmp	r2, r1
 800ae8a:	d100      	bne.n	800ae8e <memmove+0x2a>
 800ae8c:	bd10      	pop	{r4, pc}
 800ae8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ae96:	e7f7      	b.n	800ae88 <memmove+0x24>

0800ae98 <__malloc_lock>:
 800ae98:	4801      	ldr	r0, [pc, #4]	; (800aea0 <__malloc_lock+0x8>)
 800ae9a:	f7fe bc80 	b.w	800979e <__retarget_lock_acquire_recursive>
 800ae9e:	bf00      	nop
 800aea0:	2000038c 	.word	0x2000038c

0800aea4 <__malloc_unlock>:
 800aea4:	4801      	ldr	r0, [pc, #4]	; (800aeac <__malloc_unlock+0x8>)
 800aea6:	f7fe bc7b 	b.w	80097a0 <__retarget_lock_release_recursive>
 800aeaa:	bf00      	nop
 800aeac:	2000038c 	.word	0x2000038c

0800aeb0 <_realloc_r>:
 800aeb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeb4:	4680      	mov	r8, r0
 800aeb6:	4614      	mov	r4, r2
 800aeb8:	460e      	mov	r6, r1
 800aeba:	b921      	cbnz	r1, 800aec6 <_realloc_r+0x16>
 800aebc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aec0:	4611      	mov	r1, r2
 800aec2:	f7ff b9db 	b.w	800a27c <_malloc_r>
 800aec6:	b92a      	cbnz	r2, 800aed4 <_realloc_r+0x24>
 800aec8:	f7ff f96c 	bl	800a1a4 <_free_r>
 800aecc:	4625      	mov	r5, r4
 800aece:	4628      	mov	r0, r5
 800aed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aed4:	f000 f858 	bl	800af88 <_malloc_usable_size_r>
 800aed8:	4284      	cmp	r4, r0
 800aeda:	4607      	mov	r7, r0
 800aedc:	d802      	bhi.n	800aee4 <_realloc_r+0x34>
 800aede:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aee2:	d812      	bhi.n	800af0a <_realloc_r+0x5a>
 800aee4:	4621      	mov	r1, r4
 800aee6:	4640      	mov	r0, r8
 800aee8:	f7ff f9c8 	bl	800a27c <_malloc_r>
 800aeec:	4605      	mov	r5, r0
 800aeee:	2800      	cmp	r0, #0
 800aef0:	d0ed      	beq.n	800aece <_realloc_r+0x1e>
 800aef2:	42bc      	cmp	r4, r7
 800aef4:	4622      	mov	r2, r4
 800aef6:	4631      	mov	r1, r6
 800aef8:	bf28      	it	cs
 800aefa:	463a      	movcs	r2, r7
 800aefc:	f7fe fc6c 	bl	80097d8 <memcpy>
 800af00:	4631      	mov	r1, r6
 800af02:	4640      	mov	r0, r8
 800af04:	f7ff f94e 	bl	800a1a4 <_free_r>
 800af08:	e7e1      	b.n	800aece <_realloc_r+0x1e>
 800af0a:	4635      	mov	r5, r6
 800af0c:	e7df      	b.n	800aece <_realloc_r+0x1e>
	...

0800af10 <_read_r>:
 800af10:	b538      	push	{r3, r4, r5, lr}
 800af12:	4d07      	ldr	r5, [pc, #28]	; (800af30 <_read_r+0x20>)
 800af14:	4604      	mov	r4, r0
 800af16:	4608      	mov	r0, r1
 800af18:	4611      	mov	r1, r2
 800af1a:	2200      	movs	r2, #0
 800af1c:	602a      	str	r2, [r5, #0]
 800af1e:	461a      	mov	r2, r3
 800af20:	f7f6 fd9c 	bl	8001a5c <_read>
 800af24:	1c43      	adds	r3, r0, #1
 800af26:	d102      	bne.n	800af2e <_read_r+0x1e>
 800af28:	682b      	ldr	r3, [r5, #0]
 800af2a:	b103      	cbz	r3, 800af2e <_read_r+0x1e>
 800af2c:	6023      	str	r3, [r4, #0]
 800af2e:	bd38      	pop	{r3, r4, r5, pc}
 800af30:	20000398 	.word	0x20000398

0800af34 <abort>:
 800af34:	b508      	push	{r3, lr}
 800af36:	2006      	movs	r0, #6
 800af38:	f000 f856 	bl	800afe8 <raise>
 800af3c:	2001      	movs	r0, #1
 800af3e:	f7f6 fd83 	bl	8001a48 <_exit>
	...

0800af44 <_fstat_r>:
 800af44:	b538      	push	{r3, r4, r5, lr}
 800af46:	4d07      	ldr	r5, [pc, #28]	; (800af64 <_fstat_r+0x20>)
 800af48:	2300      	movs	r3, #0
 800af4a:	4604      	mov	r4, r0
 800af4c:	4608      	mov	r0, r1
 800af4e:	4611      	mov	r1, r2
 800af50:	602b      	str	r3, [r5, #0]
 800af52:	f7f6 fdc8 	bl	8001ae6 <_fstat>
 800af56:	1c43      	adds	r3, r0, #1
 800af58:	d102      	bne.n	800af60 <_fstat_r+0x1c>
 800af5a:	682b      	ldr	r3, [r5, #0]
 800af5c:	b103      	cbz	r3, 800af60 <_fstat_r+0x1c>
 800af5e:	6023      	str	r3, [r4, #0]
 800af60:	bd38      	pop	{r3, r4, r5, pc}
 800af62:	bf00      	nop
 800af64:	20000398 	.word	0x20000398

0800af68 <_isatty_r>:
 800af68:	b538      	push	{r3, r4, r5, lr}
 800af6a:	4d06      	ldr	r5, [pc, #24]	; (800af84 <_isatty_r+0x1c>)
 800af6c:	2300      	movs	r3, #0
 800af6e:	4604      	mov	r4, r0
 800af70:	4608      	mov	r0, r1
 800af72:	602b      	str	r3, [r5, #0]
 800af74:	f7f6 fdc7 	bl	8001b06 <_isatty>
 800af78:	1c43      	adds	r3, r0, #1
 800af7a:	d102      	bne.n	800af82 <_isatty_r+0x1a>
 800af7c:	682b      	ldr	r3, [r5, #0]
 800af7e:	b103      	cbz	r3, 800af82 <_isatty_r+0x1a>
 800af80:	6023      	str	r3, [r4, #0]
 800af82:	bd38      	pop	{r3, r4, r5, pc}
 800af84:	20000398 	.word	0x20000398

0800af88 <_malloc_usable_size_r>:
 800af88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af8c:	1f18      	subs	r0, r3, #4
 800af8e:	2b00      	cmp	r3, #0
 800af90:	bfbc      	itt	lt
 800af92:	580b      	ldrlt	r3, [r1, r0]
 800af94:	18c0      	addlt	r0, r0, r3
 800af96:	4770      	bx	lr

0800af98 <_raise_r>:
 800af98:	291f      	cmp	r1, #31
 800af9a:	b538      	push	{r3, r4, r5, lr}
 800af9c:	4604      	mov	r4, r0
 800af9e:	460d      	mov	r5, r1
 800afa0:	d904      	bls.n	800afac <_raise_r+0x14>
 800afa2:	2316      	movs	r3, #22
 800afa4:	6003      	str	r3, [r0, #0]
 800afa6:	f04f 30ff 	mov.w	r0, #4294967295
 800afaa:	bd38      	pop	{r3, r4, r5, pc}
 800afac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800afae:	b112      	cbz	r2, 800afb6 <_raise_r+0x1e>
 800afb0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800afb4:	b94b      	cbnz	r3, 800afca <_raise_r+0x32>
 800afb6:	4620      	mov	r0, r4
 800afb8:	f000 f830 	bl	800b01c <_getpid_r>
 800afbc:	462a      	mov	r2, r5
 800afbe:	4601      	mov	r1, r0
 800afc0:	4620      	mov	r0, r4
 800afc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800afc6:	f000 b817 	b.w	800aff8 <_kill_r>
 800afca:	2b01      	cmp	r3, #1
 800afcc:	d00a      	beq.n	800afe4 <_raise_r+0x4c>
 800afce:	1c59      	adds	r1, r3, #1
 800afd0:	d103      	bne.n	800afda <_raise_r+0x42>
 800afd2:	2316      	movs	r3, #22
 800afd4:	6003      	str	r3, [r0, #0]
 800afd6:	2001      	movs	r0, #1
 800afd8:	e7e7      	b.n	800afaa <_raise_r+0x12>
 800afda:	2400      	movs	r4, #0
 800afdc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800afe0:	4628      	mov	r0, r5
 800afe2:	4798      	blx	r3
 800afe4:	2000      	movs	r0, #0
 800afe6:	e7e0      	b.n	800afaa <_raise_r+0x12>

0800afe8 <raise>:
 800afe8:	4b02      	ldr	r3, [pc, #8]	; (800aff4 <raise+0xc>)
 800afea:	4601      	mov	r1, r0
 800afec:	6818      	ldr	r0, [r3, #0]
 800afee:	f7ff bfd3 	b.w	800af98 <_raise_r>
 800aff2:	bf00      	nop
 800aff4:	2000000c 	.word	0x2000000c

0800aff8 <_kill_r>:
 800aff8:	b538      	push	{r3, r4, r5, lr}
 800affa:	4d07      	ldr	r5, [pc, #28]	; (800b018 <_kill_r+0x20>)
 800affc:	2300      	movs	r3, #0
 800affe:	4604      	mov	r4, r0
 800b000:	4608      	mov	r0, r1
 800b002:	4611      	mov	r1, r2
 800b004:	602b      	str	r3, [r5, #0]
 800b006:	f7f6 fd0f 	bl	8001a28 <_kill>
 800b00a:	1c43      	adds	r3, r0, #1
 800b00c:	d102      	bne.n	800b014 <_kill_r+0x1c>
 800b00e:	682b      	ldr	r3, [r5, #0]
 800b010:	b103      	cbz	r3, 800b014 <_kill_r+0x1c>
 800b012:	6023      	str	r3, [r4, #0]
 800b014:	bd38      	pop	{r3, r4, r5, pc}
 800b016:	bf00      	nop
 800b018:	20000398 	.word	0x20000398

0800b01c <_getpid_r>:
 800b01c:	f7f6 bcfc 	b.w	8001a18 <_getpid>

0800b020 <_init>:
 800b020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b022:	bf00      	nop
 800b024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b026:	bc08      	pop	{r3}
 800b028:	469e      	mov	lr, r3
 800b02a:	4770      	bx	lr

0800b02c <_fini>:
 800b02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b02e:	bf00      	nop
 800b030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b032:	bc08      	pop	{r3}
 800b034:	469e      	mov	lr, r3
 800b036:	4770      	bx	lr
