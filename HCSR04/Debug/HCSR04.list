
HCSR04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009800  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  080099e0  080099e0  000199e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ea4  08009ea4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08009ea4  08009ea4  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009ea4  08009ea4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ea4  08009ea4  00019ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ea8  08009ea8  00019ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009eac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  200001e0  0800a08c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000030c  0800a08c  0002030c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001129d  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002620  00000000  00000000  000314ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c0  00000000  00000000  00033ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f98  00000000  00000000  00034b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001efad  00000000  00000000  00035b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000126b7  00000000  00000000  00054ad5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4397  00000000  00000000  0006718c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012b523  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bc4  00000000  00000000  0012b574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	080099c8 	.word	0x080099c8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	080099c8 	.word	0x080099c8

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff23 	bl	8000b2c <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc99 	bl	8000648 <__aeabi_dmul>
 8000d16:	f7ff ff6f 	bl	8000bf8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc1a 	bl	8000554 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc90 	bl	8000648 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff fad2 	bl	80002d8 <__aeabi_dsub>
 8000d34:	f7ff ff60 	bl	8000bf8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <Display_LCD>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

  //HCSR04 Display LCD
  void Display_LCD(void)
  {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
	 	  lcd_clear();
 8000d4a:	f000 fdc7 	bl	80018dc <lcd_clear>
	 	  HCSR04_Read();
 8000d4e:	f000 fd47 	bl	80017e0 <HCSR04_Read>
	 	  lcd_send_string("Distance= ");
 8000d52:	4821      	ldr	r0, [pc, #132]	; (8000dd8 <Display_LCD+0x94>)
 8000d54:	f000 fe0c 	bl	8001970 <lcd_send_string>
	 	  int d = Distance / 10;
 8000d58:	4b20      	ldr	r3, [pc, #128]	; (8000ddc <Display_LCD+0x98>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a20      	ldr	r2, [pc, #128]	; (8000de0 <Display_LCD+0x9c>)
 8000d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d62:	08db      	lsrs	r3, r3, #3
 8000d64:	607b      	str	r3, [r7, #4]
	 	  if (d > 10)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2b0a      	cmp	r3, #10
 8000d6a:	dd07      	ble.n	8000d7c <Display_LCD+0x38>
	 	  d=d/10;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	4a1d      	ldr	r2, [pc, #116]	; (8000de4 <Display_LCD+0xa0>)
 8000d70:	fb82 1203 	smull	r1, r2, r2, r3
 8000d74:	1092      	asrs	r2, r2, #2
 8000d76:	17db      	asrs	r3, r3, #31
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	607b      	str	r3, [r7, #4]
	 	  lcd_send_data((Distance / 100) + 48); // Singularity
 8000d7c:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <Display_LCD+0x98>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a19      	ldr	r2, [pc, #100]	; (8000de8 <Display_LCD+0xa4>)
 8000d82:	fba2 2303 	umull	r2, r3, r2, r3
 8000d86:	095b      	lsrs	r3, r3, #5
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	3330      	adds	r3, #48	; 0x30
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 fd74 	bl	800187c <lcd_send_data>
	 	  lcd_send_data(d + 48); // Dozens
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	3330      	adds	r3, #48	; 0x30
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f000 fd6d 	bl	800187c <lcd_send_data>
	 	  lcd_send_data((Distance % 10) + 48); // Hundreds
 8000da2:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <Display_LCD+0x98>)
 8000da4:	6819      	ldr	r1, [r3, #0]
 8000da6:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <Display_LCD+0x9c>)
 8000da8:	fba3 2301 	umull	r2, r3, r3, r1
 8000dac:	08da      	lsrs	r2, r3, #3
 8000dae:	4613      	mov	r3, r2
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	4413      	add	r3, r2
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	1aca      	subs	r2, r1, r3
 8000db8:	b2d3      	uxtb	r3, r2
 8000dba:	3330      	adds	r3, #48	; 0x30
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f000 fd5c 	bl	800187c <lcd_send_data>
	 	  lcd_send_string(" cm");
 8000dc4:	4809      	ldr	r0, [pc, #36]	; (8000dec <Display_LCD+0xa8>)
 8000dc6:	f000 fdd3 	bl	8001970 <lcd_send_string>
	 	  HAL_Delay(200);
 8000dca:	20c8      	movs	r0, #200	; 0xc8
 8000dcc:	f000 fe56 	bl	8001a7c <HAL_Delay>
  }
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	080099e0 	.word	0x080099e0
 8000ddc:	200002f4 	.word	0x200002f4
 8000de0:	cccccccd 	.word	0xcccccccd
 8000de4:	66666667 	.word	0x66666667
 8000de8:	51eb851f 	.word	0x51eb851f
 8000dec:	080099ec 	.word	0x080099ec

08000df0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000df4:	f000 fdd1 	bl	800199a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000df8:	f000 f814 	bl	8000e24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dfc:	f000 f96a 	bl	80010d4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000e00:	f000 f89a 	bl	8000f38 <MX_TIM1_Init>
  MX_I2C1_Init();
 8000e04:	f000 f858 	bl	8000eb8 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000e08:	f000 f90c 	bl	8001024 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //LCD
  lcd_init();
 8000e0c:	f000 fd73 	bl	80018f6 <lcd_init>
  //HCSR04
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000e10:	2100      	movs	r1, #0
 8000e12:	4803      	ldr	r0, [pc, #12]	; (8000e20 <main+0x30>)
 8000e14:	f002 fdc8 	bl	80039a8 <HAL_TIM_IC_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // HCSR04 Display LCD
	  Display_LCD();
 8000e18:	f7ff ff94 	bl	8000d44 <Display_LCD>
 8000e1c:	e7fc      	b.n	8000e18 <main+0x28>
 8000e1e:	bf00      	nop
 8000e20:	20000248 	.word	0x20000248

08000e24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b094      	sub	sp, #80	; 0x50
 8000e28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e2a:	f107 0318 	add.w	r3, r7, #24
 8000e2e:	2238      	movs	r2, #56	; 0x38
 8000e30:	2100      	movs	r1, #0
 8000e32:	4618      	mov	r0, r3
 8000e34:	f004 f94e 	bl	80050d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e38:	1d3b      	adds	r3, r7, #4
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
 8000e44:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e46:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e4a:	f001 fcfd 	bl	8002848 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e56:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000e60:	2302      	movs	r3, #2
 8000e62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000e64:	230c      	movs	r3, #12
 8000e66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e70:	2302      	movs	r3, #2
 8000e72:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e74:	f107 0318 	add.w	r3, r7, #24
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f001 fd99 	bl	80029b0 <HAL_RCC_OscConfig>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000e84:	f000 f9b0 	bl	80011e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e88:	230f      	movs	r3, #15
 8000e8a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e90:	2300      	movs	r3, #0
 8000e92:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e94:	2300      	movs	r3, #0
 8000e96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e9c:	1d3b      	adds	r3, r7, #4
 8000e9e:	2102      	movs	r1, #2
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f002 f89d 	bl	8002fe0 <HAL_RCC_ClockConfig>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000eac:	f000 f99c 	bl	80011e8 <Error_Handler>
  }
}
 8000eb0:	bf00      	nop
 8000eb2:	3750      	adds	r7, #80	; 0x50
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ebc:	4b1b      	ldr	r3, [pc, #108]	; (8000f2c <MX_I2C1_Init+0x74>)
 8000ebe:	4a1c      	ldr	r2, [pc, #112]	; (8000f30 <MX_I2C1_Init+0x78>)
 8000ec0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10808DD3;
 8000ec2:	4b1a      	ldr	r3, [pc, #104]	; (8000f2c <MX_I2C1_Init+0x74>)
 8000ec4:	4a1b      	ldr	r2, [pc, #108]	; (8000f34 <MX_I2C1_Init+0x7c>)
 8000ec6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ec8:	4b18      	ldr	r3, [pc, #96]	; (8000f2c <MX_I2C1_Init+0x74>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ece:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <MX_I2C1_Init+0x74>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ed4:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <MX_I2C1_Init+0x74>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000eda:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <MX_I2C1_Init+0x74>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ee0:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <MX_I2C1_Init+0x74>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ee6:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <MX_I2C1_Init+0x74>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eec:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <MX_I2C1_Init+0x74>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ef2:	480e      	ldr	r0, [pc, #56]	; (8000f2c <MX_I2C1_Init+0x74>)
 8000ef4:	f001 f88e 	bl	8002014 <HAL_I2C_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000efe:	f000 f973 	bl	80011e8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f02:	2100      	movs	r1, #0
 8000f04:	4809      	ldr	r0, [pc, #36]	; (8000f2c <MX_I2C1_Init+0x74>)
 8000f06:	f001 fc07 	bl	8002718 <HAL_I2CEx_ConfigAnalogFilter>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f10:	f000 f96a 	bl	80011e8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f14:	2100      	movs	r1, #0
 8000f16:	4805      	ldr	r0, [pc, #20]	; (8000f2c <MX_I2C1_Init+0x74>)
 8000f18:	f001 fc49 	bl	80027ae <HAL_I2CEx_ConfigDigitalFilter>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f22:	f000 f961 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	200001fc 	.word	0x200001fc
 8000f30:	40005400 	.word	0x40005400
 8000f34:	10808dd3 	.word	0x10808dd3

08000f38 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08c      	sub	sp, #48	; 0x30
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f3e:	f107 0320 	add.w	r3, r7, #32
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]
 8000f4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]
 8000f62:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f64:	4b2d      	ldr	r3, [pc, #180]	; (800101c <MX_TIM1_Init+0xe4>)
 8000f66:	4a2e      	ldr	r2, [pc, #184]	; (8001020 <MX_TIM1_Init+0xe8>)
 8000f68:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000f6a:	4b2c      	ldr	r3, [pc, #176]	; (800101c <MX_TIM1_Init+0xe4>)
 8000f6c:	2247      	movs	r2, #71	; 0x47
 8000f6e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f70:	4b2a      	ldr	r3, [pc, #168]	; (800101c <MX_TIM1_Init+0xe4>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65534;
 8000f76:	4b29      	ldr	r3, [pc, #164]	; (800101c <MX_TIM1_Init+0xe4>)
 8000f78:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000f7c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f7e:	4b27      	ldr	r3, [pc, #156]	; (800101c <MX_TIM1_Init+0xe4>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f84:	4b25      	ldr	r3, [pc, #148]	; (800101c <MX_TIM1_Init+0xe4>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f8a:	4b24      	ldr	r3, [pc, #144]	; (800101c <MX_TIM1_Init+0xe4>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f90:	4822      	ldr	r0, [pc, #136]	; (800101c <MX_TIM1_Init+0xe4>)
 8000f92:	f002 fbf9 	bl	8003788 <HAL_TIM_Base_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8000f9c:	f000 f924 	bl	80011e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fa4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fa6:	f107 0320 	add.w	r3, r7, #32
 8000faa:	4619      	mov	r1, r3
 8000fac:	481b      	ldr	r0, [pc, #108]	; (800101c <MX_TIM1_Init+0xe4>)
 8000fae:	f003 f8d3 	bl	8004158 <HAL_TIM_ConfigClockSource>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000fb8:	f000 f916 	bl	80011e8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000fbc:	4817      	ldr	r0, [pc, #92]	; (800101c <MX_TIM1_Init+0xe4>)
 8000fbe:	f002 fc91 	bl	80038e4 <HAL_TIM_IC_Init>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000fc8:	f000 f90e 	bl	80011e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	4619      	mov	r1, r3
 8000fde:	480f      	ldr	r0, [pc, #60]	; (800101c <MX_TIM1_Init+0xe4>)
 8000fe0:	f003 ff86 	bl	8004ef0 <HAL_TIMEx_MasterConfigSynchronization>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000fea:	f000 f8fd 	bl	80011e8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	2200      	movs	r2, #0
 8001002:	4619      	mov	r1, r3
 8001004:	4805      	ldr	r0, [pc, #20]	; (800101c <MX_TIM1_Init+0xe4>)
 8001006:	f003 f80b 	bl	8004020 <HAL_TIM_IC_ConfigChannel>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001010:	f000 f8ea 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001014:	bf00      	nop
 8001016:	3730      	adds	r7, #48	; 0x30
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000248 	.word	0x20000248
 8001020:	40012c00 	.word	0x40012c00

08001024 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08a      	sub	sp, #40	; 0x28
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800102a:	f107 031c 	add.w	r3, r7, #28
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001036:	463b      	mov	r3, r7
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
 8001044:	615a      	str	r2, [r3, #20]
 8001046:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001048:	4b21      	ldr	r3, [pc, #132]	; (80010d0 <MX_TIM2_Init+0xac>)
 800104a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800104e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001050:	4b1f      	ldr	r3, [pc, #124]	; (80010d0 <MX_TIM2_Init+0xac>)
 8001052:	2247      	movs	r2, #71	; 0x47
 8001054:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001056:	4b1e      	ldr	r3, [pc, #120]	; (80010d0 <MX_TIM2_Init+0xac>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 800105c:	4b1c      	ldr	r3, [pc, #112]	; (80010d0 <MX_TIM2_Init+0xac>)
 800105e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001062:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001064:	4b1a      	ldr	r3, [pc, #104]	; (80010d0 <MX_TIM2_Init+0xac>)
 8001066:	2200      	movs	r2, #0
 8001068:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800106a:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <MX_TIM2_Init+0xac>)
 800106c:	2200      	movs	r2, #0
 800106e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001070:	4817      	ldr	r0, [pc, #92]	; (80010d0 <MX_TIM2_Init+0xac>)
 8001072:	f002 fbe0 	bl	8003836 <HAL_TIM_OC_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800107c:	f000 f8b4 	bl	80011e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001080:	2300      	movs	r3, #0
 8001082:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001084:	2300      	movs	r3, #0
 8001086:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001088:	f107 031c 	add.w	r3, r7, #28
 800108c:	4619      	mov	r1, r3
 800108e:	4810      	ldr	r0, [pc, #64]	; (80010d0 <MX_TIM2_Init+0xac>)
 8001090:	f003 ff2e 	bl	8004ef0 <HAL_TIMEx_MasterConfigSynchronization>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800109a:	f000 f8a5 	bl	80011e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800109e:	2300      	movs	r3, #0
 80010a0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 80010a2:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80010a6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010ac:	2300      	movs	r3, #0
 80010ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010b0:	463b      	mov	r3, r7
 80010b2:	2200      	movs	r2, #0
 80010b4:	4619      	mov	r1, r3
 80010b6:	4806      	ldr	r0, [pc, #24]	; (80010d0 <MX_TIM2_Init+0xac>)
 80010b8:	f002 ff38 	bl	8003f2c <HAL_TIM_OC_ConfigChannel>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80010c2:	f000 f891 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010c6:	bf00      	nop
 80010c8:	3728      	adds	r7, #40	; 0x28
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000294 	.word	0x20000294

080010d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	; 0x28
 80010d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]
 80010e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ea:	4b3d      	ldr	r3, [pc, #244]	; (80011e0 <MX_GPIO_Init+0x10c>)
 80010ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ee:	4a3c      	ldr	r2, [pc, #240]	; (80011e0 <MX_GPIO_Init+0x10c>)
 80010f0:	f043 0304 	orr.w	r3, r3, #4
 80010f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f6:	4b3a      	ldr	r3, [pc, #232]	; (80011e0 <MX_GPIO_Init+0x10c>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fa:	f003 0304 	and.w	r3, r3, #4
 80010fe:	613b      	str	r3, [r7, #16]
 8001100:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001102:	4b37      	ldr	r3, [pc, #220]	; (80011e0 <MX_GPIO_Init+0x10c>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001106:	4a36      	ldr	r2, [pc, #216]	; (80011e0 <MX_GPIO_Init+0x10c>)
 8001108:	f043 0320 	orr.w	r3, r3, #32
 800110c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800110e:	4b34      	ldr	r3, [pc, #208]	; (80011e0 <MX_GPIO_Init+0x10c>)
 8001110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001112:	f003 0320 	and.w	r3, r3, #32
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800111a:	4b31      	ldr	r3, [pc, #196]	; (80011e0 <MX_GPIO_Init+0x10c>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111e:	4a30      	ldr	r2, [pc, #192]	; (80011e0 <MX_GPIO_Init+0x10c>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001126:	4b2e      	ldr	r3, [pc, #184]	; (80011e0 <MX_GPIO_Init+0x10c>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001132:	4b2b      	ldr	r3, [pc, #172]	; (80011e0 <MX_GPIO_Init+0x10c>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001136:	4a2a      	ldr	r2, [pc, #168]	; (80011e0 <MX_GPIO_Init+0x10c>)
 8001138:	f043 0302 	orr.w	r3, r3, #2
 800113c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800113e:	4b28      	ldr	r3, [pc, #160]	; (80011e0 <MX_GPIO_Init+0x10c>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 800114a:	2200      	movs	r2, #0
 800114c:	2102      	movs	r1, #2
 800114e:	4825      	ldr	r0, [pc, #148]	; (80011e4 <MX_GPIO_Init+0x110>)
 8001150:	f000 ff48 	bl	8001fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001154:	2200      	movs	r2, #0
 8001156:	2120      	movs	r1, #32
 8001158:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800115c:	f000 ff42 	bl	8001fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001160:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001164:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001166:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800116a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	4619      	mov	r1, r3
 8001176:	481b      	ldr	r0, [pc, #108]	; (80011e4 <MX_GPIO_Init+0x110>)
 8001178:	f000 fdb2 	bl	8001ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800117c:	2302      	movs	r3, #2
 800117e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001180:	2301      	movs	r3, #1
 8001182:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001188:	2300      	movs	r3, #0
 800118a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	4619      	mov	r1, r3
 8001192:	4814      	ldr	r0, [pc, #80]	; (80011e4 <MX_GPIO_Init+0x110>)
 8001194:	f000 fda4 	bl	8001ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001198:	230c      	movs	r3, #12
 800119a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119c:	2302      	movs	r3, #2
 800119e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a4:	2300      	movs	r3, #0
 80011a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80011a8:	230c      	movs	r3, #12
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	4619      	mov	r1, r3
 80011b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b6:	f000 fd93 	bl	8001ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011ba:	2320      	movs	r3, #32
 80011bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011be:	2301      	movs	r3, #1
 80011c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c6:	2300      	movs	r3, #0
 80011c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011ca:	f107 0314 	add.w	r3, r7, #20
 80011ce:	4619      	mov	r1, r3
 80011d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d4:	f000 fd84 	bl	8001ce0 <HAL_GPIO_Init>

}
 80011d8:	bf00      	nop
 80011da:	3728      	adds	r7, #40	; 0x28
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40021000 	.word	0x40021000
 80011e4:	48000800 	.word	0x48000800

080011e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011ec:	b672      	cpsid	i
}
 80011ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <Error_Handler+0x8>
	...

080011f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fa:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <HAL_MspInit+0x44>)
 80011fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011fe:	4a0e      	ldr	r2, [pc, #56]	; (8001238 <HAL_MspInit+0x44>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	6613      	str	r3, [r2, #96]	; 0x60
 8001206:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <HAL_MspInit+0x44>)
 8001208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001212:	4b09      	ldr	r3, [pc, #36]	; (8001238 <HAL_MspInit+0x44>)
 8001214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001216:	4a08      	ldr	r2, [pc, #32]	; (8001238 <HAL_MspInit+0x44>)
 8001218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800121c:	6593      	str	r3, [r2, #88]	; 0x58
 800121e:	4b06      	ldr	r3, [pc, #24]	; (8001238 <HAL_MspInit+0x44>)
 8001220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001226:	603b      	str	r3, [r7, #0]
 8001228:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800122a:	f001 fbb1 	bl	8002990 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40021000 	.word	0x40021000

0800123c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b09c      	sub	sp, #112	; 0x70
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001244:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001254:	f107 0318 	add.w	r3, r7, #24
 8001258:	2244      	movs	r2, #68	; 0x44
 800125a:	2100      	movs	r1, #0
 800125c:	4618      	mov	r0, r3
 800125e:	f003 ff39 	bl	80050d4 <memset>
  if(hi2c->Instance==I2C1)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a2d      	ldr	r2, [pc, #180]	; (800131c <HAL_I2C_MspInit+0xe0>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d153      	bne.n	8001314 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800126c:	2340      	movs	r3, #64	; 0x40
 800126e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001270:	2300      	movs	r3, #0
 8001272:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001274:	f107 0318 	add.w	r3, r7, #24
 8001278:	4618      	mov	r0, r3
 800127a:	f002 f895 	bl	80033a8 <HAL_RCCEx_PeriphCLKConfig>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001284:	f7ff ffb0 	bl	80011e8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001288:	4b25      	ldr	r3, [pc, #148]	; (8001320 <HAL_I2C_MspInit+0xe4>)
 800128a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128c:	4a24      	ldr	r2, [pc, #144]	; (8001320 <HAL_I2C_MspInit+0xe4>)
 800128e:	f043 0301 	orr.w	r3, r3, #1
 8001292:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001294:	4b22      	ldr	r3, [pc, #136]	; (8001320 <HAL_I2C_MspInit+0xe4>)
 8001296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	617b      	str	r3, [r7, #20]
 800129e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a0:	4b1f      	ldr	r3, [pc, #124]	; (8001320 <HAL_I2C_MspInit+0xe4>)
 80012a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a4:	4a1e      	ldr	r2, [pc, #120]	; (8001320 <HAL_I2C_MspInit+0xe4>)
 80012a6:	f043 0302 	orr.w	r3, r3, #2
 80012aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ac:	4b1c      	ldr	r3, [pc, #112]	; (8001320 <HAL_I2C_MspInit+0xe4>)
 80012ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	613b      	str	r3, [r7, #16]
 80012b6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80012b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012bc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012be:	2312      	movs	r3, #18
 80012c0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c6:	2300      	movs	r3, #0
 80012c8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012ca:	2304      	movs	r3, #4
 80012cc:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ce:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80012d2:	4619      	mov	r1, r3
 80012d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d8:	f000 fd02 	bl	8001ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80012dc:	2380      	movs	r3, #128	; 0x80
 80012de:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012e0:	2312      	movs	r3, #18
 80012e2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e8:	2300      	movs	r3, #0
 80012ea:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012ec:	2304      	movs	r3, #4
 80012ee:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80012f4:	4619      	mov	r1, r3
 80012f6:	480b      	ldr	r0, [pc, #44]	; (8001324 <HAL_I2C_MspInit+0xe8>)
 80012f8:	f000 fcf2 	bl	8001ce0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012fc:	4b08      	ldr	r3, [pc, #32]	; (8001320 <HAL_I2C_MspInit+0xe4>)
 80012fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001300:	4a07      	ldr	r2, [pc, #28]	; (8001320 <HAL_I2C_MspInit+0xe4>)
 8001302:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001306:	6593      	str	r3, [r2, #88]	; 0x58
 8001308:	4b05      	ldr	r3, [pc, #20]	; (8001320 <HAL_I2C_MspInit+0xe4>)
 800130a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800130c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001314:	bf00      	nop
 8001316:	3770      	adds	r7, #112	; 0x70
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40005400 	.word	0x40005400
 8001320:	40021000 	.word	0x40021000
 8001324:	48000400 	.word	0x48000400

08001328 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08a      	sub	sp, #40	; 0x28
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a1b      	ldr	r2, [pc, #108]	; (80013b4 <HAL_TIM_Base_MspInit+0x8c>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d12f      	bne.n	80013aa <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800134a:	4b1b      	ldr	r3, [pc, #108]	; (80013b8 <HAL_TIM_Base_MspInit+0x90>)
 800134c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800134e:	4a1a      	ldr	r2, [pc, #104]	; (80013b8 <HAL_TIM_Base_MspInit+0x90>)
 8001350:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001354:	6613      	str	r3, [r2, #96]	; 0x60
 8001356:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <HAL_TIM_Base_MspInit+0x90>)
 8001358:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800135a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800135e:	613b      	str	r3, [r7, #16]
 8001360:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001362:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <HAL_TIM_Base_MspInit+0x90>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001366:	4a14      	ldr	r2, [pc, #80]	; (80013b8 <HAL_TIM_Base_MspInit+0x90>)
 8001368:	f043 0304 	orr.w	r3, r3, #4
 800136c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800136e:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <HAL_TIM_Base_MspInit+0x90>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001372:	f003 0304 	and.w	r3, r3, #4
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800137a:	2301      	movs	r3, #1
 800137c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137e:	2302      	movs	r3, #2
 8001380:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001386:	2300      	movs	r3, #0
 8001388:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800138a:	2302      	movs	r3, #2
 800138c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	4619      	mov	r1, r3
 8001394:	4809      	ldr	r0, [pc, #36]	; (80013bc <HAL_TIM_Base_MspInit+0x94>)
 8001396:	f000 fca3 	bl	8001ce0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800139a:	2200      	movs	r2, #0
 800139c:	2100      	movs	r1, #0
 800139e:	201b      	movs	r0, #27
 80013a0:	f000 fc69 	bl	8001c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80013a4:	201b      	movs	r0, #27
 80013a6:	f000 fc80 	bl	8001caa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80013aa:	bf00      	nop
 80013ac:	3728      	adds	r7, #40	; 0x28
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40012c00 	.word	0x40012c00
 80013b8:	40021000 	.word	0x40021000
 80013bc:	48000800 	.word	0x48000800

080013c0 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013d0:	d10b      	bne.n	80013ea <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013d2:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <HAL_TIM_OC_MspInit+0x38>)
 80013d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d6:	4a08      	ldr	r2, [pc, #32]	; (80013f8 <HAL_TIM_OC_MspInit+0x38>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6593      	str	r3, [r2, #88]	; 0x58
 80013de:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <HAL_TIM_OC_MspInit+0x38>)
 80013e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013ea:	bf00      	nop
 80013ec:	3714      	adds	r7, #20
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	40021000 	.word	0x40021000

080013fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001400:	e7fe      	b.n	8001400 <NMI_Handler+0x4>

08001402 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001406:	e7fe      	b.n	8001406 <HardFault_Handler+0x4>

08001408 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800140c:	e7fe      	b.n	800140c <MemManage_Handler+0x4>

0800140e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001412:	e7fe      	b.n	8001412 <BusFault_Handler+0x4>

08001414 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001418:	e7fe      	b.n	8001418 <UsageFault_Handler+0x4>

0800141a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001448:	f000 fafa 	bl	8001a40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}

08001450 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001454:	4802      	ldr	r0, [pc, #8]	; (8001460 <TIM1_CC_IRQHandler+0x10>)
 8001456:	f002 fbe9 	bl	8003c2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20000248 	.word	0x20000248

08001464 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
	return 1;
 8001468:	2301      	movs	r3, #1
}
 800146a:	4618      	mov	r0, r3
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <_kill>:

int _kill(int pid, int sig)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800147e:	f003 fdff 	bl	8005080 <__errno>
 8001482:	4603      	mov	r3, r0
 8001484:	2216      	movs	r2, #22
 8001486:	601a      	str	r2, [r3, #0]
	return -1;
 8001488:	f04f 33ff 	mov.w	r3, #4294967295
}
 800148c:	4618      	mov	r0, r3
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <_exit>:

void _exit (int status)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800149c:	f04f 31ff 	mov.w	r1, #4294967295
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f7ff ffe7 	bl	8001474 <_kill>
	while (1) {}		/* Make sure we hang here */
 80014a6:	e7fe      	b.n	80014a6 <_exit+0x12>

080014a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	e00a      	b.n	80014d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014ba:	f3af 8000 	nop.w
 80014be:	4601      	mov	r1, r0
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	1c5a      	adds	r2, r3, #1
 80014c4:	60ba      	str	r2, [r7, #8]
 80014c6:	b2ca      	uxtb	r2, r1
 80014c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	3301      	adds	r3, #1
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	697a      	ldr	r2, [r7, #20]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	dbf0      	blt.n	80014ba <_read+0x12>
	}

return len;
 80014d8:	687b      	ldr	r3, [r7, #4]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b086      	sub	sp, #24
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	60f8      	str	r0, [r7, #12]
 80014ea:	60b9      	str	r1, [r7, #8]
 80014ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]
 80014f2:	e009      	b.n	8001508 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	1c5a      	adds	r2, r3, #1
 80014f8:	60ba      	str	r2, [r7, #8]
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	3301      	adds	r3, #1
 8001506:	617b      	str	r3, [r7, #20]
 8001508:	697a      	ldr	r2, [r7, #20]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	429a      	cmp	r2, r3
 800150e:	dbf1      	blt.n	80014f4 <_write+0x12>
	}
	return len;
 8001510:	687b      	ldr	r3, [r7, #4]
}
 8001512:	4618      	mov	r0, r3
 8001514:	3718      	adds	r7, #24
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <_close>:

int _close(int file)
{
 800151a:	b480      	push	{r7}
 800151c:	b083      	sub	sp, #12
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
	return -1;
 8001522:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001526:	4618      	mov	r0, r3
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001532:	b480      	push	{r7}
 8001534:	b083      	sub	sp, #12
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
 800153a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001542:	605a      	str	r2, [r3, #4]
	return 0;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <_isatty>:

int _isatty(int file)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
	return 1;
 800155a:	2301      	movs	r3, #1
}
 800155c:	4618      	mov	r0, r3
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
	return 0;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3714      	adds	r7, #20
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
	...

08001584 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800158c:	4a14      	ldr	r2, [pc, #80]	; (80015e0 <_sbrk+0x5c>)
 800158e:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <_sbrk+0x60>)
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001598:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <_sbrk+0x64>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d102      	bne.n	80015a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015a0:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <_sbrk+0x64>)
 80015a2:	4a12      	ldr	r2, [pc, #72]	; (80015ec <_sbrk+0x68>)
 80015a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015a6:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <_sbrk+0x64>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4413      	add	r3, r2
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d207      	bcs.n	80015c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015b4:	f003 fd64 	bl	8005080 <__errno>
 80015b8:	4603      	mov	r3, r0
 80015ba:	220c      	movs	r2, #12
 80015bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015be:	f04f 33ff 	mov.w	r3, #4294967295
 80015c2:	e009      	b.n	80015d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015c4:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <_sbrk+0x64>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ca:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <_sbrk+0x64>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4413      	add	r3, r2
 80015d2:	4a05      	ldr	r2, [pc, #20]	; (80015e8 <_sbrk+0x64>)
 80015d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015d6:	68fb      	ldr	r3, [r7, #12]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20008000 	.word	0x20008000
 80015e4:	00000400 	.word	0x00000400
 80015e8:	200002e0 	.word	0x200002e0
 80015ec:	20000310 	.word	0x20000310

080015f0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <SystemInit+0x20>)
 80015f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015fa:	4a05      	ldr	r2, [pc, #20]	; (8001610 <SystemInit+0x20>)
 80015fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001600:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <Reset_Handler>:
 8001614:	480d      	ldr	r0, [pc, #52]	; (800164c <LoopForever+0x2>)
 8001616:	4685      	mov	sp, r0
 8001618:	480d      	ldr	r0, [pc, #52]	; (8001650 <LoopForever+0x6>)
 800161a:	490e      	ldr	r1, [pc, #56]	; (8001654 <LoopForever+0xa>)
 800161c:	4a0e      	ldr	r2, [pc, #56]	; (8001658 <LoopForever+0xe>)
 800161e:	2300      	movs	r3, #0
 8001620:	e002      	b.n	8001628 <LoopCopyDataInit>

08001622 <CopyDataInit>:
 8001622:	58d4      	ldr	r4, [r2, r3]
 8001624:	50c4      	str	r4, [r0, r3]
 8001626:	3304      	adds	r3, #4

08001628 <LoopCopyDataInit>:
 8001628:	18c4      	adds	r4, r0, r3
 800162a:	428c      	cmp	r4, r1
 800162c:	d3f9      	bcc.n	8001622 <CopyDataInit>
 800162e:	4a0b      	ldr	r2, [pc, #44]	; (800165c <LoopForever+0x12>)
 8001630:	4c0b      	ldr	r4, [pc, #44]	; (8001660 <LoopForever+0x16>)
 8001632:	2300      	movs	r3, #0
 8001634:	e001      	b.n	800163a <LoopFillZerobss>

08001636 <FillZerobss>:
 8001636:	6013      	str	r3, [r2, #0]
 8001638:	3204      	adds	r2, #4

0800163a <LoopFillZerobss>:
 800163a:	42a2      	cmp	r2, r4
 800163c:	d3fb      	bcc.n	8001636 <FillZerobss>
 800163e:	f7ff ffd7 	bl	80015f0 <SystemInit>
 8001642:	f003 fd23 	bl	800508c <__libc_init_array>
 8001646:	f7ff fbd3 	bl	8000df0 <main>

0800164a <LoopForever>:
 800164a:	e7fe      	b.n	800164a <LoopForever>
 800164c:	20008000 	.word	0x20008000
 8001650:	20000000 	.word	0x20000000
 8001654:	200001e0 	.word	0x200001e0
 8001658:	08009eac 	.word	0x08009eac
 800165c:	200001e0 	.word	0x200001e0
 8001660:	2000030c 	.word	0x2000030c

08001664 <ADC1_2_IRQHandler>:
 8001664:	e7fe      	b.n	8001664 <ADC1_2_IRQHandler>
	...

08001668 <delay>:

//HCSR04
// Delay function
extern TIM_HandleTypeDef htim1;
void delay (uint16_t time)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	80fb      	strh	r3, [r7, #6]
 __HAL_TIM_SET_COUNTER(&htim1,0);
 8001672:	4b09      	ldr	r3, [pc, #36]	; (8001698 <delay+0x30>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2200      	movs	r2, #0
 8001678:	625a      	str	r2, [r3, #36]	; 0x24
 while(__HAL_TIM_GET_COUNTER(&htim1) < time );
 800167a:	bf00      	nop
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <delay+0x30>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001682:	88fb      	ldrh	r3, [r7, #6]
 8001684:	429a      	cmp	r2, r3
 8001686:	d3f9      	bcc.n	800167c <delay+0x14>

}
 8001688:	bf00      	nop
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	20000248 	.word	0x20000248
 800169c:	00000000 	.word	0x00000000

080016a0 <HAL_TIM_IC_CaptureCallback>:
#define TRIG_PIN GPIO_PIN_1
#define TRIG_PORT GPIOC

//HCSR04
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	7f1b      	ldrb	r3, [r3, #28]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	f040 8082 	bne.w	80017b6 <HAL_TIM_IC_CaptureCallback+0x116>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 80016b2:	4b45      	ldr	r3, [pc, #276]	; (80017c8 <HAL_TIM_IC_CaptureCallback+0x128>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d11a      	bne.n	80016f0 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 80016ba:	2100      	movs	r1, #0
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f002 fe45 	bl	800434c <HAL_TIM_ReadCapturedValue>
 80016c2:	4603      	mov	r3, r0
 80016c4:	4a41      	ldr	r2, [pc, #260]	; (80017cc <HAL_TIM_IC_CaptureCallback+0x12c>)
 80016c6:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 80016c8:	4b3f      	ldr	r3, [pc, #252]	; (80017c8 <HAL_TIM_IC_CaptureCallback+0x128>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	6a1a      	ldr	r2, [r3, #32]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 020a 	bic.w	r2, r2, #10
 80016dc:	621a      	str	r2, [r3, #32]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6a1a      	ldr	r2, [r3, #32]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f042 0202 	orr.w	r2, r2, #2
 80016ec:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 80016ee:	e062      	b.n	80017b6 <HAL_TIM_IC_CaptureCallback+0x116>
		else if (Is_First_Captured==1)   // if the first is already captured
 80016f0:	4b35      	ldr	r3, [pc, #212]	; (80017c8 <HAL_TIM_IC_CaptureCallback+0x128>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d15e      	bne.n	80017b6 <HAL_TIM_IC_CaptureCallback+0x116>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 80016f8:	2100      	movs	r1, #0
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f002 fe26 	bl	800434c <HAL_TIM_ReadCapturedValue>
 8001700:	4603      	mov	r3, r0
 8001702:	4a33      	ldr	r2, [pc, #204]	; (80017d0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001704:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2200      	movs	r2, #0
 800170c:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 800170e:	4b30      	ldr	r3, [pc, #192]	; (80017d0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	4b2e      	ldr	r3, [pc, #184]	; (80017cc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	429a      	cmp	r2, r3
 8001718:	d907      	bls.n	800172a <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 800171a:	4b2d      	ldr	r3, [pc, #180]	; (80017d0 <HAL_TIM_IC_CaptureCallback+0x130>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	4b2b      	ldr	r3, [pc, #172]	; (80017cc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	4a2b      	ldr	r2, [pc, #172]	; (80017d4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001726:	6013      	str	r3, [r2, #0]
 8001728:	e00f      	b.n	800174a <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 800172a:	4b28      	ldr	r3, [pc, #160]	; (80017cc <HAL_TIM_IC_CaptureCallback+0x12c>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	4b28      	ldr	r3, [pc, #160]	; (80017d0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	429a      	cmp	r2, r3
 8001734:	d909      	bls.n	800174a <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8001736:	4b26      	ldr	r3, [pc, #152]	; (80017d0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	4b24      	ldr	r3, [pc, #144]	; (80017cc <HAL_TIM_IC_CaptureCallback+0x12c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001744:	33ff      	adds	r3, #255	; 0xff
 8001746:	4a23      	ldr	r2, [pc, #140]	; (80017d4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001748:	6013      	str	r3, [r2, #0]
			Distance = Difference * 0.034/2.0;
 800174a:	4b22      	ldr	r3, [pc, #136]	; (80017d4 <HAL_TIM_IC_CaptureCallback+0x134>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4618      	mov	r0, r3
 8001750:	f7fe ff00 	bl	8000554 <__aeabi_ui2d>
 8001754:	a31a      	add	r3, pc, #104	; (adr r3, 80017c0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8001756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175a:	f7fe ff75 	bl	8000648 <__aeabi_dmul>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	4610      	mov	r0, r2
 8001764:	4619      	mov	r1, r3
 8001766:	f04f 0200 	mov.w	r2, #0
 800176a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800176e:	f7ff f895 	bl	800089c <__aeabi_ddiv>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	4610      	mov	r0, r2
 8001778:	4619      	mov	r1, r3
 800177a:	f7ff fa3d 	bl	8000bf8 <__aeabi_d2uiz>
 800177e:	4603      	mov	r3, r0
 8001780:	4a15      	ldr	r2, [pc, #84]	; (80017d8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001782:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 0; // set it back to false
 8001784:	4b10      	ldr	r3, [pc, #64]	; (80017c8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001786:	2200      	movs	r2, #0
 8001788:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6a1a      	ldr	r2, [r3, #32]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f022 020a 	bic.w	r2, r2, #10
 8001798:	621a      	str	r2, [r3, #32]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6a12      	ldr	r2, [r2, #32]
 80017a4:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 80017a6:	4b0d      	ldr	r3, [pc, #52]	; (80017dc <HAL_TIM_IC_CaptureCallback+0x13c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	68da      	ldr	r2, [r3, #12]
 80017ac:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <HAL_TIM_IC_CaptureCallback+0x13c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f022 0202 	bic.w	r2, r2, #2
 80017b4:	60da      	str	r2, [r3, #12]
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	b020c49c 	.word	0xb020c49c
 80017c4:	3fa16872 	.word	0x3fa16872
 80017c8:	200002f0 	.word	0x200002f0
 80017cc:	200002e4 	.word	0x200002e4
 80017d0:	200002e8 	.word	0x200002e8
 80017d4:	200002ec 	.word	0x200002ec
 80017d8:	200002f4 	.word	0x200002f4
 80017dc:	20000248 	.word	0x20000248

080017e0 <HCSR04_Read>:

//HCSR04
void HCSR04_Read (void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 80017e4:	2201      	movs	r2, #1
 80017e6:	2102      	movs	r1, #2
 80017e8:	480a      	ldr	r0, [pc, #40]	; (8001814 <HCSR04_Read+0x34>)
 80017ea:	f000 fbfb 	bl	8001fe4 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 80017ee:	200a      	movs	r0, #10
 80017f0:	f7ff ff3a 	bl	8001668 <delay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 80017f4:	2200      	movs	r2, #0
 80017f6:	2102      	movs	r1, #2
 80017f8:	4806      	ldr	r0, [pc, #24]	; (8001814 <HCSR04_Read+0x34>)
 80017fa:	f000 fbf3 	bl	8001fe4 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 80017fe:	4b06      	ldr	r3, [pc, #24]	; (8001818 <HCSR04_Read+0x38>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	68da      	ldr	r2, [r3, #12]
 8001804:	4b04      	ldr	r3, [pc, #16]	; (8001818 <HCSR04_Read+0x38>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f042 0202 	orr.w	r2, r2, #2
 800180c:	60da      	str	r2, [r3, #12]
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	48000800 	.word	0x48000800
 8001818:	20000248 	.word	0x20000248

0800181c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x3f << 0x01)// 0x3F // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af02      	add	r7, sp, #8
 8001822:	4603      	mov	r3, r0
 8001824:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	f023 030f 	bic.w	r3, r3, #15
 800182c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	011b      	lsls	r3, r3, #4
 8001832:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001834:	7bfb      	ldrb	r3, [r7, #15]
 8001836:	f043 030c 	orr.w	r3, r3, #12
 800183a:	b2db      	uxtb	r3, r3
 800183c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800183e:	7bfb      	ldrb	r3, [r7, #15]
 8001840:	f043 0308 	orr.w	r3, r3, #8
 8001844:	b2db      	uxtb	r3, r3
 8001846:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001848:	7bbb      	ldrb	r3, [r7, #14]
 800184a:	f043 030c 	orr.w	r3, r3, #12
 800184e:	b2db      	uxtb	r3, r3
 8001850:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001852:	7bbb      	ldrb	r3, [r7, #14]
 8001854:	f043 0308 	orr.w	r3, r3, #8
 8001858:	b2db      	uxtb	r3, r3
 800185a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800185c:	f107 0208 	add.w	r2, r7, #8
 8001860:	2364      	movs	r3, #100	; 0x64
 8001862:	9300      	str	r3, [sp, #0]
 8001864:	2304      	movs	r3, #4
 8001866:	217e      	movs	r1, #126	; 0x7e
 8001868:	4803      	ldr	r0, [pc, #12]	; (8001878 <lcd_send_cmd+0x5c>)
 800186a:	f000 fc63 	bl	8002134 <HAL_I2C_Master_Transmit>
}
 800186e:	bf00      	nop
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	200001fc 	.word	0x200001fc

0800187c <lcd_send_data>:

void lcd_send_data (char data)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af02      	add	r7, sp, #8
 8001882:	4603      	mov	r3, r0
 8001884:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001886:	79fb      	ldrb	r3, [r7, #7]
 8001888:	f023 030f 	bic.w	r3, r3, #15
 800188c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	011b      	lsls	r3, r3, #4
 8001892:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001894:	7bfb      	ldrb	r3, [r7, #15]
 8001896:	f043 030d 	orr.w	r3, r3, #13
 800189a:	b2db      	uxtb	r3, r3
 800189c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800189e:	7bfb      	ldrb	r3, [r7, #15]
 80018a0:	f043 0309 	orr.w	r3, r3, #9
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80018a8:	7bbb      	ldrb	r3, [r7, #14]
 80018aa:	f043 030d 	orr.w	r3, r3, #13
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80018b2:	7bbb      	ldrb	r3, [r7, #14]
 80018b4:	f043 0309 	orr.w	r3, r3, #9
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80018bc:	f107 0208 	add.w	r2, r7, #8
 80018c0:	2364      	movs	r3, #100	; 0x64
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	2304      	movs	r3, #4
 80018c6:	217e      	movs	r1, #126	; 0x7e
 80018c8:	4803      	ldr	r0, [pc, #12]	; (80018d8 <lcd_send_data+0x5c>)
 80018ca:	f000 fc33 	bl	8002134 <HAL_I2C_Master_Transmit>
}
 80018ce:	bf00      	nop
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	200001fc 	.word	0x200001fc

080018dc <lcd_clear>:

void lcd_clear (void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
//	lcd_send_cmd (0x80);
//	for (int i=0; i<70; i++)
//	{
//		lcd_send_data (' ');
//	}
	HAL_Delay(1);
 80018e0:	2001      	movs	r0, #1
 80018e2:	f000 f8cb 	bl	8001a7c <HAL_Delay>
    lcd_send_cmd (0x01);  // clear display
 80018e6:	2001      	movs	r0, #1
 80018e8:	f7ff ff98 	bl	800181c <lcd_send_cmd>
	HAL_Delay(1);
 80018ec:	2001      	movs	r0, #1
 80018ee:	f000 f8c5 	bl	8001a7c <HAL_Delay>
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <lcd_init>:
    lcd_send_cmd (col);
}


void lcd_init (void)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80018fa:	2032      	movs	r0, #50	; 0x32
 80018fc:	f000 f8be 	bl	8001a7c <HAL_Delay>
	lcd_send_cmd (0x30);
 8001900:	2030      	movs	r0, #48	; 0x30
 8001902:	f7ff ff8b 	bl	800181c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001906:	2005      	movs	r0, #5
 8001908:	f000 f8b8 	bl	8001a7c <HAL_Delay>
	lcd_send_cmd (0x30);
 800190c:	2030      	movs	r0, #48	; 0x30
 800190e:	f7ff ff85 	bl	800181c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001912:	2001      	movs	r0, #1
 8001914:	f000 f8b2 	bl	8001a7c <HAL_Delay>
	lcd_send_cmd (0x30);
 8001918:	2030      	movs	r0, #48	; 0x30
 800191a:	f7ff ff7f 	bl	800181c <lcd_send_cmd>
	HAL_Delay(10);
 800191e:	200a      	movs	r0, #10
 8001920:	f000 f8ac 	bl	8001a7c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001924:	2020      	movs	r0, #32
 8001926:	f7ff ff79 	bl	800181c <lcd_send_cmd>
	HAL_Delay(10);
 800192a:	200a      	movs	r0, #10
 800192c:	f000 f8a6 	bl	8001a7c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001930:	2028      	movs	r0, #40	; 0x28
 8001932:	f7ff ff73 	bl	800181c <lcd_send_cmd>
	HAL_Delay(1);
 8001936:	2001      	movs	r0, #1
 8001938:	f000 f8a0 	bl	8001a7c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800193c:	2008      	movs	r0, #8
 800193e:	f7ff ff6d 	bl	800181c <lcd_send_cmd>
	HAL_Delay(1);
 8001942:	2001      	movs	r0, #1
 8001944:	f000 f89a 	bl	8001a7c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001948:	2001      	movs	r0, #1
 800194a:	f7ff ff67 	bl	800181c <lcd_send_cmd>
	HAL_Delay(1);
 800194e:	2001      	movs	r0, #1
 8001950:	f000 f894 	bl	8001a7c <HAL_Delay>
	HAL_Delay(1);
 8001954:	2001      	movs	r0, #1
 8001956:	f000 f891 	bl	8001a7c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800195a:	2006      	movs	r0, #6
 800195c:	f7ff ff5e 	bl	800181c <lcd_send_cmd>
	HAL_Delay(1);
 8001960:	2001      	movs	r0, #1
 8001962:	f000 f88b 	bl	8001a7c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001966:	200c      	movs	r0, #12
 8001968:	f7ff ff58 	bl	800181c <lcd_send_cmd>
}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}

08001970 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001978:	e006      	b.n	8001988 <lcd_send_string+0x18>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	1c5a      	adds	r2, r3, #1
 800197e:	607a      	str	r2, [r7, #4]
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff ff7a 	bl	800187c <lcd_send_data>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d1f4      	bne.n	800197a <lcd_send_string+0xa>
}
 8001990:	bf00      	nop
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019a0:	2300      	movs	r3, #0
 80019a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019a4:	2003      	movs	r0, #3
 80019a6:	f000 f95b 	bl	8001c60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019aa:	2000      	movs	r0, #0
 80019ac:	f000 f80e 	bl	80019cc <HAL_InitTick>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d002      	beq.n	80019bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	71fb      	strb	r3, [r7, #7]
 80019ba:	e001      	b.n	80019c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019bc:	f7ff fc1a 	bl	80011f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019c0:	79fb      	ldrb	r3, [r7, #7]

}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
	...

080019cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019d4:	2300      	movs	r3, #0
 80019d6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80019d8:	4b16      	ldr	r3, [pc, #88]	; (8001a34 <HAL_InitTick+0x68>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d022      	beq.n	8001a26 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80019e0:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <HAL_InitTick+0x6c>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <HAL_InitTick+0x68>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80019f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f4:	4618      	mov	r0, r3
 80019f6:	f000 f966 	bl	8001cc6 <HAL_SYSTICK_Config>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d10f      	bne.n	8001a20 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2b0f      	cmp	r3, #15
 8001a04:	d809      	bhi.n	8001a1a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a06:	2200      	movs	r2, #0
 8001a08:	6879      	ldr	r1, [r7, #4]
 8001a0a:	f04f 30ff 	mov.w	r0, #4294967295
 8001a0e:	f000 f932 	bl	8001c76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a12:	4a0a      	ldr	r2, [pc, #40]	; (8001a3c <HAL_InitTick+0x70>)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6013      	str	r3, [r2, #0]
 8001a18:	e007      	b.n	8001a2a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	73fb      	strb	r3, [r7, #15]
 8001a1e:	e004      	b.n	8001a2a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	73fb      	strb	r3, [r7, #15]
 8001a24:	e001      	b.n	8001a2a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3710      	adds	r7, #16
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20000008 	.word	0x20000008
 8001a38:	20000000 	.word	0x20000000
 8001a3c:	20000004 	.word	0x20000004

08001a40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a44:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <HAL_IncTick+0x1c>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <HAL_IncTick+0x20>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	4a03      	ldr	r2, [pc, #12]	; (8001a5c <HAL_IncTick+0x1c>)
 8001a50:	6013      	str	r3, [r2, #0]
}
 8001a52:	bf00      	nop
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	200002f8 	.word	0x200002f8
 8001a60:	20000008 	.word	0x20000008

08001a64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  return uwTick;
 8001a68:	4b03      	ldr	r3, [pc, #12]	; (8001a78 <HAL_GetTick+0x14>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	200002f8 	.word	0x200002f8

08001a7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a84:	f7ff ffee 	bl	8001a64 <HAL_GetTick>
 8001a88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a94:	d004      	beq.n	8001aa0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a96:	4b09      	ldr	r3, [pc, #36]	; (8001abc <HAL_Delay+0x40>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aa0:	bf00      	nop
 8001aa2:	f7ff ffdf 	bl	8001a64 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	68fa      	ldr	r2, [r7, #12]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d8f7      	bhi.n	8001aa2 <HAL_Delay+0x26>
  {
  }
}
 8001ab2:	bf00      	nop
 8001ab4:	bf00      	nop
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	20000008 	.word	0x20000008

08001ac0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ad0:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001adc:	4013      	ands	r3, r2
 8001ade:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ae8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001af0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001af2:	4a04      	ldr	r2, [pc, #16]	; (8001b04 <__NVIC_SetPriorityGrouping+0x44>)
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	60d3      	str	r3, [r2, #12]
}
 8001af8:	bf00      	nop
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b0c:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <__NVIC_GetPriorityGrouping+0x18>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	0a1b      	lsrs	r3, r3, #8
 8001b12:	f003 0307 	and.w	r3, r3, #7
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	db0b      	blt.n	8001b4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	f003 021f 	and.w	r2, r3, #31
 8001b3c:	4907      	ldr	r1, [pc, #28]	; (8001b5c <__NVIC_EnableIRQ+0x38>)
 8001b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b42:	095b      	lsrs	r3, r3, #5
 8001b44:	2001      	movs	r0, #1
 8001b46:	fa00 f202 	lsl.w	r2, r0, r2
 8001b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	e000e100 	.word	0xe000e100

08001b60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	6039      	str	r1, [r7, #0]
 8001b6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	db0a      	blt.n	8001b8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	b2da      	uxtb	r2, r3
 8001b78:	490c      	ldr	r1, [pc, #48]	; (8001bac <__NVIC_SetPriority+0x4c>)
 8001b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7e:	0112      	lsls	r2, r2, #4
 8001b80:	b2d2      	uxtb	r2, r2
 8001b82:	440b      	add	r3, r1
 8001b84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b88:	e00a      	b.n	8001ba0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	4908      	ldr	r1, [pc, #32]	; (8001bb0 <__NVIC_SetPriority+0x50>)
 8001b90:	79fb      	ldrb	r3, [r7, #7]
 8001b92:	f003 030f 	and.w	r3, r3, #15
 8001b96:	3b04      	subs	r3, #4
 8001b98:	0112      	lsls	r2, r2, #4
 8001b9a:	b2d2      	uxtb	r2, r2
 8001b9c:	440b      	add	r3, r1
 8001b9e:	761a      	strb	r2, [r3, #24]
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	e000e100 	.word	0xe000e100
 8001bb0:	e000ed00 	.word	0xe000ed00

08001bb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b089      	sub	sp, #36	; 0x24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f003 0307 	and.w	r3, r3, #7
 8001bc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	f1c3 0307 	rsb	r3, r3, #7
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	bf28      	it	cs
 8001bd2:	2304      	movcs	r3, #4
 8001bd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	3304      	adds	r3, #4
 8001bda:	2b06      	cmp	r3, #6
 8001bdc:	d902      	bls.n	8001be4 <NVIC_EncodePriority+0x30>
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3b03      	subs	r3, #3
 8001be2:	e000      	b.n	8001be6 <NVIC_EncodePriority+0x32>
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	43da      	mvns	r2, r3
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	401a      	ands	r2, r3
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	fa01 f303 	lsl.w	r3, r1, r3
 8001c06:	43d9      	mvns	r1, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c0c:	4313      	orrs	r3, r2
         );
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3724      	adds	r7, #36	; 0x24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
	...

08001c1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3b01      	subs	r3, #1
 8001c28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c2c:	d301      	bcc.n	8001c32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e00f      	b.n	8001c52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c32:	4a0a      	ldr	r2, [pc, #40]	; (8001c5c <SysTick_Config+0x40>)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3b01      	subs	r3, #1
 8001c38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c3a:	210f      	movs	r1, #15
 8001c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c40:	f7ff ff8e 	bl	8001b60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c44:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <SysTick_Config+0x40>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c4a:	4b04      	ldr	r3, [pc, #16]	; (8001c5c <SysTick_Config+0x40>)
 8001c4c:	2207      	movs	r2, #7
 8001c4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	e000e010 	.word	0xe000e010

08001c60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f7ff ff29 	bl	8001ac0 <__NVIC_SetPriorityGrouping>
}
 8001c6e:	bf00      	nop
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b086      	sub	sp, #24
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	60b9      	str	r1, [r7, #8]
 8001c80:	607a      	str	r2, [r7, #4]
 8001c82:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c84:	f7ff ff40 	bl	8001b08 <__NVIC_GetPriorityGrouping>
 8001c88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	68b9      	ldr	r1, [r7, #8]
 8001c8e:	6978      	ldr	r0, [r7, #20]
 8001c90:	f7ff ff90 	bl	8001bb4 <NVIC_EncodePriority>
 8001c94:	4602      	mov	r2, r0
 8001c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c9a:	4611      	mov	r1, r2
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff ff5f 	bl	8001b60 <__NVIC_SetPriority>
}
 8001ca2:	bf00      	nop
 8001ca4:	3718      	adds	r7, #24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff ff33 	bl	8001b24 <__NVIC_EnableIRQ>
}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b082      	sub	sp, #8
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7ff ffa4 	bl	8001c1c <SysTick_Config>
 8001cd4:	4603      	mov	r3, r0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
	...

08001ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b087      	sub	sp, #28
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001cea:	2300      	movs	r3, #0
 8001cec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001cee:	e15a      	b.n	8001fa6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f000 814c 	beq.w	8001fa0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f003 0303 	and.w	r3, r3, #3
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d005      	beq.n	8001d20 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d130      	bne.n	8001d82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	4013      	ands	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	68da      	ldr	r2, [r3, #12]
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d56:	2201      	movs	r2, #1
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	4013      	ands	r3, r2
 8001d64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	091b      	lsrs	r3, r3, #4
 8001d6c:	f003 0201 	and.w	r2, r3, #1
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f003 0303 	and.w	r3, r3, #3
 8001d8a:	2b03      	cmp	r3, #3
 8001d8c:	d017      	beq.n	8001dbe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	2203      	movs	r2, #3
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	4013      	ands	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	689a      	ldr	r2, [r3, #8]
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f003 0303 	and.w	r3, r3, #3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d123      	bne.n	8001e12 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	08da      	lsrs	r2, r3, #3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	3208      	adds	r2, #8
 8001dd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	220f      	movs	r2, #15
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43db      	mvns	r3, r3
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	4013      	ands	r3, r2
 8001dec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	691a      	ldr	r2, [r3, #16]
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	f003 0307 	and.w	r3, r3, #7
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	08da      	lsrs	r2, r3, #3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3208      	adds	r2, #8
 8001e0c:	6939      	ldr	r1, [r7, #16]
 8001e0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	2203      	movs	r2, #3
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	43db      	mvns	r3, r3
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	4013      	ands	r3, r2
 8001e28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f003 0203 	and.w	r2, r3, #3
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f000 80a6 	beq.w	8001fa0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e54:	4b5b      	ldr	r3, [pc, #364]	; (8001fc4 <HAL_GPIO_Init+0x2e4>)
 8001e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e58:	4a5a      	ldr	r2, [pc, #360]	; (8001fc4 <HAL_GPIO_Init+0x2e4>)
 8001e5a:	f043 0301 	orr.w	r3, r3, #1
 8001e5e:	6613      	str	r3, [r2, #96]	; 0x60
 8001e60:	4b58      	ldr	r3, [pc, #352]	; (8001fc4 <HAL_GPIO_Init+0x2e4>)
 8001e62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	60bb      	str	r3, [r7, #8]
 8001e6a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e6c:	4a56      	ldr	r2, [pc, #344]	; (8001fc8 <HAL_GPIO_Init+0x2e8>)
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	089b      	lsrs	r3, r3, #2
 8001e72:	3302      	adds	r3, #2
 8001e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	f003 0303 	and.w	r3, r3, #3
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	220f      	movs	r2, #15
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e96:	d01f      	beq.n	8001ed8 <HAL_GPIO_Init+0x1f8>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a4c      	ldr	r2, [pc, #304]	; (8001fcc <HAL_GPIO_Init+0x2ec>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d019      	beq.n	8001ed4 <HAL_GPIO_Init+0x1f4>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a4b      	ldr	r2, [pc, #300]	; (8001fd0 <HAL_GPIO_Init+0x2f0>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d013      	beq.n	8001ed0 <HAL_GPIO_Init+0x1f0>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a4a      	ldr	r2, [pc, #296]	; (8001fd4 <HAL_GPIO_Init+0x2f4>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d00d      	beq.n	8001ecc <HAL_GPIO_Init+0x1ec>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a49      	ldr	r2, [pc, #292]	; (8001fd8 <HAL_GPIO_Init+0x2f8>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d007      	beq.n	8001ec8 <HAL_GPIO_Init+0x1e8>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a48      	ldr	r2, [pc, #288]	; (8001fdc <HAL_GPIO_Init+0x2fc>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d101      	bne.n	8001ec4 <HAL_GPIO_Init+0x1e4>
 8001ec0:	2305      	movs	r3, #5
 8001ec2:	e00a      	b.n	8001eda <HAL_GPIO_Init+0x1fa>
 8001ec4:	2306      	movs	r3, #6
 8001ec6:	e008      	b.n	8001eda <HAL_GPIO_Init+0x1fa>
 8001ec8:	2304      	movs	r3, #4
 8001eca:	e006      	b.n	8001eda <HAL_GPIO_Init+0x1fa>
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e004      	b.n	8001eda <HAL_GPIO_Init+0x1fa>
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	e002      	b.n	8001eda <HAL_GPIO_Init+0x1fa>
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e000      	b.n	8001eda <HAL_GPIO_Init+0x1fa>
 8001ed8:	2300      	movs	r3, #0
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	f002 0203 	and.w	r2, r2, #3
 8001ee0:	0092      	lsls	r2, r2, #2
 8001ee2:	4093      	lsls	r3, r2
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001eea:	4937      	ldr	r1, [pc, #220]	; (8001fc8 <HAL_GPIO_Init+0x2e8>)
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	089b      	lsrs	r3, r3, #2
 8001ef0:	3302      	adds	r3, #2
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ef8:	4b39      	ldr	r3, [pc, #228]	; (8001fe0 <HAL_GPIO_Init+0x300>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	43db      	mvns	r3, r3
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	4013      	ands	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f1c:	4a30      	ldr	r2, [pc, #192]	; (8001fe0 <HAL_GPIO_Init+0x300>)
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f22:	4b2f      	ldr	r3, [pc, #188]	; (8001fe0 <HAL_GPIO_Init+0x300>)
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f46:	4a26      	ldr	r2, [pc, #152]	; (8001fe0 <HAL_GPIO_Init+0x300>)
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001f4c:	4b24      	ldr	r3, [pc, #144]	; (8001fe0 <HAL_GPIO_Init+0x300>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	43db      	mvns	r3, r3
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d003      	beq.n	8001f70 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f70:	4a1b      	ldr	r2, [pc, #108]	; (8001fe0 <HAL_GPIO_Init+0x300>)
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f76:	4b1a      	ldr	r3, [pc, #104]	; (8001fe0 <HAL_GPIO_Init+0x300>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	4013      	ands	r3, r2
 8001f84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f9a:	4a11      	ldr	r2, [pc, #68]	; (8001fe0 <HAL_GPIO_Init+0x300>)
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f47f ae9d 	bne.w	8001cf0 <HAL_GPIO_Init+0x10>
  }
}
 8001fb6:	bf00      	nop
 8001fb8:	bf00      	nop
 8001fba:	371c      	adds	r7, #28
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	40010000 	.word	0x40010000
 8001fcc:	48000400 	.word	0x48000400
 8001fd0:	48000800 	.word	0x48000800
 8001fd4:	48000c00 	.word	0x48000c00
 8001fd8:	48001000 	.word	0x48001000
 8001fdc:	48001400 	.word	0x48001400
 8001fe0:	40010400 	.word	0x40010400

08001fe4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	460b      	mov	r3, r1
 8001fee:	807b      	strh	r3, [r7, #2]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ff4:	787b      	ldrb	r3, [r7, #1]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ffa:	887a      	ldrh	r2, [r7, #2]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002000:	e002      	b.n	8002008 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002002:	887a      	ldrh	r2, [r7, #2]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e081      	b.n	800212a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d106      	bne.n	8002040 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7ff f8fe 	bl	800123c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2224      	movs	r2, #36	; 0x24
 8002044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 0201 	bic.w	r2, r2, #1
 8002056:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002064:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002074:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d107      	bne.n	800208e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689a      	ldr	r2, [r3, #8]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	e006      	b.n	800209c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800209a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d104      	bne.n	80020ae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	6812      	ldr	r2, [r2, #0]
 80020b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68da      	ldr	r2, [r3, #12]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	691a      	ldr	r2, [r3, #16]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	430a      	orrs	r2, r1
 80020ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	69d9      	ldr	r1, [r3, #28]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a1a      	ldr	r2, [r3, #32]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	430a      	orrs	r2, r1
 80020fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f042 0201 	orr.w	r2, r2, #1
 800210a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2220      	movs	r2, #32
 8002116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
	...

08002134 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b088      	sub	sp, #32
 8002138:	af02      	add	r7, sp, #8
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	607a      	str	r2, [r7, #4]
 800213e:	461a      	mov	r2, r3
 8002140:	460b      	mov	r3, r1
 8002142:	817b      	strh	r3, [r7, #10]
 8002144:	4613      	mov	r3, r2
 8002146:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b20      	cmp	r3, #32
 8002152:	f040 80da 	bne.w	800230a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800215c:	2b01      	cmp	r3, #1
 800215e:	d101      	bne.n	8002164 <HAL_I2C_Master_Transmit+0x30>
 8002160:	2302      	movs	r3, #2
 8002162:	e0d3      	b.n	800230c <HAL_I2C_Master_Transmit+0x1d8>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800216c:	f7ff fc7a 	bl	8001a64 <HAL_GetTick>
 8002170:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	9300      	str	r3, [sp, #0]
 8002176:	2319      	movs	r3, #25
 8002178:	2201      	movs	r2, #1
 800217a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f000 f8f0 	bl	8002364 <I2C_WaitOnFlagUntilTimeout>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e0be      	b.n	800230c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2221      	movs	r2, #33	; 0x21
 8002192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2210      	movs	r2, #16
 800219a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2200      	movs	r2, #0
 80021a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	893a      	ldrh	r2, [r7, #8]
 80021ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	2bff      	cmp	r3, #255	; 0xff
 80021be:	d90e      	bls.n	80021de <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	22ff      	movs	r2, #255	; 0xff
 80021c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ca:	b2da      	uxtb	r2, r3
 80021cc:	8979      	ldrh	r1, [r7, #10]
 80021ce:	4b51      	ldr	r3, [pc, #324]	; (8002314 <HAL_I2C_Master_Transmit+0x1e0>)
 80021d0:	9300      	str	r3, [sp, #0]
 80021d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	f000 fa6c 	bl	80026b4 <I2C_TransferConfig>
 80021dc:	e06c      	b.n	80022b8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ec:	b2da      	uxtb	r2, r3
 80021ee:	8979      	ldrh	r1, [r7, #10]
 80021f0:	4b48      	ldr	r3, [pc, #288]	; (8002314 <HAL_I2C_Master_Transmit+0x1e0>)
 80021f2:	9300      	str	r3, [sp, #0]
 80021f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021f8:	68f8      	ldr	r0, [r7, #12]
 80021fa:	f000 fa5b 	bl	80026b4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80021fe:	e05b      	b.n	80022b8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002200:	697a      	ldr	r2, [r7, #20]
 8002202:	6a39      	ldr	r1, [r7, #32]
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f000 f8ed 	bl	80023e4 <I2C_WaitOnTXISFlagUntilTimeout>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e07b      	b.n	800230c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002218:	781a      	ldrb	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002224:	1c5a      	adds	r2, r3, #1
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800222e:	b29b      	uxth	r3, r3
 8002230:	3b01      	subs	r3, #1
 8002232:	b29a      	uxth	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800223c:	3b01      	subs	r3, #1
 800223e:	b29a      	uxth	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002248:	b29b      	uxth	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d034      	beq.n	80022b8 <HAL_I2C_Master_Transmit+0x184>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002252:	2b00      	cmp	r3, #0
 8002254:	d130      	bne.n	80022b8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	6a3b      	ldr	r3, [r7, #32]
 800225c:	2200      	movs	r2, #0
 800225e:	2180      	movs	r1, #128	; 0x80
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f000 f87f 	bl	8002364 <I2C_WaitOnFlagUntilTimeout>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e04d      	b.n	800230c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002274:	b29b      	uxth	r3, r3
 8002276:	2bff      	cmp	r3, #255	; 0xff
 8002278:	d90e      	bls.n	8002298 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	22ff      	movs	r2, #255	; 0xff
 800227e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002284:	b2da      	uxtb	r2, r3
 8002286:	8979      	ldrh	r1, [r7, #10]
 8002288:	2300      	movs	r3, #0
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002290:	68f8      	ldr	r0, [r7, #12]
 8002292:	f000 fa0f 	bl	80026b4 <I2C_TransferConfig>
 8002296:	e00f      	b.n	80022b8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800229c:	b29a      	uxth	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	8979      	ldrh	r1, [r7, #10]
 80022aa:	2300      	movs	r3, #0
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022b2:	68f8      	ldr	r0, [r7, #12]
 80022b4:	f000 f9fe 	bl	80026b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022bc:	b29b      	uxth	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d19e      	bne.n	8002200 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	6a39      	ldr	r1, [r7, #32]
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f000 f8cc 	bl	8002464 <I2C_WaitOnSTOPFlagUntilTimeout>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e01a      	b.n	800230c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2220      	movs	r2, #32
 80022dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6859      	ldr	r1, [r3, #4]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	4b0b      	ldr	r3, [pc, #44]	; (8002318 <HAL_I2C_Master_Transmit+0x1e4>)
 80022ea:	400b      	ands	r3, r1
 80022ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2220      	movs	r2, #32
 80022f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002306:	2300      	movs	r3, #0
 8002308:	e000      	b.n	800230c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800230a:	2302      	movs	r3, #2
  }
}
 800230c:	4618      	mov	r0, r3
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	80002000 	.word	0x80002000
 8002318:	fe00e800 	.word	0xfe00e800

0800231c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b02      	cmp	r3, #2
 8002330:	d103      	bne.n	800233a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2200      	movs	r2, #0
 8002338:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	2b01      	cmp	r3, #1
 8002346:	d007      	beq.n	8002358 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	699a      	ldr	r2, [r3, #24]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f042 0201 	orr.w	r2, r2, #1
 8002356:	619a      	str	r2, [r3, #24]
  }
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	603b      	str	r3, [r7, #0]
 8002370:	4613      	mov	r3, r2
 8002372:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002374:	e022      	b.n	80023bc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800237c:	d01e      	beq.n	80023bc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800237e:	f7ff fb71 	bl	8001a64 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	429a      	cmp	r2, r3
 800238c:	d302      	bcc.n	8002394 <I2C_WaitOnFlagUntilTimeout+0x30>
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d113      	bne.n	80023bc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002398:	f043 0220 	orr.w	r2, r3, #32
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2220      	movs	r2, #32
 80023a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e00f      	b.n	80023dc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	699a      	ldr	r2, [r3, #24]
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	4013      	ands	r3, r2
 80023c6:	68ba      	ldr	r2, [r7, #8]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	bf0c      	ite	eq
 80023cc:	2301      	moveq	r3, #1
 80023ce:	2300      	movne	r3, #0
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	461a      	mov	r2, r3
 80023d4:	79fb      	ldrb	r3, [r7, #7]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d0cd      	beq.n	8002376 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80023f0:	e02c      	b.n	800244c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	68b9      	ldr	r1, [r7, #8]
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f000 f870 	bl	80024dc <I2C_IsErrorOccurred>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e02a      	b.n	800245c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800240c:	d01e      	beq.n	800244c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800240e:	f7ff fb29 	bl	8001a64 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	68ba      	ldr	r2, [r7, #8]
 800241a:	429a      	cmp	r2, r3
 800241c:	d302      	bcc.n	8002424 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d113      	bne.n	800244c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002428:	f043 0220 	orr.w	r2, r3, #32
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2220      	movs	r2, #32
 8002434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e007      	b.n	800245c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b02      	cmp	r3, #2
 8002458:	d1cb      	bne.n	80023f2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002470:	e028      	b.n	80024c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	68b9      	ldr	r1, [r7, #8]
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f000 f830 	bl	80024dc <I2C_IsErrorOccurred>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e026      	b.n	80024d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002486:	f7ff faed 	bl	8001a64 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	68ba      	ldr	r2, [r7, #8]
 8002492:	429a      	cmp	r2, r3
 8002494:	d302      	bcc.n	800249c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d113      	bne.n	80024c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a0:	f043 0220 	orr.w	r2, r3, #32
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2220      	movs	r2, #32
 80024ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e007      	b.n	80024d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	f003 0320 	and.w	r3, r3, #32
 80024ce:	2b20      	cmp	r3, #32
 80024d0:	d1cf      	bne.n	8002472 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08a      	sub	sp, #40	; 0x28
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024e8:	2300      	movs	r3, #0
 80024ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	f003 0310 	and.w	r3, r3, #16
 8002504:	2b00      	cmp	r3, #0
 8002506:	d075      	beq.n	80025f4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2210      	movs	r2, #16
 800250e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002510:	e056      	b.n	80025c0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002518:	d052      	beq.n	80025c0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800251a:	f7ff faa3 	bl	8001a64 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	68ba      	ldr	r2, [r7, #8]
 8002526:	429a      	cmp	r2, r3
 8002528:	d302      	bcc.n	8002530 <I2C_IsErrorOccurred+0x54>
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d147      	bne.n	80025c0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800253a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002542:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800254e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002552:	d12e      	bne.n	80025b2 <I2C_IsErrorOccurred+0xd6>
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800255a:	d02a      	beq.n	80025b2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800255c:	7cfb      	ldrb	r3, [r7, #19]
 800255e:	2b20      	cmp	r3, #32
 8002560:	d027      	beq.n	80025b2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002570:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002572:	f7ff fa77 	bl	8001a64 <HAL_GetTick>
 8002576:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002578:	e01b      	b.n	80025b2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800257a:	f7ff fa73 	bl	8001a64 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b19      	cmp	r3, #25
 8002586:	d914      	bls.n	80025b2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258c:	f043 0220 	orr.w	r2, r3, #32
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2220      	movs	r2, #32
 8002598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	f003 0320 	and.w	r3, r3, #32
 80025bc:	2b20      	cmp	r3, #32
 80025be:	d1dc      	bne.n	800257a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	f003 0320 	and.w	r3, r3, #32
 80025ca:	2b20      	cmp	r3, #32
 80025cc:	d003      	beq.n	80025d6 <I2C_IsErrorOccurred+0xfa>
 80025ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d09d      	beq.n	8002512 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80025d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d103      	bne.n	80025e6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2220      	movs	r2, #32
 80025e4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80025e6:	6a3b      	ldr	r3, [r7, #32]
 80025e8:	f043 0304 	orr.w	r3, r3, #4
 80025ec:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00b      	beq.n	800261e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002606:	6a3b      	ldr	r3, [r7, #32]
 8002608:	f043 0301 	orr.w	r3, r3, #1
 800260c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002616:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002624:	2b00      	cmp	r3, #0
 8002626:	d00b      	beq.n	8002640 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002628:	6a3b      	ldr	r3, [r7, #32]
 800262a:	f043 0308 	orr.w	r3, r3, #8
 800262e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002638:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00b      	beq.n	8002662 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800264a:	6a3b      	ldr	r3, [r7, #32]
 800264c:	f043 0302 	orr.w	r3, r3, #2
 8002650:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f44f 7200 	mov.w	r2, #512	; 0x200
 800265a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002662:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002666:	2b00      	cmp	r3, #0
 8002668:	d01c      	beq.n	80026a4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f7ff fe56 	bl	800231c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6859      	ldr	r1, [r3, #4]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	4b0d      	ldr	r3, [pc, #52]	; (80026b0 <I2C_IsErrorOccurred+0x1d4>)
 800267c:	400b      	ands	r3, r1
 800267e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002684:	6a3b      	ldr	r3, [r7, #32]
 8002686:	431a      	orrs	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2220      	movs	r2, #32
 8002690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80026a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3728      	adds	r7, #40	; 0x28
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	fe00e800 	.word	0xfe00e800

080026b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b087      	sub	sp, #28
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	607b      	str	r3, [r7, #4]
 80026be:	460b      	mov	r3, r1
 80026c0:	817b      	strh	r3, [r7, #10]
 80026c2:	4613      	mov	r3, r2
 80026c4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026c6:	897b      	ldrh	r3, [r7, #10]
 80026c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80026cc:	7a7b      	ldrb	r3, [r7, #9]
 80026ce:	041b      	lsls	r3, r3, #16
 80026d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026d4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026da:	6a3b      	ldr	r3, [r7, #32]
 80026dc:	4313      	orrs	r3, r2
 80026de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026e2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	685a      	ldr	r2, [r3, #4]
 80026ea:	6a3b      	ldr	r3, [r7, #32]
 80026ec:	0d5b      	lsrs	r3, r3, #21
 80026ee:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80026f2:	4b08      	ldr	r3, [pc, #32]	; (8002714 <I2C_TransferConfig+0x60>)
 80026f4:	430b      	orrs	r3, r1
 80026f6:	43db      	mvns	r3, r3
 80026f8:	ea02 0103 	and.w	r1, r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	697a      	ldr	r2, [r7, #20]
 8002702:	430a      	orrs	r2, r1
 8002704:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002706:	bf00      	nop
 8002708:	371c      	adds	r7, #28
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	03ff63ff 	.word	0x03ff63ff

08002718 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b20      	cmp	r3, #32
 800272c:	d138      	bne.n	80027a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002734:	2b01      	cmp	r3, #1
 8002736:	d101      	bne.n	800273c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002738:	2302      	movs	r3, #2
 800273a:	e032      	b.n	80027a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2224      	movs	r2, #36	; 0x24
 8002748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 0201 	bic.w	r2, r2, #1
 800275a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800276a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6819      	ldr	r1, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	430a      	orrs	r2, r1
 800277a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f042 0201 	orr.w	r2, r2, #1
 800278a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2220      	movs	r2, #32
 8002790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800279c:	2300      	movs	r3, #0
 800279e:	e000      	b.n	80027a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80027a0:	2302      	movs	r3, #2
  }
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80027ae:	b480      	push	{r7}
 80027b0:	b085      	sub	sp, #20
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
 80027b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b20      	cmp	r3, #32
 80027c2:	d139      	bne.n	8002838 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d101      	bne.n	80027d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80027ce:	2302      	movs	r3, #2
 80027d0:	e033      	b.n	800283a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2224      	movs	r2, #36	; 0x24
 80027de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 0201 	bic.w	r2, r2, #1
 80027f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002800:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	021b      	lsls	r3, r3, #8
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	4313      	orrs	r3, r2
 800280a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f042 0201 	orr.w	r2, r2, #1
 8002822:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2220      	movs	r2, #32
 8002828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002834:	2300      	movs	r3, #0
 8002836:	e000      	b.n	800283a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002838:	2302      	movs	r3, #2
  }
}
 800283a:	4618      	mov	r0, r3
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
	...

08002848 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d141      	bne.n	80028da <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002856:	4b4b      	ldr	r3, [pc, #300]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800285e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002862:	d131      	bne.n	80028c8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002864:	4b47      	ldr	r3, [pc, #284]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800286a:	4a46      	ldr	r2, [pc, #280]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800286c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002870:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002874:	4b43      	ldr	r3, [pc, #268]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800287c:	4a41      	ldr	r2, [pc, #260]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800287e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002882:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002884:	4b40      	ldr	r3, [pc, #256]	; (8002988 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2232      	movs	r2, #50	; 0x32
 800288a:	fb02 f303 	mul.w	r3, r2, r3
 800288e:	4a3f      	ldr	r2, [pc, #252]	; (800298c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002890:	fba2 2303 	umull	r2, r3, r2, r3
 8002894:	0c9b      	lsrs	r3, r3, #18
 8002896:	3301      	adds	r3, #1
 8002898:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800289a:	e002      	b.n	80028a2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	3b01      	subs	r3, #1
 80028a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028a2:	4b38      	ldr	r3, [pc, #224]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028ae:	d102      	bne.n	80028b6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1f2      	bne.n	800289c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028b6:	4b33      	ldr	r3, [pc, #204]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028c2:	d158      	bne.n	8002976 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e057      	b.n	8002978 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80028c8:	4b2e      	ldr	r3, [pc, #184]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028ce:	4a2d      	ldr	r2, [pc, #180]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80028d8:	e04d      	b.n	8002976 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028e0:	d141      	bne.n	8002966 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80028e2:	4b28      	ldr	r3, [pc, #160]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80028ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028ee:	d131      	bne.n	8002954 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80028f0:	4b24      	ldr	r3, [pc, #144]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028f6:	4a23      	ldr	r2, [pc, #140]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002900:	4b20      	ldr	r3, [pc, #128]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002908:	4a1e      	ldr	r2, [pc, #120]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800290a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800290e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002910:	4b1d      	ldr	r3, [pc, #116]	; (8002988 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2232      	movs	r2, #50	; 0x32
 8002916:	fb02 f303 	mul.w	r3, r2, r3
 800291a:	4a1c      	ldr	r2, [pc, #112]	; (800298c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800291c:	fba2 2303 	umull	r2, r3, r2, r3
 8002920:	0c9b      	lsrs	r3, r3, #18
 8002922:	3301      	adds	r3, #1
 8002924:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002926:	e002      	b.n	800292e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	3b01      	subs	r3, #1
 800292c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800292e:	4b15      	ldr	r3, [pc, #84]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002936:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800293a:	d102      	bne.n	8002942 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1f2      	bne.n	8002928 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002942:	4b10      	ldr	r3, [pc, #64]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800294a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800294e:	d112      	bne.n	8002976 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e011      	b.n	8002978 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002954:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002956:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800295a:	4a0a      	ldr	r2, [pc, #40]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800295c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002960:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002964:	e007      	b.n	8002976 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002966:	4b07      	ldr	r3, [pc, #28]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800296e:	4a05      	ldr	r2, [pc, #20]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002970:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002974:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3714      	adds	r7, #20
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	40007000 	.word	0x40007000
 8002988:	20000000 	.word	0x20000000
 800298c:	431bde83 	.word	0x431bde83

08002990 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002994:	4b05      	ldr	r3, [pc, #20]	; (80029ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	4a04      	ldr	r2, [pc, #16]	; (80029ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800299a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800299e:	6093      	str	r3, [r2, #8]
}
 80029a0:	bf00      	nop
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	40007000 	.word	0x40007000

080029b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b088      	sub	sp, #32
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e306      	b.n	8002fd0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d075      	beq.n	8002aba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029ce:	4b97      	ldr	r3, [pc, #604]	; (8002c2c <HAL_RCC_OscConfig+0x27c>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 030c 	and.w	r3, r3, #12
 80029d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029d8:	4b94      	ldr	r3, [pc, #592]	; (8002c2c <HAL_RCC_OscConfig+0x27c>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	f003 0303 	and.w	r3, r3, #3
 80029e0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	2b0c      	cmp	r3, #12
 80029e6:	d102      	bne.n	80029ee <HAL_RCC_OscConfig+0x3e>
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	2b03      	cmp	r3, #3
 80029ec:	d002      	beq.n	80029f4 <HAL_RCC_OscConfig+0x44>
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	2b08      	cmp	r3, #8
 80029f2:	d10b      	bne.n	8002a0c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f4:	4b8d      	ldr	r3, [pc, #564]	; (8002c2c <HAL_RCC_OscConfig+0x27c>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d05b      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x108>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d157      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e2e1      	b.n	8002fd0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a14:	d106      	bne.n	8002a24 <HAL_RCC_OscConfig+0x74>
 8002a16:	4b85      	ldr	r3, [pc, #532]	; (8002c2c <HAL_RCC_OscConfig+0x27c>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a84      	ldr	r2, [pc, #528]	; (8002c2c <HAL_RCC_OscConfig+0x27c>)
 8002a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a20:	6013      	str	r3, [r2, #0]
 8002a22:	e01d      	b.n	8002a60 <HAL_RCC_OscConfig+0xb0>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a2c:	d10c      	bne.n	8002a48 <HAL_RCC_OscConfig+0x98>
 8002a2e:	4b7f      	ldr	r3, [pc, #508]	; (8002c2c <HAL_RCC_OscConfig+0x27c>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a7e      	ldr	r2, [pc, #504]	; (8002c2c <HAL_RCC_OscConfig+0x27c>)
 8002a34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a38:	6013      	str	r3, [r2, #0]
 8002a3a:	4b7c      	ldr	r3, [pc, #496]	; (8002c2c <HAL_RCC_OscConfig+0x27c>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a7b      	ldr	r2, [pc, #492]	; (8002c2c <HAL_RCC_OscConfig+0x27c>)
 8002a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a44:	6013      	str	r3, [r2, #0]
 8002a46:	e00b      	b.n	8002a60 <HAL_RCC_OscConfig+0xb0>
 8002a48:	4b78      	ldr	r3, [pc, #480]	; (8002c2c <HAL_RCC_OscConfig+0x27c>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a77      	ldr	r2, [pc, #476]	; (8002c2c <HAL_RCC_OscConfig+0x27c>)
 8002a4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a52:	6013      	str	r3, [r2, #0]
 8002a54:	4b75      	ldr	r3, [pc, #468]	; (8002c2c <HAL_RCC_OscConfig+0x27c>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a74      	ldr	r2, [pc, #464]	; (8002c2c <HAL_RCC_OscConfig+0x27c>)
 8002a5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d013      	beq.n	8002a90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a68:	f7fe fffc 	bl	8001a64 <HAL_GetTick>
 8002a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a70:	f7fe fff8 	bl	8001a64 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b64      	cmp	r3, #100	; 0x64
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e2a6      	b.n	8002fd0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a82:	4b6a      	ldr	r3, [pc, #424]	; (8002c2c <HAL_RCC_OscConfig+0x27c>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d0f0      	beq.n	8002a70 <HAL_RCC_OscConfig+0xc0>
 8002a8e:	e014      	b.n	8002aba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a90:	f7fe ffe8 	bl	8001a64 <HAL_GetTick>
 8002a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a96:	e008      	b.n	8002aaa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a98:	f7fe ffe4 	bl	8001a64 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b64      	cmp	r3, #100	; 0x64
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e292      	b.n	8002fd0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002aaa:	4b60      	ldr	r3, [pc, #384]	; (8002c2c <HAL_RCC_OscConfig+0x27c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1f0      	bne.n	8002a98 <HAL_RCC_OscConfig+0xe8>
 8002ab6:	e000      	b.n	8002aba <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d075      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ac6:	4b59      	ldr	r3, [pc, #356]	; (8002c2c <HAL_RCC_OscConfig+0x27c>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 030c 	and.w	r3, r3, #12
 8002ace:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ad0:	4b56      	ldr	r3, [pc, #344]	; (8002c2c <HAL_RCC_OscConfig+0x27c>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	f003 0303 	and.w	r3, r3, #3
 8002ad8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	2b0c      	cmp	r3, #12
 8002ade:	d102      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x136>
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d002      	beq.n	8002aec <HAL_RCC_OscConfig+0x13c>
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	2b04      	cmp	r3, #4
 8002aea:	d11f      	bne.n	8002b2c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002aec:	4b4f      	ldr	r3, [pc, #316]	; (8002c2c <HAL_RCC_OscConfig+0x27c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d005      	beq.n	8002b04 <HAL_RCC_OscConfig+0x154>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d101      	bne.n	8002b04 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e265      	b.n	8002fd0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b04:	4b49      	ldr	r3, [pc, #292]	; (8002c2c <HAL_RCC_OscConfig+0x27c>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	061b      	lsls	r3, r3, #24
 8002b12:	4946      	ldr	r1, [pc, #280]	; (8002c2c <HAL_RCC_OscConfig+0x27c>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002b18:	4b45      	ldr	r3, [pc, #276]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7fe ff55 	bl	80019cc <HAL_InitTick>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d043      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e251      	b.n	8002fd0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d023      	beq.n	8002b7c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b34:	4b3d      	ldr	r3, [pc, #244]	; (8002c2c <HAL_RCC_OscConfig+0x27c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a3c      	ldr	r2, [pc, #240]	; (8002c2c <HAL_RCC_OscConfig+0x27c>)
 8002b3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b40:	f7fe ff90 	bl	8001a64 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b48:	f7fe ff8c 	bl	8001a64 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e23a      	b.n	8002fd0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b5a:	4b34      	ldr	r3, [pc, #208]	; (8002c2c <HAL_RCC_OscConfig+0x27c>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d0f0      	beq.n	8002b48 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b66:	4b31      	ldr	r3, [pc, #196]	; (8002c2c <HAL_RCC_OscConfig+0x27c>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	061b      	lsls	r3, r3, #24
 8002b74:	492d      	ldr	r1, [pc, #180]	; (8002c2c <HAL_RCC_OscConfig+0x27c>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	604b      	str	r3, [r1, #4]
 8002b7a:	e01a      	b.n	8002bb2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b7c:	4b2b      	ldr	r3, [pc, #172]	; (8002c2c <HAL_RCC_OscConfig+0x27c>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a2a      	ldr	r2, [pc, #168]	; (8002c2c <HAL_RCC_OscConfig+0x27c>)
 8002b82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b88:	f7fe ff6c 	bl	8001a64 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b90:	f7fe ff68 	bl	8001a64 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e216      	b.n	8002fd0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ba2:	4b22      	ldr	r3, [pc, #136]	; (8002c2c <HAL_RCC_OscConfig+0x27c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1f0      	bne.n	8002b90 <HAL_RCC_OscConfig+0x1e0>
 8002bae:	e000      	b.n	8002bb2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bb0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0308 	and.w	r3, r3, #8
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d041      	beq.n	8002c42 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d01c      	beq.n	8002c00 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bc6:	4b19      	ldr	r3, [pc, #100]	; (8002c2c <HAL_RCC_OscConfig+0x27c>)
 8002bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bcc:	4a17      	ldr	r2, [pc, #92]	; (8002c2c <HAL_RCC_OscConfig+0x27c>)
 8002bce:	f043 0301 	orr.w	r3, r3, #1
 8002bd2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd6:	f7fe ff45 	bl	8001a64 <HAL_GetTick>
 8002bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bdc:	e008      	b.n	8002bf0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bde:	f7fe ff41 	bl	8001a64 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e1ef      	b.n	8002fd0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bf0:	4b0e      	ldr	r3, [pc, #56]	; (8002c2c <HAL_RCC_OscConfig+0x27c>)
 8002bf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d0ef      	beq.n	8002bde <HAL_RCC_OscConfig+0x22e>
 8002bfe:	e020      	b.n	8002c42 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c00:	4b0a      	ldr	r3, [pc, #40]	; (8002c2c <HAL_RCC_OscConfig+0x27c>)
 8002c02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c06:	4a09      	ldr	r2, [pc, #36]	; (8002c2c <HAL_RCC_OscConfig+0x27c>)
 8002c08:	f023 0301 	bic.w	r3, r3, #1
 8002c0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c10:	f7fe ff28 	bl	8001a64 <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c16:	e00d      	b.n	8002c34 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c18:	f7fe ff24 	bl	8001a64 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d906      	bls.n	8002c34 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e1d2      	b.n	8002fd0 <HAL_RCC_OscConfig+0x620>
 8002c2a:	bf00      	nop
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c34:	4b8c      	ldr	r3, [pc, #560]	; (8002e68 <HAL_RCC_OscConfig+0x4b8>)
 8002c36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1ea      	bne.n	8002c18 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0304 	and.w	r3, r3, #4
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f000 80a6 	beq.w	8002d9c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c50:	2300      	movs	r3, #0
 8002c52:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c54:	4b84      	ldr	r3, [pc, #528]	; (8002e68 <HAL_RCC_OscConfig+0x4b8>)
 8002c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d101      	bne.n	8002c64 <HAL_RCC_OscConfig+0x2b4>
 8002c60:	2301      	movs	r3, #1
 8002c62:	e000      	b.n	8002c66 <HAL_RCC_OscConfig+0x2b6>
 8002c64:	2300      	movs	r3, #0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00d      	beq.n	8002c86 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c6a:	4b7f      	ldr	r3, [pc, #508]	; (8002e68 <HAL_RCC_OscConfig+0x4b8>)
 8002c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c6e:	4a7e      	ldr	r2, [pc, #504]	; (8002e68 <HAL_RCC_OscConfig+0x4b8>)
 8002c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c74:	6593      	str	r3, [r2, #88]	; 0x58
 8002c76:	4b7c      	ldr	r3, [pc, #496]	; (8002e68 <HAL_RCC_OscConfig+0x4b8>)
 8002c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c7e:	60fb      	str	r3, [r7, #12]
 8002c80:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002c82:	2301      	movs	r3, #1
 8002c84:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c86:	4b79      	ldr	r3, [pc, #484]	; (8002e6c <HAL_RCC_OscConfig+0x4bc>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d118      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c92:	4b76      	ldr	r3, [pc, #472]	; (8002e6c <HAL_RCC_OscConfig+0x4bc>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a75      	ldr	r2, [pc, #468]	; (8002e6c <HAL_RCC_OscConfig+0x4bc>)
 8002c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c9e:	f7fe fee1 	bl	8001a64 <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ca4:	e008      	b.n	8002cb8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ca6:	f7fe fedd 	bl	8001a64 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e18b      	b.n	8002fd0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cb8:	4b6c      	ldr	r3, [pc, #432]	; (8002e6c <HAL_RCC_OscConfig+0x4bc>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0f0      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d108      	bne.n	8002cde <HAL_RCC_OscConfig+0x32e>
 8002ccc:	4b66      	ldr	r3, [pc, #408]	; (8002e68 <HAL_RCC_OscConfig+0x4b8>)
 8002cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd2:	4a65      	ldr	r2, [pc, #404]	; (8002e68 <HAL_RCC_OscConfig+0x4b8>)
 8002cd4:	f043 0301 	orr.w	r3, r3, #1
 8002cd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cdc:	e024      	b.n	8002d28 <HAL_RCC_OscConfig+0x378>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	2b05      	cmp	r3, #5
 8002ce4:	d110      	bne.n	8002d08 <HAL_RCC_OscConfig+0x358>
 8002ce6:	4b60      	ldr	r3, [pc, #384]	; (8002e68 <HAL_RCC_OscConfig+0x4b8>)
 8002ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cec:	4a5e      	ldr	r2, [pc, #376]	; (8002e68 <HAL_RCC_OscConfig+0x4b8>)
 8002cee:	f043 0304 	orr.w	r3, r3, #4
 8002cf2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cf6:	4b5c      	ldr	r3, [pc, #368]	; (8002e68 <HAL_RCC_OscConfig+0x4b8>)
 8002cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfc:	4a5a      	ldr	r2, [pc, #360]	; (8002e68 <HAL_RCC_OscConfig+0x4b8>)
 8002cfe:	f043 0301 	orr.w	r3, r3, #1
 8002d02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d06:	e00f      	b.n	8002d28 <HAL_RCC_OscConfig+0x378>
 8002d08:	4b57      	ldr	r3, [pc, #348]	; (8002e68 <HAL_RCC_OscConfig+0x4b8>)
 8002d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d0e:	4a56      	ldr	r2, [pc, #344]	; (8002e68 <HAL_RCC_OscConfig+0x4b8>)
 8002d10:	f023 0301 	bic.w	r3, r3, #1
 8002d14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d18:	4b53      	ldr	r3, [pc, #332]	; (8002e68 <HAL_RCC_OscConfig+0x4b8>)
 8002d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d1e:	4a52      	ldr	r2, [pc, #328]	; (8002e68 <HAL_RCC_OscConfig+0x4b8>)
 8002d20:	f023 0304 	bic.w	r3, r3, #4
 8002d24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d016      	beq.n	8002d5e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d30:	f7fe fe98 	bl	8001a64 <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d36:	e00a      	b.n	8002d4e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d38:	f7fe fe94 	bl	8001a64 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e140      	b.n	8002fd0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d4e:	4b46      	ldr	r3, [pc, #280]	; (8002e68 <HAL_RCC_OscConfig+0x4b8>)
 8002d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d0ed      	beq.n	8002d38 <HAL_RCC_OscConfig+0x388>
 8002d5c:	e015      	b.n	8002d8a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d5e:	f7fe fe81 	bl	8001a64 <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d64:	e00a      	b.n	8002d7c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d66:	f7fe fe7d 	bl	8001a64 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e129      	b.n	8002fd0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d7c:	4b3a      	ldr	r3, [pc, #232]	; (8002e68 <HAL_RCC_OscConfig+0x4b8>)
 8002d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1ed      	bne.n	8002d66 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d8a:	7ffb      	ldrb	r3, [r7, #31]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d105      	bne.n	8002d9c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d90:	4b35      	ldr	r3, [pc, #212]	; (8002e68 <HAL_RCC_OscConfig+0x4b8>)
 8002d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d94:	4a34      	ldr	r2, [pc, #208]	; (8002e68 <HAL_RCC_OscConfig+0x4b8>)
 8002d96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d9a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0320 	and.w	r3, r3, #32
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d03c      	beq.n	8002e22 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d01c      	beq.n	8002dea <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002db0:	4b2d      	ldr	r3, [pc, #180]	; (8002e68 <HAL_RCC_OscConfig+0x4b8>)
 8002db2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002db6:	4a2c      	ldr	r2, [pc, #176]	; (8002e68 <HAL_RCC_OscConfig+0x4b8>)
 8002db8:	f043 0301 	orr.w	r3, r3, #1
 8002dbc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc0:	f7fe fe50 	bl	8001a64 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002dc8:	f7fe fe4c 	bl	8001a64 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e0fa      	b.n	8002fd0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002dda:	4b23      	ldr	r3, [pc, #140]	; (8002e68 <HAL_RCC_OscConfig+0x4b8>)
 8002ddc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d0ef      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x418>
 8002de8:	e01b      	b.n	8002e22 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002dea:	4b1f      	ldr	r3, [pc, #124]	; (8002e68 <HAL_RCC_OscConfig+0x4b8>)
 8002dec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002df0:	4a1d      	ldr	r2, [pc, #116]	; (8002e68 <HAL_RCC_OscConfig+0x4b8>)
 8002df2:	f023 0301 	bic.w	r3, r3, #1
 8002df6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dfa:	f7fe fe33 	bl	8001a64 <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e00:	e008      	b.n	8002e14 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e02:	f7fe fe2f 	bl	8001a64 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e0dd      	b.n	8002fd0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e14:	4b14      	ldr	r3, [pc, #80]	; (8002e68 <HAL_RCC_OscConfig+0x4b8>)
 8002e16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1ef      	bne.n	8002e02 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f000 80d1 	beq.w	8002fce <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e2c:	4b0e      	ldr	r3, [pc, #56]	; (8002e68 <HAL_RCC_OscConfig+0x4b8>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f003 030c 	and.w	r3, r3, #12
 8002e34:	2b0c      	cmp	r3, #12
 8002e36:	f000 808b 	beq.w	8002f50 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d15e      	bne.n	8002f00 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e42:	4b09      	ldr	r3, [pc, #36]	; (8002e68 <HAL_RCC_OscConfig+0x4b8>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a08      	ldr	r2, [pc, #32]	; (8002e68 <HAL_RCC_OscConfig+0x4b8>)
 8002e48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e4e:	f7fe fe09 	bl	8001a64 <HAL_GetTick>
 8002e52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e54:	e00c      	b.n	8002e70 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e56:	f7fe fe05 	bl	8001a64 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d905      	bls.n	8002e70 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e0b3      	b.n	8002fd0 <HAL_RCC_OscConfig+0x620>
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e70:	4b59      	ldr	r3, [pc, #356]	; (8002fd8 <HAL_RCC_OscConfig+0x628>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1ec      	bne.n	8002e56 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e7c:	4b56      	ldr	r3, [pc, #344]	; (8002fd8 <HAL_RCC_OscConfig+0x628>)
 8002e7e:	68da      	ldr	r2, [r3, #12]
 8002e80:	4b56      	ldr	r3, [pc, #344]	; (8002fdc <HAL_RCC_OscConfig+0x62c>)
 8002e82:	4013      	ands	r3, r2
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	6a11      	ldr	r1, [r2, #32]
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e8c:	3a01      	subs	r2, #1
 8002e8e:	0112      	lsls	r2, r2, #4
 8002e90:	4311      	orrs	r1, r2
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002e96:	0212      	lsls	r2, r2, #8
 8002e98:	4311      	orrs	r1, r2
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e9e:	0852      	lsrs	r2, r2, #1
 8002ea0:	3a01      	subs	r2, #1
 8002ea2:	0552      	lsls	r2, r2, #21
 8002ea4:	4311      	orrs	r1, r2
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002eaa:	0852      	lsrs	r2, r2, #1
 8002eac:	3a01      	subs	r2, #1
 8002eae:	0652      	lsls	r2, r2, #25
 8002eb0:	4311      	orrs	r1, r2
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002eb6:	06d2      	lsls	r2, r2, #27
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	4947      	ldr	r1, [pc, #284]	; (8002fd8 <HAL_RCC_OscConfig+0x628>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ec0:	4b45      	ldr	r3, [pc, #276]	; (8002fd8 <HAL_RCC_OscConfig+0x628>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a44      	ldr	r2, [pc, #272]	; (8002fd8 <HAL_RCC_OscConfig+0x628>)
 8002ec6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002eca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ecc:	4b42      	ldr	r3, [pc, #264]	; (8002fd8 <HAL_RCC_OscConfig+0x628>)
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	4a41      	ldr	r2, [pc, #260]	; (8002fd8 <HAL_RCC_OscConfig+0x628>)
 8002ed2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ed6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed8:	f7fe fdc4 	bl	8001a64 <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ee0:	f7fe fdc0 	bl	8001a64 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e06e      	b.n	8002fd0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ef2:	4b39      	ldr	r3, [pc, #228]	; (8002fd8 <HAL_RCC_OscConfig+0x628>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d0f0      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x530>
 8002efe:	e066      	b.n	8002fce <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f00:	4b35      	ldr	r3, [pc, #212]	; (8002fd8 <HAL_RCC_OscConfig+0x628>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a34      	ldr	r2, [pc, #208]	; (8002fd8 <HAL_RCC_OscConfig+0x628>)
 8002f06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f0a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002f0c:	4b32      	ldr	r3, [pc, #200]	; (8002fd8 <HAL_RCC_OscConfig+0x628>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	4a31      	ldr	r2, [pc, #196]	; (8002fd8 <HAL_RCC_OscConfig+0x628>)
 8002f12:	f023 0303 	bic.w	r3, r3, #3
 8002f16:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002f18:	4b2f      	ldr	r3, [pc, #188]	; (8002fd8 <HAL_RCC_OscConfig+0x628>)
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	4a2e      	ldr	r2, [pc, #184]	; (8002fd8 <HAL_RCC_OscConfig+0x628>)
 8002f1e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002f22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f26:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f28:	f7fe fd9c 	bl	8001a64 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f30:	f7fe fd98 	bl	8001a64 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e046      	b.n	8002fd0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f42:	4b25      	ldr	r3, [pc, #148]	; (8002fd8 <HAL_RCC_OscConfig+0x628>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1f0      	bne.n	8002f30 <HAL_RCC_OscConfig+0x580>
 8002f4e:	e03e      	b.n	8002fce <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	69db      	ldr	r3, [r3, #28]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d101      	bne.n	8002f5c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e039      	b.n	8002fd0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002f5c:	4b1e      	ldr	r3, [pc, #120]	; (8002fd8 <HAL_RCC_OscConfig+0x628>)
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	f003 0203 	and.w	r2, r3, #3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d12c      	bne.n	8002fca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d123      	bne.n	8002fca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d11b      	bne.n	8002fca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d113      	bne.n	8002fca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fac:	085b      	lsrs	r3, r3, #1
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d109      	bne.n	8002fca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc0:	085b      	lsrs	r3, r3, #1
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d001      	beq.n	8002fce <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e000      	b.n	8002fd0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3720      	adds	r7, #32
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	019f800c 	.word	0x019f800c

08002fe0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002fea:	2300      	movs	r3, #0
 8002fec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d101      	bne.n	8002ff8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e11e      	b.n	8003236 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ff8:	4b91      	ldr	r3, [pc, #580]	; (8003240 <HAL_RCC_ClockConfig+0x260>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 030f 	and.w	r3, r3, #15
 8003000:	683a      	ldr	r2, [r7, #0]
 8003002:	429a      	cmp	r2, r3
 8003004:	d910      	bls.n	8003028 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003006:	4b8e      	ldr	r3, [pc, #568]	; (8003240 <HAL_RCC_ClockConfig+0x260>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f023 020f 	bic.w	r2, r3, #15
 800300e:	498c      	ldr	r1, [pc, #560]	; (8003240 <HAL_RCC_ClockConfig+0x260>)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	4313      	orrs	r3, r2
 8003014:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003016:	4b8a      	ldr	r3, [pc, #552]	; (8003240 <HAL_RCC_ClockConfig+0x260>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 030f 	and.w	r3, r3, #15
 800301e:	683a      	ldr	r2, [r7, #0]
 8003020:	429a      	cmp	r2, r3
 8003022:	d001      	beq.n	8003028 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e106      	b.n	8003236 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	2b00      	cmp	r3, #0
 8003032:	d073      	beq.n	800311c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	2b03      	cmp	r3, #3
 800303a:	d129      	bne.n	8003090 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800303c:	4b81      	ldr	r3, [pc, #516]	; (8003244 <HAL_RCC_ClockConfig+0x264>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d101      	bne.n	800304c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e0f4      	b.n	8003236 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800304c:	f000 f966 	bl	800331c <RCC_GetSysClockFreqFromPLLSource>
 8003050:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	4a7c      	ldr	r2, [pc, #496]	; (8003248 <HAL_RCC_ClockConfig+0x268>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d93f      	bls.n	80030da <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800305a:	4b7a      	ldr	r3, [pc, #488]	; (8003244 <HAL_RCC_ClockConfig+0x264>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d009      	beq.n	800307a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800306e:	2b00      	cmp	r3, #0
 8003070:	d033      	beq.n	80030da <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003076:	2b00      	cmp	r3, #0
 8003078:	d12f      	bne.n	80030da <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800307a:	4b72      	ldr	r3, [pc, #456]	; (8003244 <HAL_RCC_ClockConfig+0x264>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003082:	4a70      	ldr	r2, [pc, #448]	; (8003244 <HAL_RCC_ClockConfig+0x264>)
 8003084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003088:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800308a:	2380      	movs	r3, #128	; 0x80
 800308c:	617b      	str	r3, [r7, #20]
 800308e:	e024      	b.n	80030da <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	2b02      	cmp	r3, #2
 8003096:	d107      	bne.n	80030a8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003098:	4b6a      	ldr	r3, [pc, #424]	; (8003244 <HAL_RCC_ClockConfig+0x264>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d109      	bne.n	80030b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e0c6      	b.n	8003236 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030a8:	4b66      	ldr	r3, [pc, #408]	; (8003244 <HAL_RCC_ClockConfig+0x264>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d101      	bne.n	80030b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e0be      	b.n	8003236 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80030b8:	f000 f8ce 	bl	8003258 <HAL_RCC_GetSysClockFreq>
 80030bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	4a61      	ldr	r2, [pc, #388]	; (8003248 <HAL_RCC_ClockConfig+0x268>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d909      	bls.n	80030da <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80030c6:	4b5f      	ldr	r3, [pc, #380]	; (8003244 <HAL_RCC_ClockConfig+0x264>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030ce:	4a5d      	ldr	r2, [pc, #372]	; (8003244 <HAL_RCC_ClockConfig+0x264>)
 80030d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030d4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80030d6:	2380      	movs	r3, #128	; 0x80
 80030d8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030da:	4b5a      	ldr	r3, [pc, #360]	; (8003244 <HAL_RCC_ClockConfig+0x264>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f023 0203 	bic.w	r2, r3, #3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	4957      	ldr	r1, [pc, #348]	; (8003244 <HAL_RCC_ClockConfig+0x264>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030ec:	f7fe fcba 	bl	8001a64 <HAL_GetTick>
 80030f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030f2:	e00a      	b.n	800310a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030f4:	f7fe fcb6 	bl	8001a64 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003102:	4293      	cmp	r3, r2
 8003104:	d901      	bls.n	800310a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e095      	b.n	8003236 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800310a:	4b4e      	ldr	r3, [pc, #312]	; (8003244 <HAL_RCC_ClockConfig+0x264>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 020c 	and.w	r2, r3, #12
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	429a      	cmp	r2, r3
 800311a:	d1eb      	bne.n	80030f4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d023      	beq.n	8003170 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b00      	cmp	r3, #0
 8003132:	d005      	beq.n	8003140 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003134:	4b43      	ldr	r3, [pc, #268]	; (8003244 <HAL_RCC_ClockConfig+0x264>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	4a42      	ldr	r2, [pc, #264]	; (8003244 <HAL_RCC_ClockConfig+0x264>)
 800313a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800313e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0308 	and.w	r3, r3, #8
 8003148:	2b00      	cmp	r3, #0
 800314a:	d007      	beq.n	800315c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800314c:	4b3d      	ldr	r3, [pc, #244]	; (8003244 <HAL_RCC_ClockConfig+0x264>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003154:	4a3b      	ldr	r2, [pc, #236]	; (8003244 <HAL_RCC_ClockConfig+0x264>)
 8003156:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800315a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800315c:	4b39      	ldr	r3, [pc, #228]	; (8003244 <HAL_RCC_ClockConfig+0x264>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	4936      	ldr	r1, [pc, #216]	; (8003244 <HAL_RCC_ClockConfig+0x264>)
 800316a:	4313      	orrs	r3, r2
 800316c:	608b      	str	r3, [r1, #8]
 800316e:	e008      	b.n	8003182 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	2b80      	cmp	r3, #128	; 0x80
 8003174:	d105      	bne.n	8003182 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003176:	4b33      	ldr	r3, [pc, #204]	; (8003244 <HAL_RCC_ClockConfig+0x264>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	4a32      	ldr	r2, [pc, #200]	; (8003244 <HAL_RCC_ClockConfig+0x264>)
 800317c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003180:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003182:	4b2f      	ldr	r3, [pc, #188]	; (8003240 <HAL_RCC_ClockConfig+0x260>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	d21d      	bcs.n	80031cc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003190:	4b2b      	ldr	r3, [pc, #172]	; (8003240 <HAL_RCC_ClockConfig+0x260>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f023 020f 	bic.w	r2, r3, #15
 8003198:	4929      	ldr	r1, [pc, #164]	; (8003240 <HAL_RCC_ClockConfig+0x260>)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	4313      	orrs	r3, r2
 800319e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80031a0:	f7fe fc60 	bl	8001a64 <HAL_GetTick>
 80031a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031a6:	e00a      	b.n	80031be <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031a8:	f7fe fc5c 	bl	8001a64 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e03b      	b.n	8003236 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031be:	4b20      	ldr	r3, [pc, #128]	; (8003240 <HAL_RCC_ClockConfig+0x260>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 030f 	and.w	r3, r3, #15
 80031c6:	683a      	ldr	r2, [r7, #0]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d1ed      	bne.n	80031a8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0304 	and.w	r3, r3, #4
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d008      	beq.n	80031ea <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031d8:	4b1a      	ldr	r3, [pc, #104]	; (8003244 <HAL_RCC_ClockConfig+0x264>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	4917      	ldr	r1, [pc, #92]	; (8003244 <HAL_RCC_ClockConfig+0x264>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0308 	and.w	r3, r3, #8
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d009      	beq.n	800320a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031f6:	4b13      	ldr	r3, [pc, #76]	; (8003244 <HAL_RCC_ClockConfig+0x264>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	490f      	ldr	r1, [pc, #60]	; (8003244 <HAL_RCC_ClockConfig+0x264>)
 8003206:	4313      	orrs	r3, r2
 8003208:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800320a:	f000 f825 	bl	8003258 <HAL_RCC_GetSysClockFreq>
 800320e:	4602      	mov	r2, r0
 8003210:	4b0c      	ldr	r3, [pc, #48]	; (8003244 <HAL_RCC_ClockConfig+0x264>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	091b      	lsrs	r3, r3, #4
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	490c      	ldr	r1, [pc, #48]	; (800324c <HAL_RCC_ClockConfig+0x26c>)
 800321c:	5ccb      	ldrb	r3, [r1, r3]
 800321e:	f003 031f 	and.w	r3, r3, #31
 8003222:	fa22 f303 	lsr.w	r3, r2, r3
 8003226:	4a0a      	ldr	r2, [pc, #40]	; (8003250 <HAL_RCC_ClockConfig+0x270>)
 8003228:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800322a:	4b0a      	ldr	r3, [pc, #40]	; (8003254 <HAL_RCC_ClockConfig+0x274>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4618      	mov	r0, r3
 8003230:	f7fe fbcc 	bl	80019cc <HAL_InitTick>
 8003234:	4603      	mov	r3, r0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3718      	adds	r7, #24
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	40022000 	.word	0x40022000
 8003244:	40021000 	.word	0x40021000
 8003248:	04c4b400 	.word	0x04c4b400
 800324c:	080099f0 	.word	0x080099f0
 8003250:	20000000 	.word	0x20000000
 8003254:	20000004 	.word	0x20000004

08003258 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003258:	b480      	push	{r7}
 800325a:	b087      	sub	sp, #28
 800325c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800325e:	4b2c      	ldr	r3, [pc, #176]	; (8003310 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 030c 	and.w	r3, r3, #12
 8003266:	2b04      	cmp	r3, #4
 8003268:	d102      	bne.n	8003270 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800326a:	4b2a      	ldr	r3, [pc, #168]	; (8003314 <HAL_RCC_GetSysClockFreq+0xbc>)
 800326c:	613b      	str	r3, [r7, #16]
 800326e:	e047      	b.n	8003300 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003270:	4b27      	ldr	r3, [pc, #156]	; (8003310 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f003 030c 	and.w	r3, r3, #12
 8003278:	2b08      	cmp	r3, #8
 800327a:	d102      	bne.n	8003282 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800327c:	4b26      	ldr	r3, [pc, #152]	; (8003318 <HAL_RCC_GetSysClockFreq+0xc0>)
 800327e:	613b      	str	r3, [r7, #16]
 8003280:	e03e      	b.n	8003300 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003282:	4b23      	ldr	r3, [pc, #140]	; (8003310 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 030c 	and.w	r3, r3, #12
 800328a:	2b0c      	cmp	r3, #12
 800328c:	d136      	bne.n	80032fc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800328e:	4b20      	ldr	r3, [pc, #128]	; (8003310 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	f003 0303 	and.w	r3, r3, #3
 8003296:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003298:	4b1d      	ldr	r3, [pc, #116]	; (8003310 <HAL_RCC_GetSysClockFreq+0xb8>)
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	091b      	lsrs	r3, r3, #4
 800329e:	f003 030f 	and.w	r3, r3, #15
 80032a2:	3301      	adds	r3, #1
 80032a4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2b03      	cmp	r3, #3
 80032aa:	d10c      	bne.n	80032c6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80032ac:	4a1a      	ldr	r2, [pc, #104]	; (8003318 <HAL_RCC_GetSysClockFreq+0xc0>)
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b4:	4a16      	ldr	r2, [pc, #88]	; (8003310 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032b6:	68d2      	ldr	r2, [r2, #12]
 80032b8:	0a12      	lsrs	r2, r2, #8
 80032ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80032be:	fb02 f303 	mul.w	r3, r2, r3
 80032c2:	617b      	str	r3, [r7, #20]
      break;
 80032c4:	e00c      	b.n	80032e0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80032c6:	4a13      	ldr	r2, [pc, #76]	; (8003314 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ce:	4a10      	ldr	r2, [pc, #64]	; (8003310 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032d0:	68d2      	ldr	r2, [r2, #12]
 80032d2:	0a12      	lsrs	r2, r2, #8
 80032d4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80032d8:	fb02 f303 	mul.w	r3, r2, r3
 80032dc:	617b      	str	r3, [r7, #20]
      break;
 80032de:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032e0:	4b0b      	ldr	r3, [pc, #44]	; (8003310 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	0e5b      	lsrs	r3, r3, #25
 80032e6:	f003 0303 	and.w	r3, r3, #3
 80032ea:	3301      	adds	r3, #1
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f8:	613b      	str	r3, [r7, #16]
 80032fa:	e001      	b.n	8003300 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80032fc:	2300      	movs	r3, #0
 80032fe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003300:	693b      	ldr	r3, [r7, #16]
}
 8003302:	4618      	mov	r0, r3
 8003304:	371c      	adds	r7, #28
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	40021000 	.word	0x40021000
 8003314:	00f42400 	.word	0x00f42400
 8003318:	016e3600 	.word	0x016e3600

0800331c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800331c:	b480      	push	{r7}
 800331e:	b087      	sub	sp, #28
 8003320:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003322:	4b1e      	ldr	r3, [pc, #120]	; (800339c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	f003 0303 	and.w	r3, r3, #3
 800332a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800332c:	4b1b      	ldr	r3, [pc, #108]	; (800339c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	091b      	lsrs	r3, r3, #4
 8003332:	f003 030f 	and.w	r3, r3, #15
 8003336:	3301      	adds	r3, #1
 8003338:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	2b03      	cmp	r3, #3
 800333e:	d10c      	bne.n	800335a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003340:	4a17      	ldr	r2, [pc, #92]	; (80033a0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	fbb2 f3f3 	udiv	r3, r2, r3
 8003348:	4a14      	ldr	r2, [pc, #80]	; (800339c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800334a:	68d2      	ldr	r2, [r2, #12]
 800334c:	0a12      	lsrs	r2, r2, #8
 800334e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003352:	fb02 f303 	mul.w	r3, r2, r3
 8003356:	617b      	str	r3, [r7, #20]
    break;
 8003358:	e00c      	b.n	8003374 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800335a:	4a12      	ldr	r2, [pc, #72]	; (80033a4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003362:	4a0e      	ldr	r2, [pc, #56]	; (800339c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003364:	68d2      	ldr	r2, [r2, #12]
 8003366:	0a12      	lsrs	r2, r2, #8
 8003368:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800336c:	fb02 f303 	mul.w	r3, r2, r3
 8003370:	617b      	str	r3, [r7, #20]
    break;
 8003372:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003374:	4b09      	ldr	r3, [pc, #36]	; (800339c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	0e5b      	lsrs	r3, r3, #25
 800337a:	f003 0303 	and.w	r3, r3, #3
 800337e:	3301      	adds	r3, #1
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	fbb2 f3f3 	udiv	r3, r2, r3
 800338c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800338e:	687b      	ldr	r3, [r7, #4]
}
 8003390:	4618      	mov	r0, r3
 8003392:	371c      	adds	r7, #28
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr
 800339c:	40021000 	.word	0x40021000
 80033a0:	016e3600 	.word	0x016e3600
 80033a4:	00f42400 	.word	0x00f42400

080033a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033b0:	2300      	movs	r3, #0
 80033b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033b4:	2300      	movs	r3, #0
 80033b6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 8098 	beq.w	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033c6:	2300      	movs	r3, #0
 80033c8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ca:	4b43      	ldr	r3, [pc, #268]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10d      	bne.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033d6:	4b40      	ldr	r3, [pc, #256]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033da:	4a3f      	ldr	r2, [pc, #252]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033e0:	6593      	str	r3, [r2, #88]	; 0x58
 80033e2:	4b3d      	ldr	r3, [pc, #244]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ea:	60bb      	str	r3, [r7, #8]
 80033ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033ee:	2301      	movs	r3, #1
 80033f0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033f2:	4b3a      	ldr	r3, [pc, #232]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a39      	ldr	r2, [pc, #228]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80033f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033fe:	f7fe fb31 	bl	8001a64 <HAL_GetTick>
 8003402:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003404:	e009      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003406:	f7fe fb2d 	bl	8001a64 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d902      	bls.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	74fb      	strb	r3, [r7, #19]
        break;
 8003418:	e005      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800341a:	4b30      	ldr	r3, [pc, #192]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003422:	2b00      	cmp	r3, #0
 8003424:	d0ef      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003426:	7cfb      	ldrb	r3, [r7, #19]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d159      	bne.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800342c:	4b2a      	ldr	r3, [pc, #168]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800342e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003432:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003436:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d01e      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	429a      	cmp	r2, r3
 8003446:	d019      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003448:	4b23      	ldr	r3, [pc, #140]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800344a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800344e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003452:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003454:	4b20      	ldr	r3, [pc, #128]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345a:	4a1f      	ldr	r2, [pc, #124]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800345c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003460:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003464:	4b1c      	ldr	r3, [pc, #112]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800346a:	4a1b      	ldr	r2, [pc, #108]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800346c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003470:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003474:	4a18      	ldr	r2, [pc, #96]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d016      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003486:	f7fe faed 	bl	8001a64 <HAL_GetTick>
 800348a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800348c:	e00b      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800348e:	f7fe fae9 	bl	8001a64 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	f241 3288 	movw	r2, #5000	; 0x1388
 800349c:	4293      	cmp	r3, r2
 800349e:	d902      	bls.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	74fb      	strb	r3, [r7, #19]
            break;
 80034a4:	e006      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034a6:	4b0c      	ldr	r3, [pc, #48]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d0ec      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80034b4:	7cfb      	ldrb	r3, [r7, #19]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10b      	bne.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034ba:	4b07      	ldr	r3, [pc, #28]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c8:	4903      	ldr	r1, [pc, #12]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80034d0:	e008      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034d2:	7cfb      	ldrb	r3, [r7, #19]
 80034d4:	74bb      	strb	r3, [r7, #18]
 80034d6:	e005      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80034d8:	40021000 	.word	0x40021000
 80034dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034e0:	7cfb      	ldrb	r3, [r7, #19]
 80034e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034e4:	7c7b      	ldrb	r3, [r7, #17]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d105      	bne.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034ea:	4ba6      	ldr	r3, [pc, #664]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ee:	4aa5      	ldr	r2, [pc, #660]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00a      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003502:	4ba0      	ldr	r3, [pc, #640]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003508:	f023 0203 	bic.w	r2, r3, #3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	499c      	ldr	r1, [pc, #624]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003512:	4313      	orrs	r3, r2
 8003514:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00a      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003524:	4b97      	ldr	r3, [pc, #604]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352a:	f023 020c 	bic.w	r2, r3, #12
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	4994      	ldr	r1, [pc, #592]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003534:	4313      	orrs	r3, r2
 8003536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0304 	and.w	r3, r3, #4
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00a      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003546:	4b8f      	ldr	r3, [pc, #572]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800354c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	498b      	ldr	r1, [pc, #556]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003556:	4313      	orrs	r3, r2
 8003558:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0308 	and.w	r3, r3, #8
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00a      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003568:	4b86      	ldr	r3, [pc, #536]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800356a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800356e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	4983      	ldr	r1, [pc, #524]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003578:	4313      	orrs	r3, r2
 800357a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0320 	and.w	r3, r3, #32
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00a      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800358a:	4b7e      	ldr	r3, [pc, #504]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800358c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003590:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	695b      	ldr	r3, [r3, #20]
 8003598:	497a      	ldr	r1, [pc, #488]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800359a:	4313      	orrs	r3, r2
 800359c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00a      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035ac:	4b75      	ldr	r3, [pc, #468]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	4972      	ldr	r1, [pc, #456]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00a      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035ce:	4b6d      	ldr	r3, [pc, #436]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	69db      	ldr	r3, [r3, #28]
 80035dc:	4969      	ldr	r1, [pc, #420]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00a      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035f0:	4b64      	ldr	r3, [pc, #400]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	4961      	ldr	r1, [pc, #388]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003600:	4313      	orrs	r3, r2
 8003602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00a      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003612:	4b5c      	ldr	r3, [pc, #368]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003618:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	4958      	ldr	r1, [pc, #352]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003622:	4313      	orrs	r3, r2
 8003624:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003630:	2b00      	cmp	r3, #0
 8003632:	d015      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003634:	4b53      	ldr	r3, [pc, #332]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800363a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003642:	4950      	ldr	r1, [pc, #320]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003644:	4313      	orrs	r3, r2
 8003646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003652:	d105      	bne.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003654:	4b4b      	ldr	r3, [pc, #300]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	4a4a      	ldr	r2, [pc, #296]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800365a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800365e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003668:	2b00      	cmp	r3, #0
 800366a:	d015      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800366c:	4b45      	ldr	r3, [pc, #276]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800366e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003672:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367a:	4942      	ldr	r1, [pc, #264]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800367c:	4313      	orrs	r3, r2
 800367e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003686:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800368a:	d105      	bne.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800368c:	4b3d      	ldr	r3, [pc, #244]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	4a3c      	ldr	r2, [pc, #240]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003692:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003696:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d015      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80036a4:	4b37      	ldr	r3, [pc, #220]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036aa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b2:	4934      	ldr	r1, [pc, #208]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036c2:	d105      	bne.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036c4:	4b2f      	ldr	r3, [pc, #188]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	4a2e      	ldr	r2, [pc, #184]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036ce:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d015      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036dc:	4b29      	ldr	r3, [pc, #164]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ea:	4926      	ldr	r1, [pc, #152]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036fa:	d105      	bne.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036fc:	4b21      	ldr	r3, [pc, #132]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	4a20      	ldr	r2, [pc, #128]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003702:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003706:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d015      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003714:	4b1b      	ldr	r3, [pc, #108]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003722:	4918      	ldr	r1, [pc, #96]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003724:	4313      	orrs	r3, r2
 8003726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003732:	d105      	bne.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003734:	4b13      	ldr	r3, [pc, #76]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	4a12      	ldr	r2, [pc, #72]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800373a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800373e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d015      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800374c:	4b0d      	ldr	r3, [pc, #52]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800374e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003752:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800375a:	490a      	ldr	r1, [pc, #40]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800375c:	4313      	orrs	r3, r2
 800375e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003766:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800376a:	d105      	bne.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800376c:	4b05      	ldr	r3, [pc, #20]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	4a04      	ldr	r2, [pc, #16]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003772:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003776:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003778:	7cbb      	ldrb	r3, [r7, #18]
}
 800377a:	4618      	mov	r0, r3
 800377c:	3718      	adds	r7, #24
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	40021000 	.word	0x40021000

08003788 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e049      	b.n	800382e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d106      	bne.n	80037b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7fd fdba 	bl	8001328 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2202      	movs	r2, #2
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	3304      	adds	r3, #4
 80037c4:	4619      	mov	r1, r3
 80037c6:	4610      	mov	r0, r2
 80037c8:	f000 fe2c 	bl	8004424 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b082      	sub	sp, #8
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e049      	b.n	80038dc <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b00      	cmp	r3, #0
 8003852:	d106      	bne.n	8003862 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f7fd fdaf 	bl	80013c0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2202      	movs	r2, #2
 8003866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	3304      	adds	r3, #4
 8003872:	4619      	mov	r1, r3
 8003874:	4610      	mov	r0, r2
 8003876:	f000 fdd5 	bl	8004424 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3708      	adds	r7, #8
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e049      	b.n	800398a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d106      	bne.n	8003910 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f841 	bl	8003992 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2202      	movs	r2, #2
 8003914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3304      	adds	r3, #4
 8003920:	4619      	mov	r1, r3
 8003922:	4610      	mov	r0, r2
 8003924:	f000 fd7e 	bl	8004424 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3708      	adds	r7, #8
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003992:	b480      	push	{r7}
 8003994:	b083      	sub	sp, #12
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800399a:	bf00      	nop
 800399c:	370c      	adds	r7, #12
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
	...

080039a8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039b2:	2300      	movs	r3, #0
 80039b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d104      	bne.n	80039c6 <HAL_TIM_IC_Start_IT+0x1e>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	e023      	b.n	8003a0e <HAL_TIM_IC_Start_IT+0x66>
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	2b04      	cmp	r3, #4
 80039ca:	d104      	bne.n	80039d6 <HAL_TIM_IC_Start_IT+0x2e>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	e01b      	b.n	8003a0e <HAL_TIM_IC_Start_IT+0x66>
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	2b08      	cmp	r3, #8
 80039da:	d104      	bne.n	80039e6 <HAL_TIM_IC_Start_IT+0x3e>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	e013      	b.n	8003a0e <HAL_TIM_IC_Start_IT+0x66>
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	2b0c      	cmp	r3, #12
 80039ea:	d104      	bne.n	80039f6 <HAL_TIM_IC_Start_IT+0x4e>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	e00b      	b.n	8003a0e <HAL_TIM_IC_Start_IT+0x66>
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	2b10      	cmp	r3, #16
 80039fa:	d104      	bne.n	8003a06 <HAL_TIM_IC_Start_IT+0x5e>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	e003      	b.n	8003a0e <HAL_TIM_IC_Start_IT+0x66>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d104      	bne.n	8003a20 <HAL_TIM_IC_Start_IT+0x78>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	e013      	b.n	8003a48 <HAL_TIM_IC_Start_IT+0xa0>
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	2b04      	cmp	r3, #4
 8003a24:	d104      	bne.n	8003a30 <HAL_TIM_IC_Start_IT+0x88>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	e00b      	b.n	8003a48 <HAL_TIM_IC_Start_IT+0xa0>
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	2b08      	cmp	r3, #8
 8003a34:	d104      	bne.n	8003a40 <HAL_TIM_IC_Start_IT+0x98>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	e003      	b.n	8003a48 <HAL_TIM_IC_Start_IT+0xa0>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a4a:	7bbb      	ldrb	r3, [r7, #14]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d102      	bne.n	8003a56 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a50:	7b7b      	ldrb	r3, [r7, #13]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d001      	beq.n	8003a5a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e0d8      	b.n	8003c0c <HAL_TIM_IC_Start_IT+0x264>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d104      	bne.n	8003a6a <HAL_TIM_IC_Start_IT+0xc2>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2202      	movs	r2, #2
 8003a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a68:	e023      	b.n	8003ab2 <HAL_TIM_IC_Start_IT+0x10a>
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	2b04      	cmp	r3, #4
 8003a6e:	d104      	bne.n	8003a7a <HAL_TIM_IC_Start_IT+0xd2>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2202      	movs	r2, #2
 8003a74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a78:	e01b      	b.n	8003ab2 <HAL_TIM_IC_Start_IT+0x10a>
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	2b08      	cmp	r3, #8
 8003a7e:	d104      	bne.n	8003a8a <HAL_TIM_IC_Start_IT+0xe2>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2202      	movs	r2, #2
 8003a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a88:	e013      	b.n	8003ab2 <HAL_TIM_IC_Start_IT+0x10a>
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	2b0c      	cmp	r3, #12
 8003a8e:	d104      	bne.n	8003a9a <HAL_TIM_IC_Start_IT+0xf2>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2202      	movs	r2, #2
 8003a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a98:	e00b      	b.n	8003ab2 <HAL_TIM_IC_Start_IT+0x10a>
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	2b10      	cmp	r3, #16
 8003a9e:	d104      	bne.n	8003aaa <HAL_TIM_IC_Start_IT+0x102>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003aa8:	e003      	b.n	8003ab2 <HAL_TIM_IC_Start_IT+0x10a>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2202      	movs	r2, #2
 8003aae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d104      	bne.n	8003ac2 <HAL_TIM_IC_Start_IT+0x11a>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2202      	movs	r2, #2
 8003abc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ac0:	e013      	b.n	8003aea <HAL_TIM_IC_Start_IT+0x142>
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	2b04      	cmp	r3, #4
 8003ac6:	d104      	bne.n	8003ad2 <HAL_TIM_IC_Start_IT+0x12a>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2202      	movs	r2, #2
 8003acc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ad0:	e00b      	b.n	8003aea <HAL_TIM_IC_Start_IT+0x142>
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	2b08      	cmp	r3, #8
 8003ad6:	d104      	bne.n	8003ae2 <HAL_TIM_IC_Start_IT+0x13a>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2202      	movs	r2, #2
 8003adc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ae0:	e003      	b.n	8003aea <HAL_TIM_IC_Start_IT+0x142>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	2b0c      	cmp	r3, #12
 8003aee:	d841      	bhi.n	8003b74 <HAL_TIM_IC_Start_IT+0x1cc>
 8003af0:	a201      	add	r2, pc, #4	; (adr r2, 8003af8 <HAL_TIM_IC_Start_IT+0x150>)
 8003af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af6:	bf00      	nop
 8003af8:	08003b2d 	.word	0x08003b2d
 8003afc:	08003b75 	.word	0x08003b75
 8003b00:	08003b75 	.word	0x08003b75
 8003b04:	08003b75 	.word	0x08003b75
 8003b08:	08003b3f 	.word	0x08003b3f
 8003b0c:	08003b75 	.word	0x08003b75
 8003b10:	08003b75 	.word	0x08003b75
 8003b14:	08003b75 	.word	0x08003b75
 8003b18:	08003b51 	.word	0x08003b51
 8003b1c:	08003b75 	.word	0x08003b75
 8003b20:	08003b75 	.word	0x08003b75
 8003b24:	08003b75 	.word	0x08003b75
 8003b28:	08003b63 	.word	0x08003b63
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68da      	ldr	r2, [r3, #12]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f042 0202 	orr.w	r2, r2, #2
 8003b3a:	60da      	str	r2, [r3, #12]
      break;
 8003b3c:	e01d      	b.n	8003b7a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68da      	ldr	r2, [r3, #12]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f042 0204 	orr.w	r2, r2, #4
 8003b4c:	60da      	str	r2, [r3, #12]
      break;
 8003b4e:	e014      	b.n	8003b7a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68da      	ldr	r2, [r3, #12]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f042 0208 	orr.w	r2, r2, #8
 8003b5e:	60da      	str	r2, [r3, #12]
      break;
 8003b60:	e00b      	b.n	8003b7a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68da      	ldr	r2, [r3, #12]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f042 0210 	orr.w	r2, r2, #16
 8003b70:	60da      	str	r2, [r3, #12]
      break;
 8003b72:	e002      	b.n	8003b7a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	73fb      	strb	r3, [r7, #15]
      break;
 8003b78:	bf00      	nop
  }

  if (status == HAL_OK)
 8003b7a:	7bfb      	ldrb	r3, [r7, #15]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d144      	bne.n	8003c0a <HAL_TIM_IC_Start_IT+0x262>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2201      	movs	r2, #1
 8003b86:	6839      	ldr	r1, [r7, #0]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f001 f98b 	bl	8004ea4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a20      	ldr	r2, [pc, #128]	; (8003c14 <HAL_TIM_IC_Start_IT+0x26c>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d018      	beq.n	8003bca <HAL_TIM_IC_Start_IT+0x222>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ba0:	d013      	beq.n	8003bca <HAL_TIM_IC_Start_IT+0x222>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a1c      	ldr	r2, [pc, #112]	; (8003c18 <HAL_TIM_IC_Start_IT+0x270>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d00e      	beq.n	8003bca <HAL_TIM_IC_Start_IT+0x222>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a1a      	ldr	r2, [pc, #104]	; (8003c1c <HAL_TIM_IC_Start_IT+0x274>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d009      	beq.n	8003bca <HAL_TIM_IC_Start_IT+0x222>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a19      	ldr	r2, [pc, #100]	; (8003c20 <HAL_TIM_IC_Start_IT+0x278>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d004      	beq.n	8003bca <HAL_TIM_IC_Start_IT+0x222>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a17      	ldr	r2, [pc, #92]	; (8003c24 <HAL_TIM_IC_Start_IT+0x27c>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d115      	bne.n	8003bf6 <HAL_TIM_IC_Start_IT+0x24e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	689a      	ldr	r2, [r3, #8]
 8003bd0:	4b15      	ldr	r3, [pc, #84]	; (8003c28 <HAL_TIM_IC_Start_IT+0x280>)
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	2b06      	cmp	r3, #6
 8003bda:	d015      	beq.n	8003c08 <HAL_TIM_IC_Start_IT+0x260>
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003be2:	d011      	beq.n	8003c08 <HAL_TIM_IC_Start_IT+0x260>
      {
        __HAL_TIM_ENABLE(htim);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f042 0201 	orr.w	r2, r2, #1
 8003bf2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bf4:	e008      	b.n	8003c08 <HAL_TIM_IC_Start_IT+0x260>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f042 0201 	orr.w	r2, r2, #1
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	e000      	b.n	8003c0a <HAL_TIM_IC_Start_IT+0x262>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c08:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	40012c00 	.word	0x40012c00
 8003c18:	40000400 	.word	0x40000400
 8003c1c:	40000800 	.word	0x40000800
 8003c20:	40013400 	.word	0x40013400
 8003c24:	40014000 	.word	0x40014000
 8003c28:	00010007 	.word	0x00010007

08003c2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d122      	bne.n	8003c88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d11b      	bne.n	8003c88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f06f 0202 	mvn.w	r2, #2
 8003c58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	f003 0303 	and.w	r3, r3, #3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7fd fd16 	bl	80016a0 <HAL_TIM_IC_CaptureCallback>
 8003c74:	e005      	b.n	8003c82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 fbb6 	bl	80043e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 fbbd 	bl	80043fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	f003 0304 	and.w	r3, r3, #4
 8003c92:	2b04      	cmp	r3, #4
 8003c94:	d122      	bne.n	8003cdc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	f003 0304 	and.w	r3, r3, #4
 8003ca0:	2b04      	cmp	r3, #4
 8003ca2:	d11b      	bne.n	8003cdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f06f 0204 	mvn.w	r2, #4
 8003cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2202      	movs	r2, #2
 8003cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d003      	beq.n	8003cca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f7fd fcec 	bl	80016a0 <HAL_TIM_IC_CaptureCallback>
 8003cc8:	e005      	b.n	8003cd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 fb8c 	bl	80043e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 fb93 	bl	80043fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	f003 0308 	and.w	r3, r3, #8
 8003ce6:	2b08      	cmp	r3, #8
 8003ce8:	d122      	bne.n	8003d30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	f003 0308 	and.w	r3, r3, #8
 8003cf4:	2b08      	cmp	r3, #8
 8003cf6:	d11b      	bne.n	8003d30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f06f 0208 	mvn.w	r2, #8
 8003d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2204      	movs	r2, #4
 8003d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	69db      	ldr	r3, [r3, #28]
 8003d0e:	f003 0303 	and.w	r3, r3, #3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d003      	beq.n	8003d1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f7fd fcc2 	bl	80016a0 <HAL_TIM_IC_CaptureCallback>
 8003d1c:	e005      	b.n	8003d2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 fb62 	bl	80043e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 fb69 	bl	80043fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	f003 0310 	and.w	r3, r3, #16
 8003d3a:	2b10      	cmp	r3, #16
 8003d3c:	d122      	bne.n	8003d84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	f003 0310 	and.w	r3, r3, #16
 8003d48:	2b10      	cmp	r3, #16
 8003d4a:	d11b      	bne.n	8003d84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f06f 0210 	mvn.w	r2, #16
 8003d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2208      	movs	r2, #8
 8003d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7fd fc98 	bl	80016a0 <HAL_TIM_IC_CaptureCallback>
 8003d70:	e005      	b.n	8003d7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 fb38 	bl	80043e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 fb3f 	bl	80043fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d10e      	bne.n	8003db0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d107      	bne.n	8003db0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f06f 0201 	mvn.w	r2, #1
 8003da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 fb12 	bl	80043d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dba:	2b80      	cmp	r3, #128	; 0x80
 8003dbc:	d10e      	bne.n	8003ddc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc8:	2b80      	cmp	r3, #128	; 0x80
 8003dca:	d107      	bne.n	8003ddc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f001 f916 	bl	8005008 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dea:	d10e      	bne.n	8003e0a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003df6:	2b80      	cmp	r3, #128	; 0x80
 8003df8:	d107      	bne.n	8003e0a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003e02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f001 f909 	bl	800501c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e14:	2b40      	cmp	r3, #64	; 0x40
 8003e16:	d10e      	bne.n	8003e36 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e22:	2b40      	cmp	r3, #64	; 0x40
 8003e24:	d107      	bne.n	8003e36 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 faed 	bl	8004410 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	f003 0320 	and.w	r3, r3, #32
 8003e40:	2b20      	cmp	r3, #32
 8003e42:	d10e      	bne.n	8003e62 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	f003 0320 	and.w	r3, r3, #32
 8003e4e:	2b20      	cmp	r3, #32
 8003e50:	d107      	bne.n	8003e62 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f06f 0220 	mvn.w	r2, #32
 8003e5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f001 f8c9 	bl	8004ff4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e70:	d10f      	bne.n	8003e92 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e80:	d107      	bne.n	8003e92 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8003e8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f001 f8cf 	bl	8005030 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ea0:	d10f      	bne.n	8003ec2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003eac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003eb0:	d107      	bne.n	8003ec2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8003eba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f001 f8c1 	bl	8005044 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ecc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ed0:	d10f      	bne.n	8003ef2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003edc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ee0:	d107      	bne.n	8003ef2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8003eea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f001 f8b3 	bl	8005058 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003efc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f00:	d10f      	bne.n	8003f22 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f0c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f10:	d107      	bne.n	8003f22 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8003f1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f001 f8a5 	bl	800506c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f22:	bf00      	nop
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
	...

08003f2c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d101      	bne.n	8003f4a <HAL_TIM_OC_ConfigChannel+0x1e>
 8003f46:	2302      	movs	r3, #2
 8003f48:	e066      	b.n	8004018 <HAL_TIM_OC_ConfigChannel+0xec>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2b14      	cmp	r3, #20
 8003f56:	d857      	bhi.n	8004008 <HAL_TIM_OC_ConfigChannel+0xdc>
 8003f58:	a201      	add	r2, pc, #4	; (adr r2, 8003f60 <HAL_TIM_OC_ConfigChannel+0x34>)
 8003f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f5e:	bf00      	nop
 8003f60:	08003fb5 	.word	0x08003fb5
 8003f64:	08004009 	.word	0x08004009
 8003f68:	08004009 	.word	0x08004009
 8003f6c:	08004009 	.word	0x08004009
 8003f70:	08003fc3 	.word	0x08003fc3
 8003f74:	08004009 	.word	0x08004009
 8003f78:	08004009 	.word	0x08004009
 8003f7c:	08004009 	.word	0x08004009
 8003f80:	08003fd1 	.word	0x08003fd1
 8003f84:	08004009 	.word	0x08004009
 8003f88:	08004009 	.word	0x08004009
 8003f8c:	08004009 	.word	0x08004009
 8003f90:	08003fdf 	.word	0x08003fdf
 8003f94:	08004009 	.word	0x08004009
 8003f98:	08004009 	.word	0x08004009
 8003f9c:	08004009 	.word	0x08004009
 8003fa0:	08003fed 	.word	0x08003fed
 8003fa4:	08004009 	.word	0x08004009
 8003fa8:	08004009 	.word	0x08004009
 8003fac:	08004009 	.word	0x08004009
 8003fb0:	08003ffb 	.word	0x08003ffb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68b9      	ldr	r1, [r7, #8]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 fac2 	bl	8004544 <TIM_OC1_SetConfig>
      break;
 8003fc0:	e025      	b.n	800400e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68b9      	ldr	r1, [r7, #8]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f000 fb4b 	bl	8004664 <TIM_OC2_SetConfig>
      break;
 8003fce:	e01e      	b.n	800400e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68b9      	ldr	r1, [r7, #8]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f000 fbce 	bl	8004778 <TIM_OC3_SetConfig>
      break;
 8003fdc:	e017      	b.n	800400e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68b9      	ldr	r1, [r7, #8]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f000 fc4f 	bl	8004888 <TIM_OC4_SetConfig>
      break;
 8003fea:	e010      	b.n	800400e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68b9      	ldr	r1, [r7, #8]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f000 fcd2 	bl	800499c <TIM_OC5_SetConfig>
      break;
 8003ff8:	e009      	b.n	800400e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68b9      	ldr	r1, [r7, #8]
 8004000:	4618      	mov	r0, r3
 8004002:	f000 fd2f 	bl	8004a64 <TIM_OC6_SetConfig>
      break;
 8004006:	e002      	b.n	800400e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	75fb      	strb	r3, [r7, #23]
      break;
 800400c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004016:	7dfb      	ldrb	r3, [r7, #23]
}
 8004018:	4618      	mov	r0, r3
 800401a:	3718      	adds	r7, #24
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b086      	sub	sp, #24
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800402c:	2300      	movs	r3, #0
 800402e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004036:	2b01      	cmp	r3, #1
 8004038:	d101      	bne.n	800403e <HAL_TIM_IC_ConfigChannel+0x1e>
 800403a:	2302      	movs	r3, #2
 800403c:	e088      	b.n	8004150 <HAL_TIM_IC_ConfigChannel+0x130>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d11b      	bne.n	8004084 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6818      	ldr	r0, [r3, #0]
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	6819      	ldr	r1, [r3, #0]
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	685a      	ldr	r2, [r3, #4]
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	f000 fd68 	bl	8004b30 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	699a      	ldr	r2, [r3, #24]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 020c 	bic.w	r2, r2, #12
 800406e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6999      	ldr	r1, [r3, #24]
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	689a      	ldr	r2, [r3, #8]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	430a      	orrs	r2, r1
 8004080:	619a      	str	r2, [r3, #24]
 8004082:	e060      	b.n	8004146 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b04      	cmp	r3, #4
 8004088:	d11c      	bne.n	80040c4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6818      	ldr	r0, [r3, #0]
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	6819      	ldr	r1, [r3, #0]
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	685a      	ldr	r2, [r3, #4]
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	f000 fde0 	bl	8004c5e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	699a      	ldr	r2, [r3, #24]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80040ac:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	6999      	ldr	r1, [r3, #24]
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	021a      	lsls	r2, r3, #8
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	430a      	orrs	r2, r1
 80040c0:	619a      	str	r2, [r3, #24]
 80040c2:	e040      	b.n	8004146 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b08      	cmp	r3, #8
 80040c8:	d11b      	bne.n	8004102 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6818      	ldr	r0, [r3, #0]
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	6819      	ldr	r1, [r3, #0]
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	f000 fe2d 	bl	8004d38 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	69da      	ldr	r2, [r3, #28]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f022 020c 	bic.w	r2, r2, #12
 80040ec:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	69d9      	ldr	r1, [r3, #28]
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	689a      	ldr	r2, [r3, #8]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	430a      	orrs	r2, r1
 80040fe:	61da      	str	r2, [r3, #28]
 8004100:	e021      	b.n	8004146 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2b0c      	cmp	r3, #12
 8004106:	d11c      	bne.n	8004142 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6818      	ldr	r0, [r3, #0]
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	6819      	ldr	r1, [r3, #0]
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	685a      	ldr	r2, [r3, #4]
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	f000 fe4a 	bl	8004db0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	69da      	ldr	r2, [r3, #28]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800412a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	69d9      	ldr	r1, [r3, #28]
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	021a      	lsls	r2, r3, #8
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	430a      	orrs	r2, r1
 800413e:	61da      	str	r2, [r3, #28]
 8004140:	e001      	b.n	8004146 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800414e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004150:	4618      	mov	r0, r3
 8004152:	3718      	adds	r7, #24
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004162:	2300      	movs	r3, #0
 8004164:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800416c:	2b01      	cmp	r3, #1
 800416e:	d101      	bne.n	8004174 <HAL_TIM_ConfigClockSource+0x1c>
 8004170:	2302      	movs	r3, #2
 8004172:	e0de      	b.n	8004332 <HAL_TIM_ConfigClockSource+0x1da>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2202      	movs	r2, #2
 8004180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004192:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004196:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800419e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a63      	ldr	r2, [pc, #396]	; (800433c <HAL_TIM_ConfigClockSource+0x1e4>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	f000 80a9 	beq.w	8004306 <HAL_TIM_ConfigClockSource+0x1ae>
 80041b4:	4a61      	ldr	r2, [pc, #388]	; (800433c <HAL_TIM_ConfigClockSource+0x1e4>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	f200 80ae 	bhi.w	8004318 <HAL_TIM_ConfigClockSource+0x1c0>
 80041bc:	4a60      	ldr	r2, [pc, #384]	; (8004340 <HAL_TIM_ConfigClockSource+0x1e8>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	f000 80a1 	beq.w	8004306 <HAL_TIM_ConfigClockSource+0x1ae>
 80041c4:	4a5e      	ldr	r2, [pc, #376]	; (8004340 <HAL_TIM_ConfigClockSource+0x1e8>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	f200 80a6 	bhi.w	8004318 <HAL_TIM_ConfigClockSource+0x1c0>
 80041cc:	4a5d      	ldr	r2, [pc, #372]	; (8004344 <HAL_TIM_ConfigClockSource+0x1ec>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	f000 8099 	beq.w	8004306 <HAL_TIM_ConfigClockSource+0x1ae>
 80041d4:	4a5b      	ldr	r2, [pc, #364]	; (8004344 <HAL_TIM_ConfigClockSource+0x1ec>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	f200 809e 	bhi.w	8004318 <HAL_TIM_ConfigClockSource+0x1c0>
 80041dc:	4a5a      	ldr	r2, [pc, #360]	; (8004348 <HAL_TIM_ConfigClockSource+0x1f0>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	f000 8091 	beq.w	8004306 <HAL_TIM_ConfigClockSource+0x1ae>
 80041e4:	4a58      	ldr	r2, [pc, #352]	; (8004348 <HAL_TIM_ConfigClockSource+0x1f0>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	f200 8096 	bhi.w	8004318 <HAL_TIM_ConfigClockSource+0x1c0>
 80041ec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80041f0:	f000 8089 	beq.w	8004306 <HAL_TIM_ConfigClockSource+0x1ae>
 80041f4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80041f8:	f200 808e 	bhi.w	8004318 <HAL_TIM_ConfigClockSource+0x1c0>
 80041fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004200:	d03e      	beq.n	8004280 <HAL_TIM_ConfigClockSource+0x128>
 8004202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004206:	f200 8087 	bhi.w	8004318 <HAL_TIM_ConfigClockSource+0x1c0>
 800420a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800420e:	f000 8086 	beq.w	800431e <HAL_TIM_ConfigClockSource+0x1c6>
 8004212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004216:	d87f      	bhi.n	8004318 <HAL_TIM_ConfigClockSource+0x1c0>
 8004218:	2b70      	cmp	r3, #112	; 0x70
 800421a:	d01a      	beq.n	8004252 <HAL_TIM_ConfigClockSource+0xfa>
 800421c:	2b70      	cmp	r3, #112	; 0x70
 800421e:	d87b      	bhi.n	8004318 <HAL_TIM_ConfigClockSource+0x1c0>
 8004220:	2b60      	cmp	r3, #96	; 0x60
 8004222:	d050      	beq.n	80042c6 <HAL_TIM_ConfigClockSource+0x16e>
 8004224:	2b60      	cmp	r3, #96	; 0x60
 8004226:	d877      	bhi.n	8004318 <HAL_TIM_ConfigClockSource+0x1c0>
 8004228:	2b50      	cmp	r3, #80	; 0x50
 800422a:	d03c      	beq.n	80042a6 <HAL_TIM_ConfigClockSource+0x14e>
 800422c:	2b50      	cmp	r3, #80	; 0x50
 800422e:	d873      	bhi.n	8004318 <HAL_TIM_ConfigClockSource+0x1c0>
 8004230:	2b40      	cmp	r3, #64	; 0x40
 8004232:	d058      	beq.n	80042e6 <HAL_TIM_ConfigClockSource+0x18e>
 8004234:	2b40      	cmp	r3, #64	; 0x40
 8004236:	d86f      	bhi.n	8004318 <HAL_TIM_ConfigClockSource+0x1c0>
 8004238:	2b30      	cmp	r3, #48	; 0x30
 800423a:	d064      	beq.n	8004306 <HAL_TIM_ConfigClockSource+0x1ae>
 800423c:	2b30      	cmp	r3, #48	; 0x30
 800423e:	d86b      	bhi.n	8004318 <HAL_TIM_ConfigClockSource+0x1c0>
 8004240:	2b20      	cmp	r3, #32
 8004242:	d060      	beq.n	8004306 <HAL_TIM_ConfigClockSource+0x1ae>
 8004244:	2b20      	cmp	r3, #32
 8004246:	d867      	bhi.n	8004318 <HAL_TIM_ConfigClockSource+0x1c0>
 8004248:	2b00      	cmp	r3, #0
 800424a:	d05c      	beq.n	8004306 <HAL_TIM_ConfigClockSource+0x1ae>
 800424c:	2b10      	cmp	r3, #16
 800424e:	d05a      	beq.n	8004306 <HAL_TIM_ConfigClockSource+0x1ae>
 8004250:	e062      	b.n	8004318 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6818      	ldr	r0, [r3, #0]
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	6899      	ldr	r1, [r3, #8]
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	685a      	ldr	r2, [r3, #4]
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	f000 fdff 	bl	8004e64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004274:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68ba      	ldr	r2, [r7, #8]
 800427c:	609a      	str	r2, [r3, #8]
      break;
 800427e:	e04f      	b.n	8004320 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6818      	ldr	r0, [r3, #0]
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	6899      	ldr	r1, [r3, #8]
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	f000 fde8 	bl	8004e64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689a      	ldr	r2, [r3, #8]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042a2:	609a      	str	r2, [r3, #8]
      break;
 80042a4:	e03c      	b.n	8004320 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6818      	ldr	r0, [r3, #0]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	6859      	ldr	r1, [r3, #4]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	461a      	mov	r2, r3
 80042b4:	f000 fca4 	bl	8004c00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2150      	movs	r1, #80	; 0x50
 80042be:	4618      	mov	r0, r3
 80042c0:	f000 fdb3 	bl	8004e2a <TIM_ITRx_SetConfig>
      break;
 80042c4:	e02c      	b.n	8004320 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6818      	ldr	r0, [r3, #0]
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	6859      	ldr	r1, [r3, #4]
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	461a      	mov	r2, r3
 80042d4:	f000 fd00 	bl	8004cd8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2160      	movs	r1, #96	; 0x60
 80042de:	4618      	mov	r0, r3
 80042e0:	f000 fda3 	bl	8004e2a <TIM_ITRx_SetConfig>
      break;
 80042e4:	e01c      	b.n	8004320 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6818      	ldr	r0, [r3, #0]
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	6859      	ldr	r1, [r3, #4]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	461a      	mov	r2, r3
 80042f4:	f000 fc84 	bl	8004c00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2140      	movs	r1, #64	; 0x40
 80042fe:	4618      	mov	r0, r3
 8004300:	f000 fd93 	bl	8004e2a <TIM_ITRx_SetConfig>
      break;
 8004304:	e00c      	b.n	8004320 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4619      	mov	r1, r3
 8004310:	4610      	mov	r0, r2
 8004312:	f000 fd8a 	bl	8004e2a <TIM_ITRx_SetConfig>
      break;
 8004316:	e003      	b.n	8004320 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	73fb      	strb	r3, [r7, #15]
      break;
 800431c:	e000      	b.n	8004320 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800431e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004330:	7bfb      	ldrb	r3, [r7, #15]
}
 8004332:	4618      	mov	r0, r3
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	00100070 	.word	0x00100070
 8004340:	00100040 	.word	0x00100040
 8004344:	00100030 	.word	0x00100030
 8004348:	00100020 	.word	0x00100020

0800434c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004356:	2300      	movs	r3, #0
 8004358:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	2b0c      	cmp	r3, #12
 800435e:	d831      	bhi.n	80043c4 <HAL_TIM_ReadCapturedValue+0x78>
 8004360:	a201      	add	r2, pc, #4	; (adr r2, 8004368 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004366:	bf00      	nop
 8004368:	0800439d 	.word	0x0800439d
 800436c:	080043c5 	.word	0x080043c5
 8004370:	080043c5 	.word	0x080043c5
 8004374:	080043c5 	.word	0x080043c5
 8004378:	080043a7 	.word	0x080043a7
 800437c:	080043c5 	.word	0x080043c5
 8004380:	080043c5 	.word	0x080043c5
 8004384:	080043c5 	.word	0x080043c5
 8004388:	080043b1 	.word	0x080043b1
 800438c:	080043c5 	.word	0x080043c5
 8004390:	080043c5 	.word	0x080043c5
 8004394:	080043c5 	.word	0x080043c5
 8004398:	080043bb 	.word	0x080043bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043a2:	60fb      	str	r3, [r7, #12]

      break;
 80043a4:	e00f      	b.n	80043c6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ac:	60fb      	str	r3, [r7, #12]

      break;
 80043ae:	e00a      	b.n	80043c6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b6:	60fb      	str	r3, [r7, #12]

      break;
 80043b8:	e005      	b.n	80043c6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c0:	60fb      	str	r3, [r7, #12]

      break;
 80043c2:	e000      	b.n	80043c6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80043c4:	bf00      	nop
  }

  return tmpreg;
 80043c6:	68fb      	ldr	r3, [r7, #12]
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3714      	adds	r7, #20
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a3c      	ldr	r2, [pc, #240]	; (8004528 <TIM_Base_SetConfig+0x104>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d00f      	beq.n	800445c <TIM_Base_SetConfig+0x38>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004442:	d00b      	beq.n	800445c <TIM_Base_SetConfig+0x38>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a39      	ldr	r2, [pc, #228]	; (800452c <TIM_Base_SetConfig+0x108>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d007      	beq.n	800445c <TIM_Base_SetConfig+0x38>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a38      	ldr	r2, [pc, #224]	; (8004530 <TIM_Base_SetConfig+0x10c>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d003      	beq.n	800445c <TIM_Base_SetConfig+0x38>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a37      	ldr	r2, [pc, #220]	; (8004534 <TIM_Base_SetConfig+0x110>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d108      	bne.n	800446e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004462:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	4313      	orrs	r3, r2
 800446c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a2d      	ldr	r2, [pc, #180]	; (8004528 <TIM_Base_SetConfig+0x104>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d01b      	beq.n	80044ae <TIM_Base_SetConfig+0x8a>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800447c:	d017      	beq.n	80044ae <TIM_Base_SetConfig+0x8a>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a2a      	ldr	r2, [pc, #168]	; (800452c <TIM_Base_SetConfig+0x108>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d013      	beq.n	80044ae <TIM_Base_SetConfig+0x8a>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a29      	ldr	r2, [pc, #164]	; (8004530 <TIM_Base_SetConfig+0x10c>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d00f      	beq.n	80044ae <TIM_Base_SetConfig+0x8a>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a28      	ldr	r2, [pc, #160]	; (8004534 <TIM_Base_SetConfig+0x110>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d00b      	beq.n	80044ae <TIM_Base_SetConfig+0x8a>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a27      	ldr	r2, [pc, #156]	; (8004538 <TIM_Base_SetConfig+0x114>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d007      	beq.n	80044ae <TIM_Base_SetConfig+0x8a>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a26      	ldr	r2, [pc, #152]	; (800453c <TIM_Base_SetConfig+0x118>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d003      	beq.n	80044ae <TIM_Base_SetConfig+0x8a>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a25      	ldr	r2, [pc, #148]	; (8004540 <TIM_Base_SetConfig+0x11c>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d108      	bne.n	80044c0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	4313      	orrs	r3, r2
 80044be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	689a      	ldr	r2, [r3, #8]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a10      	ldr	r2, [pc, #64]	; (8004528 <TIM_Base_SetConfig+0x104>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d00f      	beq.n	800450c <TIM_Base_SetConfig+0xe8>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a11      	ldr	r2, [pc, #68]	; (8004534 <TIM_Base_SetConfig+0x110>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d00b      	beq.n	800450c <TIM_Base_SetConfig+0xe8>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a10      	ldr	r2, [pc, #64]	; (8004538 <TIM_Base_SetConfig+0x114>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d007      	beq.n	800450c <TIM_Base_SetConfig+0xe8>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a0f      	ldr	r2, [pc, #60]	; (800453c <TIM_Base_SetConfig+0x118>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d003      	beq.n	800450c <TIM_Base_SetConfig+0xe8>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a0e      	ldr	r2, [pc, #56]	; (8004540 <TIM_Base_SetConfig+0x11c>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d103      	bne.n	8004514 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	691a      	ldr	r2, [r3, #16]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	615a      	str	r2, [r3, #20]
}
 800451a:	bf00      	nop
 800451c:	3714      	adds	r7, #20
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	40012c00 	.word	0x40012c00
 800452c:	40000400 	.word	0x40000400
 8004530:	40000800 	.word	0x40000800
 8004534:	40013400 	.word	0x40013400
 8004538:	40014000 	.word	0x40014000
 800453c:	40014400 	.word	0x40014400
 8004540:	40014800 	.word	0x40014800

08004544 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004544:	b480      	push	{r7}
 8004546:	b087      	sub	sp, #28
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	f023 0201 	bic.w	r2, r3, #1
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004576:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f023 0303 	bic.w	r3, r3, #3
 800457e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	4313      	orrs	r3, r2
 8004588:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	f023 0302 	bic.w	r3, r3, #2
 8004590:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	697a      	ldr	r2, [r7, #20]
 8004598:	4313      	orrs	r3, r2
 800459a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a2c      	ldr	r2, [pc, #176]	; (8004650 <TIM_OC1_SetConfig+0x10c>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d00f      	beq.n	80045c4 <TIM_OC1_SetConfig+0x80>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a2b      	ldr	r2, [pc, #172]	; (8004654 <TIM_OC1_SetConfig+0x110>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d00b      	beq.n	80045c4 <TIM_OC1_SetConfig+0x80>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a2a      	ldr	r2, [pc, #168]	; (8004658 <TIM_OC1_SetConfig+0x114>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d007      	beq.n	80045c4 <TIM_OC1_SetConfig+0x80>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a29      	ldr	r2, [pc, #164]	; (800465c <TIM_OC1_SetConfig+0x118>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d003      	beq.n	80045c4 <TIM_OC1_SetConfig+0x80>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a28      	ldr	r2, [pc, #160]	; (8004660 <TIM_OC1_SetConfig+0x11c>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d10c      	bne.n	80045de <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	f023 0308 	bic.w	r3, r3, #8
 80045ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	f023 0304 	bic.w	r3, r3, #4
 80045dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a1b      	ldr	r2, [pc, #108]	; (8004650 <TIM_OC1_SetConfig+0x10c>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d00f      	beq.n	8004606 <TIM_OC1_SetConfig+0xc2>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a1a      	ldr	r2, [pc, #104]	; (8004654 <TIM_OC1_SetConfig+0x110>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d00b      	beq.n	8004606 <TIM_OC1_SetConfig+0xc2>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a19      	ldr	r2, [pc, #100]	; (8004658 <TIM_OC1_SetConfig+0x114>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d007      	beq.n	8004606 <TIM_OC1_SetConfig+0xc2>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a18      	ldr	r2, [pc, #96]	; (800465c <TIM_OC1_SetConfig+0x118>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d003      	beq.n	8004606 <TIM_OC1_SetConfig+0xc2>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a17      	ldr	r2, [pc, #92]	; (8004660 <TIM_OC1_SetConfig+0x11c>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d111      	bne.n	800462a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800460c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004614:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	4313      	orrs	r3, r2
 800461e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	693a      	ldr	r2, [r7, #16]
 8004626:	4313      	orrs	r3, r2
 8004628:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	685a      	ldr	r2, [r3, #4]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	621a      	str	r2, [r3, #32]
}
 8004644:	bf00      	nop
 8004646:	371c      	adds	r7, #28
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr
 8004650:	40012c00 	.word	0x40012c00
 8004654:	40013400 	.word	0x40013400
 8004658:	40014000 	.word	0x40014000
 800465c:	40014400 	.word	0x40014400
 8004660:	40014800 	.word	0x40014800

08004664 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004664:	b480      	push	{r7}
 8004666:	b087      	sub	sp, #28
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	f023 0210 	bic.w	r2, r3, #16
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800469e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	021b      	lsls	r3, r3, #8
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	f023 0320 	bic.w	r3, r3, #32
 80046b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	011b      	lsls	r3, r3, #4
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	4313      	orrs	r3, r2
 80046be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a28      	ldr	r2, [pc, #160]	; (8004764 <TIM_OC2_SetConfig+0x100>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d003      	beq.n	80046d0 <TIM_OC2_SetConfig+0x6c>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a27      	ldr	r2, [pc, #156]	; (8004768 <TIM_OC2_SetConfig+0x104>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d10d      	bne.n	80046ec <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	011b      	lsls	r3, r3, #4
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a1d      	ldr	r2, [pc, #116]	; (8004764 <TIM_OC2_SetConfig+0x100>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d00f      	beq.n	8004714 <TIM_OC2_SetConfig+0xb0>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a1c      	ldr	r2, [pc, #112]	; (8004768 <TIM_OC2_SetConfig+0x104>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d00b      	beq.n	8004714 <TIM_OC2_SetConfig+0xb0>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a1b      	ldr	r2, [pc, #108]	; (800476c <TIM_OC2_SetConfig+0x108>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d007      	beq.n	8004714 <TIM_OC2_SetConfig+0xb0>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a1a      	ldr	r2, [pc, #104]	; (8004770 <TIM_OC2_SetConfig+0x10c>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d003      	beq.n	8004714 <TIM_OC2_SetConfig+0xb0>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a19      	ldr	r2, [pc, #100]	; (8004774 <TIM_OC2_SetConfig+0x110>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d113      	bne.n	800473c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800471a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004722:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	695b      	ldr	r3, [r3, #20]
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	4313      	orrs	r3, r2
 800472e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	4313      	orrs	r3, r2
 800473a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	697a      	ldr	r2, [r7, #20]
 8004754:	621a      	str	r2, [r3, #32]
}
 8004756:	bf00      	nop
 8004758:	371c      	adds	r7, #28
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	40012c00 	.word	0x40012c00
 8004768:	40013400 	.word	0x40013400
 800476c:	40014000 	.word	0x40014000
 8004770:	40014400 	.word	0x40014400
 8004774:	40014800 	.word	0x40014800

08004778 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004778:	b480      	push	{r7}
 800477a:	b087      	sub	sp, #28
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a1b      	ldr	r3, [r3, #32]
 8004792:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	69db      	ldr	r3, [r3, #28]
 800479e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f023 0303 	bic.w	r3, r3, #3
 80047b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	021b      	lsls	r3, r3, #8
 80047cc:	697a      	ldr	r2, [r7, #20]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a27      	ldr	r2, [pc, #156]	; (8004874 <TIM_OC3_SetConfig+0xfc>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d003      	beq.n	80047e2 <TIM_OC3_SetConfig+0x6a>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a26      	ldr	r2, [pc, #152]	; (8004878 <TIM_OC3_SetConfig+0x100>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d10d      	bne.n	80047fe <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	021b      	lsls	r3, r3, #8
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a1c      	ldr	r2, [pc, #112]	; (8004874 <TIM_OC3_SetConfig+0xfc>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d00f      	beq.n	8004826 <TIM_OC3_SetConfig+0xae>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a1b      	ldr	r2, [pc, #108]	; (8004878 <TIM_OC3_SetConfig+0x100>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d00b      	beq.n	8004826 <TIM_OC3_SetConfig+0xae>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a1a      	ldr	r2, [pc, #104]	; (800487c <TIM_OC3_SetConfig+0x104>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d007      	beq.n	8004826 <TIM_OC3_SetConfig+0xae>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a19      	ldr	r2, [pc, #100]	; (8004880 <TIM_OC3_SetConfig+0x108>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d003      	beq.n	8004826 <TIM_OC3_SetConfig+0xae>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a18      	ldr	r2, [pc, #96]	; (8004884 <TIM_OC3_SetConfig+0x10c>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d113      	bne.n	800484e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800482c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004834:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	011b      	lsls	r3, r3, #4
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	4313      	orrs	r3, r2
 8004840:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	011b      	lsls	r3, r3, #4
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	4313      	orrs	r3, r2
 800484c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	685a      	ldr	r2, [r3, #4]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	697a      	ldr	r2, [r7, #20]
 8004866:	621a      	str	r2, [r3, #32]
}
 8004868:	bf00      	nop
 800486a:	371c      	adds	r7, #28
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr
 8004874:	40012c00 	.word	0x40012c00
 8004878:	40013400 	.word	0x40013400
 800487c:	40014000 	.word	0x40014000
 8004880:	40014400 	.word	0x40014400
 8004884:	40014800 	.word	0x40014800

08004888 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004888:	b480      	push	{r7}
 800488a:	b087      	sub	sp, #28
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	69db      	ldr	r3, [r3, #28]
 80048ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	021b      	lsls	r3, r3, #8
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	031b      	lsls	r3, r3, #12
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a28      	ldr	r2, [pc, #160]	; (8004988 <TIM_OC4_SetConfig+0x100>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d003      	beq.n	80048f4 <TIM_OC4_SetConfig+0x6c>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a27      	ldr	r2, [pc, #156]	; (800498c <TIM_OC4_SetConfig+0x104>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d10d      	bne.n	8004910 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80048fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	031b      	lsls	r3, r3, #12
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	4313      	orrs	r3, r2
 8004906:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800490e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a1d      	ldr	r2, [pc, #116]	; (8004988 <TIM_OC4_SetConfig+0x100>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d00f      	beq.n	8004938 <TIM_OC4_SetConfig+0xb0>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a1c      	ldr	r2, [pc, #112]	; (800498c <TIM_OC4_SetConfig+0x104>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d00b      	beq.n	8004938 <TIM_OC4_SetConfig+0xb0>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a1b      	ldr	r2, [pc, #108]	; (8004990 <TIM_OC4_SetConfig+0x108>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d007      	beq.n	8004938 <TIM_OC4_SetConfig+0xb0>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a1a      	ldr	r2, [pc, #104]	; (8004994 <TIM_OC4_SetConfig+0x10c>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d003      	beq.n	8004938 <TIM_OC4_SetConfig+0xb0>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a19      	ldr	r2, [pc, #100]	; (8004998 <TIM_OC4_SetConfig+0x110>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d113      	bne.n	8004960 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800493e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004946:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	019b      	lsls	r3, r3, #6
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	4313      	orrs	r3, r2
 8004952:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	019b      	lsls	r3, r3, #6
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	4313      	orrs	r3, r2
 800495e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	693a      	ldr	r2, [r7, #16]
 8004964:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	697a      	ldr	r2, [r7, #20]
 8004978:	621a      	str	r2, [r3, #32]
}
 800497a:	bf00      	nop
 800497c:	371c      	adds	r7, #28
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	40012c00 	.word	0x40012c00
 800498c:	40013400 	.word	0x40013400
 8004990:	40014000 	.word	0x40014000
 8004994:	40014400 	.word	0x40014400
 8004998:	40014800 	.word	0x40014800

0800499c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800499c:	b480      	push	{r7}
 800499e:	b087      	sub	sp, #28
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a1b      	ldr	r3, [r3, #32]
 80049b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80049e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	041b      	lsls	r3, r3, #16
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a17      	ldr	r2, [pc, #92]	; (8004a50 <TIM_OC5_SetConfig+0xb4>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d00f      	beq.n	8004a16 <TIM_OC5_SetConfig+0x7a>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a16      	ldr	r2, [pc, #88]	; (8004a54 <TIM_OC5_SetConfig+0xb8>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d00b      	beq.n	8004a16 <TIM_OC5_SetConfig+0x7a>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a15      	ldr	r2, [pc, #84]	; (8004a58 <TIM_OC5_SetConfig+0xbc>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d007      	beq.n	8004a16 <TIM_OC5_SetConfig+0x7a>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a14      	ldr	r2, [pc, #80]	; (8004a5c <TIM_OC5_SetConfig+0xc0>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d003      	beq.n	8004a16 <TIM_OC5_SetConfig+0x7a>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a13      	ldr	r2, [pc, #76]	; (8004a60 <TIM_OC5_SetConfig+0xc4>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d109      	bne.n	8004a2a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	021b      	lsls	r3, r3, #8
 8004a24:	697a      	ldr	r2, [r7, #20]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	697a      	ldr	r2, [r7, #20]
 8004a2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	685a      	ldr	r2, [r3, #4]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	621a      	str	r2, [r3, #32]
}
 8004a44:	bf00      	nop
 8004a46:	371c      	adds	r7, #28
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr
 8004a50:	40012c00 	.word	0x40012c00
 8004a54:	40013400 	.word	0x40013400
 8004a58:	40014000 	.word	0x40014000
 8004a5c:	40014400 	.word	0x40014400
 8004a60:	40014800 	.word	0x40014800

08004a64 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b087      	sub	sp, #28
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	021b      	lsls	r3, r3, #8
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004aaa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	051b      	lsls	r3, r3, #20
 8004ab2:	693a      	ldr	r2, [r7, #16]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a18      	ldr	r2, [pc, #96]	; (8004b1c <TIM_OC6_SetConfig+0xb8>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d00f      	beq.n	8004ae0 <TIM_OC6_SetConfig+0x7c>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a17      	ldr	r2, [pc, #92]	; (8004b20 <TIM_OC6_SetConfig+0xbc>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d00b      	beq.n	8004ae0 <TIM_OC6_SetConfig+0x7c>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a16      	ldr	r2, [pc, #88]	; (8004b24 <TIM_OC6_SetConfig+0xc0>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d007      	beq.n	8004ae0 <TIM_OC6_SetConfig+0x7c>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a15      	ldr	r2, [pc, #84]	; (8004b28 <TIM_OC6_SetConfig+0xc4>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d003      	beq.n	8004ae0 <TIM_OC6_SetConfig+0x7c>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a14      	ldr	r2, [pc, #80]	; (8004b2c <TIM_OC6_SetConfig+0xc8>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d109      	bne.n	8004af4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ae6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	695b      	ldr	r3, [r3, #20]
 8004aec:	029b      	lsls	r3, r3, #10
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	685a      	ldr	r2, [r3, #4]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	693a      	ldr	r2, [r7, #16]
 8004b0c:	621a      	str	r2, [r3, #32]
}
 8004b0e:	bf00      	nop
 8004b10:	371c      	adds	r7, #28
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	40012c00 	.word	0x40012c00
 8004b20:	40013400 	.word	0x40013400
 8004b24:	40014000 	.word	0x40014000
 8004b28:	40014400 	.word	0x40014400
 8004b2c:	40014800 	.word	0x40014800

08004b30 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b087      	sub	sp, #28
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
 8004b3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6a1b      	ldr	r3, [r3, #32]
 8004b42:	f023 0201 	bic.w	r2, r3, #1
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6a1b      	ldr	r3, [r3, #32]
 8004b54:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	4a24      	ldr	r2, [pc, #144]	; (8004bec <TIM_TI1_SetConfig+0xbc>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d013      	beq.n	8004b86 <TIM_TI1_SetConfig+0x56>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b64:	d00f      	beq.n	8004b86 <TIM_TI1_SetConfig+0x56>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	4a21      	ldr	r2, [pc, #132]	; (8004bf0 <TIM_TI1_SetConfig+0xc0>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d00b      	beq.n	8004b86 <TIM_TI1_SetConfig+0x56>
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	4a20      	ldr	r2, [pc, #128]	; (8004bf4 <TIM_TI1_SetConfig+0xc4>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d007      	beq.n	8004b86 <TIM_TI1_SetConfig+0x56>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	4a1f      	ldr	r2, [pc, #124]	; (8004bf8 <TIM_TI1_SetConfig+0xc8>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d003      	beq.n	8004b86 <TIM_TI1_SetConfig+0x56>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	4a1e      	ldr	r2, [pc, #120]	; (8004bfc <TIM_TI1_SetConfig+0xcc>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d101      	bne.n	8004b8a <TIM_TI1_SetConfig+0x5a>
 8004b86:	2301      	movs	r3, #1
 8004b88:	e000      	b.n	8004b8c <TIM_TI1_SetConfig+0x5c>
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d008      	beq.n	8004ba2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	f023 0303 	bic.w	r3, r3, #3
 8004b96:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	617b      	str	r3, [r7, #20]
 8004ba0:	e003      	b.n	8004baa <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	f043 0301 	orr.w	r3, r3, #1
 8004ba8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	011b      	lsls	r3, r3, #4
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	f023 030a 	bic.w	r3, r3, #10
 8004bc4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	f003 030a 	and.w	r3, r3, #10
 8004bcc:	693a      	ldr	r2, [r7, #16]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	621a      	str	r2, [r3, #32]
}
 8004bde:	bf00      	nop
 8004be0:	371c      	adds	r7, #28
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	40012c00 	.word	0x40012c00
 8004bf0:	40000400 	.word	0x40000400
 8004bf4:	40000800 	.word	0x40000800
 8004bf8:	40013400 	.word	0x40013400
 8004bfc:	40014000 	.word	0x40014000

08004c00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b087      	sub	sp, #28
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6a1b      	ldr	r3, [r3, #32]
 8004c10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	f023 0201 	bic.w	r2, r3, #1
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	011b      	lsls	r3, r3, #4
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	f023 030a 	bic.w	r3, r3, #10
 8004c3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	693a      	ldr	r2, [r7, #16]
 8004c4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	621a      	str	r2, [r3, #32]
}
 8004c52:	bf00      	nop
 8004c54:	371c      	adds	r7, #28
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr

08004c5e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004c5e:	b480      	push	{r7}
 8004c60:	b087      	sub	sp, #28
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	60f8      	str	r0, [r7, #12]
 8004c66:	60b9      	str	r1, [r7, #8]
 8004c68:	607a      	str	r2, [r7, #4]
 8004c6a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	f023 0210 	bic.w	r2, r3, #16
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	699b      	ldr	r3, [r3, #24]
 8004c7c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c8a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	021b      	lsls	r3, r3, #8
 8004c90:	697a      	ldr	r2, [r7, #20]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	031b      	lsls	r3, r3, #12
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	697a      	ldr	r2, [r7, #20]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004cb0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	011b      	lsls	r3, r3, #4
 8004cb6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004cba:	693a      	ldr	r2, [r7, #16]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	621a      	str	r2, [r3, #32]
}
 8004ccc:	bf00      	nop
 8004cce:	371c      	adds	r7, #28
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b087      	sub	sp, #28
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6a1b      	ldr	r3, [r3, #32]
 8004ce8:	f023 0210 	bic.w	r2, r3, #16
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	699b      	ldr	r3, [r3, #24]
 8004cf4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6a1b      	ldr	r3, [r3, #32]
 8004cfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d02:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	031b      	lsls	r3, r3, #12
 8004d08:	697a      	ldr	r2, [r7, #20]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d14:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	011b      	lsls	r3, r3, #4
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	621a      	str	r2, [r3, #32]
}
 8004d2c:	bf00      	nop
 8004d2e:	371c      	adds	r7, #28
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b087      	sub	sp, #28
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
 8004d44:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	69db      	ldr	r3, [r3, #28]
 8004d56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6a1b      	ldr	r3, [r3, #32]
 8004d5c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	f023 0303 	bic.w	r3, r3, #3
 8004d64:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004d66:	697a      	ldr	r2, [r7, #20]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d74:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	011b      	lsls	r3, r3, #4
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004d88:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	021b      	lsls	r3, r3, #8
 8004d8e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004d92:	693a      	ldr	r2, [r7, #16]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	693a      	ldr	r2, [r7, #16]
 8004da2:	621a      	str	r2, [r3, #32]
}
 8004da4:	bf00      	nop
 8004da6:	371c      	adds	r7, #28
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b087      	sub	sp, #28
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	607a      	str	r2, [r7, #4]
 8004dbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
 8004dc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	69db      	ldr	r3, [r3, #28]
 8004dce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6a1b      	ldr	r3, [r3, #32]
 8004dd4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ddc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	021b      	lsls	r3, r3, #8
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004dee:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	031b      	lsls	r3, r3, #12
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	697a      	ldr	r2, [r7, #20]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004e02:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	031b      	lsls	r3, r3, #12
 8004e08:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	621a      	str	r2, [r3, #32]
}
 8004e1e:	bf00      	nop
 8004e20:	371c      	adds	r7, #28
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr

08004e2a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e2a:	b480      	push	{r7}
 8004e2c:	b085      	sub	sp, #20
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
 8004e32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004e40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e46:	683a      	ldr	r2, [r7, #0]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	f043 0307 	orr.w	r3, r3, #7
 8004e50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	609a      	str	r2, [r3, #8]
}
 8004e58:	bf00      	nop
 8004e5a:	3714      	adds	r7, #20
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b087      	sub	sp, #28
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
 8004e70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	021a      	lsls	r2, r3, #8
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	431a      	orrs	r2, r3
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	697a      	ldr	r2, [r7, #20]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	609a      	str	r2, [r3, #8]
}
 8004e98:	bf00      	nop
 8004e9a:	371c      	adds	r7, #28
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b087      	sub	sp, #28
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	f003 031f 	and.w	r3, r3, #31
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ebc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6a1a      	ldr	r2, [r3, #32]
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	43db      	mvns	r3, r3
 8004ec6:	401a      	ands	r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6a1a      	ldr	r2, [r3, #32]
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	f003 031f 	and.w	r3, r3, #31
 8004ed6:	6879      	ldr	r1, [r7, #4]
 8004ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8004edc:	431a      	orrs	r2, r3
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	621a      	str	r2, [r3, #32]
}
 8004ee2:	bf00      	nop
 8004ee4:	371c      	adds	r7, #28
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
	...

08004ef0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d101      	bne.n	8004f08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f04:	2302      	movs	r3, #2
 8004f06:	e065      	b.n	8004fd4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2202      	movs	r2, #2
 8004f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a2c      	ldr	r2, [pc, #176]	; (8004fe0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d004      	beq.n	8004f3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a2b      	ldr	r2, [pc, #172]	; (8004fe4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d108      	bne.n	8004f4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004f42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	68fa      	ldr	r2, [r7, #12]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004f54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f58:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a1b      	ldr	r2, [pc, #108]	; (8004fe0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d018      	beq.n	8004fa8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f7e:	d013      	beq.n	8004fa8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a18      	ldr	r2, [pc, #96]	; (8004fe8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d00e      	beq.n	8004fa8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a17      	ldr	r2, [pc, #92]	; (8004fec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d009      	beq.n	8004fa8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a12      	ldr	r2, [pc, #72]	; (8004fe4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d004      	beq.n	8004fa8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a13      	ldr	r2, [pc, #76]	; (8004ff0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d10c      	bne.n	8004fc2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	68ba      	ldr	r2, [r7, #8]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68ba      	ldr	r2, [r7, #8]
 8004fc0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3714      	adds	r7, #20
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr
 8004fe0:	40012c00 	.word	0x40012c00
 8004fe4:	40013400 	.word	0x40013400
 8004fe8:	40000400 	.word	0x40000400
 8004fec:	40000800 	.word	0x40000800
 8004ff0:	40014000 	.word	0x40014000

08004ff4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ffc:	bf00      	nop
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005038:	bf00      	nop
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005060:	bf00      	nop
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <__errno>:
 8005080:	4b01      	ldr	r3, [pc, #4]	; (8005088 <__errno+0x8>)
 8005082:	6818      	ldr	r0, [r3, #0]
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	2000000c 	.word	0x2000000c

0800508c <__libc_init_array>:
 800508c:	b570      	push	{r4, r5, r6, lr}
 800508e:	4d0d      	ldr	r5, [pc, #52]	; (80050c4 <__libc_init_array+0x38>)
 8005090:	4c0d      	ldr	r4, [pc, #52]	; (80050c8 <__libc_init_array+0x3c>)
 8005092:	1b64      	subs	r4, r4, r5
 8005094:	10a4      	asrs	r4, r4, #2
 8005096:	2600      	movs	r6, #0
 8005098:	42a6      	cmp	r6, r4
 800509a:	d109      	bne.n	80050b0 <__libc_init_array+0x24>
 800509c:	4d0b      	ldr	r5, [pc, #44]	; (80050cc <__libc_init_array+0x40>)
 800509e:	4c0c      	ldr	r4, [pc, #48]	; (80050d0 <__libc_init_array+0x44>)
 80050a0:	f004 fc92 	bl	80099c8 <_init>
 80050a4:	1b64      	subs	r4, r4, r5
 80050a6:	10a4      	asrs	r4, r4, #2
 80050a8:	2600      	movs	r6, #0
 80050aa:	42a6      	cmp	r6, r4
 80050ac:	d105      	bne.n	80050ba <__libc_init_array+0x2e>
 80050ae:	bd70      	pop	{r4, r5, r6, pc}
 80050b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80050b4:	4798      	blx	r3
 80050b6:	3601      	adds	r6, #1
 80050b8:	e7ee      	b.n	8005098 <__libc_init_array+0xc>
 80050ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80050be:	4798      	blx	r3
 80050c0:	3601      	adds	r6, #1
 80050c2:	e7f2      	b.n	80050aa <__libc_init_array+0x1e>
 80050c4:	08009ea4 	.word	0x08009ea4
 80050c8:	08009ea4 	.word	0x08009ea4
 80050cc:	08009ea4 	.word	0x08009ea4
 80050d0:	08009ea8 	.word	0x08009ea8

080050d4 <memset>:
 80050d4:	4402      	add	r2, r0
 80050d6:	4603      	mov	r3, r0
 80050d8:	4293      	cmp	r3, r2
 80050da:	d100      	bne.n	80050de <memset+0xa>
 80050dc:	4770      	bx	lr
 80050de:	f803 1b01 	strb.w	r1, [r3], #1
 80050e2:	e7f9      	b.n	80050d8 <memset+0x4>

080050e4 <__cvt>:
 80050e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050e8:	ec55 4b10 	vmov	r4, r5, d0
 80050ec:	2d00      	cmp	r5, #0
 80050ee:	460e      	mov	r6, r1
 80050f0:	4619      	mov	r1, r3
 80050f2:	462b      	mov	r3, r5
 80050f4:	bfbb      	ittet	lt
 80050f6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80050fa:	461d      	movlt	r5, r3
 80050fc:	2300      	movge	r3, #0
 80050fe:	232d      	movlt	r3, #45	; 0x2d
 8005100:	700b      	strb	r3, [r1, #0]
 8005102:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005104:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005108:	4691      	mov	r9, r2
 800510a:	f023 0820 	bic.w	r8, r3, #32
 800510e:	bfbc      	itt	lt
 8005110:	4622      	movlt	r2, r4
 8005112:	4614      	movlt	r4, r2
 8005114:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005118:	d005      	beq.n	8005126 <__cvt+0x42>
 800511a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800511e:	d100      	bne.n	8005122 <__cvt+0x3e>
 8005120:	3601      	adds	r6, #1
 8005122:	2102      	movs	r1, #2
 8005124:	e000      	b.n	8005128 <__cvt+0x44>
 8005126:	2103      	movs	r1, #3
 8005128:	ab03      	add	r3, sp, #12
 800512a:	9301      	str	r3, [sp, #4]
 800512c:	ab02      	add	r3, sp, #8
 800512e:	9300      	str	r3, [sp, #0]
 8005130:	ec45 4b10 	vmov	d0, r4, r5
 8005134:	4653      	mov	r3, sl
 8005136:	4632      	mov	r2, r6
 8005138:	f001 fdae 	bl	8006c98 <_dtoa_r>
 800513c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005140:	4607      	mov	r7, r0
 8005142:	d102      	bne.n	800514a <__cvt+0x66>
 8005144:	f019 0f01 	tst.w	r9, #1
 8005148:	d022      	beq.n	8005190 <__cvt+0xac>
 800514a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800514e:	eb07 0906 	add.w	r9, r7, r6
 8005152:	d110      	bne.n	8005176 <__cvt+0x92>
 8005154:	783b      	ldrb	r3, [r7, #0]
 8005156:	2b30      	cmp	r3, #48	; 0x30
 8005158:	d10a      	bne.n	8005170 <__cvt+0x8c>
 800515a:	2200      	movs	r2, #0
 800515c:	2300      	movs	r3, #0
 800515e:	4620      	mov	r0, r4
 8005160:	4629      	mov	r1, r5
 8005162:	f7fb fcd9 	bl	8000b18 <__aeabi_dcmpeq>
 8005166:	b918      	cbnz	r0, 8005170 <__cvt+0x8c>
 8005168:	f1c6 0601 	rsb	r6, r6, #1
 800516c:	f8ca 6000 	str.w	r6, [sl]
 8005170:	f8da 3000 	ldr.w	r3, [sl]
 8005174:	4499      	add	r9, r3
 8005176:	2200      	movs	r2, #0
 8005178:	2300      	movs	r3, #0
 800517a:	4620      	mov	r0, r4
 800517c:	4629      	mov	r1, r5
 800517e:	f7fb fccb 	bl	8000b18 <__aeabi_dcmpeq>
 8005182:	b108      	cbz	r0, 8005188 <__cvt+0xa4>
 8005184:	f8cd 900c 	str.w	r9, [sp, #12]
 8005188:	2230      	movs	r2, #48	; 0x30
 800518a:	9b03      	ldr	r3, [sp, #12]
 800518c:	454b      	cmp	r3, r9
 800518e:	d307      	bcc.n	80051a0 <__cvt+0xbc>
 8005190:	9b03      	ldr	r3, [sp, #12]
 8005192:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005194:	1bdb      	subs	r3, r3, r7
 8005196:	4638      	mov	r0, r7
 8005198:	6013      	str	r3, [r2, #0]
 800519a:	b004      	add	sp, #16
 800519c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051a0:	1c59      	adds	r1, r3, #1
 80051a2:	9103      	str	r1, [sp, #12]
 80051a4:	701a      	strb	r2, [r3, #0]
 80051a6:	e7f0      	b.n	800518a <__cvt+0xa6>

080051a8 <__exponent>:
 80051a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80051aa:	4603      	mov	r3, r0
 80051ac:	2900      	cmp	r1, #0
 80051ae:	bfb8      	it	lt
 80051b0:	4249      	neglt	r1, r1
 80051b2:	f803 2b02 	strb.w	r2, [r3], #2
 80051b6:	bfb4      	ite	lt
 80051b8:	222d      	movlt	r2, #45	; 0x2d
 80051ba:	222b      	movge	r2, #43	; 0x2b
 80051bc:	2909      	cmp	r1, #9
 80051be:	7042      	strb	r2, [r0, #1]
 80051c0:	dd2a      	ble.n	8005218 <__exponent+0x70>
 80051c2:	f10d 0407 	add.w	r4, sp, #7
 80051c6:	46a4      	mov	ip, r4
 80051c8:	270a      	movs	r7, #10
 80051ca:	46a6      	mov	lr, r4
 80051cc:	460a      	mov	r2, r1
 80051ce:	fb91 f6f7 	sdiv	r6, r1, r7
 80051d2:	fb07 1516 	mls	r5, r7, r6, r1
 80051d6:	3530      	adds	r5, #48	; 0x30
 80051d8:	2a63      	cmp	r2, #99	; 0x63
 80051da:	f104 34ff 	add.w	r4, r4, #4294967295
 80051de:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80051e2:	4631      	mov	r1, r6
 80051e4:	dcf1      	bgt.n	80051ca <__exponent+0x22>
 80051e6:	3130      	adds	r1, #48	; 0x30
 80051e8:	f1ae 0502 	sub.w	r5, lr, #2
 80051ec:	f804 1c01 	strb.w	r1, [r4, #-1]
 80051f0:	1c44      	adds	r4, r0, #1
 80051f2:	4629      	mov	r1, r5
 80051f4:	4561      	cmp	r1, ip
 80051f6:	d30a      	bcc.n	800520e <__exponent+0x66>
 80051f8:	f10d 0209 	add.w	r2, sp, #9
 80051fc:	eba2 020e 	sub.w	r2, r2, lr
 8005200:	4565      	cmp	r5, ip
 8005202:	bf88      	it	hi
 8005204:	2200      	movhi	r2, #0
 8005206:	4413      	add	r3, r2
 8005208:	1a18      	subs	r0, r3, r0
 800520a:	b003      	add	sp, #12
 800520c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800520e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005212:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005216:	e7ed      	b.n	80051f4 <__exponent+0x4c>
 8005218:	2330      	movs	r3, #48	; 0x30
 800521a:	3130      	adds	r1, #48	; 0x30
 800521c:	7083      	strb	r3, [r0, #2]
 800521e:	70c1      	strb	r1, [r0, #3]
 8005220:	1d03      	adds	r3, r0, #4
 8005222:	e7f1      	b.n	8005208 <__exponent+0x60>

08005224 <_printf_float>:
 8005224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005228:	ed2d 8b02 	vpush	{d8}
 800522c:	b08d      	sub	sp, #52	; 0x34
 800522e:	460c      	mov	r4, r1
 8005230:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005234:	4616      	mov	r6, r2
 8005236:	461f      	mov	r7, r3
 8005238:	4605      	mov	r5, r0
 800523a:	f002 fe8b 	bl	8007f54 <_localeconv_r>
 800523e:	f8d0 a000 	ldr.w	sl, [r0]
 8005242:	4650      	mov	r0, sl
 8005244:	f7fa ffec 	bl	8000220 <strlen>
 8005248:	2300      	movs	r3, #0
 800524a:	930a      	str	r3, [sp, #40]	; 0x28
 800524c:	6823      	ldr	r3, [r4, #0]
 800524e:	9305      	str	r3, [sp, #20]
 8005250:	f8d8 3000 	ldr.w	r3, [r8]
 8005254:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005258:	3307      	adds	r3, #7
 800525a:	f023 0307 	bic.w	r3, r3, #7
 800525e:	f103 0208 	add.w	r2, r3, #8
 8005262:	f8c8 2000 	str.w	r2, [r8]
 8005266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800526a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800526e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005272:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005276:	9307      	str	r3, [sp, #28]
 8005278:	f8cd 8018 	str.w	r8, [sp, #24]
 800527c:	ee08 0a10 	vmov	s16, r0
 8005280:	4b9f      	ldr	r3, [pc, #636]	; (8005500 <_printf_float+0x2dc>)
 8005282:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005286:	f04f 32ff 	mov.w	r2, #4294967295
 800528a:	f7fb fc77 	bl	8000b7c <__aeabi_dcmpun>
 800528e:	bb88      	cbnz	r0, 80052f4 <_printf_float+0xd0>
 8005290:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005294:	4b9a      	ldr	r3, [pc, #616]	; (8005500 <_printf_float+0x2dc>)
 8005296:	f04f 32ff 	mov.w	r2, #4294967295
 800529a:	f7fb fc51 	bl	8000b40 <__aeabi_dcmple>
 800529e:	bb48      	cbnz	r0, 80052f4 <_printf_float+0xd0>
 80052a0:	2200      	movs	r2, #0
 80052a2:	2300      	movs	r3, #0
 80052a4:	4640      	mov	r0, r8
 80052a6:	4649      	mov	r1, r9
 80052a8:	f7fb fc40 	bl	8000b2c <__aeabi_dcmplt>
 80052ac:	b110      	cbz	r0, 80052b4 <_printf_float+0x90>
 80052ae:	232d      	movs	r3, #45	; 0x2d
 80052b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052b4:	4b93      	ldr	r3, [pc, #588]	; (8005504 <_printf_float+0x2e0>)
 80052b6:	4894      	ldr	r0, [pc, #592]	; (8005508 <_printf_float+0x2e4>)
 80052b8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80052bc:	bf94      	ite	ls
 80052be:	4698      	movls	r8, r3
 80052c0:	4680      	movhi	r8, r0
 80052c2:	2303      	movs	r3, #3
 80052c4:	6123      	str	r3, [r4, #16]
 80052c6:	9b05      	ldr	r3, [sp, #20]
 80052c8:	f023 0204 	bic.w	r2, r3, #4
 80052cc:	6022      	str	r2, [r4, #0]
 80052ce:	f04f 0900 	mov.w	r9, #0
 80052d2:	9700      	str	r7, [sp, #0]
 80052d4:	4633      	mov	r3, r6
 80052d6:	aa0b      	add	r2, sp, #44	; 0x2c
 80052d8:	4621      	mov	r1, r4
 80052da:	4628      	mov	r0, r5
 80052dc:	f000 f9d8 	bl	8005690 <_printf_common>
 80052e0:	3001      	adds	r0, #1
 80052e2:	f040 8090 	bne.w	8005406 <_printf_float+0x1e2>
 80052e6:	f04f 30ff 	mov.w	r0, #4294967295
 80052ea:	b00d      	add	sp, #52	; 0x34
 80052ec:	ecbd 8b02 	vpop	{d8}
 80052f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052f4:	4642      	mov	r2, r8
 80052f6:	464b      	mov	r3, r9
 80052f8:	4640      	mov	r0, r8
 80052fa:	4649      	mov	r1, r9
 80052fc:	f7fb fc3e 	bl	8000b7c <__aeabi_dcmpun>
 8005300:	b140      	cbz	r0, 8005314 <_printf_float+0xf0>
 8005302:	464b      	mov	r3, r9
 8005304:	2b00      	cmp	r3, #0
 8005306:	bfbc      	itt	lt
 8005308:	232d      	movlt	r3, #45	; 0x2d
 800530a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800530e:	487f      	ldr	r0, [pc, #508]	; (800550c <_printf_float+0x2e8>)
 8005310:	4b7f      	ldr	r3, [pc, #508]	; (8005510 <_printf_float+0x2ec>)
 8005312:	e7d1      	b.n	80052b8 <_printf_float+0x94>
 8005314:	6863      	ldr	r3, [r4, #4]
 8005316:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800531a:	9206      	str	r2, [sp, #24]
 800531c:	1c5a      	adds	r2, r3, #1
 800531e:	d13f      	bne.n	80053a0 <_printf_float+0x17c>
 8005320:	2306      	movs	r3, #6
 8005322:	6063      	str	r3, [r4, #4]
 8005324:	9b05      	ldr	r3, [sp, #20]
 8005326:	6861      	ldr	r1, [r4, #4]
 8005328:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800532c:	2300      	movs	r3, #0
 800532e:	9303      	str	r3, [sp, #12]
 8005330:	ab0a      	add	r3, sp, #40	; 0x28
 8005332:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005336:	ab09      	add	r3, sp, #36	; 0x24
 8005338:	ec49 8b10 	vmov	d0, r8, r9
 800533c:	9300      	str	r3, [sp, #0]
 800533e:	6022      	str	r2, [r4, #0]
 8005340:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005344:	4628      	mov	r0, r5
 8005346:	f7ff fecd 	bl	80050e4 <__cvt>
 800534a:	9b06      	ldr	r3, [sp, #24]
 800534c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800534e:	2b47      	cmp	r3, #71	; 0x47
 8005350:	4680      	mov	r8, r0
 8005352:	d108      	bne.n	8005366 <_printf_float+0x142>
 8005354:	1cc8      	adds	r0, r1, #3
 8005356:	db02      	blt.n	800535e <_printf_float+0x13a>
 8005358:	6863      	ldr	r3, [r4, #4]
 800535a:	4299      	cmp	r1, r3
 800535c:	dd41      	ble.n	80053e2 <_printf_float+0x1be>
 800535e:	f1ab 0b02 	sub.w	fp, fp, #2
 8005362:	fa5f fb8b 	uxtb.w	fp, fp
 8005366:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800536a:	d820      	bhi.n	80053ae <_printf_float+0x18a>
 800536c:	3901      	subs	r1, #1
 800536e:	465a      	mov	r2, fp
 8005370:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005374:	9109      	str	r1, [sp, #36]	; 0x24
 8005376:	f7ff ff17 	bl	80051a8 <__exponent>
 800537a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800537c:	1813      	adds	r3, r2, r0
 800537e:	2a01      	cmp	r2, #1
 8005380:	4681      	mov	r9, r0
 8005382:	6123      	str	r3, [r4, #16]
 8005384:	dc02      	bgt.n	800538c <_printf_float+0x168>
 8005386:	6822      	ldr	r2, [r4, #0]
 8005388:	07d2      	lsls	r2, r2, #31
 800538a:	d501      	bpl.n	8005390 <_printf_float+0x16c>
 800538c:	3301      	adds	r3, #1
 800538e:	6123      	str	r3, [r4, #16]
 8005390:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005394:	2b00      	cmp	r3, #0
 8005396:	d09c      	beq.n	80052d2 <_printf_float+0xae>
 8005398:	232d      	movs	r3, #45	; 0x2d
 800539a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800539e:	e798      	b.n	80052d2 <_printf_float+0xae>
 80053a0:	9a06      	ldr	r2, [sp, #24]
 80053a2:	2a47      	cmp	r2, #71	; 0x47
 80053a4:	d1be      	bne.n	8005324 <_printf_float+0x100>
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1bc      	bne.n	8005324 <_printf_float+0x100>
 80053aa:	2301      	movs	r3, #1
 80053ac:	e7b9      	b.n	8005322 <_printf_float+0xfe>
 80053ae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80053b2:	d118      	bne.n	80053e6 <_printf_float+0x1c2>
 80053b4:	2900      	cmp	r1, #0
 80053b6:	6863      	ldr	r3, [r4, #4]
 80053b8:	dd0b      	ble.n	80053d2 <_printf_float+0x1ae>
 80053ba:	6121      	str	r1, [r4, #16]
 80053bc:	b913      	cbnz	r3, 80053c4 <_printf_float+0x1a0>
 80053be:	6822      	ldr	r2, [r4, #0]
 80053c0:	07d0      	lsls	r0, r2, #31
 80053c2:	d502      	bpl.n	80053ca <_printf_float+0x1a6>
 80053c4:	3301      	adds	r3, #1
 80053c6:	440b      	add	r3, r1
 80053c8:	6123      	str	r3, [r4, #16]
 80053ca:	65a1      	str	r1, [r4, #88]	; 0x58
 80053cc:	f04f 0900 	mov.w	r9, #0
 80053d0:	e7de      	b.n	8005390 <_printf_float+0x16c>
 80053d2:	b913      	cbnz	r3, 80053da <_printf_float+0x1b6>
 80053d4:	6822      	ldr	r2, [r4, #0]
 80053d6:	07d2      	lsls	r2, r2, #31
 80053d8:	d501      	bpl.n	80053de <_printf_float+0x1ba>
 80053da:	3302      	adds	r3, #2
 80053dc:	e7f4      	b.n	80053c8 <_printf_float+0x1a4>
 80053de:	2301      	movs	r3, #1
 80053e0:	e7f2      	b.n	80053c8 <_printf_float+0x1a4>
 80053e2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80053e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053e8:	4299      	cmp	r1, r3
 80053ea:	db05      	blt.n	80053f8 <_printf_float+0x1d4>
 80053ec:	6823      	ldr	r3, [r4, #0]
 80053ee:	6121      	str	r1, [r4, #16]
 80053f0:	07d8      	lsls	r0, r3, #31
 80053f2:	d5ea      	bpl.n	80053ca <_printf_float+0x1a6>
 80053f4:	1c4b      	adds	r3, r1, #1
 80053f6:	e7e7      	b.n	80053c8 <_printf_float+0x1a4>
 80053f8:	2900      	cmp	r1, #0
 80053fa:	bfd4      	ite	le
 80053fc:	f1c1 0202 	rsble	r2, r1, #2
 8005400:	2201      	movgt	r2, #1
 8005402:	4413      	add	r3, r2
 8005404:	e7e0      	b.n	80053c8 <_printf_float+0x1a4>
 8005406:	6823      	ldr	r3, [r4, #0]
 8005408:	055a      	lsls	r2, r3, #21
 800540a:	d407      	bmi.n	800541c <_printf_float+0x1f8>
 800540c:	6923      	ldr	r3, [r4, #16]
 800540e:	4642      	mov	r2, r8
 8005410:	4631      	mov	r1, r6
 8005412:	4628      	mov	r0, r5
 8005414:	47b8      	blx	r7
 8005416:	3001      	adds	r0, #1
 8005418:	d12c      	bne.n	8005474 <_printf_float+0x250>
 800541a:	e764      	b.n	80052e6 <_printf_float+0xc2>
 800541c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005420:	f240 80e0 	bls.w	80055e4 <_printf_float+0x3c0>
 8005424:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005428:	2200      	movs	r2, #0
 800542a:	2300      	movs	r3, #0
 800542c:	f7fb fb74 	bl	8000b18 <__aeabi_dcmpeq>
 8005430:	2800      	cmp	r0, #0
 8005432:	d034      	beq.n	800549e <_printf_float+0x27a>
 8005434:	4a37      	ldr	r2, [pc, #220]	; (8005514 <_printf_float+0x2f0>)
 8005436:	2301      	movs	r3, #1
 8005438:	4631      	mov	r1, r6
 800543a:	4628      	mov	r0, r5
 800543c:	47b8      	blx	r7
 800543e:	3001      	adds	r0, #1
 8005440:	f43f af51 	beq.w	80052e6 <_printf_float+0xc2>
 8005444:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005448:	429a      	cmp	r2, r3
 800544a:	db02      	blt.n	8005452 <_printf_float+0x22e>
 800544c:	6823      	ldr	r3, [r4, #0]
 800544e:	07d8      	lsls	r0, r3, #31
 8005450:	d510      	bpl.n	8005474 <_printf_float+0x250>
 8005452:	ee18 3a10 	vmov	r3, s16
 8005456:	4652      	mov	r2, sl
 8005458:	4631      	mov	r1, r6
 800545a:	4628      	mov	r0, r5
 800545c:	47b8      	blx	r7
 800545e:	3001      	adds	r0, #1
 8005460:	f43f af41 	beq.w	80052e6 <_printf_float+0xc2>
 8005464:	f04f 0800 	mov.w	r8, #0
 8005468:	f104 091a 	add.w	r9, r4, #26
 800546c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800546e:	3b01      	subs	r3, #1
 8005470:	4543      	cmp	r3, r8
 8005472:	dc09      	bgt.n	8005488 <_printf_float+0x264>
 8005474:	6823      	ldr	r3, [r4, #0]
 8005476:	079b      	lsls	r3, r3, #30
 8005478:	f100 8105 	bmi.w	8005686 <_printf_float+0x462>
 800547c:	68e0      	ldr	r0, [r4, #12]
 800547e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005480:	4298      	cmp	r0, r3
 8005482:	bfb8      	it	lt
 8005484:	4618      	movlt	r0, r3
 8005486:	e730      	b.n	80052ea <_printf_float+0xc6>
 8005488:	2301      	movs	r3, #1
 800548a:	464a      	mov	r2, r9
 800548c:	4631      	mov	r1, r6
 800548e:	4628      	mov	r0, r5
 8005490:	47b8      	blx	r7
 8005492:	3001      	adds	r0, #1
 8005494:	f43f af27 	beq.w	80052e6 <_printf_float+0xc2>
 8005498:	f108 0801 	add.w	r8, r8, #1
 800549c:	e7e6      	b.n	800546c <_printf_float+0x248>
 800549e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	dc39      	bgt.n	8005518 <_printf_float+0x2f4>
 80054a4:	4a1b      	ldr	r2, [pc, #108]	; (8005514 <_printf_float+0x2f0>)
 80054a6:	2301      	movs	r3, #1
 80054a8:	4631      	mov	r1, r6
 80054aa:	4628      	mov	r0, r5
 80054ac:	47b8      	blx	r7
 80054ae:	3001      	adds	r0, #1
 80054b0:	f43f af19 	beq.w	80052e6 <_printf_float+0xc2>
 80054b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054b8:	4313      	orrs	r3, r2
 80054ba:	d102      	bne.n	80054c2 <_printf_float+0x29e>
 80054bc:	6823      	ldr	r3, [r4, #0]
 80054be:	07d9      	lsls	r1, r3, #31
 80054c0:	d5d8      	bpl.n	8005474 <_printf_float+0x250>
 80054c2:	ee18 3a10 	vmov	r3, s16
 80054c6:	4652      	mov	r2, sl
 80054c8:	4631      	mov	r1, r6
 80054ca:	4628      	mov	r0, r5
 80054cc:	47b8      	blx	r7
 80054ce:	3001      	adds	r0, #1
 80054d0:	f43f af09 	beq.w	80052e6 <_printf_float+0xc2>
 80054d4:	f04f 0900 	mov.w	r9, #0
 80054d8:	f104 0a1a 	add.w	sl, r4, #26
 80054dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054de:	425b      	negs	r3, r3
 80054e0:	454b      	cmp	r3, r9
 80054e2:	dc01      	bgt.n	80054e8 <_printf_float+0x2c4>
 80054e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054e6:	e792      	b.n	800540e <_printf_float+0x1ea>
 80054e8:	2301      	movs	r3, #1
 80054ea:	4652      	mov	r2, sl
 80054ec:	4631      	mov	r1, r6
 80054ee:	4628      	mov	r0, r5
 80054f0:	47b8      	blx	r7
 80054f2:	3001      	adds	r0, #1
 80054f4:	f43f aef7 	beq.w	80052e6 <_printf_float+0xc2>
 80054f8:	f109 0901 	add.w	r9, r9, #1
 80054fc:	e7ee      	b.n	80054dc <_printf_float+0x2b8>
 80054fe:	bf00      	nop
 8005500:	7fefffff 	.word	0x7fefffff
 8005504:	08009a04 	.word	0x08009a04
 8005508:	08009a08 	.word	0x08009a08
 800550c:	08009a10 	.word	0x08009a10
 8005510:	08009a0c 	.word	0x08009a0c
 8005514:	08009a14 	.word	0x08009a14
 8005518:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800551a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800551c:	429a      	cmp	r2, r3
 800551e:	bfa8      	it	ge
 8005520:	461a      	movge	r2, r3
 8005522:	2a00      	cmp	r2, #0
 8005524:	4691      	mov	r9, r2
 8005526:	dc37      	bgt.n	8005598 <_printf_float+0x374>
 8005528:	f04f 0b00 	mov.w	fp, #0
 800552c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005530:	f104 021a 	add.w	r2, r4, #26
 8005534:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005536:	9305      	str	r3, [sp, #20]
 8005538:	eba3 0309 	sub.w	r3, r3, r9
 800553c:	455b      	cmp	r3, fp
 800553e:	dc33      	bgt.n	80055a8 <_printf_float+0x384>
 8005540:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005544:	429a      	cmp	r2, r3
 8005546:	db3b      	blt.n	80055c0 <_printf_float+0x39c>
 8005548:	6823      	ldr	r3, [r4, #0]
 800554a:	07da      	lsls	r2, r3, #31
 800554c:	d438      	bmi.n	80055c0 <_printf_float+0x39c>
 800554e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005550:	9a05      	ldr	r2, [sp, #20]
 8005552:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005554:	1a9a      	subs	r2, r3, r2
 8005556:	eba3 0901 	sub.w	r9, r3, r1
 800555a:	4591      	cmp	r9, r2
 800555c:	bfa8      	it	ge
 800555e:	4691      	movge	r9, r2
 8005560:	f1b9 0f00 	cmp.w	r9, #0
 8005564:	dc35      	bgt.n	80055d2 <_printf_float+0x3ae>
 8005566:	f04f 0800 	mov.w	r8, #0
 800556a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800556e:	f104 0a1a 	add.w	sl, r4, #26
 8005572:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005576:	1a9b      	subs	r3, r3, r2
 8005578:	eba3 0309 	sub.w	r3, r3, r9
 800557c:	4543      	cmp	r3, r8
 800557e:	f77f af79 	ble.w	8005474 <_printf_float+0x250>
 8005582:	2301      	movs	r3, #1
 8005584:	4652      	mov	r2, sl
 8005586:	4631      	mov	r1, r6
 8005588:	4628      	mov	r0, r5
 800558a:	47b8      	blx	r7
 800558c:	3001      	adds	r0, #1
 800558e:	f43f aeaa 	beq.w	80052e6 <_printf_float+0xc2>
 8005592:	f108 0801 	add.w	r8, r8, #1
 8005596:	e7ec      	b.n	8005572 <_printf_float+0x34e>
 8005598:	4613      	mov	r3, r2
 800559a:	4631      	mov	r1, r6
 800559c:	4642      	mov	r2, r8
 800559e:	4628      	mov	r0, r5
 80055a0:	47b8      	blx	r7
 80055a2:	3001      	adds	r0, #1
 80055a4:	d1c0      	bne.n	8005528 <_printf_float+0x304>
 80055a6:	e69e      	b.n	80052e6 <_printf_float+0xc2>
 80055a8:	2301      	movs	r3, #1
 80055aa:	4631      	mov	r1, r6
 80055ac:	4628      	mov	r0, r5
 80055ae:	9205      	str	r2, [sp, #20]
 80055b0:	47b8      	blx	r7
 80055b2:	3001      	adds	r0, #1
 80055b4:	f43f ae97 	beq.w	80052e6 <_printf_float+0xc2>
 80055b8:	9a05      	ldr	r2, [sp, #20]
 80055ba:	f10b 0b01 	add.w	fp, fp, #1
 80055be:	e7b9      	b.n	8005534 <_printf_float+0x310>
 80055c0:	ee18 3a10 	vmov	r3, s16
 80055c4:	4652      	mov	r2, sl
 80055c6:	4631      	mov	r1, r6
 80055c8:	4628      	mov	r0, r5
 80055ca:	47b8      	blx	r7
 80055cc:	3001      	adds	r0, #1
 80055ce:	d1be      	bne.n	800554e <_printf_float+0x32a>
 80055d0:	e689      	b.n	80052e6 <_printf_float+0xc2>
 80055d2:	9a05      	ldr	r2, [sp, #20]
 80055d4:	464b      	mov	r3, r9
 80055d6:	4442      	add	r2, r8
 80055d8:	4631      	mov	r1, r6
 80055da:	4628      	mov	r0, r5
 80055dc:	47b8      	blx	r7
 80055de:	3001      	adds	r0, #1
 80055e0:	d1c1      	bne.n	8005566 <_printf_float+0x342>
 80055e2:	e680      	b.n	80052e6 <_printf_float+0xc2>
 80055e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055e6:	2a01      	cmp	r2, #1
 80055e8:	dc01      	bgt.n	80055ee <_printf_float+0x3ca>
 80055ea:	07db      	lsls	r3, r3, #31
 80055ec:	d538      	bpl.n	8005660 <_printf_float+0x43c>
 80055ee:	2301      	movs	r3, #1
 80055f0:	4642      	mov	r2, r8
 80055f2:	4631      	mov	r1, r6
 80055f4:	4628      	mov	r0, r5
 80055f6:	47b8      	blx	r7
 80055f8:	3001      	adds	r0, #1
 80055fa:	f43f ae74 	beq.w	80052e6 <_printf_float+0xc2>
 80055fe:	ee18 3a10 	vmov	r3, s16
 8005602:	4652      	mov	r2, sl
 8005604:	4631      	mov	r1, r6
 8005606:	4628      	mov	r0, r5
 8005608:	47b8      	blx	r7
 800560a:	3001      	adds	r0, #1
 800560c:	f43f ae6b 	beq.w	80052e6 <_printf_float+0xc2>
 8005610:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005614:	2200      	movs	r2, #0
 8005616:	2300      	movs	r3, #0
 8005618:	f7fb fa7e 	bl	8000b18 <__aeabi_dcmpeq>
 800561c:	b9d8      	cbnz	r0, 8005656 <_printf_float+0x432>
 800561e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005620:	f108 0201 	add.w	r2, r8, #1
 8005624:	3b01      	subs	r3, #1
 8005626:	4631      	mov	r1, r6
 8005628:	4628      	mov	r0, r5
 800562a:	47b8      	blx	r7
 800562c:	3001      	adds	r0, #1
 800562e:	d10e      	bne.n	800564e <_printf_float+0x42a>
 8005630:	e659      	b.n	80052e6 <_printf_float+0xc2>
 8005632:	2301      	movs	r3, #1
 8005634:	4652      	mov	r2, sl
 8005636:	4631      	mov	r1, r6
 8005638:	4628      	mov	r0, r5
 800563a:	47b8      	blx	r7
 800563c:	3001      	adds	r0, #1
 800563e:	f43f ae52 	beq.w	80052e6 <_printf_float+0xc2>
 8005642:	f108 0801 	add.w	r8, r8, #1
 8005646:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005648:	3b01      	subs	r3, #1
 800564a:	4543      	cmp	r3, r8
 800564c:	dcf1      	bgt.n	8005632 <_printf_float+0x40e>
 800564e:	464b      	mov	r3, r9
 8005650:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005654:	e6dc      	b.n	8005410 <_printf_float+0x1ec>
 8005656:	f04f 0800 	mov.w	r8, #0
 800565a:	f104 0a1a 	add.w	sl, r4, #26
 800565e:	e7f2      	b.n	8005646 <_printf_float+0x422>
 8005660:	2301      	movs	r3, #1
 8005662:	4642      	mov	r2, r8
 8005664:	e7df      	b.n	8005626 <_printf_float+0x402>
 8005666:	2301      	movs	r3, #1
 8005668:	464a      	mov	r2, r9
 800566a:	4631      	mov	r1, r6
 800566c:	4628      	mov	r0, r5
 800566e:	47b8      	blx	r7
 8005670:	3001      	adds	r0, #1
 8005672:	f43f ae38 	beq.w	80052e6 <_printf_float+0xc2>
 8005676:	f108 0801 	add.w	r8, r8, #1
 800567a:	68e3      	ldr	r3, [r4, #12]
 800567c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800567e:	1a5b      	subs	r3, r3, r1
 8005680:	4543      	cmp	r3, r8
 8005682:	dcf0      	bgt.n	8005666 <_printf_float+0x442>
 8005684:	e6fa      	b.n	800547c <_printf_float+0x258>
 8005686:	f04f 0800 	mov.w	r8, #0
 800568a:	f104 0919 	add.w	r9, r4, #25
 800568e:	e7f4      	b.n	800567a <_printf_float+0x456>

08005690 <_printf_common>:
 8005690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005694:	4616      	mov	r6, r2
 8005696:	4699      	mov	r9, r3
 8005698:	688a      	ldr	r2, [r1, #8]
 800569a:	690b      	ldr	r3, [r1, #16]
 800569c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056a0:	4293      	cmp	r3, r2
 80056a2:	bfb8      	it	lt
 80056a4:	4613      	movlt	r3, r2
 80056a6:	6033      	str	r3, [r6, #0]
 80056a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056ac:	4607      	mov	r7, r0
 80056ae:	460c      	mov	r4, r1
 80056b0:	b10a      	cbz	r2, 80056b6 <_printf_common+0x26>
 80056b2:	3301      	adds	r3, #1
 80056b4:	6033      	str	r3, [r6, #0]
 80056b6:	6823      	ldr	r3, [r4, #0]
 80056b8:	0699      	lsls	r1, r3, #26
 80056ba:	bf42      	ittt	mi
 80056bc:	6833      	ldrmi	r3, [r6, #0]
 80056be:	3302      	addmi	r3, #2
 80056c0:	6033      	strmi	r3, [r6, #0]
 80056c2:	6825      	ldr	r5, [r4, #0]
 80056c4:	f015 0506 	ands.w	r5, r5, #6
 80056c8:	d106      	bne.n	80056d8 <_printf_common+0x48>
 80056ca:	f104 0a19 	add.w	sl, r4, #25
 80056ce:	68e3      	ldr	r3, [r4, #12]
 80056d0:	6832      	ldr	r2, [r6, #0]
 80056d2:	1a9b      	subs	r3, r3, r2
 80056d4:	42ab      	cmp	r3, r5
 80056d6:	dc26      	bgt.n	8005726 <_printf_common+0x96>
 80056d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80056dc:	1e13      	subs	r3, r2, #0
 80056de:	6822      	ldr	r2, [r4, #0]
 80056e0:	bf18      	it	ne
 80056e2:	2301      	movne	r3, #1
 80056e4:	0692      	lsls	r2, r2, #26
 80056e6:	d42b      	bmi.n	8005740 <_printf_common+0xb0>
 80056e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056ec:	4649      	mov	r1, r9
 80056ee:	4638      	mov	r0, r7
 80056f0:	47c0      	blx	r8
 80056f2:	3001      	adds	r0, #1
 80056f4:	d01e      	beq.n	8005734 <_printf_common+0xa4>
 80056f6:	6823      	ldr	r3, [r4, #0]
 80056f8:	68e5      	ldr	r5, [r4, #12]
 80056fa:	6832      	ldr	r2, [r6, #0]
 80056fc:	f003 0306 	and.w	r3, r3, #6
 8005700:	2b04      	cmp	r3, #4
 8005702:	bf08      	it	eq
 8005704:	1aad      	subeq	r5, r5, r2
 8005706:	68a3      	ldr	r3, [r4, #8]
 8005708:	6922      	ldr	r2, [r4, #16]
 800570a:	bf0c      	ite	eq
 800570c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005710:	2500      	movne	r5, #0
 8005712:	4293      	cmp	r3, r2
 8005714:	bfc4      	itt	gt
 8005716:	1a9b      	subgt	r3, r3, r2
 8005718:	18ed      	addgt	r5, r5, r3
 800571a:	2600      	movs	r6, #0
 800571c:	341a      	adds	r4, #26
 800571e:	42b5      	cmp	r5, r6
 8005720:	d11a      	bne.n	8005758 <_printf_common+0xc8>
 8005722:	2000      	movs	r0, #0
 8005724:	e008      	b.n	8005738 <_printf_common+0xa8>
 8005726:	2301      	movs	r3, #1
 8005728:	4652      	mov	r2, sl
 800572a:	4649      	mov	r1, r9
 800572c:	4638      	mov	r0, r7
 800572e:	47c0      	blx	r8
 8005730:	3001      	adds	r0, #1
 8005732:	d103      	bne.n	800573c <_printf_common+0xac>
 8005734:	f04f 30ff 	mov.w	r0, #4294967295
 8005738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800573c:	3501      	adds	r5, #1
 800573e:	e7c6      	b.n	80056ce <_printf_common+0x3e>
 8005740:	18e1      	adds	r1, r4, r3
 8005742:	1c5a      	adds	r2, r3, #1
 8005744:	2030      	movs	r0, #48	; 0x30
 8005746:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800574a:	4422      	add	r2, r4
 800574c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005750:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005754:	3302      	adds	r3, #2
 8005756:	e7c7      	b.n	80056e8 <_printf_common+0x58>
 8005758:	2301      	movs	r3, #1
 800575a:	4622      	mov	r2, r4
 800575c:	4649      	mov	r1, r9
 800575e:	4638      	mov	r0, r7
 8005760:	47c0      	blx	r8
 8005762:	3001      	adds	r0, #1
 8005764:	d0e6      	beq.n	8005734 <_printf_common+0xa4>
 8005766:	3601      	adds	r6, #1
 8005768:	e7d9      	b.n	800571e <_printf_common+0x8e>
	...

0800576c <_printf_i>:
 800576c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005770:	7e0f      	ldrb	r7, [r1, #24]
 8005772:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005774:	2f78      	cmp	r7, #120	; 0x78
 8005776:	4691      	mov	r9, r2
 8005778:	4680      	mov	r8, r0
 800577a:	460c      	mov	r4, r1
 800577c:	469a      	mov	sl, r3
 800577e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005782:	d807      	bhi.n	8005794 <_printf_i+0x28>
 8005784:	2f62      	cmp	r7, #98	; 0x62
 8005786:	d80a      	bhi.n	800579e <_printf_i+0x32>
 8005788:	2f00      	cmp	r7, #0
 800578a:	f000 80d8 	beq.w	800593e <_printf_i+0x1d2>
 800578e:	2f58      	cmp	r7, #88	; 0x58
 8005790:	f000 80a3 	beq.w	80058da <_printf_i+0x16e>
 8005794:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005798:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800579c:	e03a      	b.n	8005814 <_printf_i+0xa8>
 800579e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057a2:	2b15      	cmp	r3, #21
 80057a4:	d8f6      	bhi.n	8005794 <_printf_i+0x28>
 80057a6:	a101      	add	r1, pc, #4	; (adr r1, 80057ac <_printf_i+0x40>)
 80057a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057ac:	08005805 	.word	0x08005805
 80057b0:	08005819 	.word	0x08005819
 80057b4:	08005795 	.word	0x08005795
 80057b8:	08005795 	.word	0x08005795
 80057bc:	08005795 	.word	0x08005795
 80057c0:	08005795 	.word	0x08005795
 80057c4:	08005819 	.word	0x08005819
 80057c8:	08005795 	.word	0x08005795
 80057cc:	08005795 	.word	0x08005795
 80057d0:	08005795 	.word	0x08005795
 80057d4:	08005795 	.word	0x08005795
 80057d8:	08005925 	.word	0x08005925
 80057dc:	08005849 	.word	0x08005849
 80057e0:	08005907 	.word	0x08005907
 80057e4:	08005795 	.word	0x08005795
 80057e8:	08005795 	.word	0x08005795
 80057ec:	08005947 	.word	0x08005947
 80057f0:	08005795 	.word	0x08005795
 80057f4:	08005849 	.word	0x08005849
 80057f8:	08005795 	.word	0x08005795
 80057fc:	08005795 	.word	0x08005795
 8005800:	0800590f 	.word	0x0800590f
 8005804:	682b      	ldr	r3, [r5, #0]
 8005806:	1d1a      	adds	r2, r3, #4
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	602a      	str	r2, [r5, #0]
 800580c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005810:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005814:	2301      	movs	r3, #1
 8005816:	e0a3      	b.n	8005960 <_printf_i+0x1f4>
 8005818:	6820      	ldr	r0, [r4, #0]
 800581a:	6829      	ldr	r1, [r5, #0]
 800581c:	0606      	lsls	r6, r0, #24
 800581e:	f101 0304 	add.w	r3, r1, #4
 8005822:	d50a      	bpl.n	800583a <_printf_i+0xce>
 8005824:	680e      	ldr	r6, [r1, #0]
 8005826:	602b      	str	r3, [r5, #0]
 8005828:	2e00      	cmp	r6, #0
 800582a:	da03      	bge.n	8005834 <_printf_i+0xc8>
 800582c:	232d      	movs	r3, #45	; 0x2d
 800582e:	4276      	negs	r6, r6
 8005830:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005834:	485e      	ldr	r0, [pc, #376]	; (80059b0 <_printf_i+0x244>)
 8005836:	230a      	movs	r3, #10
 8005838:	e019      	b.n	800586e <_printf_i+0x102>
 800583a:	680e      	ldr	r6, [r1, #0]
 800583c:	602b      	str	r3, [r5, #0]
 800583e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005842:	bf18      	it	ne
 8005844:	b236      	sxthne	r6, r6
 8005846:	e7ef      	b.n	8005828 <_printf_i+0xbc>
 8005848:	682b      	ldr	r3, [r5, #0]
 800584a:	6820      	ldr	r0, [r4, #0]
 800584c:	1d19      	adds	r1, r3, #4
 800584e:	6029      	str	r1, [r5, #0]
 8005850:	0601      	lsls	r1, r0, #24
 8005852:	d501      	bpl.n	8005858 <_printf_i+0xec>
 8005854:	681e      	ldr	r6, [r3, #0]
 8005856:	e002      	b.n	800585e <_printf_i+0xf2>
 8005858:	0646      	lsls	r6, r0, #25
 800585a:	d5fb      	bpl.n	8005854 <_printf_i+0xe8>
 800585c:	881e      	ldrh	r6, [r3, #0]
 800585e:	4854      	ldr	r0, [pc, #336]	; (80059b0 <_printf_i+0x244>)
 8005860:	2f6f      	cmp	r7, #111	; 0x6f
 8005862:	bf0c      	ite	eq
 8005864:	2308      	moveq	r3, #8
 8005866:	230a      	movne	r3, #10
 8005868:	2100      	movs	r1, #0
 800586a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800586e:	6865      	ldr	r5, [r4, #4]
 8005870:	60a5      	str	r5, [r4, #8]
 8005872:	2d00      	cmp	r5, #0
 8005874:	bfa2      	ittt	ge
 8005876:	6821      	ldrge	r1, [r4, #0]
 8005878:	f021 0104 	bicge.w	r1, r1, #4
 800587c:	6021      	strge	r1, [r4, #0]
 800587e:	b90e      	cbnz	r6, 8005884 <_printf_i+0x118>
 8005880:	2d00      	cmp	r5, #0
 8005882:	d04d      	beq.n	8005920 <_printf_i+0x1b4>
 8005884:	4615      	mov	r5, r2
 8005886:	fbb6 f1f3 	udiv	r1, r6, r3
 800588a:	fb03 6711 	mls	r7, r3, r1, r6
 800588e:	5dc7      	ldrb	r7, [r0, r7]
 8005890:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005894:	4637      	mov	r7, r6
 8005896:	42bb      	cmp	r3, r7
 8005898:	460e      	mov	r6, r1
 800589a:	d9f4      	bls.n	8005886 <_printf_i+0x11a>
 800589c:	2b08      	cmp	r3, #8
 800589e:	d10b      	bne.n	80058b8 <_printf_i+0x14c>
 80058a0:	6823      	ldr	r3, [r4, #0]
 80058a2:	07de      	lsls	r6, r3, #31
 80058a4:	d508      	bpl.n	80058b8 <_printf_i+0x14c>
 80058a6:	6923      	ldr	r3, [r4, #16]
 80058a8:	6861      	ldr	r1, [r4, #4]
 80058aa:	4299      	cmp	r1, r3
 80058ac:	bfde      	ittt	le
 80058ae:	2330      	movle	r3, #48	; 0x30
 80058b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80058b8:	1b52      	subs	r2, r2, r5
 80058ba:	6122      	str	r2, [r4, #16]
 80058bc:	f8cd a000 	str.w	sl, [sp]
 80058c0:	464b      	mov	r3, r9
 80058c2:	aa03      	add	r2, sp, #12
 80058c4:	4621      	mov	r1, r4
 80058c6:	4640      	mov	r0, r8
 80058c8:	f7ff fee2 	bl	8005690 <_printf_common>
 80058cc:	3001      	adds	r0, #1
 80058ce:	d14c      	bne.n	800596a <_printf_i+0x1fe>
 80058d0:	f04f 30ff 	mov.w	r0, #4294967295
 80058d4:	b004      	add	sp, #16
 80058d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058da:	4835      	ldr	r0, [pc, #212]	; (80059b0 <_printf_i+0x244>)
 80058dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80058e0:	6829      	ldr	r1, [r5, #0]
 80058e2:	6823      	ldr	r3, [r4, #0]
 80058e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80058e8:	6029      	str	r1, [r5, #0]
 80058ea:	061d      	lsls	r5, r3, #24
 80058ec:	d514      	bpl.n	8005918 <_printf_i+0x1ac>
 80058ee:	07df      	lsls	r7, r3, #31
 80058f0:	bf44      	itt	mi
 80058f2:	f043 0320 	orrmi.w	r3, r3, #32
 80058f6:	6023      	strmi	r3, [r4, #0]
 80058f8:	b91e      	cbnz	r6, 8005902 <_printf_i+0x196>
 80058fa:	6823      	ldr	r3, [r4, #0]
 80058fc:	f023 0320 	bic.w	r3, r3, #32
 8005900:	6023      	str	r3, [r4, #0]
 8005902:	2310      	movs	r3, #16
 8005904:	e7b0      	b.n	8005868 <_printf_i+0xfc>
 8005906:	6823      	ldr	r3, [r4, #0]
 8005908:	f043 0320 	orr.w	r3, r3, #32
 800590c:	6023      	str	r3, [r4, #0]
 800590e:	2378      	movs	r3, #120	; 0x78
 8005910:	4828      	ldr	r0, [pc, #160]	; (80059b4 <_printf_i+0x248>)
 8005912:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005916:	e7e3      	b.n	80058e0 <_printf_i+0x174>
 8005918:	0659      	lsls	r1, r3, #25
 800591a:	bf48      	it	mi
 800591c:	b2b6      	uxthmi	r6, r6
 800591e:	e7e6      	b.n	80058ee <_printf_i+0x182>
 8005920:	4615      	mov	r5, r2
 8005922:	e7bb      	b.n	800589c <_printf_i+0x130>
 8005924:	682b      	ldr	r3, [r5, #0]
 8005926:	6826      	ldr	r6, [r4, #0]
 8005928:	6961      	ldr	r1, [r4, #20]
 800592a:	1d18      	adds	r0, r3, #4
 800592c:	6028      	str	r0, [r5, #0]
 800592e:	0635      	lsls	r5, r6, #24
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	d501      	bpl.n	8005938 <_printf_i+0x1cc>
 8005934:	6019      	str	r1, [r3, #0]
 8005936:	e002      	b.n	800593e <_printf_i+0x1d2>
 8005938:	0670      	lsls	r0, r6, #25
 800593a:	d5fb      	bpl.n	8005934 <_printf_i+0x1c8>
 800593c:	8019      	strh	r1, [r3, #0]
 800593e:	2300      	movs	r3, #0
 8005940:	6123      	str	r3, [r4, #16]
 8005942:	4615      	mov	r5, r2
 8005944:	e7ba      	b.n	80058bc <_printf_i+0x150>
 8005946:	682b      	ldr	r3, [r5, #0]
 8005948:	1d1a      	adds	r2, r3, #4
 800594a:	602a      	str	r2, [r5, #0]
 800594c:	681d      	ldr	r5, [r3, #0]
 800594e:	6862      	ldr	r2, [r4, #4]
 8005950:	2100      	movs	r1, #0
 8005952:	4628      	mov	r0, r5
 8005954:	f7fa fc6c 	bl	8000230 <memchr>
 8005958:	b108      	cbz	r0, 800595e <_printf_i+0x1f2>
 800595a:	1b40      	subs	r0, r0, r5
 800595c:	6060      	str	r0, [r4, #4]
 800595e:	6863      	ldr	r3, [r4, #4]
 8005960:	6123      	str	r3, [r4, #16]
 8005962:	2300      	movs	r3, #0
 8005964:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005968:	e7a8      	b.n	80058bc <_printf_i+0x150>
 800596a:	6923      	ldr	r3, [r4, #16]
 800596c:	462a      	mov	r2, r5
 800596e:	4649      	mov	r1, r9
 8005970:	4640      	mov	r0, r8
 8005972:	47d0      	blx	sl
 8005974:	3001      	adds	r0, #1
 8005976:	d0ab      	beq.n	80058d0 <_printf_i+0x164>
 8005978:	6823      	ldr	r3, [r4, #0]
 800597a:	079b      	lsls	r3, r3, #30
 800597c:	d413      	bmi.n	80059a6 <_printf_i+0x23a>
 800597e:	68e0      	ldr	r0, [r4, #12]
 8005980:	9b03      	ldr	r3, [sp, #12]
 8005982:	4298      	cmp	r0, r3
 8005984:	bfb8      	it	lt
 8005986:	4618      	movlt	r0, r3
 8005988:	e7a4      	b.n	80058d4 <_printf_i+0x168>
 800598a:	2301      	movs	r3, #1
 800598c:	4632      	mov	r2, r6
 800598e:	4649      	mov	r1, r9
 8005990:	4640      	mov	r0, r8
 8005992:	47d0      	blx	sl
 8005994:	3001      	adds	r0, #1
 8005996:	d09b      	beq.n	80058d0 <_printf_i+0x164>
 8005998:	3501      	adds	r5, #1
 800599a:	68e3      	ldr	r3, [r4, #12]
 800599c:	9903      	ldr	r1, [sp, #12]
 800599e:	1a5b      	subs	r3, r3, r1
 80059a0:	42ab      	cmp	r3, r5
 80059a2:	dcf2      	bgt.n	800598a <_printf_i+0x21e>
 80059a4:	e7eb      	b.n	800597e <_printf_i+0x212>
 80059a6:	2500      	movs	r5, #0
 80059a8:	f104 0619 	add.w	r6, r4, #25
 80059ac:	e7f5      	b.n	800599a <_printf_i+0x22e>
 80059ae:	bf00      	nop
 80059b0:	08009a16 	.word	0x08009a16
 80059b4:	08009a27 	.word	0x08009a27

080059b8 <_scanf_float>:
 80059b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059bc:	b087      	sub	sp, #28
 80059be:	4617      	mov	r7, r2
 80059c0:	9303      	str	r3, [sp, #12]
 80059c2:	688b      	ldr	r3, [r1, #8]
 80059c4:	1e5a      	subs	r2, r3, #1
 80059c6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80059ca:	bf83      	ittte	hi
 80059cc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80059d0:	195b      	addhi	r3, r3, r5
 80059d2:	9302      	strhi	r3, [sp, #8]
 80059d4:	2300      	movls	r3, #0
 80059d6:	bf86      	itte	hi
 80059d8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80059dc:	608b      	strhi	r3, [r1, #8]
 80059de:	9302      	strls	r3, [sp, #8]
 80059e0:	680b      	ldr	r3, [r1, #0]
 80059e2:	468b      	mov	fp, r1
 80059e4:	2500      	movs	r5, #0
 80059e6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80059ea:	f84b 3b1c 	str.w	r3, [fp], #28
 80059ee:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80059f2:	4680      	mov	r8, r0
 80059f4:	460c      	mov	r4, r1
 80059f6:	465e      	mov	r6, fp
 80059f8:	46aa      	mov	sl, r5
 80059fa:	46a9      	mov	r9, r5
 80059fc:	9501      	str	r5, [sp, #4]
 80059fe:	68a2      	ldr	r2, [r4, #8]
 8005a00:	b152      	cbz	r2, 8005a18 <_scanf_float+0x60>
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	2b4e      	cmp	r3, #78	; 0x4e
 8005a08:	d864      	bhi.n	8005ad4 <_scanf_float+0x11c>
 8005a0a:	2b40      	cmp	r3, #64	; 0x40
 8005a0c:	d83c      	bhi.n	8005a88 <_scanf_float+0xd0>
 8005a0e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005a12:	b2c8      	uxtb	r0, r1
 8005a14:	280e      	cmp	r0, #14
 8005a16:	d93a      	bls.n	8005a8e <_scanf_float+0xd6>
 8005a18:	f1b9 0f00 	cmp.w	r9, #0
 8005a1c:	d003      	beq.n	8005a26 <_scanf_float+0x6e>
 8005a1e:	6823      	ldr	r3, [r4, #0]
 8005a20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a24:	6023      	str	r3, [r4, #0]
 8005a26:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a2a:	f1ba 0f01 	cmp.w	sl, #1
 8005a2e:	f200 8113 	bhi.w	8005c58 <_scanf_float+0x2a0>
 8005a32:	455e      	cmp	r6, fp
 8005a34:	f200 8105 	bhi.w	8005c42 <_scanf_float+0x28a>
 8005a38:	2501      	movs	r5, #1
 8005a3a:	4628      	mov	r0, r5
 8005a3c:	b007      	add	sp, #28
 8005a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a42:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005a46:	2a0d      	cmp	r2, #13
 8005a48:	d8e6      	bhi.n	8005a18 <_scanf_float+0x60>
 8005a4a:	a101      	add	r1, pc, #4	; (adr r1, 8005a50 <_scanf_float+0x98>)
 8005a4c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005a50:	08005b8f 	.word	0x08005b8f
 8005a54:	08005a19 	.word	0x08005a19
 8005a58:	08005a19 	.word	0x08005a19
 8005a5c:	08005a19 	.word	0x08005a19
 8005a60:	08005bef 	.word	0x08005bef
 8005a64:	08005bc7 	.word	0x08005bc7
 8005a68:	08005a19 	.word	0x08005a19
 8005a6c:	08005a19 	.word	0x08005a19
 8005a70:	08005b9d 	.word	0x08005b9d
 8005a74:	08005a19 	.word	0x08005a19
 8005a78:	08005a19 	.word	0x08005a19
 8005a7c:	08005a19 	.word	0x08005a19
 8005a80:	08005a19 	.word	0x08005a19
 8005a84:	08005b55 	.word	0x08005b55
 8005a88:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005a8c:	e7db      	b.n	8005a46 <_scanf_float+0x8e>
 8005a8e:	290e      	cmp	r1, #14
 8005a90:	d8c2      	bhi.n	8005a18 <_scanf_float+0x60>
 8005a92:	a001      	add	r0, pc, #4	; (adr r0, 8005a98 <_scanf_float+0xe0>)
 8005a94:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005a98:	08005b47 	.word	0x08005b47
 8005a9c:	08005a19 	.word	0x08005a19
 8005aa0:	08005b47 	.word	0x08005b47
 8005aa4:	08005bdb 	.word	0x08005bdb
 8005aa8:	08005a19 	.word	0x08005a19
 8005aac:	08005af5 	.word	0x08005af5
 8005ab0:	08005b31 	.word	0x08005b31
 8005ab4:	08005b31 	.word	0x08005b31
 8005ab8:	08005b31 	.word	0x08005b31
 8005abc:	08005b31 	.word	0x08005b31
 8005ac0:	08005b31 	.word	0x08005b31
 8005ac4:	08005b31 	.word	0x08005b31
 8005ac8:	08005b31 	.word	0x08005b31
 8005acc:	08005b31 	.word	0x08005b31
 8005ad0:	08005b31 	.word	0x08005b31
 8005ad4:	2b6e      	cmp	r3, #110	; 0x6e
 8005ad6:	d809      	bhi.n	8005aec <_scanf_float+0x134>
 8005ad8:	2b60      	cmp	r3, #96	; 0x60
 8005ada:	d8b2      	bhi.n	8005a42 <_scanf_float+0x8a>
 8005adc:	2b54      	cmp	r3, #84	; 0x54
 8005ade:	d077      	beq.n	8005bd0 <_scanf_float+0x218>
 8005ae0:	2b59      	cmp	r3, #89	; 0x59
 8005ae2:	d199      	bne.n	8005a18 <_scanf_float+0x60>
 8005ae4:	2d07      	cmp	r5, #7
 8005ae6:	d197      	bne.n	8005a18 <_scanf_float+0x60>
 8005ae8:	2508      	movs	r5, #8
 8005aea:	e029      	b.n	8005b40 <_scanf_float+0x188>
 8005aec:	2b74      	cmp	r3, #116	; 0x74
 8005aee:	d06f      	beq.n	8005bd0 <_scanf_float+0x218>
 8005af0:	2b79      	cmp	r3, #121	; 0x79
 8005af2:	e7f6      	b.n	8005ae2 <_scanf_float+0x12a>
 8005af4:	6821      	ldr	r1, [r4, #0]
 8005af6:	05c8      	lsls	r0, r1, #23
 8005af8:	d51a      	bpl.n	8005b30 <_scanf_float+0x178>
 8005afa:	9b02      	ldr	r3, [sp, #8]
 8005afc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005b00:	6021      	str	r1, [r4, #0]
 8005b02:	f109 0901 	add.w	r9, r9, #1
 8005b06:	b11b      	cbz	r3, 8005b10 <_scanf_float+0x158>
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	3201      	adds	r2, #1
 8005b0c:	9302      	str	r3, [sp, #8]
 8005b0e:	60a2      	str	r2, [r4, #8]
 8005b10:	68a3      	ldr	r3, [r4, #8]
 8005b12:	3b01      	subs	r3, #1
 8005b14:	60a3      	str	r3, [r4, #8]
 8005b16:	6923      	ldr	r3, [r4, #16]
 8005b18:	3301      	adds	r3, #1
 8005b1a:	6123      	str	r3, [r4, #16]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	607b      	str	r3, [r7, #4]
 8005b24:	f340 8084 	ble.w	8005c30 <_scanf_float+0x278>
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	603b      	str	r3, [r7, #0]
 8005b2e:	e766      	b.n	80059fe <_scanf_float+0x46>
 8005b30:	eb1a 0f05 	cmn.w	sl, r5
 8005b34:	f47f af70 	bne.w	8005a18 <_scanf_float+0x60>
 8005b38:	6822      	ldr	r2, [r4, #0]
 8005b3a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005b3e:	6022      	str	r2, [r4, #0]
 8005b40:	f806 3b01 	strb.w	r3, [r6], #1
 8005b44:	e7e4      	b.n	8005b10 <_scanf_float+0x158>
 8005b46:	6822      	ldr	r2, [r4, #0]
 8005b48:	0610      	lsls	r0, r2, #24
 8005b4a:	f57f af65 	bpl.w	8005a18 <_scanf_float+0x60>
 8005b4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b52:	e7f4      	b.n	8005b3e <_scanf_float+0x186>
 8005b54:	f1ba 0f00 	cmp.w	sl, #0
 8005b58:	d10e      	bne.n	8005b78 <_scanf_float+0x1c0>
 8005b5a:	f1b9 0f00 	cmp.w	r9, #0
 8005b5e:	d10e      	bne.n	8005b7e <_scanf_float+0x1c6>
 8005b60:	6822      	ldr	r2, [r4, #0]
 8005b62:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005b66:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005b6a:	d108      	bne.n	8005b7e <_scanf_float+0x1c6>
 8005b6c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005b70:	6022      	str	r2, [r4, #0]
 8005b72:	f04f 0a01 	mov.w	sl, #1
 8005b76:	e7e3      	b.n	8005b40 <_scanf_float+0x188>
 8005b78:	f1ba 0f02 	cmp.w	sl, #2
 8005b7c:	d055      	beq.n	8005c2a <_scanf_float+0x272>
 8005b7e:	2d01      	cmp	r5, #1
 8005b80:	d002      	beq.n	8005b88 <_scanf_float+0x1d0>
 8005b82:	2d04      	cmp	r5, #4
 8005b84:	f47f af48 	bne.w	8005a18 <_scanf_float+0x60>
 8005b88:	3501      	adds	r5, #1
 8005b8a:	b2ed      	uxtb	r5, r5
 8005b8c:	e7d8      	b.n	8005b40 <_scanf_float+0x188>
 8005b8e:	f1ba 0f01 	cmp.w	sl, #1
 8005b92:	f47f af41 	bne.w	8005a18 <_scanf_float+0x60>
 8005b96:	f04f 0a02 	mov.w	sl, #2
 8005b9a:	e7d1      	b.n	8005b40 <_scanf_float+0x188>
 8005b9c:	b97d      	cbnz	r5, 8005bbe <_scanf_float+0x206>
 8005b9e:	f1b9 0f00 	cmp.w	r9, #0
 8005ba2:	f47f af3c 	bne.w	8005a1e <_scanf_float+0x66>
 8005ba6:	6822      	ldr	r2, [r4, #0]
 8005ba8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005bac:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005bb0:	f47f af39 	bne.w	8005a26 <_scanf_float+0x6e>
 8005bb4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005bb8:	6022      	str	r2, [r4, #0]
 8005bba:	2501      	movs	r5, #1
 8005bbc:	e7c0      	b.n	8005b40 <_scanf_float+0x188>
 8005bbe:	2d03      	cmp	r5, #3
 8005bc0:	d0e2      	beq.n	8005b88 <_scanf_float+0x1d0>
 8005bc2:	2d05      	cmp	r5, #5
 8005bc4:	e7de      	b.n	8005b84 <_scanf_float+0x1cc>
 8005bc6:	2d02      	cmp	r5, #2
 8005bc8:	f47f af26 	bne.w	8005a18 <_scanf_float+0x60>
 8005bcc:	2503      	movs	r5, #3
 8005bce:	e7b7      	b.n	8005b40 <_scanf_float+0x188>
 8005bd0:	2d06      	cmp	r5, #6
 8005bd2:	f47f af21 	bne.w	8005a18 <_scanf_float+0x60>
 8005bd6:	2507      	movs	r5, #7
 8005bd8:	e7b2      	b.n	8005b40 <_scanf_float+0x188>
 8005bda:	6822      	ldr	r2, [r4, #0]
 8005bdc:	0591      	lsls	r1, r2, #22
 8005bde:	f57f af1b 	bpl.w	8005a18 <_scanf_float+0x60>
 8005be2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005be6:	6022      	str	r2, [r4, #0]
 8005be8:	f8cd 9004 	str.w	r9, [sp, #4]
 8005bec:	e7a8      	b.n	8005b40 <_scanf_float+0x188>
 8005bee:	6822      	ldr	r2, [r4, #0]
 8005bf0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005bf4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005bf8:	d006      	beq.n	8005c08 <_scanf_float+0x250>
 8005bfa:	0550      	lsls	r0, r2, #21
 8005bfc:	f57f af0c 	bpl.w	8005a18 <_scanf_float+0x60>
 8005c00:	f1b9 0f00 	cmp.w	r9, #0
 8005c04:	f43f af0f 	beq.w	8005a26 <_scanf_float+0x6e>
 8005c08:	0591      	lsls	r1, r2, #22
 8005c0a:	bf58      	it	pl
 8005c0c:	9901      	ldrpl	r1, [sp, #4]
 8005c0e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005c12:	bf58      	it	pl
 8005c14:	eba9 0101 	subpl.w	r1, r9, r1
 8005c18:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005c1c:	bf58      	it	pl
 8005c1e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005c22:	6022      	str	r2, [r4, #0]
 8005c24:	f04f 0900 	mov.w	r9, #0
 8005c28:	e78a      	b.n	8005b40 <_scanf_float+0x188>
 8005c2a:	f04f 0a03 	mov.w	sl, #3
 8005c2e:	e787      	b.n	8005b40 <_scanf_float+0x188>
 8005c30:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005c34:	4639      	mov	r1, r7
 8005c36:	4640      	mov	r0, r8
 8005c38:	4798      	blx	r3
 8005c3a:	2800      	cmp	r0, #0
 8005c3c:	f43f aedf 	beq.w	80059fe <_scanf_float+0x46>
 8005c40:	e6ea      	b.n	8005a18 <_scanf_float+0x60>
 8005c42:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c46:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005c4a:	463a      	mov	r2, r7
 8005c4c:	4640      	mov	r0, r8
 8005c4e:	4798      	blx	r3
 8005c50:	6923      	ldr	r3, [r4, #16]
 8005c52:	3b01      	subs	r3, #1
 8005c54:	6123      	str	r3, [r4, #16]
 8005c56:	e6ec      	b.n	8005a32 <_scanf_float+0x7a>
 8005c58:	1e6b      	subs	r3, r5, #1
 8005c5a:	2b06      	cmp	r3, #6
 8005c5c:	d825      	bhi.n	8005caa <_scanf_float+0x2f2>
 8005c5e:	2d02      	cmp	r5, #2
 8005c60:	d836      	bhi.n	8005cd0 <_scanf_float+0x318>
 8005c62:	455e      	cmp	r6, fp
 8005c64:	f67f aee8 	bls.w	8005a38 <_scanf_float+0x80>
 8005c68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c6c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005c70:	463a      	mov	r2, r7
 8005c72:	4640      	mov	r0, r8
 8005c74:	4798      	blx	r3
 8005c76:	6923      	ldr	r3, [r4, #16]
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	6123      	str	r3, [r4, #16]
 8005c7c:	e7f1      	b.n	8005c62 <_scanf_float+0x2aa>
 8005c7e:	9802      	ldr	r0, [sp, #8]
 8005c80:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c84:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005c88:	9002      	str	r0, [sp, #8]
 8005c8a:	463a      	mov	r2, r7
 8005c8c:	4640      	mov	r0, r8
 8005c8e:	4798      	blx	r3
 8005c90:	6923      	ldr	r3, [r4, #16]
 8005c92:	3b01      	subs	r3, #1
 8005c94:	6123      	str	r3, [r4, #16]
 8005c96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c9a:	fa5f fa8a 	uxtb.w	sl, sl
 8005c9e:	f1ba 0f02 	cmp.w	sl, #2
 8005ca2:	d1ec      	bne.n	8005c7e <_scanf_float+0x2c6>
 8005ca4:	3d03      	subs	r5, #3
 8005ca6:	b2ed      	uxtb	r5, r5
 8005ca8:	1b76      	subs	r6, r6, r5
 8005caa:	6823      	ldr	r3, [r4, #0]
 8005cac:	05da      	lsls	r2, r3, #23
 8005cae:	d52f      	bpl.n	8005d10 <_scanf_float+0x358>
 8005cb0:	055b      	lsls	r3, r3, #21
 8005cb2:	d510      	bpl.n	8005cd6 <_scanf_float+0x31e>
 8005cb4:	455e      	cmp	r6, fp
 8005cb6:	f67f aebf 	bls.w	8005a38 <_scanf_float+0x80>
 8005cba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005cbe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005cc2:	463a      	mov	r2, r7
 8005cc4:	4640      	mov	r0, r8
 8005cc6:	4798      	blx	r3
 8005cc8:	6923      	ldr	r3, [r4, #16]
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	6123      	str	r3, [r4, #16]
 8005cce:	e7f1      	b.n	8005cb4 <_scanf_float+0x2fc>
 8005cd0:	46aa      	mov	sl, r5
 8005cd2:	9602      	str	r6, [sp, #8]
 8005cd4:	e7df      	b.n	8005c96 <_scanf_float+0x2de>
 8005cd6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005cda:	6923      	ldr	r3, [r4, #16]
 8005cdc:	2965      	cmp	r1, #101	; 0x65
 8005cde:	f103 33ff 	add.w	r3, r3, #4294967295
 8005ce2:	f106 35ff 	add.w	r5, r6, #4294967295
 8005ce6:	6123      	str	r3, [r4, #16]
 8005ce8:	d00c      	beq.n	8005d04 <_scanf_float+0x34c>
 8005cea:	2945      	cmp	r1, #69	; 0x45
 8005cec:	d00a      	beq.n	8005d04 <_scanf_float+0x34c>
 8005cee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005cf2:	463a      	mov	r2, r7
 8005cf4:	4640      	mov	r0, r8
 8005cf6:	4798      	blx	r3
 8005cf8:	6923      	ldr	r3, [r4, #16]
 8005cfa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	1eb5      	subs	r5, r6, #2
 8005d02:	6123      	str	r3, [r4, #16]
 8005d04:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005d08:	463a      	mov	r2, r7
 8005d0a:	4640      	mov	r0, r8
 8005d0c:	4798      	blx	r3
 8005d0e:	462e      	mov	r6, r5
 8005d10:	6825      	ldr	r5, [r4, #0]
 8005d12:	f015 0510 	ands.w	r5, r5, #16
 8005d16:	d159      	bne.n	8005dcc <_scanf_float+0x414>
 8005d18:	7035      	strb	r5, [r6, #0]
 8005d1a:	6823      	ldr	r3, [r4, #0]
 8005d1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005d20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d24:	d11b      	bne.n	8005d5e <_scanf_float+0x3a6>
 8005d26:	9b01      	ldr	r3, [sp, #4]
 8005d28:	454b      	cmp	r3, r9
 8005d2a:	eba3 0209 	sub.w	r2, r3, r9
 8005d2e:	d123      	bne.n	8005d78 <_scanf_float+0x3c0>
 8005d30:	2200      	movs	r2, #0
 8005d32:	4659      	mov	r1, fp
 8005d34:	4640      	mov	r0, r8
 8005d36:	f000 fe99 	bl	8006a6c <_strtod_r>
 8005d3a:	6822      	ldr	r2, [r4, #0]
 8005d3c:	9b03      	ldr	r3, [sp, #12]
 8005d3e:	f012 0f02 	tst.w	r2, #2
 8005d42:	ec57 6b10 	vmov	r6, r7, d0
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	d021      	beq.n	8005d8e <_scanf_float+0x3d6>
 8005d4a:	9903      	ldr	r1, [sp, #12]
 8005d4c:	1d1a      	adds	r2, r3, #4
 8005d4e:	600a      	str	r2, [r1, #0]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	e9c3 6700 	strd	r6, r7, [r3]
 8005d56:	68e3      	ldr	r3, [r4, #12]
 8005d58:	3301      	adds	r3, #1
 8005d5a:	60e3      	str	r3, [r4, #12]
 8005d5c:	e66d      	b.n	8005a3a <_scanf_float+0x82>
 8005d5e:	9b04      	ldr	r3, [sp, #16]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d0e5      	beq.n	8005d30 <_scanf_float+0x378>
 8005d64:	9905      	ldr	r1, [sp, #20]
 8005d66:	230a      	movs	r3, #10
 8005d68:	462a      	mov	r2, r5
 8005d6a:	3101      	adds	r1, #1
 8005d6c:	4640      	mov	r0, r8
 8005d6e:	f000 ff05 	bl	8006b7c <_strtol_r>
 8005d72:	9b04      	ldr	r3, [sp, #16]
 8005d74:	9e05      	ldr	r6, [sp, #20]
 8005d76:	1ac2      	subs	r2, r0, r3
 8005d78:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005d7c:	429e      	cmp	r6, r3
 8005d7e:	bf28      	it	cs
 8005d80:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005d84:	4912      	ldr	r1, [pc, #72]	; (8005dd0 <_scanf_float+0x418>)
 8005d86:	4630      	mov	r0, r6
 8005d88:	f000 f82c 	bl	8005de4 <siprintf>
 8005d8c:	e7d0      	b.n	8005d30 <_scanf_float+0x378>
 8005d8e:	9903      	ldr	r1, [sp, #12]
 8005d90:	f012 0f04 	tst.w	r2, #4
 8005d94:	f103 0204 	add.w	r2, r3, #4
 8005d98:	600a      	str	r2, [r1, #0]
 8005d9a:	d1d9      	bne.n	8005d50 <_scanf_float+0x398>
 8005d9c:	f8d3 8000 	ldr.w	r8, [r3]
 8005da0:	ee10 2a10 	vmov	r2, s0
 8005da4:	ee10 0a10 	vmov	r0, s0
 8005da8:	463b      	mov	r3, r7
 8005daa:	4639      	mov	r1, r7
 8005dac:	f7fa fee6 	bl	8000b7c <__aeabi_dcmpun>
 8005db0:	b128      	cbz	r0, 8005dbe <_scanf_float+0x406>
 8005db2:	4808      	ldr	r0, [pc, #32]	; (8005dd4 <_scanf_float+0x41c>)
 8005db4:	f000 f810 	bl	8005dd8 <nanf>
 8005db8:	ed88 0a00 	vstr	s0, [r8]
 8005dbc:	e7cb      	b.n	8005d56 <_scanf_float+0x39e>
 8005dbe:	4630      	mov	r0, r6
 8005dc0:	4639      	mov	r1, r7
 8005dc2:	f7fa ff39 	bl	8000c38 <__aeabi_d2f>
 8005dc6:	f8c8 0000 	str.w	r0, [r8]
 8005dca:	e7c4      	b.n	8005d56 <_scanf_float+0x39e>
 8005dcc:	2500      	movs	r5, #0
 8005dce:	e634      	b.n	8005a3a <_scanf_float+0x82>
 8005dd0:	08009a38 	.word	0x08009a38
 8005dd4:	08009e40 	.word	0x08009e40

08005dd8 <nanf>:
 8005dd8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005de0 <nanf+0x8>
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	7fc00000 	.word	0x7fc00000

08005de4 <siprintf>:
 8005de4:	b40e      	push	{r1, r2, r3}
 8005de6:	b500      	push	{lr}
 8005de8:	b09c      	sub	sp, #112	; 0x70
 8005dea:	ab1d      	add	r3, sp, #116	; 0x74
 8005dec:	9002      	str	r0, [sp, #8]
 8005dee:	9006      	str	r0, [sp, #24]
 8005df0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005df4:	4809      	ldr	r0, [pc, #36]	; (8005e1c <siprintf+0x38>)
 8005df6:	9107      	str	r1, [sp, #28]
 8005df8:	9104      	str	r1, [sp, #16]
 8005dfa:	4909      	ldr	r1, [pc, #36]	; (8005e20 <siprintf+0x3c>)
 8005dfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e00:	9105      	str	r1, [sp, #20]
 8005e02:	6800      	ldr	r0, [r0, #0]
 8005e04:	9301      	str	r3, [sp, #4]
 8005e06:	a902      	add	r1, sp, #8
 8005e08:	f002 fee4 	bl	8008bd4 <_svfiprintf_r>
 8005e0c:	9b02      	ldr	r3, [sp, #8]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	701a      	strb	r2, [r3, #0]
 8005e12:	b01c      	add	sp, #112	; 0x70
 8005e14:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e18:	b003      	add	sp, #12
 8005e1a:	4770      	bx	lr
 8005e1c:	2000000c 	.word	0x2000000c
 8005e20:	ffff0208 	.word	0xffff0208

08005e24 <sulp>:
 8005e24:	b570      	push	{r4, r5, r6, lr}
 8005e26:	4604      	mov	r4, r0
 8005e28:	460d      	mov	r5, r1
 8005e2a:	ec45 4b10 	vmov	d0, r4, r5
 8005e2e:	4616      	mov	r6, r2
 8005e30:	f002 fc2e 	bl	8008690 <__ulp>
 8005e34:	ec51 0b10 	vmov	r0, r1, d0
 8005e38:	b17e      	cbz	r6, 8005e5a <sulp+0x36>
 8005e3a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005e3e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	dd09      	ble.n	8005e5a <sulp+0x36>
 8005e46:	051b      	lsls	r3, r3, #20
 8005e48:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005e4c:	2400      	movs	r4, #0
 8005e4e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005e52:	4622      	mov	r2, r4
 8005e54:	462b      	mov	r3, r5
 8005e56:	f7fa fbf7 	bl	8000648 <__aeabi_dmul>
 8005e5a:	bd70      	pop	{r4, r5, r6, pc}
 8005e5c:	0000      	movs	r0, r0
	...

08005e60 <_strtod_l>:
 8005e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e64:	ed2d 8b02 	vpush	{d8}
 8005e68:	b09d      	sub	sp, #116	; 0x74
 8005e6a:	461f      	mov	r7, r3
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	9318      	str	r3, [sp, #96]	; 0x60
 8005e70:	4ba2      	ldr	r3, [pc, #648]	; (80060fc <_strtod_l+0x29c>)
 8005e72:	9213      	str	r2, [sp, #76]	; 0x4c
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	9305      	str	r3, [sp, #20]
 8005e78:	4604      	mov	r4, r0
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	4688      	mov	r8, r1
 8005e7e:	f7fa f9cf 	bl	8000220 <strlen>
 8005e82:	f04f 0a00 	mov.w	sl, #0
 8005e86:	4605      	mov	r5, r0
 8005e88:	f04f 0b00 	mov.w	fp, #0
 8005e8c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005e90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005e92:	781a      	ldrb	r2, [r3, #0]
 8005e94:	2a2b      	cmp	r2, #43	; 0x2b
 8005e96:	d04e      	beq.n	8005f36 <_strtod_l+0xd6>
 8005e98:	d83b      	bhi.n	8005f12 <_strtod_l+0xb2>
 8005e9a:	2a0d      	cmp	r2, #13
 8005e9c:	d834      	bhi.n	8005f08 <_strtod_l+0xa8>
 8005e9e:	2a08      	cmp	r2, #8
 8005ea0:	d834      	bhi.n	8005f0c <_strtod_l+0xac>
 8005ea2:	2a00      	cmp	r2, #0
 8005ea4:	d03e      	beq.n	8005f24 <_strtod_l+0xc4>
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	930a      	str	r3, [sp, #40]	; 0x28
 8005eaa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8005eac:	7833      	ldrb	r3, [r6, #0]
 8005eae:	2b30      	cmp	r3, #48	; 0x30
 8005eb0:	f040 80b0 	bne.w	8006014 <_strtod_l+0x1b4>
 8005eb4:	7873      	ldrb	r3, [r6, #1]
 8005eb6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005eba:	2b58      	cmp	r3, #88	; 0x58
 8005ebc:	d168      	bne.n	8005f90 <_strtod_l+0x130>
 8005ebe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ec0:	9301      	str	r3, [sp, #4]
 8005ec2:	ab18      	add	r3, sp, #96	; 0x60
 8005ec4:	9702      	str	r7, [sp, #8]
 8005ec6:	9300      	str	r3, [sp, #0]
 8005ec8:	4a8d      	ldr	r2, [pc, #564]	; (8006100 <_strtod_l+0x2a0>)
 8005eca:	ab19      	add	r3, sp, #100	; 0x64
 8005ecc:	a917      	add	r1, sp, #92	; 0x5c
 8005ece:	4620      	mov	r0, r4
 8005ed0:	f001 fd38 	bl	8007944 <__gethex>
 8005ed4:	f010 0707 	ands.w	r7, r0, #7
 8005ed8:	4605      	mov	r5, r0
 8005eda:	d005      	beq.n	8005ee8 <_strtod_l+0x88>
 8005edc:	2f06      	cmp	r7, #6
 8005ede:	d12c      	bne.n	8005f3a <_strtod_l+0xda>
 8005ee0:	3601      	adds	r6, #1
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	9617      	str	r6, [sp, #92]	; 0x5c
 8005ee6:	930a      	str	r3, [sp, #40]	; 0x28
 8005ee8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	f040 8590 	bne.w	8006a10 <_strtod_l+0xbb0>
 8005ef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ef2:	b1eb      	cbz	r3, 8005f30 <_strtod_l+0xd0>
 8005ef4:	4652      	mov	r2, sl
 8005ef6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005efa:	ec43 2b10 	vmov	d0, r2, r3
 8005efe:	b01d      	add	sp, #116	; 0x74
 8005f00:	ecbd 8b02 	vpop	{d8}
 8005f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f08:	2a20      	cmp	r2, #32
 8005f0a:	d1cc      	bne.n	8005ea6 <_strtod_l+0x46>
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	9317      	str	r3, [sp, #92]	; 0x5c
 8005f10:	e7be      	b.n	8005e90 <_strtod_l+0x30>
 8005f12:	2a2d      	cmp	r2, #45	; 0x2d
 8005f14:	d1c7      	bne.n	8005ea6 <_strtod_l+0x46>
 8005f16:	2201      	movs	r2, #1
 8005f18:	920a      	str	r2, [sp, #40]	; 0x28
 8005f1a:	1c5a      	adds	r2, r3, #1
 8005f1c:	9217      	str	r2, [sp, #92]	; 0x5c
 8005f1e:	785b      	ldrb	r3, [r3, #1]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d1c2      	bne.n	8005eaa <_strtod_l+0x4a>
 8005f24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005f26:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f040 856e 	bne.w	8006a0c <_strtod_l+0xbac>
 8005f30:	4652      	mov	r2, sl
 8005f32:	465b      	mov	r3, fp
 8005f34:	e7e1      	b.n	8005efa <_strtod_l+0x9a>
 8005f36:	2200      	movs	r2, #0
 8005f38:	e7ee      	b.n	8005f18 <_strtod_l+0xb8>
 8005f3a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005f3c:	b13a      	cbz	r2, 8005f4e <_strtod_l+0xee>
 8005f3e:	2135      	movs	r1, #53	; 0x35
 8005f40:	a81a      	add	r0, sp, #104	; 0x68
 8005f42:	f002 fcb0 	bl	80088a6 <__copybits>
 8005f46:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005f48:	4620      	mov	r0, r4
 8005f4a:	f002 f86f 	bl	800802c <_Bfree>
 8005f4e:	3f01      	subs	r7, #1
 8005f50:	2f04      	cmp	r7, #4
 8005f52:	d806      	bhi.n	8005f62 <_strtod_l+0x102>
 8005f54:	e8df f007 	tbb	[pc, r7]
 8005f58:	1714030a 	.word	0x1714030a
 8005f5c:	0a          	.byte	0x0a
 8005f5d:	00          	.byte	0x00
 8005f5e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8005f62:	0728      	lsls	r0, r5, #28
 8005f64:	d5c0      	bpl.n	8005ee8 <_strtod_l+0x88>
 8005f66:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005f6a:	e7bd      	b.n	8005ee8 <_strtod_l+0x88>
 8005f6c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8005f70:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005f72:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005f76:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005f7a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005f7e:	e7f0      	b.n	8005f62 <_strtod_l+0x102>
 8005f80:	f8df b180 	ldr.w	fp, [pc, #384]	; 8006104 <_strtod_l+0x2a4>
 8005f84:	e7ed      	b.n	8005f62 <_strtod_l+0x102>
 8005f86:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005f8a:	f04f 3aff 	mov.w	sl, #4294967295
 8005f8e:	e7e8      	b.n	8005f62 <_strtod_l+0x102>
 8005f90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005f92:	1c5a      	adds	r2, r3, #1
 8005f94:	9217      	str	r2, [sp, #92]	; 0x5c
 8005f96:	785b      	ldrb	r3, [r3, #1]
 8005f98:	2b30      	cmp	r3, #48	; 0x30
 8005f9a:	d0f9      	beq.n	8005f90 <_strtod_l+0x130>
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d0a3      	beq.n	8005ee8 <_strtod_l+0x88>
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	f04f 0900 	mov.w	r9, #0
 8005fa6:	9304      	str	r3, [sp, #16]
 8005fa8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005faa:	9308      	str	r3, [sp, #32]
 8005fac:	f8cd 901c 	str.w	r9, [sp, #28]
 8005fb0:	464f      	mov	r7, r9
 8005fb2:	220a      	movs	r2, #10
 8005fb4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005fb6:	7806      	ldrb	r6, [r0, #0]
 8005fb8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005fbc:	b2d9      	uxtb	r1, r3
 8005fbe:	2909      	cmp	r1, #9
 8005fc0:	d92a      	bls.n	8006018 <_strtod_l+0x1b8>
 8005fc2:	9905      	ldr	r1, [sp, #20]
 8005fc4:	462a      	mov	r2, r5
 8005fc6:	f002 ff1f 	bl	8008e08 <strncmp>
 8005fca:	b398      	cbz	r0, 8006034 <_strtod_l+0x1d4>
 8005fcc:	2000      	movs	r0, #0
 8005fce:	4632      	mov	r2, r6
 8005fd0:	463d      	mov	r5, r7
 8005fd2:	9005      	str	r0, [sp, #20]
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2a65      	cmp	r2, #101	; 0x65
 8005fd8:	d001      	beq.n	8005fde <_strtod_l+0x17e>
 8005fda:	2a45      	cmp	r2, #69	; 0x45
 8005fdc:	d118      	bne.n	8006010 <_strtod_l+0x1b0>
 8005fde:	b91d      	cbnz	r5, 8005fe8 <_strtod_l+0x188>
 8005fe0:	9a04      	ldr	r2, [sp, #16]
 8005fe2:	4302      	orrs	r2, r0
 8005fe4:	d09e      	beq.n	8005f24 <_strtod_l+0xc4>
 8005fe6:	2500      	movs	r5, #0
 8005fe8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8005fec:	f108 0201 	add.w	r2, r8, #1
 8005ff0:	9217      	str	r2, [sp, #92]	; 0x5c
 8005ff2:	f898 2001 	ldrb.w	r2, [r8, #1]
 8005ff6:	2a2b      	cmp	r2, #43	; 0x2b
 8005ff8:	d075      	beq.n	80060e6 <_strtod_l+0x286>
 8005ffa:	2a2d      	cmp	r2, #45	; 0x2d
 8005ffc:	d07b      	beq.n	80060f6 <_strtod_l+0x296>
 8005ffe:	f04f 0c00 	mov.w	ip, #0
 8006002:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006006:	2909      	cmp	r1, #9
 8006008:	f240 8082 	bls.w	8006110 <_strtod_l+0x2b0>
 800600c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006010:	2600      	movs	r6, #0
 8006012:	e09d      	b.n	8006150 <_strtod_l+0x2f0>
 8006014:	2300      	movs	r3, #0
 8006016:	e7c4      	b.n	8005fa2 <_strtod_l+0x142>
 8006018:	2f08      	cmp	r7, #8
 800601a:	bfd8      	it	le
 800601c:	9907      	ldrle	r1, [sp, #28]
 800601e:	f100 0001 	add.w	r0, r0, #1
 8006022:	bfda      	itte	le
 8006024:	fb02 3301 	mlale	r3, r2, r1, r3
 8006028:	9307      	strle	r3, [sp, #28]
 800602a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800602e:	3701      	adds	r7, #1
 8006030:	9017      	str	r0, [sp, #92]	; 0x5c
 8006032:	e7bf      	b.n	8005fb4 <_strtod_l+0x154>
 8006034:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006036:	195a      	adds	r2, r3, r5
 8006038:	9217      	str	r2, [sp, #92]	; 0x5c
 800603a:	5d5a      	ldrb	r2, [r3, r5]
 800603c:	2f00      	cmp	r7, #0
 800603e:	d037      	beq.n	80060b0 <_strtod_l+0x250>
 8006040:	9005      	str	r0, [sp, #20]
 8006042:	463d      	mov	r5, r7
 8006044:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006048:	2b09      	cmp	r3, #9
 800604a:	d912      	bls.n	8006072 <_strtod_l+0x212>
 800604c:	2301      	movs	r3, #1
 800604e:	e7c2      	b.n	8005fd6 <_strtod_l+0x176>
 8006050:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006052:	1c5a      	adds	r2, r3, #1
 8006054:	9217      	str	r2, [sp, #92]	; 0x5c
 8006056:	785a      	ldrb	r2, [r3, #1]
 8006058:	3001      	adds	r0, #1
 800605a:	2a30      	cmp	r2, #48	; 0x30
 800605c:	d0f8      	beq.n	8006050 <_strtod_l+0x1f0>
 800605e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006062:	2b08      	cmp	r3, #8
 8006064:	f200 84d9 	bhi.w	8006a1a <_strtod_l+0xbba>
 8006068:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800606a:	9005      	str	r0, [sp, #20]
 800606c:	2000      	movs	r0, #0
 800606e:	9308      	str	r3, [sp, #32]
 8006070:	4605      	mov	r5, r0
 8006072:	3a30      	subs	r2, #48	; 0x30
 8006074:	f100 0301 	add.w	r3, r0, #1
 8006078:	d014      	beq.n	80060a4 <_strtod_l+0x244>
 800607a:	9905      	ldr	r1, [sp, #20]
 800607c:	4419      	add	r1, r3
 800607e:	9105      	str	r1, [sp, #20]
 8006080:	462b      	mov	r3, r5
 8006082:	eb00 0e05 	add.w	lr, r0, r5
 8006086:	210a      	movs	r1, #10
 8006088:	4573      	cmp	r3, lr
 800608a:	d113      	bne.n	80060b4 <_strtod_l+0x254>
 800608c:	182b      	adds	r3, r5, r0
 800608e:	2b08      	cmp	r3, #8
 8006090:	f105 0501 	add.w	r5, r5, #1
 8006094:	4405      	add	r5, r0
 8006096:	dc1c      	bgt.n	80060d2 <_strtod_l+0x272>
 8006098:	9907      	ldr	r1, [sp, #28]
 800609a:	230a      	movs	r3, #10
 800609c:	fb03 2301 	mla	r3, r3, r1, r2
 80060a0:	9307      	str	r3, [sp, #28]
 80060a2:	2300      	movs	r3, #0
 80060a4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80060a6:	1c51      	adds	r1, r2, #1
 80060a8:	9117      	str	r1, [sp, #92]	; 0x5c
 80060aa:	7852      	ldrb	r2, [r2, #1]
 80060ac:	4618      	mov	r0, r3
 80060ae:	e7c9      	b.n	8006044 <_strtod_l+0x1e4>
 80060b0:	4638      	mov	r0, r7
 80060b2:	e7d2      	b.n	800605a <_strtod_l+0x1fa>
 80060b4:	2b08      	cmp	r3, #8
 80060b6:	dc04      	bgt.n	80060c2 <_strtod_l+0x262>
 80060b8:	9e07      	ldr	r6, [sp, #28]
 80060ba:	434e      	muls	r6, r1
 80060bc:	9607      	str	r6, [sp, #28]
 80060be:	3301      	adds	r3, #1
 80060c0:	e7e2      	b.n	8006088 <_strtod_l+0x228>
 80060c2:	f103 0c01 	add.w	ip, r3, #1
 80060c6:	f1bc 0f10 	cmp.w	ip, #16
 80060ca:	bfd8      	it	le
 80060cc:	fb01 f909 	mulle.w	r9, r1, r9
 80060d0:	e7f5      	b.n	80060be <_strtod_l+0x25e>
 80060d2:	2d10      	cmp	r5, #16
 80060d4:	bfdc      	itt	le
 80060d6:	230a      	movle	r3, #10
 80060d8:	fb03 2909 	mlale	r9, r3, r9, r2
 80060dc:	e7e1      	b.n	80060a2 <_strtod_l+0x242>
 80060de:	2300      	movs	r3, #0
 80060e0:	9305      	str	r3, [sp, #20]
 80060e2:	2301      	movs	r3, #1
 80060e4:	e77c      	b.n	8005fe0 <_strtod_l+0x180>
 80060e6:	f04f 0c00 	mov.w	ip, #0
 80060ea:	f108 0202 	add.w	r2, r8, #2
 80060ee:	9217      	str	r2, [sp, #92]	; 0x5c
 80060f0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80060f4:	e785      	b.n	8006002 <_strtod_l+0x1a2>
 80060f6:	f04f 0c01 	mov.w	ip, #1
 80060fa:	e7f6      	b.n	80060ea <_strtod_l+0x28a>
 80060fc:	08009c88 	.word	0x08009c88
 8006100:	08009a40 	.word	0x08009a40
 8006104:	7ff00000 	.word	0x7ff00000
 8006108:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800610a:	1c51      	adds	r1, r2, #1
 800610c:	9117      	str	r1, [sp, #92]	; 0x5c
 800610e:	7852      	ldrb	r2, [r2, #1]
 8006110:	2a30      	cmp	r2, #48	; 0x30
 8006112:	d0f9      	beq.n	8006108 <_strtod_l+0x2a8>
 8006114:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006118:	2908      	cmp	r1, #8
 800611a:	f63f af79 	bhi.w	8006010 <_strtod_l+0x1b0>
 800611e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006122:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006124:	9206      	str	r2, [sp, #24]
 8006126:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006128:	1c51      	adds	r1, r2, #1
 800612a:	9117      	str	r1, [sp, #92]	; 0x5c
 800612c:	7852      	ldrb	r2, [r2, #1]
 800612e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8006132:	2e09      	cmp	r6, #9
 8006134:	d937      	bls.n	80061a6 <_strtod_l+0x346>
 8006136:	9e06      	ldr	r6, [sp, #24]
 8006138:	1b89      	subs	r1, r1, r6
 800613a:	2908      	cmp	r1, #8
 800613c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006140:	dc02      	bgt.n	8006148 <_strtod_l+0x2e8>
 8006142:	4576      	cmp	r6, lr
 8006144:	bfa8      	it	ge
 8006146:	4676      	movge	r6, lr
 8006148:	f1bc 0f00 	cmp.w	ip, #0
 800614c:	d000      	beq.n	8006150 <_strtod_l+0x2f0>
 800614e:	4276      	negs	r6, r6
 8006150:	2d00      	cmp	r5, #0
 8006152:	d14d      	bne.n	80061f0 <_strtod_l+0x390>
 8006154:	9904      	ldr	r1, [sp, #16]
 8006156:	4301      	orrs	r1, r0
 8006158:	f47f aec6 	bne.w	8005ee8 <_strtod_l+0x88>
 800615c:	2b00      	cmp	r3, #0
 800615e:	f47f aee1 	bne.w	8005f24 <_strtod_l+0xc4>
 8006162:	2a69      	cmp	r2, #105	; 0x69
 8006164:	d027      	beq.n	80061b6 <_strtod_l+0x356>
 8006166:	dc24      	bgt.n	80061b2 <_strtod_l+0x352>
 8006168:	2a49      	cmp	r2, #73	; 0x49
 800616a:	d024      	beq.n	80061b6 <_strtod_l+0x356>
 800616c:	2a4e      	cmp	r2, #78	; 0x4e
 800616e:	f47f aed9 	bne.w	8005f24 <_strtod_l+0xc4>
 8006172:	499f      	ldr	r1, [pc, #636]	; (80063f0 <_strtod_l+0x590>)
 8006174:	a817      	add	r0, sp, #92	; 0x5c
 8006176:	f001 fe3d 	bl	8007df4 <__match>
 800617a:	2800      	cmp	r0, #0
 800617c:	f43f aed2 	beq.w	8005f24 <_strtod_l+0xc4>
 8006180:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	2b28      	cmp	r3, #40	; 0x28
 8006186:	d12d      	bne.n	80061e4 <_strtod_l+0x384>
 8006188:	499a      	ldr	r1, [pc, #616]	; (80063f4 <_strtod_l+0x594>)
 800618a:	aa1a      	add	r2, sp, #104	; 0x68
 800618c:	a817      	add	r0, sp, #92	; 0x5c
 800618e:	f001 fe45 	bl	8007e1c <__hexnan>
 8006192:	2805      	cmp	r0, #5
 8006194:	d126      	bne.n	80061e4 <_strtod_l+0x384>
 8006196:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006198:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800619c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80061a0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80061a4:	e6a0      	b.n	8005ee8 <_strtod_l+0x88>
 80061a6:	210a      	movs	r1, #10
 80061a8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80061ac:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80061b0:	e7b9      	b.n	8006126 <_strtod_l+0x2c6>
 80061b2:	2a6e      	cmp	r2, #110	; 0x6e
 80061b4:	e7db      	b.n	800616e <_strtod_l+0x30e>
 80061b6:	4990      	ldr	r1, [pc, #576]	; (80063f8 <_strtod_l+0x598>)
 80061b8:	a817      	add	r0, sp, #92	; 0x5c
 80061ba:	f001 fe1b 	bl	8007df4 <__match>
 80061be:	2800      	cmp	r0, #0
 80061c0:	f43f aeb0 	beq.w	8005f24 <_strtod_l+0xc4>
 80061c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80061c6:	498d      	ldr	r1, [pc, #564]	; (80063fc <_strtod_l+0x59c>)
 80061c8:	3b01      	subs	r3, #1
 80061ca:	a817      	add	r0, sp, #92	; 0x5c
 80061cc:	9317      	str	r3, [sp, #92]	; 0x5c
 80061ce:	f001 fe11 	bl	8007df4 <__match>
 80061d2:	b910      	cbnz	r0, 80061da <_strtod_l+0x37a>
 80061d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80061d6:	3301      	adds	r3, #1
 80061d8:	9317      	str	r3, [sp, #92]	; 0x5c
 80061da:	f8df b230 	ldr.w	fp, [pc, #560]	; 800640c <_strtod_l+0x5ac>
 80061de:	f04f 0a00 	mov.w	sl, #0
 80061e2:	e681      	b.n	8005ee8 <_strtod_l+0x88>
 80061e4:	4886      	ldr	r0, [pc, #536]	; (8006400 <_strtod_l+0x5a0>)
 80061e6:	f002 fdf7 	bl	8008dd8 <nan>
 80061ea:	ec5b ab10 	vmov	sl, fp, d0
 80061ee:	e67b      	b.n	8005ee8 <_strtod_l+0x88>
 80061f0:	9b05      	ldr	r3, [sp, #20]
 80061f2:	9807      	ldr	r0, [sp, #28]
 80061f4:	1af3      	subs	r3, r6, r3
 80061f6:	2f00      	cmp	r7, #0
 80061f8:	bf08      	it	eq
 80061fa:	462f      	moveq	r7, r5
 80061fc:	2d10      	cmp	r5, #16
 80061fe:	9306      	str	r3, [sp, #24]
 8006200:	46a8      	mov	r8, r5
 8006202:	bfa8      	it	ge
 8006204:	f04f 0810 	movge.w	r8, #16
 8006208:	f7fa f9a4 	bl	8000554 <__aeabi_ui2d>
 800620c:	2d09      	cmp	r5, #9
 800620e:	4682      	mov	sl, r0
 8006210:	468b      	mov	fp, r1
 8006212:	dd13      	ble.n	800623c <_strtod_l+0x3dc>
 8006214:	4b7b      	ldr	r3, [pc, #492]	; (8006404 <_strtod_l+0x5a4>)
 8006216:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800621a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800621e:	f7fa fa13 	bl	8000648 <__aeabi_dmul>
 8006222:	4682      	mov	sl, r0
 8006224:	4648      	mov	r0, r9
 8006226:	468b      	mov	fp, r1
 8006228:	f7fa f994 	bl	8000554 <__aeabi_ui2d>
 800622c:	4602      	mov	r2, r0
 800622e:	460b      	mov	r3, r1
 8006230:	4650      	mov	r0, sl
 8006232:	4659      	mov	r1, fp
 8006234:	f7fa f852 	bl	80002dc <__adddf3>
 8006238:	4682      	mov	sl, r0
 800623a:	468b      	mov	fp, r1
 800623c:	2d0f      	cmp	r5, #15
 800623e:	dc38      	bgt.n	80062b2 <_strtod_l+0x452>
 8006240:	9b06      	ldr	r3, [sp, #24]
 8006242:	2b00      	cmp	r3, #0
 8006244:	f43f ae50 	beq.w	8005ee8 <_strtod_l+0x88>
 8006248:	dd24      	ble.n	8006294 <_strtod_l+0x434>
 800624a:	2b16      	cmp	r3, #22
 800624c:	dc0b      	bgt.n	8006266 <_strtod_l+0x406>
 800624e:	496d      	ldr	r1, [pc, #436]	; (8006404 <_strtod_l+0x5a4>)
 8006250:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006254:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006258:	4652      	mov	r2, sl
 800625a:	465b      	mov	r3, fp
 800625c:	f7fa f9f4 	bl	8000648 <__aeabi_dmul>
 8006260:	4682      	mov	sl, r0
 8006262:	468b      	mov	fp, r1
 8006264:	e640      	b.n	8005ee8 <_strtod_l+0x88>
 8006266:	9a06      	ldr	r2, [sp, #24]
 8006268:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800626c:	4293      	cmp	r3, r2
 800626e:	db20      	blt.n	80062b2 <_strtod_l+0x452>
 8006270:	4c64      	ldr	r4, [pc, #400]	; (8006404 <_strtod_l+0x5a4>)
 8006272:	f1c5 050f 	rsb	r5, r5, #15
 8006276:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800627a:	4652      	mov	r2, sl
 800627c:	465b      	mov	r3, fp
 800627e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006282:	f7fa f9e1 	bl	8000648 <__aeabi_dmul>
 8006286:	9b06      	ldr	r3, [sp, #24]
 8006288:	1b5d      	subs	r5, r3, r5
 800628a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800628e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006292:	e7e3      	b.n	800625c <_strtod_l+0x3fc>
 8006294:	9b06      	ldr	r3, [sp, #24]
 8006296:	3316      	adds	r3, #22
 8006298:	db0b      	blt.n	80062b2 <_strtod_l+0x452>
 800629a:	9b05      	ldr	r3, [sp, #20]
 800629c:	1b9e      	subs	r6, r3, r6
 800629e:	4b59      	ldr	r3, [pc, #356]	; (8006404 <_strtod_l+0x5a4>)
 80062a0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80062a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80062a8:	4650      	mov	r0, sl
 80062aa:	4659      	mov	r1, fp
 80062ac:	f7fa faf6 	bl	800089c <__aeabi_ddiv>
 80062b0:	e7d6      	b.n	8006260 <_strtod_l+0x400>
 80062b2:	9b06      	ldr	r3, [sp, #24]
 80062b4:	eba5 0808 	sub.w	r8, r5, r8
 80062b8:	4498      	add	r8, r3
 80062ba:	f1b8 0f00 	cmp.w	r8, #0
 80062be:	dd74      	ble.n	80063aa <_strtod_l+0x54a>
 80062c0:	f018 030f 	ands.w	r3, r8, #15
 80062c4:	d00a      	beq.n	80062dc <_strtod_l+0x47c>
 80062c6:	494f      	ldr	r1, [pc, #316]	; (8006404 <_strtod_l+0x5a4>)
 80062c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80062cc:	4652      	mov	r2, sl
 80062ce:	465b      	mov	r3, fp
 80062d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80062d4:	f7fa f9b8 	bl	8000648 <__aeabi_dmul>
 80062d8:	4682      	mov	sl, r0
 80062da:	468b      	mov	fp, r1
 80062dc:	f038 080f 	bics.w	r8, r8, #15
 80062e0:	d04f      	beq.n	8006382 <_strtod_l+0x522>
 80062e2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80062e6:	dd22      	ble.n	800632e <_strtod_l+0x4ce>
 80062e8:	2500      	movs	r5, #0
 80062ea:	462e      	mov	r6, r5
 80062ec:	9507      	str	r5, [sp, #28]
 80062ee:	9505      	str	r5, [sp, #20]
 80062f0:	2322      	movs	r3, #34	; 0x22
 80062f2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800640c <_strtod_l+0x5ac>
 80062f6:	6023      	str	r3, [r4, #0]
 80062f8:	f04f 0a00 	mov.w	sl, #0
 80062fc:	9b07      	ldr	r3, [sp, #28]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	f43f adf2 	beq.w	8005ee8 <_strtod_l+0x88>
 8006304:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006306:	4620      	mov	r0, r4
 8006308:	f001 fe90 	bl	800802c <_Bfree>
 800630c:	9905      	ldr	r1, [sp, #20]
 800630e:	4620      	mov	r0, r4
 8006310:	f001 fe8c 	bl	800802c <_Bfree>
 8006314:	4631      	mov	r1, r6
 8006316:	4620      	mov	r0, r4
 8006318:	f001 fe88 	bl	800802c <_Bfree>
 800631c:	9907      	ldr	r1, [sp, #28]
 800631e:	4620      	mov	r0, r4
 8006320:	f001 fe84 	bl	800802c <_Bfree>
 8006324:	4629      	mov	r1, r5
 8006326:	4620      	mov	r0, r4
 8006328:	f001 fe80 	bl	800802c <_Bfree>
 800632c:	e5dc      	b.n	8005ee8 <_strtod_l+0x88>
 800632e:	4b36      	ldr	r3, [pc, #216]	; (8006408 <_strtod_l+0x5a8>)
 8006330:	9304      	str	r3, [sp, #16]
 8006332:	2300      	movs	r3, #0
 8006334:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006338:	4650      	mov	r0, sl
 800633a:	4659      	mov	r1, fp
 800633c:	4699      	mov	r9, r3
 800633e:	f1b8 0f01 	cmp.w	r8, #1
 8006342:	dc21      	bgt.n	8006388 <_strtod_l+0x528>
 8006344:	b10b      	cbz	r3, 800634a <_strtod_l+0x4ea>
 8006346:	4682      	mov	sl, r0
 8006348:	468b      	mov	fp, r1
 800634a:	4b2f      	ldr	r3, [pc, #188]	; (8006408 <_strtod_l+0x5a8>)
 800634c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006350:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006354:	4652      	mov	r2, sl
 8006356:	465b      	mov	r3, fp
 8006358:	e9d9 0100 	ldrd	r0, r1, [r9]
 800635c:	f7fa f974 	bl	8000648 <__aeabi_dmul>
 8006360:	4b2a      	ldr	r3, [pc, #168]	; (800640c <_strtod_l+0x5ac>)
 8006362:	460a      	mov	r2, r1
 8006364:	400b      	ands	r3, r1
 8006366:	492a      	ldr	r1, [pc, #168]	; (8006410 <_strtod_l+0x5b0>)
 8006368:	428b      	cmp	r3, r1
 800636a:	4682      	mov	sl, r0
 800636c:	d8bc      	bhi.n	80062e8 <_strtod_l+0x488>
 800636e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006372:	428b      	cmp	r3, r1
 8006374:	bf86      	itte	hi
 8006376:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8006414 <_strtod_l+0x5b4>
 800637a:	f04f 3aff 	movhi.w	sl, #4294967295
 800637e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006382:	2300      	movs	r3, #0
 8006384:	9304      	str	r3, [sp, #16]
 8006386:	e084      	b.n	8006492 <_strtod_l+0x632>
 8006388:	f018 0f01 	tst.w	r8, #1
 800638c:	d005      	beq.n	800639a <_strtod_l+0x53a>
 800638e:	9b04      	ldr	r3, [sp, #16]
 8006390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006394:	f7fa f958 	bl	8000648 <__aeabi_dmul>
 8006398:	2301      	movs	r3, #1
 800639a:	9a04      	ldr	r2, [sp, #16]
 800639c:	3208      	adds	r2, #8
 800639e:	f109 0901 	add.w	r9, r9, #1
 80063a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80063a6:	9204      	str	r2, [sp, #16]
 80063a8:	e7c9      	b.n	800633e <_strtod_l+0x4de>
 80063aa:	d0ea      	beq.n	8006382 <_strtod_l+0x522>
 80063ac:	f1c8 0800 	rsb	r8, r8, #0
 80063b0:	f018 020f 	ands.w	r2, r8, #15
 80063b4:	d00a      	beq.n	80063cc <_strtod_l+0x56c>
 80063b6:	4b13      	ldr	r3, [pc, #76]	; (8006404 <_strtod_l+0x5a4>)
 80063b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80063bc:	4650      	mov	r0, sl
 80063be:	4659      	mov	r1, fp
 80063c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c4:	f7fa fa6a 	bl	800089c <__aeabi_ddiv>
 80063c8:	4682      	mov	sl, r0
 80063ca:	468b      	mov	fp, r1
 80063cc:	ea5f 1828 	movs.w	r8, r8, asr #4
 80063d0:	d0d7      	beq.n	8006382 <_strtod_l+0x522>
 80063d2:	f1b8 0f1f 	cmp.w	r8, #31
 80063d6:	dd1f      	ble.n	8006418 <_strtod_l+0x5b8>
 80063d8:	2500      	movs	r5, #0
 80063da:	462e      	mov	r6, r5
 80063dc:	9507      	str	r5, [sp, #28]
 80063de:	9505      	str	r5, [sp, #20]
 80063e0:	2322      	movs	r3, #34	; 0x22
 80063e2:	f04f 0a00 	mov.w	sl, #0
 80063e6:	f04f 0b00 	mov.w	fp, #0
 80063ea:	6023      	str	r3, [r4, #0]
 80063ec:	e786      	b.n	80062fc <_strtod_l+0x49c>
 80063ee:	bf00      	nop
 80063f0:	08009a11 	.word	0x08009a11
 80063f4:	08009a54 	.word	0x08009a54
 80063f8:	08009a09 	.word	0x08009a09
 80063fc:	08009b94 	.word	0x08009b94
 8006400:	08009e40 	.word	0x08009e40
 8006404:	08009d20 	.word	0x08009d20
 8006408:	08009cf8 	.word	0x08009cf8
 800640c:	7ff00000 	.word	0x7ff00000
 8006410:	7ca00000 	.word	0x7ca00000
 8006414:	7fefffff 	.word	0x7fefffff
 8006418:	f018 0310 	ands.w	r3, r8, #16
 800641c:	bf18      	it	ne
 800641e:	236a      	movne	r3, #106	; 0x6a
 8006420:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80067d0 <_strtod_l+0x970>
 8006424:	9304      	str	r3, [sp, #16]
 8006426:	4650      	mov	r0, sl
 8006428:	4659      	mov	r1, fp
 800642a:	2300      	movs	r3, #0
 800642c:	f018 0f01 	tst.w	r8, #1
 8006430:	d004      	beq.n	800643c <_strtod_l+0x5dc>
 8006432:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006436:	f7fa f907 	bl	8000648 <__aeabi_dmul>
 800643a:	2301      	movs	r3, #1
 800643c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006440:	f109 0908 	add.w	r9, r9, #8
 8006444:	d1f2      	bne.n	800642c <_strtod_l+0x5cc>
 8006446:	b10b      	cbz	r3, 800644c <_strtod_l+0x5ec>
 8006448:	4682      	mov	sl, r0
 800644a:	468b      	mov	fp, r1
 800644c:	9b04      	ldr	r3, [sp, #16]
 800644e:	b1c3      	cbz	r3, 8006482 <_strtod_l+0x622>
 8006450:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006454:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006458:	2b00      	cmp	r3, #0
 800645a:	4659      	mov	r1, fp
 800645c:	dd11      	ble.n	8006482 <_strtod_l+0x622>
 800645e:	2b1f      	cmp	r3, #31
 8006460:	f340 8124 	ble.w	80066ac <_strtod_l+0x84c>
 8006464:	2b34      	cmp	r3, #52	; 0x34
 8006466:	bfde      	ittt	le
 8006468:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800646c:	f04f 33ff 	movle.w	r3, #4294967295
 8006470:	fa03 f202 	lslle.w	r2, r3, r2
 8006474:	f04f 0a00 	mov.w	sl, #0
 8006478:	bfcc      	ite	gt
 800647a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800647e:	ea02 0b01 	andle.w	fp, r2, r1
 8006482:	2200      	movs	r2, #0
 8006484:	2300      	movs	r3, #0
 8006486:	4650      	mov	r0, sl
 8006488:	4659      	mov	r1, fp
 800648a:	f7fa fb45 	bl	8000b18 <__aeabi_dcmpeq>
 800648e:	2800      	cmp	r0, #0
 8006490:	d1a2      	bne.n	80063d8 <_strtod_l+0x578>
 8006492:	9b07      	ldr	r3, [sp, #28]
 8006494:	9300      	str	r3, [sp, #0]
 8006496:	9908      	ldr	r1, [sp, #32]
 8006498:	462b      	mov	r3, r5
 800649a:	463a      	mov	r2, r7
 800649c:	4620      	mov	r0, r4
 800649e:	f001 fe2d 	bl	80080fc <__s2b>
 80064a2:	9007      	str	r0, [sp, #28]
 80064a4:	2800      	cmp	r0, #0
 80064a6:	f43f af1f 	beq.w	80062e8 <_strtod_l+0x488>
 80064aa:	9b05      	ldr	r3, [sp, #20]
 80064ac:	1b9e      	subs	r6, r3, r6
 80064ae:	9b06      	ldr	r3, [sp, #24]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	bfb4      	ite	lt
 80064b4:	4633      	movlt	r3, r6
 80064b6:	2300      	movge	r3, #0
 80064b8:	930c      	str	r3, [sp, #48]	; 0x30
 80064ba:	9b06      	ldr	r3, [sp, #24]
 80064bc:	2500      	movs	r5, #0
 80064be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80064c2:	9312      	str	r3, [sp, #72]	; 0x48
 80064c4:	462e      	mov	r6, r5
 80064c6:	9b07      	ldr	r3, [sp, #28]
 80064c8:	4620      	mov	r0, r4
 80064ca:	6859      	ldr	r1, [r3, #4]
 80064cc:	f001 fd6e 	bl	8007fac <_Balloc>
 80064d0:	9005      	str	r0, [sp, #20]
 80064d2:	2800      	cmp	r0, #0
 80064d4:	f43f af0c 	beq.w	80062f0 <_strtod_l+0x490>
 80064d8:	9b07      	ldr	r3, [sp, #28]
 80064da:	691a      	ldr	r2, [r3, #16]
 80064dc:	3202      	adds	r2, #2
 80064de:	f103 010c 	add.w	r1, r3, #12
 80064e2:	0092      	lsls	r2, r2, #2
 80064e4:	300c      	adds	r0, #12
 80064e6:	f001 fd53 	bl	8007f90 <memcpy>
 80064ea:	ec4b ab10 	vmov	d0, sl, fp
 80064ee:	aa1a      	add	r2, sp, #104	; 0x68
 80064f0:	a919      	add	r1, sp, #100	; 0x64
 80064f2:	4620      	mov	r0, r4
 80064f4:	f002 f948 	bl	8008788 <__d2b>
 80064f8:	ec4b ab18 	vmov	d8, sl, fp
 80064fc:	9018      	str	r0, [sp, #96]	; 0x60
 80064fe:	2800      	cmp	r0, #0
 8006500:	f43f aef6 	beq.w	80062f0 <_strtod_l+0x490>
 8006504:	2101      	movs	r1, #1
 8006506:	4620      	mov	r0, r4
 8006508:	f001 fe92 	bl	8008230 <__i2b>
 800650c:	4606      	mov	r6, r0
 800650e:	2800      	cmp	r0, #0
 8006510:	f43f aeee 	beq.w	80062f0 <_strtod_l+0x490>
 8006514:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006516:	9904      	ldr	r1, [sp, #16]
 8006518:	2b00      	cmp	r3, #0
 800651a:	bfab      	itete	ge
 800651c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800651e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8006520:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006522:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8006526:	bfac      	ite	ge
 8006528:	eb03 0902 	addge.w	r9, r3, r2
 800652c:	1ad7      	sublt	r7, r2, r3
 800652e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006530:	eba3 0801 	sub.w	r8, r3, r1
 8006534:	4490      	add	r8, r2
 8006536:	4ba1      	ldr	r3, [pc, #644]	; (80067bc <_strtod_l+0x95c>)
 8006538:	f108 38ff 	add.w	r8, r8, #4294967295
 800653c:	4598      	cmp	r8, r3
 800653e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006542:	f280 80c7 	bge.w	80066d4 <_strtod_l+0x874>
 8006546:	eba3 0308 	sub.w	r3, r3, r8
 800654a:	2b1f      	cmp	r3, #31
 800654c:	eba2 0203 	sub.w	r2, r2, r3
 8006550:	f04f 0101 	mov.w	r1, #1
 8006554:	f300 80b1 	bgt.w	80066ba <_strtod_l+0x85a>
 8006558:	fa01 f303 	lsl.w	r3, r1, r3
 800655c:	930d      	str	r3, [sp, #52]	; 0x34
 800655e:	2300      	movs	r3, #0
 8006560:	9308      	str	r3, [sp, #32]
 8006562:	eb09 0802 	add.w	r8, r9, r2
 8006566:	9b04      	ldr	r3, [sp, #16]
 8006568:	45c1      	cmp	r9, r8
 800656a:	4417      	add	r7, r2
 800656c:	441f      	add	r7, r3
 800656e:	464b      	mov	r3, r9
 8006570:	bfa8      	it	ge
 8006572:	4643      	movge	r3, r8
 8006574:	42bb      	cmp	r3, r7
 8006576:	bfa8      	it	ge
 8006578:	463b      	movge	r3, r7
 800657a:	2b00      	cmp	r3, #0
 800657c:	bfc2      	ittt	gt
 800657e:	eba8 0803 	subgt.w	r8, r8, r3
 8006582:	1aff      	subgt	r7, r7, r3
 8006584:	eba9 0903 	subgt.w	r9, r9, r3
 8006588:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800658a:	2b00      	cmp	r3, #0
 800658c:	dd17      	ble.n	80065be <_strtod_l+0x75e>
 800658e:	4631      	mov	r1, r6
 8006590:	461a      	mov	r2, r3
 8006592:	4620      	mov	r0, r4
 8006594:	f001 ff0c 	bl	80083b0 <__pow5mult>
 8006598:	4606      	mov	r6, r0
 800659a:	2800      	cmp	r0, #0
 800659c:	f43f aea8 	beq.w	80062f0 <_strtod_l+0x490>
 80065a0:	4601      	mov	r1, r0
 80065a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80065a4:	4620      	mov	r0, r4
 80065a6:	f001 fe59 	bl	800825c <__multiply>
 80065aa:	900b      	str	r0, [sp, #44]	; 0x2c
 80065ac:	2800      	cmp	r0, #0
 80065ae:	f43f ae9f 	beq.w	80062f0 <_strtod_l+0x490>
 80065b2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80065b4:	4620      	mov	r0, r4
 80065b6:	f001 fd39 	bl	800802c <_Bfree>
 80065ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065bc:	9318      	str	r3, [sp, #96]	; 0x60
 80065be:	f1b8 0f00 	cmp.w	r8, #0
 80065c2:	f300 808c 	bgt.w	80066de <_strtod_l+0x87e>
 80065c6:	9b06      	ldr	r3, [sp, #24]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	dd08      	ble.n	80065de <_strtod_l+0x77e>
 80065cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80065ce:	9905      	ldr	r1, [sp, #20]
 80065d0:	4620      	mov	r0, r4
 80065d2:	f001 feed 	bl	80083b0 <__pow5mult>
 80065d6:	9005      	str	r0, [sp, #20]
 80065d8:	2800      	cmp	r0, #0
 80065da:	f43f ae89 	beq.w	80062f0 <_strtod_l+0x490>
 80065de:	2f00      	cmp	r7, #0
 80065e0:	dd08      	ble.n	80065f4 <_strtod_l+0x794>
 80065e2:	9905      	ldr	r1, [sp, #20]
 80065e4:	463a      	mov	r2, r7
 80065e6:	4620      	mov	r0, r4
 80065e8:	f001 ff3c 	bl	8008464 <__lshift>
 80065ec:	9005      	str	r0, [sp, #20]
 80065ee:	2800      	cmp	r0, #0
 80065f0:	f43f ae7e 	beq.w	80062f0 <_strtod_l+0x490>
 80065f4:	f1b9 0f00 	cmp.w	r9, #0
 80065f8:	dd08      	ble.n	800660c <_strtod_l+0x7ac>
 80065fa:	4631      	mov	r1, r6
 80065fc:	464a      	mov	r2, r9
 80065fe:	4620      	mov	r0, r4
 8006600:	f001 ff30 	bl	8008464 <__lshift>
 8006604:	4606      	mov	r6, r0
 8006606:	2800      	cmp	r0, #0
 8006608:	f43f ae72 	beq.w	80062f0 <_strtod_l+0x490>
 800660c:	9a05      	ldr	r2, [sp, #20]
 800660e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006610:	4620      	mov	r0, r4
 8006612:	f001 ffb3 	bl	800857c <__mdiff>
 8006616:	4605      	mov	r5, r0
 8006618:	2800      	cmp	r0, #0
 800661a:	f43f ae69 	beq.w	80062f0 <_strtod_l+0x490>
 800661e:	68c3      	ldr	r3, [r0, #12]
 8006620:	930b      	str	r3, [sp, #44]	; 0x2c
 8006622:	2300      	movs	r3, #0
 8006624:	60c3      	str	r3, [r0, #12]
 8006626:	4631      	mov	r1, r6
 8006628:	f001 ff8c 	bl	8008544 <__mcmp>
 800662c:	2800      	cmp	r0, #0
 800662e:	da60      	bge.n	80066f2 <_strtod_l+0x892>
 8006630:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006632:	ea53 030a 	orrs.w	r3, r3, sl
 8006636:	f040 8082 	bne.w	800673e <_strtod_l+0x8de>
 800663a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800663e:	2b00      	cmp	r3, #0
 8006640:	d17d      	bne.n	800673e <_strtod_l+0x8de>
 8006642:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006646:	0d1b      	lsrs	r3, r3, #20
 8006648:	051b      	lsls	r3, r3, #20
 800664a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800664e:	d976      	bls.n	800673e <_strtod_l+0x8de>
 8006650:	696b      	ldr	r3, [r5, #20]
 8006652:	b913      	cbnz	r3, 800665a <_strtod_l+0x7fa>
 8006654:	692b      	ldr	r3, [r5, #16]
 8006656:	2b01      	cmp	r3, #1
 8006658:	dd71      	ble.n	800673e <_strtod_l+0x8de>
 800665a:	4629      	mov	r1, r5
 800665c:	2201      	movs	r2, #1
 800665e:	4620      	mov	r0, r4
 8006660:	f001 ff00 	bl	8008464 <__lshift>
 8006664:	4631      	mov	r1, r6
 8006666:	4605      	mov	r5, r0
 8006668:	f001 ff6c 	bl	8008544 <__mcmp>
 800666c:	2800      	cmp	r0, #0
 800666e:	dd66      	ble.n	800673e <_strtod_l+0x8de>
 8006670:	9904      	ldr	r1, [sp, #16]
 8006672:	4a53      	ldr	r2, [pc, #332]	; (80067c0 <_strtod_l+0x960>)
 8006674:	465b      	mov	r3, fp
 8006676:	2900      	cmp	r1, #0
 8006678:	f000 8081 	beq.w	800677e <_strtod_l+0x91e>
 800667c:	ea02 010b 	and.w	r1, r2, fp
 8006680:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006684:	dc7b      	bgt.n	800677e <_strtod_l+0x91e>
 8006686:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800668a:	f77f aea9 	ble.w	80063e0 <_strtod_l+0x580>
 800668e:	4b4d      	ldr	r3, [pc, #308]	; (80067c4 <_strtod_l+0x964>)
 8006690:	4650      	mov	r0, sl
 8006692:	4659      	mov	r1, fp
 8006694:	2200      	movs	r2, #0
 8006696:	f7f9 ffd7 	bl	8000648 <__aeabi_dmul>
 800669a:	460b      	mov	r3, r1
 800669c:	4303      	orrs	r3, r0
 800669e:	bf08      	it	eq
 80066a0:	2322      	moveq	r3, #34	; 0x22
 80066a2:	4682      	mov	sl, r0
 80066a4:	468b      	mov	fp, r1
 80066a6:	bf08      	it	eq
 80066a8:	6023      	streq	r3, [r4, #0]
 80066aa:	e62b      	b.n	8006304 <_strtod_l+0x4a4>
 80066ac:	f04f 32ff 	mov.w	r2, #4294967295
 80066b0:	fa02 f303 	lsl.w	r3, r2, r3
 80066b4:	ea03 0a0a 	and.w	sl, r3, sl
 80066b8:	e6e3      	b.n	8006482 <_strtod_l+0x622>
 80066ba:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80066be:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80066c2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80066c6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80066ca:	fa01 f308 	lsl.w	r3, r1, r8
 80066ce:	9308      	str	r3, [sp, #32]
 80066d0:	910d      	str	r1, [sp, #52]	; 0x34
 80066d2:	e746      	b.n	8006562 <_strtod_l+0x702>
 80066d4:	2300      	movs	r3, #0
 80066d6:	9308      	str	r3, [sp, #32]
 80066d8:	2301      	movs	r3, #1
 80066da:	930d      	str	r3, [sp, #52]	; 0x34
 80066dc:	e741      	b.n	8006562 <_strtod_l+0x702>
 80066de:	9918      	ldr	r1, [sp, #96]	; 0x60
 80066e0:	4642      	mov	r2, r8
 80066e2:	4620      	mov	r0, r4
 80066e4:	f001 febe 	bl	8008464 <__lshift>
 80066e8:	9018      	str	r0, [sp, #96]	; 0x60
 80066ea:	2800      	cmp	r0, #0
 80066ec:	f47f af6b 	bne.w	80065c6 <_strtod_l+0x766>
 80066f0:	e5fe      	b.n	80062f0 <_strtod_l+0x490>
 80066f2:	465f      	mov	r7, fp
 80066f4:	d16e      	bne.n	80067d4 <_strtod_l+0x974>
 80066f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80066f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80066fc:	b342      	cbz	r2, 8006750 <_strtod_l+0x8f0>
 80066fe:	4a32      	ldr	r2, [pc, #200]	; (80067c8 <_strtod_l+0x968>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d128      	bne.n	8006756 <_strtod_l+0x8f6>
 8006704:	9b04      	ldr	r3, [sp, #16]
 8006706:	4651      	mov	r1, sl
 8006708:	b1eb      	cbz	r3, 8006746 <_strtod_l+0x8e6>
 800670a:	4b2d      	ldr	r3, [pc, #180]	; (80067c0 <_strtod_l+0x960>)
 800670c:	403b      	ands	r3, r7
 800670e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006712:	f04f 32ff 	mov.w	r2, #4294967295
 8006716:	d819      	bhi.n	800674c <_strtod_l+0x8ec>
 8006718:	0d1b      	lsrs	r3, r3, #20
 800671a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800671e:	fa02 f303 	lsl.w	r3, r2, r3
 8006722:	4299      	cmp	r1, r3
 8006724:	d117      	bne.n	8006756 <_strtod_l+0x8f6>
 8006726:	4b29      	ldr	r3, [pc, #164]	; (80067cc <_strtod_l+0x96c>)
 8006728:	429f      	cmp	r7, r3
 800672a:	d102      	bne.n	8006732 <_strtod_l+0x8d2>
 800672c:	3101      	adds	r1, #1
 800672e:	f43f addf 	beq.w	80062f0 <_strtod_l+0x490>
 8006732:	4b23      	ldr	r3, [pc, #140]	; (80067c0 <_strtod_l+0x960>)
 8006734:	403b      	ands	r3, r7
 8006736:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800673a:	f04f 0a00 	mov.w	sl, #0
 800673e:	9b04      	ldr	r3, [sp, #16]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d1a4      	bne.n	800668e <_strtod_l+0x82e>
 8006744:	e5de      	b.n	8006304 <_strtod_l+0x4a4>
 8006746:	f04f 33ff 	mov.w	r3, #4294967295
 800674a:	e7ea      	b.n	8006722 <_strtod_l+0x8c2>
 800674c:	4613      	mov	r3, r2
 800674e:	e7e8      	b.n	8006722 <_strtod_l+0x8c2>
 8006750:	ea53 030a 	orrs.w	r3, r3, sl
 8006754:	d08c      	beq.n	8006670 <_strtod_l+0x810>
 8006756:	9b08      	ldr	r3, [sp, #32]
 8006758:	b1db      	cbz	r3, 8006792 <_strtod_l+0x932>
 800675a:	423b      	tst	r3, r7
 800675c:	d0ef      	beq.n	800673e <_strtod_l+0x8de>
 800675e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006760:	9a04      	ldr	r2, [sp, #16]
 8006762:	4650      	mov	r0, sl
 8006764:	4659      	mov	r1, fp
 8006766:	b1c3      	cbz	r3, 800679a <_strtod_l+0x93a>
 8006768:	f7ff fb5c 	bl	8005e24 <sulp>
 800676c:	4602      	mov	r2, r0
 800676e:	460b      	mov	r3, r1
 8006770:	ec51 0b18 	vmov	r0, r1, d8
 8006774:	f7f9 fdb2 	bl	80002dc <__adddf3>
 8006778:	4682      	mov	sl, r0
 800677a:	468b      	mov	fp, r1
 800677c:	e7df      	b.n	800673e <_strtod_l+0x8de>
 800677e:	4013      	ands	r3, r2
 8006780:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006784:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006788:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800678c:	f04f 3aff 	mov.w	sl, #4294967295
 8006790:	e7d5      	b.n	800673e <_strtod_l+0x8de>
 8006792:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006794:	ea13 0f0a 	tst.w	r3, sl
 8006798:	e7e0      	b.n	800675c <_strtod_l+0x8fc>
 800679a:	f7ff fb43 	bl	8005e24 <sulp>
 800679e:	4602      	mov	r2, r0
 80067a0:	460b      	mov	r3, r1
 80067a2:	ec51 0b18 	vmov	r0, r1, d8
 80067a6:	f7f9 fd97 	bl	80002d8 <__aeabi_dsub>
 80067aa:	2200      	movs	r2, #0
 80067ac:	2300      	movs	r3, #0
 80067ae:	4682      	mov	sl, r0
 80067b0:	468b      	mov	fp, r1
 80067b2:	f7fa f9b1 	bl	8000b18 <__aeabi_dcmpeq>
 80067b6:	2800      	cmp	r0, #0
 80067b8:	d0c1      	beq.n	800673e <_strtod_l+0x8de>
 80067ba:	e611      	b.n	80063e0 <_strtod_l+0x580>
 80067bc:	fffffc02 	.word	0xfffffc02
 80067c0:	7ff00000 	.word	0x7ff00000
 80067c4:	39500000 	.word	0x39500000
 80067c8:	000fffff 	.word	0x000fffff
 80067cc:	7fefffff 	.word	0x7fefffff
 80067d0:	08009a68 	.word	0x08009a68
 80067d4:	4631      	mov	r1, r6
 80067d6:	4628      	mov	r0, r5
 80067d8:	f002 f832 	bl	8008840 <__ratio>
 80067dc:	ec59 8b10 	vmov	r8, r9, d0
 80067e0:	ee10 0a10 	vmov	r0, s0
 80067e4:	2200      	movs	r2, #0
 80067e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80067ea:	4649      	mov	r1, r9
 80067ec:	f7fa f9a8 	bl	8000b40 <__aeabi_dcmple>
 80067f0:	2800      	cmp	r0, #0
 80067f2:	d07a      	beq.n	80068ea <_strtod_l+0xa8a>
 80067f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d04a      	beq.n	8006890 <_strtod_l+0xa30>
 80067fa:	4b95      	ldr	r3, [pc, #596]	; (8006a50 <_strtod_l+0xbf0>)
 80067fc:	2200      	movs	r2, #0
 80067fe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006802:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006a50 <_strtod_l+0xbf0>
 8006806:	f04f 0800 	mov.w	r8, #0
 800680a:	4b92      	ldr	r3, [pc, #584]	; (8006a54 <_strtod_l+0xbf4>)
 800680c:	403b      	ands	r3, r7
 800680e:	930d      	str	r3, [sp, #52]	; 0x34
 8006810:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006812:	4b91      	ldr	r3, [pc, #580]	; (8006a58 <_strtod_l+0xbf8>)
 8006814:	429a      	cmp	r2, r3
 8006816:	f040 80b0 	bne.w	800697a <_strtod_l+0xb1a>
 800681a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800681e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006822:	ec4b ab10 	vmov	d0, sl, fp
 8006826:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800682a:	f001 ff31 	bl	8008690 <__ulp>
 800682e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006832:	ec53 2b10 	vmov	r2, r3, d0
 8006836:	f7f9 ff07 	bl	8000648 <__aeabi_dmul>
 800683a:	4652      	mov	r2, sl
 800683c:	465b      	mov	r3, fp
 800683e:	f7f9 fd4d 	bl	80002dc <__adddf3>
 8006842:	460b      	mov	r3, r1
 8006844:	4983      	ldr	r1, [pc, #524]	; (8006a54 <_strtod_l+0xbf4>)
 8006846:	4a85      	ldr	r2, [pc, #532]	; (8006a5c <_strtod_l+0xbfc>)
 8006848:	4019      	ands	r1, r3
 800684a:	4291      	cmp	r1, r2
 800684c:	4682      	mov	sl, r0
 800684e:	d960      	bls.n	8006912 <_strtod_l+0xab2>
 8006850:	ee18 3a90 	vmov	r3, s17
 8006854:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006858:	4293      	cmp	r3, r2
 800685a:	d104      	bne.n	8006866 <_strtod_l+0xa06>
 800685c:	ee18 3a10 	vmov	r3, s16
 8006860:	3301      	adds	r3, #1
 8006862:	f43f ad45 	beq.w	80062f0 <_strtod_l+0x490>
 8006866:	f8df b200 	ldr.w	fp, [pc, #512]	; 8006a68 <_strtod_l+0xc08>
 800686a:	f04f 3aff 	mov.w	sl, #4294967295
 800686e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006870:	4620      	mov	r0, r4
 8006872:	f001 fbdb 	bl	800802c <_Bfree>
 8006876:	9905      	ldr	r1, [sp, #20]
 8006878:	4620      	mov	r0, r4
 800687a:	f001 fbd7 	bl	800802c <_Bfree>
 800687e:	4631      	mov	r1, r6
 8006880:	4620      	mov	r0, r4
 8006882:	f001 fbd3 	bl	800802c <_Bfree>
 8006886:	4629      	mov	r1, r5
 8006888:	4620      	mov	r0, r4
 800688a:	f001 fbcf 	bl	800802c <_Bfree>
 800688e:	e61a      	b.n	80064c6 <_strtod_l+0x666>
 8006890:	f1ba 0f00 	cmp.w	sl, #0
 8006894:	d11b      	bne.n	80068ce <_strtod_l+0xa6e>
 8006896:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800689a:	b9f3      	cbnz	r3, 80068da <_strtod_l+0xa7a>
 800689c:	4b6c      	ldr	r3, [pc, #432]	; (8006a50 <_strtod_l+0xbf0>)
 800689e:	2200      	movs	r2, #0
 80068a0:	4640      	mov	r0, r8
 80068a2:	4649      	mov	r1, r9
 80068a4:	f7fa f942 	bl	8000b2c <__aeabi_dcmplt>
 80068a8:	b9d0      	cbnz	r0, 80068e0 <_strtod_l+0xa80>
 80068aa:	4640      	mov	r0, r8
 80068ac:	4649      	mov	r1, r9
 80068ae:	4b6c      	ldr	r3, [pc, #432]	; (8006a60 <_strtod_l+0xc00>)
 80068b0:	2200      	movs	r2, #0
 80068b2:	f7f9 fec9 	bl	8000648 <__aeabi_dmul>
 80068b6:	4680      	mov	r8, r0
 80068b8:	4689      	mov	r9, r1
 80068ba:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80068be:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80068c2:	9315      	str	r3, [sp, #84]	; 0x54
 80068c4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80068c8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80068cc:	e79d      	b.n	800680a <_strtod_l+0x9aa>
 80068ce:	f1ba 0f01 	cmp.w	sl, #1
 80068d2:	d102      	bne.n	80068da <_strtod_l+0xa7a>
 80068d4:	2f00      	cmp	r7, #0
 80068d6:	f43f ad83 	beq.w	80063e0 <_strtod_l+0x580>
 80068da:	4b62      	ldr	r3, [pc, #392]	; (8006a64 <_strtod_l+0xc04>)
 80068dc:	2200      	movs	r2, #0
 80068de:	e78e      	b.n	80067fe <_strtod_l+0x99e>
 80068e0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8006a60 <_strtod_l+0xc00>
 80068e4:	f04f 0800 	mov.w	r8, #0
 80068e8:	e7e7      	b.n	80068ba <_strtod_l+0xa5a>
 80068ea:	4b5d      	ldr	r3, [pc, #372]	; (8006a60 <_strtod_l+0xc00>)
 80068ec:	4640      	mov	r0, r8
 80068ee:	4649      	mov	r1, r9
 80068f0:	2200      	movs	r2, #0
 80068f2:	f7f9 fea9 	bl	8000648 <__aeabi_dmul>
 80068f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068f8:	4680      	mov	r8, r0
 80068fa:	4689      	mov	r9, r1
 80068fc:	b933      	cbnz	r3, 800690c <_strtod_l+0xaac>
 80068fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006902:	900e      	str	r0, [sp, #56]	; 0x38
 8006904:	930f      	str	r3, [sp, #60]	; 0x3c
 8006906:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800690a:	e7dd      	b.n	80068c8 <_strtod_l+0xa68>
 800690c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006910:	e7f9      	b.n	8006906 <_strtod_l+0xaa6>
 8006912:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006916:	9b04      	ldr	r3, [sp, #16]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d1a8      	bne.n	800686e <_strtod_l+0xa0e>
 800691c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006920:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006922:	0d1b      	lsrs	r3, r3, #20
 8006924:	051b      	lsls	r3, r3, #20
 8006926:	429a      	cmp	r2, r3
 8006928:	d1a1      	bne.n	800686e <_strtod_l+0xa0e>
 800692a:	4640      	mov	r0, r8
 800692c:	4649      	mov	r1, r9
 800692e:	f7fa f9d3 	bl	8000cd8 <__aeabi_d2lz>
 8006932:	f7f9 fe5b 	bl	80005ec <__aeabi_l2d>
 8006936:	4602      	mov	r2, r0
 8006938:	460b      	mov	r3, r1
 800693a:	4640      	mov	r0, r8
 800693c:	4649      	mov	r1, r9
 800693e:	f7f9 fccb 	bl	80002d8 <__aeabi_dsub>
 8006942:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006944:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006948:	ea43 030a 	orr.w	r3, r3, sl
 800694c:	4313      	orrs	r3, r2
 800694e:	4680      	mov	r8, r0
 8006950:	4689      	mov	r9, r1
 8006952:	d055      	beq.n	8006a00 <_strtod_l+0xba0>
 8006954:	a336      	add	r3, pc, #216	; (adr r3, 8006a30 <_strtod_l+0xbd0>)
 8006956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695a:	f7fa f8e7 	bl	8000b2c <__aeabi_dcmplt>
 800695e:	2800      	cmp	r0, #0
 8006960:	f47f acd0 	bne.w	8006304 <_strtod_l+0x4a4>
 8006964:	a334      	add	r3, pc, #208	; (adr r3, 8006a38 <_strtod_l+0xbd8>)
 8006966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800696a:	4640      	mov	r0, r8
 800696c:	4649      	mov	r1, r9
 800696e:	f7fa f8fb 	bl	8000b68 <__aeabi_dcmpgt>
 8006972:	2800      	cmp	r0, #0
 8006974:	f43f af7b 	beq.w	800686e <_strtod_l+0xa0e>
 8006978:	e4c4      	b.n	8006304 <_strtod_l+0x4a4>
 800697a:	9b04      	ldr	r3, [sp, #16]
 800697c:	b333      	cbz	r3, 80069cc <_strtod_l+0xb6c>
 800697e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006980:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006984:	d822      	bhi.n	80069cc <_strtod_l+0xb6c>
 8006986:	a32e      	add	r3, pc, #184	; (adr r3, 8006a40 <_strtod_l+0xbe0>)
 8006988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800698c:	4640      	mov	r0, r8
 800698e:	4649      	mov	r1, r9
 8006990:	f7fa f8d6 	bl	8000b40 <__aeabi_dcmple>
 8006994:	b1a0      	cbz	r0, 80069c0 <_strtod_l+0xb60>
 8006996:	4649      	mov	r1, r9
 8006998:	4640      	mov	r0, r8
 800699a:	f7fa f92d 	bl	8000bf8 <__aeabi_d2uiz>
 800699e:	2801      	cmp	r0, #1
 80069a0:	bf38      	it	cc
 80069a2:	2001      	movcc	r0, #1
 80069a4:	f7f9 fdd6 	bl	8000554 <__aeabi_ui2d>
 80069a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069aa:	4680      	mov	r8, r0
 80069ac:	4689      	mov	r9, r1
 80069ae:	bb23      	cbnz	r3, 80069fa <_strtod_l+0xb9a>
 80069b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80069b4:	9010      	str	r0, [sp, #64]	; 0x40
 80069b6:	9311      	str	r3, [sp, #68]	; 0x44
 80069b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80069bc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80069c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80069c4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80069c8:	1a9b      	subs	r3, r3, r2
 80069ca:	9309      	str	r3, [sp, #36]	; 0x24
 80069cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80069d0:	eeb0 0a48 	vmov.f32	s0, s16
 80069d4:	eef0 0a68 	vmov.f32	s1, s17
 80069d8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80069dc:	f001 fe58 	bl	8008690 <__ulp>
 80069e0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80069e4:	ec53 2b10 	vmov	r2, r3, d0
 80069e8:	f7f9 fe2e 	bl	8000648 <__aeabi_dmul>
 80069ec:	ec53 2b18 	vmov	r2, r3, d8
 80069f0:	f7f9 fc74 	bl	80002dc <__adddf3>
 80069f4:	4682      	mov	sl, r0
 80069f6:	468b      	mov	fp, r1
 80069f8:	e78d      	b.n	8006916 <_strtod_l+0xab6>
 80069fa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80069fe:	e7db      	b.n	80069b8 <_strtod_l+0xb58>
 8006a00:	a311      	add	r3, pc, #68	; (adr r3, 8006a48 <_strtod_l+0xbe8>)
 8006a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a06:	f7fa f891 	bl	8000b2c <__aeabi_dcmplt>
 8006a0a:	e7b2      	b.n	8006972 <_strtod_l+0xb12>
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	930a      	str	r3, [sp, #40]	; 0x28
 8006a10:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006a12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006a14:	6013      	str	r3, [r2, #0]
 8006a16:	f7ff ba6b 	b.w	8005ef0 <_strtod_l+0x90>
 8006a1a:	2a65      	cmp	r2, #101	; 0x65
 8006a1c:	f43f ab5f 	beq.w	80060de <_strtod_l+0x27e>
 8006a20:	2a45      	cmp	r2, #69	; 0x45
 8006a22:	f43f ab5c 	beq.w	80060de <_strtod_l+0x27e>
 8006a26:	2301      	movs	r3, #1
 8006a28:	f7ff bb94 	b.w	8006154 <_strtod_l+0x2f4>
 8006a2c:	f3af 8000 	nop.w
 8006a30:	94a03595 	.word	0x94a03595
 8006a34:	3fdfffff 	.word	0x3fdfffff
 8006a38:	35afe535 	.word	0x35afe535
 8006a3c:	3fe00000 	.word	0x3fe00000
 8006a40:	ffc00000 	.word	0xffc00000
 8006a44:	41dfffff 	.word	0x41dfffff
 8006a48:	94a03595 	.word	0x94a03595
 8006a4c:	3fcfffff 	.word	0x3fcfffff
 8006a50:	3ff00000 	.word	0x3ff00000
 8006a54:	7ff00000 	.word	0x7ff00000
 8006a58:	7fe00000 	.word	0x7fe00000
 8006a5c:	7c9fffff 	.word	0x7c9fffff
 8006a60:	3fe00000 	.word	0x3fe00000
 8006a64:	bff00000 	.word	0xbff00000
 8006a68:	7fefffff 	.word	0x7fefffff

08006a6c <_strtod_r>:
 8006a6c:	4b01      	ldr	r3, [pc, #4]	; (8006a74 <_strtod_r+0x8>)
 8006a6e:	f7ff b9f7 	b.w	8005e60 <_strtod_l>
 8006a72:	bf00      	nop
 8006a74:	20000074 	.word	0x20000074

08006a78 <_strtol_l.constprop.0>:
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a7e:	d001      	beq.n	8006a84 <_strtol_l.constprop.0+0xc>
 8006a80:	2b24      	cmp	r3, #36	; 0x24
 8006a82:	d906      	bls.n	8006a92 <_strtol_l.constprop.0+0x1a>
 8006a84:	f7fe fafc 	bl	8005080 <__errno>
 8006a88:	2316      	movs	r3, #22
 8006a8a:	6003      	str	r3, [r0, #0]
 8006a8c:	2000      	movs	r0, #0
 8006a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a92:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006b78 <_strtol_l.constprop.0+0x100>
 8006a96:	460d      	mov	r5, r1
 8006a98:	462e      	mov	r6, r5
 8006a9a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006a9e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006aa2:	f017 0708 	ands.w	r7, r7, #8
 8006aa6:	d1f7      	bne.n	8006a98 <_strtol_l.constprop.0+0x20>
 8006aa8:	2c2d      	cmp	r4, #45	; 0x2d
 8006aaa:	d132      	bne.n	8006b12 <_strtol_l.constprop.0+0x9a>
 8006aac:	782c      	ldrb	r4, [r5, #0]
 8006aae:	2701      	movs	r7, #1
 8006ab0:	1cb5      	adds	r5, r6, #2
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d05b      	beq.n	8006b6e <_strtol_l.constprop.0+0xf6>
 8006ab6:	2b10      	cmp	r3, #16
 8006ab8:	d109      	bne.n	8006ace <_strtol_l.constprop.0+0x56>
 8006aba:	2c30      	cmp	r4, #48	; 0x30
 8006abc:	d107      	bne.n	8006ace <_strtol_l.constprop.0+0x56>
 8006abe:	782c      	ldrb	r4, [r5, #0]
 8006ac0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006ac4:	2c58      	cmp	r4, #88	; 0x58
 8006ac6:	d14d      	bne.n	8006b64 <_strtol_l.constprop.0+0xec>
 8006ac8:	786c      	ldrb	r4, [r5, #1]
 8006aca:	2310      	movs	r3, #16
 8006acc:	3502      	adds	r5, #2
 8006ace:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006ad2:	f108 38ff 	add.w	r8, r8, #4294967295
 8006ad6:	f04f 0c00 	mov.w	ip, #0
 8006ada:	fbb8 f9f3 	udiv	r9, r8, r3
 8006ade:	4666      	mov	r6, ip
 8006ae0:	fb03 8a19 	mls	sl, r3, r9, r8
 8006ae4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006ae8:	f1be 0f09 	cmp.w	lr, #9
 8006aec:	d816      	bhi.n	8006b1c <_strtol_l.constprop.0+0xa4>
 8006aee:	4674      	mov	r4, lr
 8006af0:	42a3      	cmp	r3, r4
 8006af2:	dd24      	ble.n	8006b3e <_strtol_l.constprop.0+0xc6>
 8006af4:	f1bc 0f00 	cmp.w	ip, #0
 8006af8:	db1e      	blt.n	8006b38 <_strtol_l.constprop.0+0xc0>
 8006afa:	45b1      	cmp	r9, r6
 8006afc:	d31c      	bcc.n	8006b38 <_strtol_l.constprop.0+0xc0>
 8006afe:	d101      	bne.n	8006b04 <_strtol_l.constprop.0+0x8c>
 8006b00:	45a2      	cmp	sl, r4
 8006b02:	db19      	blt.n	8006b38 <_strtol_l.constprop.0+0xc0>
 8006b04:	fb06 4603 	mla	r6, r6, r3, r4
 8006b08:	f04f 0c01 	mov.w	ip, #1
 8006b0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006b10:	e7e8      	b.n	8006ae4 <_strtol_l.constprop.0+0x6c>
 8006b12:	2c2b      	cmp	r4, #43	; 0x2b
 8006b14:	bf04      	itt	eq
 8006b16:	782c      	ldrbeq	r4, [r5, #0]
 8006b18:	1cb5      	addeq	r5, r6, #2
 8006b1a:	e7ca      	b.n	8006ab2 <_strtol_l.constprop.0+0x3a>
 8006b1c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006b20:	f1be 0f19 	cmp.w	lr, #25
 8006b24:	d801      	bhi.n	8006b2a <_strtol_l.constprop.0+0xb2>
 8006b26:	3c37      	subs	r4, #55	; 0x37
 8006b28:	e7e2      	b.n	8006af0 <_strtol_l.constprop.0+0x78>
 8006b2a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006b2e:	f1be 0f19 	cmp.w	lr, #25
 8006b32:	d804      	bhi.n	8006b3e <_strtol_l.constprop.0+0xc6>
 8006b34:	3c57      	subs	r4, #87	; 0x57
 8006b36:	e7db      	b.n	8006af0 <_strtol_l.constprop.0+0x78>
 8006b38:	f04f 3cff 	mov.w	ip, #4294967295
 8006b3c:	e7e6      	b.n	8006b0c <_strtol_l.constprop.0+0x94>
 8006b3e:	f1bc 0f00 	cmp.w	ip, #0
 8006b42:	da05      	bge.n	8006b50 <_strtol_l.constprop.0+0xd8>
 8006b44:	2322      	movs	r3, #34	; 0x22
 8006b46:	6003      	str	r3, [r0, #0]
 8006b48:	4646      	mov	r6, r8
 8006b4a:	b942      	cbnz	r2, 8006b5e <_strtol_l.constprop.0+0xe6>
 8006b4c:	4630      	mov	r0, r6
 8006b4e:	e79e      	b.n	8006a8e <_strtol_l.constprop.0+0x16>
 8006b50:	b107      	cbz	r7, 8006b54 <_strtol_l.constprop.0+0xdc>
 8006b52:	4276      	negs	r6, r6
 8006b54:	2a00      	cmp	r2, #0
 8006b56:	d0f9      	beq.n	8006b4c <_strtol_l.constprop.0+0xd4>
 8006b58:	f1bc 0f00 	cmp.w	ip, #0
 8006b5c:	d000      	beq.n	8006b60 <_strtol_l.constprop.0+0xe8>
 8006b5e:	1e69      	subs	r1, r5, #1
 8006b60:	6011      	str	r1, [r2, #0]
 8006b62:	e7f3      	b.n	8006b4c <_strtol_l.constprop.0+0xd4>
 8006b64:	2430      	movs	r4, #48	; 0x30
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d1b1      	bne.n	8006ace <_strtol_l.constprop.0+0x56>
 8006b6a:	2308      	movs	r3, #8
 8006b6c:	e7af      	b.n	8006ace <_strtol_l.constprop.0+0x56>
 8006b6e:	2c30      	cmp	r4, #48	; 0x30
 8006b70:	d0a5      	beq.n	8006abe <_strtol_l.constprop.0+0x46>
 8006b72:	230a      	movs	r3, #10
 8006b74:	e7ab      	b.n	8006ace <_strtol_l.constprop.0+0x56>
 8006b76:	bf00      	nop
 8006b78:	08009a91 	.word	0x08009a91

08006b7c <_strtol_r>:
 8006b7c:	f7ff bf7c 	b.w	8006a78 <_strtol_l.constprop.0>

08006b80 <quorem>:
 8006b80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b84:	6903      	ldr	r3, [r0, #16]
 8006b86:	690c      	ldr	r4, [r1, #16]
 8006b88:	42a3      	cmp	r3, r4
 8006b8a:	4607      	mov	r7, r0
 8006b8c:	f2c0 8081 	blt.w	8006c92 <quorem+0x112>
 8006b90:	3c01      	subs	r4, #1
 8006b92:	f101 0814 	add.w	r8, r1, #20
 8006b96:	f100 0514 	add.w	r5, r0, #20
 8006b9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b9e:	9301      	str	r3, [sp, #4]
 8006ba0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006ba4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ba8:	3301      	adds	r3, #1
 8006baa:	429a      	cmp	r2, r3
 8006bac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006bb0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006bb4:	fbb2 f6f3 	udiv	r6, r2, r3
 8006bb8:	d331      	bcc.n	8006c1e <quorem+0x9e>
 8006bba:	f04f 0e00 	mov.w	lr, #0
 8006bbe:	4640      	mov	r0, r8
 8006bc0:	46ac      	mov	ip, r5
 8006bc2:	46f2      	mov	sl, lr
 8006bc4:	f850 2b04 	ldr.w	r2, [r0], #4
 8006bc8:	b293      	uxth	r3, r2
 8006bca:	fb06 e303 	mla	r3, r6, r3, lr
 8006bce:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	ebaa 0303 	sub.w	r3, sl, r3
 8006bd8:	f8dc a000 	ldr.w	sl, [ip]
 8006bdc:	0c12      	lsrs	r2, r2, #16
 8006bde:	fa13 f38a 	uxtah	r3, r3, sl
 8006be2:	fb06 e202 	mla	r2, r6, r2, lr
 8006be6:	9300      	str	r3, [sp, #0]
 8006be8:	9b00      	ldr	r3, [sp, #0]
 8006bea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006bee:	b292      	uxth	r2, r2
 8006bf0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006bf4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006bf8:	f8bd 3000 	ldrh.w	r3, [sp]
 8006bfc:	4581      	cmp	r9, r0
 8006bfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c02:	f84c 3b04 	str.w	r3, [ip], #4
 8006c06:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006c0a:	d2db      	bcs.n	8006bc4 <quorem+0x44>
 8006c0c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006c10:	b92b      	cbnz	r3, 8006c1e <quorem+0x9e>
 8006c12:	9b01      	ldr	r3, [sp, #4]
 8006c14:	3b04      	subs	r3, #4
 8006c16:	429d      	cmp	r5, r3
 8006c18:	461a      	mov	r2, r3
 8006c1a:	d32e      	bcc.n	8006c7a <quorem+0xfa>
 8006c1c:	613c      	str	r4, [r7, #16]
 8006c1e:	4638      	mov	r0, r7
 8006c20:	f001 fc90 	bl	8008544 <__mcmp>
 8006c24:	2800      	cmp	r0, #0
 8006c26:	db24      	blt.n	8006c72 <quorem+0xf2>
 8006c28:	3601      	adds	r6, #1
 8006c2a:	4628      	mov	r0, r5
 8006c2c:	f04f 0c00 	mov.w	ip, #0
 8006c30:	f858 2b04 	ldr.w	r2, [r8], #4
 8006c34:	f8d0 e000 	ldr.w	lr, [r0]
 8006c38:	b293      	uxth	r3, r2
 8006c3a:	ebac 0303 	sub.w	r3, ip, r3
 8006c3e:	0c12      	lsrs	r2, r2, #16
 8006c40:	fa13 f38e 	uxtah	r3, r3, lr
 8006c44:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006c48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c52:	45c1      	cmp	r9, r8
 8006c54:	f840 3b04 	str.w	r3, [r0], #4
 8006c58:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006c5c:	d2e8      	bcs.n	8006c30 <quorem+0xb0>
 8006c5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c66:	b922      	cbnz	r2, 8006c72 <quorem+0xf2>
 8006c68:	3b04      	subs	r3, #4
 8006c6a:	429d      	cmp	r5, r3
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	d30a      	bcc.n	8006c86 <quorem+0x106>
 8006c70:	613c      	str	r4, [r7, #16]
 8006c72:	4630      	mov	r0, r6
 8006c74:	b003      	add	sp, #12
 8006c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c7a:	6812      	ldr	r2, [r2, #0]
 8006c7c:	3b04      	subs	r3, #4
 8006c7e:	2a00      	cmp	r2, #0
 8006c80:	d1cc      	bne.n	8006c1c <quorem+0x9c>
 8006c82:	3c01      	subs	r4, #1
 8006c84:	e7c7      	b.n	8006c16 <quorem+0x96>
 8006c86:	6812      	ldr	r2, [r2, #0]
 8006c88:	3b04      	subs	r3, #4
 8006c8a:	2a00      	cmp	r2, #0
 8006c8c:	d1f0      	bne.n	8006c70 <quorem+0xf0>
 8006c8e:	3c01      	subs	r4, #1
 8006c90:	e7eb      	b.n	8006c6a <quorem+0xea>
 8006c92:	2000      	movs	r0, #0
 8006c94:	e7ee      	b.n	8006c74 <quorem+0xf4>
	...

08006c98 <_dtoa_r>:
 8006c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c9c:	ed2d 8b04 	vpush	{d8-d9}
 8006ca0:	ec57 6b10 	vmov	r6, r7, d0
 8006ca4:	b093      	sub	sp, #76	; 0x4c
 8006ca6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006ca8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006cac:	9106      	str	r1, [sp, #24]
 8006cae:	ee10 aa10 	vmov	sl, s0
 8006cb2:	4604      	mov	r4, r0
 8006cb4:	9209      	str	r2, [sp, #36]	; 0x24
 8006cb6:	930c      	str	r3, [sp, #48]	; 0x30
 8006cb8:	46bb      	mov	fp, r7
 8006cba:	b975      	cbnz	r5, 8006cda <_dtoa_r+0x42>
 8006cbc:	2010      	movs	r0, #16
 8006cbe:	f001 f94d 	bl	8007f5c <malloc>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	6260      	str	r0, [r4, #36]	; 0x24
 8006cc6:	b920      	cbnz	r0, 8006cd2 <_dtoa_r+0x3a>
 8006cc8:	4ba7      	ldr	r3, [pc, #668]	; (8006f68 <_dtoa_r+0x2d0>)
 8006cca:	21ea      	movs	r1, #234	; 0xea
 8006ccc:	48a7      	ldr	r0, [pc, #668]	; (8006f6c <_dtoa_r+0x2d4>)
 8006cce:	f002 f8bd 	bl	8008e4c <__assert_func>
 8006cd2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006cd6:	6005      	str	r5, [r0, #0]
 8006cd8:	60c5      	str	r5, [r0, #12]
 8006cda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cdc:	6819      	ldr	r1, [r3, #0]
 8006cde:	b151      	cbz	r1, 8006cf6 <_dtoa_r+0x5e>
 8006ce0:	685a      	ldr	r2, [r3, #4]
 8006ce2:	604a      	str	r2, [r1, #4]
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	4093      	lsls	r3, r2
 8006ce8:	608b      	str	r3, [r1, #8]
 8006cea:	4620      	mov	r0, r4
 8006cec:	f001 f99e 	bl	800802c <_Bfree>
 8006cf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	601a      	str	r2, [r3, #0]
 8006cf6:	1e3b      	subs	r3, r7, #0
 8006cf8:	bfaa      	itet	ge
 8006cfa:	2300      	movge	r3, #0
 8006cfc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006d00:	f8c8 3000 	strge.w	r3, [r8]
 8006d04:	4b9a      	ldr	r3, [pc, #616]	; (8006f70 <_dtoa_r+0x2d8>)
 8006d06:	bfbc      	itt	lt
 8006d08:	2201      	movlt	r2, #1
 8006d0a:	f8c8 2000 	strlt.w	r2, [r8]
 8006d0e:	ea33 030b 	bics.w	r3, r3, fp
 8006d12:	d11b      	bne.n	8006d4c <_dtoa_r+0xb4>
 8006d14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d16:	f242 730f 	movw	r3, #9999	; 0x270f
 8006d1a:	6013      	str	r3, [r2, #0]
 8006d1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d20:	4333      	orrs	r3, r6
 8006d22:	f000 8592 	beq.w	800784a <_dtoa_r+0xbb2>
 8006d26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d28:	b963      	cbnz	r3, 8006d44 <_dtoa_r+0xac>
 8006d2a:	4b92      	ldr	r3, [pc, #584]	; (8006f74 <_dtoa_r+0x2dc>)
 8006d2c:	e022      	b.n	8006d74 <_dtoa_r+0xdc>
 8006d2e:	4b92      	ldr	r3, [pc, #584]	; (8006f78 <_dtoa_r+0x2e0>)
 8006d30:	9301      	str	r3, [sp, #4]
 8006d32:	3308      	adds	r3, #8
 8006d34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006d36:	6013      	str	r3, [r2, #0]
 8006d38:	9801      	ldr	r0, [sp, #4]
 8006d3a:	b013      	add	sp, #76	; 0x4c
 8006d3c:	ecbd 8b04 	vpop	{d8-d9}
 8006d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d44:	4b8b      	ldr	r3, [pc, #556]	; (8006f74 <_dtoa_r+0x2dc>)
 8006d46:	9301      	str	r3, [sp, #4]
 8006d48:	3303      	adds	r3, #3
 8006d4a:	e7f3      	b.n	8006d34 <_dtoa_r+0x9c>
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	2300      	movs	r3, #0
 8006d50:	4650      	mov	r0, sl
 8006d52:	4659      	mov	r1, fp
 8006d54:	f7f9 fee0 	bl	8000b18 <__aeabi_dcmpeq>
 8006d58:	ec4b ab19 	vmov	d9, sl, fp
 8006d5c:	4680      	mov	r8, r0
 8006d5e:	b158      	cbz	r0, 8006d78 <_dtoa_r+0xe0>
 8006d60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d62:	2301      	movs	r3, #1
 8006d64:	6013      	str	r3, [r2, #0]
 8006d66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	f000 856b 	beq.w	8007844 <_dtoa_r+0xbac>
 8006d6e:	4883      	ldr	r0, [pc, #524]	; (8006f7c <_dtoa_r+0x2e4>)
 8006d70:	6018      	str	r0, [r3, #0]
 8006d72:	1e43      	subs	r3, r0, #1
 8006d74:	9301      	str	r3, [sp, #4]
 8006d76:	e7df      	b.n	8006d38 <_dtoa_r+0xa0>
 8006d78:	ec4b ab10 	vmov	d0, sl, fp
 8006d7c:	aa10      	add	r2, sp, #64	; 0x40
 8006d7e:	a911      	add	r1, sp, #68	; 0x44
 8006d80:	4620      	mov	r0, r4
 8006d82:	f001 fd01 	bl	8008788 <__d2b>
 8006d86:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006d8a:	ee08 0a10 	vmov	s16, r0
 8006d8e:	2d00      	cmp	r5, #0
 8006d90:	f000 8084 	beq.w	8006e9c <_dtoa_r+0x204>
 8006d94:	ee19 3a90 	vmov	r3, s19
 8006d98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d9c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006da0:	4656      	mov	r6, sl
 8006da2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006da6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006daa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006dae:	4b74      	ldr	r3, [pc, #464]	; (8006f80 <_dtoa_r+0x2e8>)
 8006db0:	2200      	movs	r2, #0
 8006db2:	4630      	mov	r0, r6
 8006db4:	4639      	mov	r1, r7
 8006db6:	f7f9 fa8f 	bl	80002d8 <__aeabi_dsub>
 8006dba:	a365      	add	r3, pc, #404	; (adr r3, 8006f50 <_dtoa_r+0x2b8>)
 8006dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc0:	f7f9 fc42 	bl	8000648 <__aeabi_dmul>
 8006dc4:	a364      	add	r3, pc, #400	; (adr r3, 8006f58 <_dtoa_r+0x2c0>)
 8006dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dca:	f7f9 fa87 	bl	80002dc <__adddf3>
 8006dce:	4606      	mov	r6, r0
 8006dd0:	4628      	mov	r0, r5
 8006dd2:	460f      	mov	r7, r1
 8006dd4:	f7f9 fbce 	bl	8000574 <__aeabi_i2d>
 8006dd8:	a361      	add	r3, pc, #388	; (adr r3, 8006f60 <_dtoa_r+0x2c8>)
 8006dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dde:	f7f9 fc33 	bl	8000648 <__aeabi_dmul>
 8006de2:	4602      	mov	r2, r0
 8006de4:	460b      	mov	r3, r1
 8006de6:	4630      	mov	r0, r6
 8006de8:	4639      	mov	r1, r7
 8006dea:	f7f9 fa77 	bl	80002dc <__adddf3>
 8006dee:	4606      	mov	r6, r0
 8006df0:	460f      	mov	r7, r1
 8006df2:	f7f9 fed9 	bl	8000ba8 <__aeabi_d2iz>
 8006df6:	2200      	movs	r2, #0
 8006df8:	9000      	str	r0, [sp, #0]
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	4630      	mov	r0, r6
 8006dfe:	4639      	mov	r1, r7
 8006e00:	f7f9 fe94 	bl	8000b2c <__aeabi_dcmplt>
 8006e04:	b150      	cbz	r0, 8006e1c <_dtoa_r+0x184>
 8006e06:	9800      	ldr	r0, [sp, #0]
 8006e08:	f7f9 fbb4 	bl	8000574 <__aeabi_i2d>
 8006e0c:	4632      	mov	r2, r6
 8006e0e:	463b      	mov	r3, r7
 8006e10:	f7f9 fe82 	bl	8000b18 <__aeabi_dcmpeq>
 8006e14:	b910      	cbnz	r0, 8006e1c <_dtoa_r+0x184>
 8006e16:	9b00      	ldr	r3, [sp, #0]
 8006e18:	3b01      	subs	r3, #1
 8006e1a:	9300      	str	r3, [sp, #0]
 8006e1c:	9b00      	ldr	r3, [sp, #0]
 8006e1e:	2b16      	cmp	r3, #22
 8006e20:	d85a      	bhi.n	8006ed8 <_dtoa_r+0x240>
 8006e22:	9a00      	ldr	r2, [sp, #0]
 8006e24:	4b57      	ldr	r3, [pc, #348]	; (8006f84 <_dtoa_r+0x2ec>)
 8006e26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2e:	ec51 0b19 	vmov	r0, r1, d9
 8006e32:	f7f9 fe7b 	bl	8000b2c <__aeabi_dcmplt>
 8006e36:	2800      	cmp	r0, #0
 8006e38:	d050      	beq.n	8006edc <_dtoa_r+0x244>
 8006e3a:	9b00      	ldr	r3, [sp, #0]
 8006e3c:	3b01      	subs	r3, #1
 8006e3e:	9300      	str	r3, [sp, #0]
 8006e40:	2300      	movs	r3, #0
 8006e42:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e46:	1b5d      	subs	r5, r3, r5
 8006e48:	1e6b      	subs	r3, r5, #1
 8006e4a:	9305      	str	r3, [sp, #20]
 8006e4c:	bf45      	ittet	mi
 8006e4e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006e52:	9304      	strmi	r3, [sp, #16]
 8006e54:	2300      	movpl	r3, #0
 8006e56:	2300      	movmi	r3, #0
 8006e58:	bf4c      	ite	mi
 8006e5a:	9305      	strmi	r3, [sp, #20]
 8006e5c:	9304      	strpl	r3, [sp, #16]
 8006e5e:	9b00      	ldr	r3, [sp, #0]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	db3d      	blt.n	8006ee0 <_dtoa_r+0x248>
 8006e64:	9b05      	ldr	r3, [sp, #20]
 8006e66:	9a00      	ldr	r2, [sp, #0]
 8006e68:	920a      	str	r2, [sp, #40]	; 0x28
 8006e6a:	4413      	add	r3, r2
 8006e6c:	9305      	str	r3, [sp, #20]
 8006e6e:	2300      	movs	r3, #0
 8006e70:	9307      	str	r3, [sp, #28]
 8006e72:	9b06      	ldr	r3, [sp, #24]
 8006e74:	2b09      	cmp	r3, #9
 8006e76:	f200 8089 	bhi.w	8006f8c <_dtoa_r+0x2f4>
 8006e7a:	2b05      	cmp	r3, #5
 8006e7c:	bfc4      	itt	gt
 8006e7e:	3b04      	subgt	r3, #4
 8006e80:	9306      	strgt	r3, [sp, #24]
 8006e82:	9b06      	ldr	r3, [sp, #24]
 8006e84:	f1a3 0302 	sub.w	r3, r3, #2
 8006e88:	bfcc      	ite	gt
 8006e8a:	2500      	movgt	r5, #0
 8006e8c:	2501      	movle	r5, #1
 8006e8e:	2b03      	cmp	r3, #3
 8006e90:	f200 8087 	bhi.w	8006fa2 <_dtoa_r+0x30a>
 8006e94:	e8df f003 	tbb	[pc, r3]
 8006e98:	59383a2d 	.word	0x59383a2d
 8006e9c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006ea0:	441d      	add	r5, r3
 8006ea2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006ea6:	2b20      	cmp	r3, #32
 8006ea8:	bfc1      	itttt	gt
 8006eaa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006eae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006eb2:	fa0b f303 	lslgt.w	r3, fp, r3
 8006eb6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006eba:	bfda      	itte	le
 8006ebc:	f1c3 0320 	rsble	r3, r3, #32
 8006ec0:	fa06 f003 	lslle.w	r0, r6, r3
 8006ec4:	4318      	orrgt	r0, r3
 8006ec6:	f7f9 fb45 	bl	8000554 <__aeabi_ui2d>
 8006eca:	2301      	movs	r3, #1
 8006ecc:	4606      	mov	r6, r0
 8006ece:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006ed2:	3d01      	subs	r5, #1
 8006ed4:	930e      	str	r3, [sp, #56]	; 0x38
 8006ed6:	e76a      	b.n	8006dae <_dtoa_r+0x116>
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e7b2      	b.n	8006e42 <_dtoa_r+0x1aa>
 8006edc:	900b      	str	r0, [sp, #44]	; 0x2c
 8006ede:	e7b1      	b.n	8006e44 <_dtoa_r+0x1ac>
 8006ee0:	9b04      	ldr	r3, [sp, #16]
 8006ee2:	9a00      	ldr	r2, [sp, #0]
 8006ee4:	1a9b      	subs	r3, r3, r2
 8006ee6:	9304      	str	r3, [sp, #16]
 8006ee8:	4253      	negs	r3, r2
 8006eea:	9307      	str	r3, [sp, #28]
 8006eec:	2300      	movs	r3, #0
 8006eee:	930a      	str	r3, [sp, #40]	; 0x28
 8006ef0:	e7bf      	b.n	8006e72 <_dtoa_r+0x1da>
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	9308      	str	r3, [sp, #32]
 8006ef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	dc55      	bgt.n	8006fa8 <_dtoa_r+0x310>
 8006efc:	2301      	movs	r3, #1
 8006efe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006f02:	461a      	mov	r2, r3
 8006f04:	9209      	str	r2, [sp, #36]	; 0x24
 8006f06:	e00c      	b.n	8006f22 <_dtoa_r+0x28a>
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e7f3      	b.n	8006ef4 <_dtoa_r+0x25c>
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f10:	9308      	str	r3, [sp, #32]
 8006f12:	9b00      	ldr	r3, [sp, #0]
 8006f14:	4413      	add	r3, r2
 8006f16:	9302      	str	r3, [sp, #8]
 8006f18:	3301      	adds	r3, #1
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	9303      	str	r3, [sp, #12]
 8006f1e:	bfb8      	it	lt
 8006f20:	2301      	movlt	r3, #1
 8006f22:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006f24:	2200      	movs	r2, #0
 8006f26:	6042      	str	r2, [r0, #4]
 8006f28:	2204      	movs	r2, #4
 8006f2a:	f102 0614 	add.w	r6, r2, #20
 8006f2e:	429e      	cmp	r6, r3
 8006f30:	6841      	ldr	r1, [r0, #4]
 8006f32:	d93d      	bls.n	8006fb0 <_dtoa_r+0x318>
 8006f34:	4620      	mov	r0, r4
 8006f36:	f001 f839 	bl	8007fac <_Balloc>
 8006f3a:	9001      	str	r0, [sp, #4]
 8006f3c:	2800      	cmp	r0, #0
 8006f3e:	d13b      	bne.n	8006fb8 <_dtoa_r+0x320>
 8006f40:	4b11      	ldr	r3, [pc, #68]	; (8006f88 <_dtoa_r+0x2f0>)
 8006f42:	4602      	mov	r2, r0
 8006f44:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006f48:	e6c0      	b.n	8006ccc <_dtoa_r+0x34>
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e7df      	b.n	8006f0e <_dtoa_r+0x276>
 8006f4e:	bf00      	nop
 8006f50:	636f4361 	.word	0x636f4361
 8006f54:	3fd287a7 	.word	0x3fd287a7
 8006f58:	8b60c8b3 	.word	0x8b60c8b3
 8006f5c:	3fc68a28 	.word	0x3fc68a28
 8006f60:	509f79fb 	.word	0x509f79fb
 8006f64:	3fd34413 	.word	0x3fd34413
 8006f68:	08009b9e 	.word	0x08009b9e
 8006f6c:	08009bb5 	.word	0x08009bb5
 8006f70:	7ff00000 	.word	0x7ff00000
 8006f74:	08009b9a 	.word	0x08009b9a
 8006f78:	08009b91 	.word	0x08009b91
 8006f7c:	08009a15 	.word	0x08009a15
 8006f80:	3ff80000 	.word	0x3ff80000
 8006f84:	08009d20 	.word	0x08009d20
 8006f88:	08009c10 	.word	0x08009c10
 8006f8c:	2501      	movs	r5, #1
 8006f8e:	2300      	movs	r3, #0
 8006f90:	9306      	str	r3, [sp, #24]
 8006f92:	9508      	str	r5, [sp, #32]
 8006f94:	f04f 33ff 	mov.w	r3, #4294967295
 8006f98:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	2312      	movs	r3, #18
 8006fa0:	e7b0      	b.n	8006f04 <_dtoa_r+0x26c>
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	9308      	str	r3, [sp, #32]
 8006fa6:	e7f5      	b.n	8006f94 <_dtoa_r+0x2fc>
 8006fa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006faa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006fae:	e7b8      	b.n	8006f22 <_dtoa_r+0x28a>
 8006fb0:	3101      	adds	r1, #1
 8006fb2:	6041      	str	r1, [r0, #4]
 8006fb4:	0052      	lsls	r2, r2, #1
 8006fb6:	e7b8      	b.n	8006f2a <_dtoa_r+0x292>
 8006fb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fba:	9a01      	ldr	r2, [sp, #4]
 8006fbc:	601a      	str	r2, [r3, #0]
 8006fbe:	9b03      	ldr	r3, [sp, #12]
 8006fc0:	2b0e      	cmp	r3, #14
 8006fc2:	f200 809d 	bhi.w	8007100 <_dtoa_r+0x468>
 8006fc6:	2d00      	cmp	r5, #0
 8006fc8:	f000 809a 	beq.w	8007100 <_dtoa_r+0x468>
 8006fcc:	9b00      	ldr	r3, [sp, #0]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	dd32      	ble.n	8007038 <_dtoa_r+0x3a0>
 8006fd2:	4ab7      	ldr	r2, [pc, #732]	; (80072b0 <_dtoa_r+0x618>)
 8006fd4:	f003 030f 	and.w	r3, r3, #15
 8006fd8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006fdc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006fe0:	9b00      	ldr	r3, [sp, #0]
 8006fe2:	05d8      	lsls	r0, r3, #23
 8006fe4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006fe8:	d516      	bpl.n	8007018 <_dtoa_r+0x380>
 8006fea:	4bb2      	ldr	r3, [pc, #712]	; (80072b4 <_dtoa_r+0x61c>)
 8006fec:	ec51 0b19 	vmov	r0, r1, d9
 8006ff0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006ff4:	f7f9 fc52 	bl	800089c <__aeabi_ddiv>
 8006ff8:	f007 070f 	and.w	r7, r7, #15
 8006ffc:	4682      	mov	sl, r0
 8006ffe:	468b      	mov	fp, r1
 8007000:	2503      	movs	r5, #3
 8007002:	4eac      	ldr	r6, [pc, #688]	; (80072b4 <_dtoa_r+0x61c>)
 8007004:	b957      	cbnz	r7, 800701c <_dtoa_r+0x384>
 8007006:	4642      	mov	r2, r8
 8007008:	464b      	mov	r3, r9
 800700a:	4650      	mov	r0, sl
 800700c:	4659      	mov	r1, fp
 800700e:	f7f9 fc45 	bl	800089c <__aeabi_ddiv>
 8007012:	4682      	mov	sl, r0
 8007014:	468b      	mov	fp, r1
 8007016:	e028      	b.n	800706a <_dtoa_r+0x3d2>
 8007018:	2502      	movs	r5, #2
 800701a:	e7f2      	b.n	8007002 <_dtoa_r+0x36a>
 800701c:	07f9      	lsls	r1, r7, #31
 800701e:	d508      	bpl.n	8007032 <_dtoa_r+0x39a>
 8007020:	4640      	mov	r0, r8
 8007022:	4649      	mov	r1, r9
 8007024:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007028:	f7f9 fb0e 	bl	8000648 <__aeabi_dmul>
 800702c:	3501      	adds	r5, #1
 800702e:	4680      	mov	r8, r0
 8007030:	4689      	mov	r9, r1
 8007032:	107f      	asrs	r7, r7, #1
 8007034:	3608      	adds	r6, #8
 8007036:	e7e5      	b.n	8007004 <_dtoa_r+0x36c>
 8007038:	f000 809b 	beq.w	8007172 <_dtoa_r+0x4da>
 800703c:	9b00      	ldr	r3, [sp, #0]
 800703e:	4f9d      	ldr	r7, [pc, #628]	; (80072b4 <_dtoa_r+0x61c>)
 8007040:	425e      	negs	r6, r3
 8007042:	4b9b      	ldr	r3, [pc, #620]	; (80072b0 <_dtoa_r+0x618>)
 8007044:	f006 020f 	and.w	r2, r6, #15
 8007048:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800704c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007050:	ec51 0b19 	vmov	r0, r1, d9
 8007054:	f7f9 faf8 	bl	8000648 <__aeabi_dmul>
 8007058:	1136      	asrs	r6, r6, #4
 800705a:	4682      	mov	sl, r0
 800705c:	468b      	mov	fp, r1
 800705e:	2300      	movs	r3, #0
 8007060:	2502      	movs	r5, #2
 8007062:	2e00      	cmp	r6, #0
 8007064:	d17a      	bne.n	800715c <_dtoa_r+0x4c4>
 8007066:	2b00      	cmp	r3, #0
 8007068:	d1d3      	bne.n	8007012 <_dtoa_r+0x37a>
 800706a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800706c:	2b00      	cmp	r3, #0
 800706e:	f000 8082 	beq.w	8007176 <_dtoa_r+0x4de>
 8007072:	4b91      	ldr	r3, [pc, #580]	; (80072b8 <_dtoa_r+0x620>)
 8007074:	2200      	movs	r2, #0
 8007076:	4650      	mov	r0, sl
 8007078:	4659      	mov	r1, fp
 800707a:	f7f9 fd57 	bl	8000b2c <__aeabi_dcmplt>
 800707e:	2800      	cmp	r0, #0
 8007080:	d079      	beq.n	8007176 <_dtoa_r+0x4de>
 8007082:	9b03      	ldr	r3, [sp, #12]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d076      	beq.n	8007176 <_dtoa_r+0x4de>
 8007088:	9b02      	ldr	r3, [sp, #8]
 800708a:	2b00      	cmp	r3, #0
 800708c:	dd36      	ble.n	80070fc <_dtoa_r+0x464>
 800708e:	9b00      	ldr	r3, [sp, #0]
 8007090:	4650      	mov	r0, sl
 8007092:	4659      	mov	r1, fp
 8007094:	1e5f      	subs	r7, r3, #1
 8007096:	2200      	movs	r2, #0
 8007098:	4b88      	ldr	r3, [pc, #544]	; (80072bc <_dtoa_r+0x624>)
 800709a:	f7f9 fad5 	bl	8000648 <__aeabi_dmul>
 800709e:	9e02      	ldr	r6, [sp, #8]
 80070a0:	4682      	mov	sl, r0
 80070a2:	468b      	mov	fp, r1
 80070a4:	3501      	adds	r5, #1
 80070a6:	4628      	mov	r0, r5
 80070a8:	f7f9 fa64 	bl	8000574 <__aeabi_i2d>
 80070ac:	4652      	mov	r2, sl
 80070ae:	465b      	mov	r3, fp
 80070b0:	f7f9 faca 	bl	8000648 <__aeabi_dmul>
 80070b4:	4b82      	ldr	r3, [pc, #520]	; (80072c0 <_dtoa_r+0x628>)
 80070b6:	2200      	movs	r2, #0
 80070b8:	f7f9 f910 	bl	80002dc <__adddf3>
 80070bc:	46d0      	mov	r8, sl
 80070be:	46d9      	mov	r9, fp
 80070c0:	4682      	mov	sl, r0
 80070c2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80070c6:	2e00      	cmp	r6, #0
 80070c8:	d158      	bne.n	800717c <_dtoa_r+0x4e4>
 80070ca:	4b7e      	ldr	r3, [pc, #504]	; (80072c4 <_dtoa_r+0x62c>)
 80070cc:	2200      	movs	r2, #0
 80070ce:	4640      	mov	r0, r8
 80070d0:	4649      	mov	r1, r9
 80070d2:	f7f9 f901 	bl	80002d8 <__aeabi_dsub>
 80070d6:	4652      	mov	r2, sl
 80070d8:	465b      	mov	r3, fp
 80070da:	4680      	mov	r8, r0
 80070dc:	4689      	mov	r9, r1
 80070de:	f7f9 fd43 	bl	8000b68 <__aeabi_dcmpgt>
 80070e2:	2800      	cmp	r0, #0
 80070e4:	f040 8295 	bne.w	8007612 <_dtoa_r+0x97a>
 80070e8:	4652      	mov	r2, sl
 80070ea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80070ee:	4640      	mov	r0, r8
 80070f0:	4649      	mov	r1, r9
 80070f2:	f7f9 fd1b 	bl	8000b2c <__aeabi_dcmplt>
 80070f6:	2800      	cmp	r0, #0
 80070f8:	f040 8289 	bne.w	800760e <_dtoa_r+0x976>
 80070fc:	ec5b ab19 	vmov	sl, fp, d9
 8007100:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007102:	2b00      	cmp	r3, #0
 8007104:	f2c0 8148 	blt.w	8007398 <_dtoa_r+0x700>
 8007108:	9a00      	ldr	r2, [sp, #0]
 800710a:	2a0e      	cmp	r2, #14
 800710c:	f300 8144 	bgt.w	8007398 <_dtoa_r+0x700>
 8007110:	4b67      	ldr	r3, [pc, #412]	; (80072b0 <_dtoa_r+0x618>)
 8007112:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007116:	e9d3 8900 	ldrd	r8, r9, [r3]
 800711a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800711c:	2b00      	cmp	r3, #0
 800711e:	f280 80d5 	bge.w	80072cc <_dtoa_r+0x634>
 8007122:	9b03      	ldr	r3, [sp, #12]
 8007124:	2b00      	cmp	r3, #0
 8007126:	f300 80d1 	bgt.w	80072cc <_dtoa_r+0x634>
 800712a:	f040 826f 	bne.w	800760c <_dtoa_r+0x974>
 800712e:	4b65      	ldr	r3, [pc, #404]	; (80072c4 <_dtoa_r+0x62c>)
 8007130:	2200      	movs	r2, #0
 8007132:	4640      	mov	r0, r8
 8007134:	4649      	mov	r1, r9
 8007136:	f7f9 fa87 	bl	8000648 <__aeabi_dmul>
 800713a:	4652      	mov	r2, sl
 800713c:	465b      	mov	r3, fp
 800713e:	f7f9 fd09 	bl	8000b54 <__aeabi_dcmpge>
 8007142:	9e03      	ldr	r6, [sp, #12]
 8007144:	4637      	mov	r7, r6
 8007146:	2800      	cmp	r0, #0
 8007148:	f040 8245 	bne.w	80075d6 <_dtoa_r+0x93e>
 800714c:	9d01      	ldr	r5, [sp, #4]
 800714e:	2331      	movs	r3, #49	; 0x31
 8007150:	f805 3b01 	strb.w	r3, [r5], #1
 8007154:	9b00      	ldr	r3, [sp, #0]
 8007156:	3301      	adds	r3, #1
 8007158:	9300      	str	r3, [sp, #0]
 800715a:	e240      	b.n	80075de <_dtoa_r+0x946>
 800715c:	07f2      	lsls	r2, r6, #31
 800715e:	d505      	bpl.n	800716c <_dtoa_r+0x4d4>
 8007160:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007164:	f7f9 fa70 	bl	8000648 <__aeabi_dmul>
 8007168:	3501      	adds	r5, #1
 800716a:	2301      	movs	r3, #1
 800716c:	1076      	asrs	r6, r6, #1
 800716e:	3708      	adds	r7, #8
 8007170:	e777      	b.n	8007062 <_dtoa_r+0x3ca>
 8007172:	2502      	movs	r5, #2
 8007174:	e779      	b.n	800706a <_dtoa_r+0x3d2>
 8007176:	9f00      	ldr	r7, [sp, #0]
 8007178:	9e03      	ldr	r6, [sp, #12]
 800717a:	e794      	b.n	80070a6 <_dtoa_r+0x40e>
 800717c:	9901      	ldr	r1, [sp, #4]
 800717e:	4b4c      	ldr	r3, [pc, #304]	; (80072b0 <_dtoa_r+0x618>)
 8007180:	4431      	add	r1, r6
 8007182:	910d      	str	r1, [sp, #52]	; 0x34
 8007184:	9908      	ldr	r1, [sp, #32]
 8007186:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800718a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800718e:	2900      	cmp	r1, #0
 8007190:	d043      	beq.n	800721a <_dtoa_r+0x582>
 8007192:	494d      	ldr	r1, [pc, #308]	; (80072c8 <_dtoa_r+0x630>)
 8007194:	2000      	movs	r0, #0
 8007196:	f7f9 fb81 	bl	800089c <__aeabi_ddiv>
 800719a:	4652      	mov	r2, sl
 800719c:	465b      	mov	r3, fp
 800719e:	f7f9 f89b 	bl	80002d8 <__aeabi_dsub>
 80071a2:	9d01      	ldr	r5, [sp, #4]
 80071a4:	4682      	mov	sl, r0
 80071a6:	468b      	mov	fp, r1
 80071a8:	4649      	mov	r1, r9
 80071aa:	4640      	mov	r0, r8
 80071ac:	f7f9 fcfc 	bl	8000ba8 <__aeabi_d2iz>
 80071b0:	4606      	mov	r6, r0
 80071b2:	f7f9 f9df 	bl	8000574 <__aeabi_i2d>
 80071b6:	4602      	mov	r2, r0
 80071b8:	460b      	mov	r3, r1
 80071ba:	4640      	mov	r0, r8
 80071bc:	4649      	mov	r1, r9
 80071be:	f7f9 f88b 	bl	80002d8 <__aeabi_dsub>
 80071c2:	3630      	adds	r6, #48	; 0x30
 80071c4:	f805 6b01 	strb.w	r6, [r5], #1
 80071c8:	4652      	mov	r2, sl
 80071ca:	465b      	mov	r3, fp
 80071cc:	4680      	mov	r8, r0
 80071ce:	4689      	mov	r9, r1
 80071d0:	f7f9 fcac 	bl	8000b2c <__aeabi_dcmplt>
 80071d4:	2800      	cmp	r0, #0
 80071d6:	d163      	bne.n	80072a0 <_dtoa_r+0x608>
 80071d8:	4642      	mov	r2, r8
 80071da:	464b      	mov	r3, r9
 80071dc:	4936      	ldr	r1, [pc, #216]	; (80072b8 <_dtoa_r+0x620>)
 80071de:	2000      	movs	r0, #0
 80071e0:	f7f9 f87a 	bl	80002d8 <__aeabi_dsub>
 80071e4:	4652      	mov	r2, sl
 80071e6:	465b      	mov	r3, fp
 80071e8:	f7f9 fca0 	bl	8000b2c <__aeabi_dcmplt>
 80071ec:	2800      	cmp	r0, #0
 80071ee:	f040 80b5 	bne.w	800735c <_dtoa_r+0x6c4>
 80071f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071f4:	429d      	cmp	r5, r3
 80071f6:	d081      	beq.n	80070fc <_dtoa_r+0x464>
 80071f8:	4b30      	ldr	r3, [pc, #192]	; (80072bc <_dtoa_r+0x624>)
 80071fa:	2200      	movs	r2, #0
 80071fc:	4650      	mov	r0, sl
 80071fe:	4659      	mov	r1, fp
 8007200:	f7f9 fa22 	bl	8000648 <__aeabi_dmul>
 8007204:	4b2d      	ldr	r3, [pc, #180]	; (80072bc <_dtoa_r+0x624>)
 8007206:	4682      	mov	sl, r0
 8007208:	468b      	mov	fp, r1
 800720a:	4640      	mov	r0, r8
 800720c:	4649      	mov	r1, r9
 800720e:	2200      	movs	r2, #0
 8007210:	f7f9 fa1a 	bl	8000648 <__aeabi_dmul>
 8007214:	4680      	mov	r8, r0
 8007216:	4689      	mov	r9, r1
 8007218:	e7c6      	b.n	80071a8 <_dtoa_r+0x510>
 800721a:	4650      	mov	r0, sl
 800721c:	4659      	mov	r1, fp
 800721e:	f7f9 fa13 	bl	8000648 <__aeabi_dmul>
 8007222:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007224:	9d01      	ldr	r5, [sp, #4]
 8007226:	930f      	str	r3, [sp, #60]	; 0x3c
 8007228:	4682      	mov	sl, r0
 800722a:	468b      	mov	fp, r1
 800722c:	4649      	mov	r1, r9
 800722e:	4640      	mov	r0, r8
 8007230:	f7f9 fcba 	bl	8000ba8 <__aeabi_d2iz>
 8007234:	4606      	mov	r6, r0
 8007236:	f7f9 f99d 	bl	8000574 <__aeabi_i2d>
 800723a:	3630      	adds	r6, #48	; 0x30
 800723c:	4602      	mov	r2, r0
 800723e:	460b      	mov	r3, r1
 8007240:	4640      	mov	r0, r8
 8007242:	4649      	mov	r1, r9
 8007244:	f7f9 f848 	bl	80002d8 <__aeabi_dsub>
 8007248:	f805 6b01 	strb.w	r6, [r5], #1
 800724c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800724e:	429d      	cmp	r5, r3
 8007250:	4680      	mov	r8, r0
 8007252:	4689      	mov	r9, r1
 8007254:	f04f 0200 	mov.w	r2, #0
 8007258:	d124      	bne.n	80072a4 <_dtoa_r+0x60c>
 800725a:	4b1b      	ldr	r3, [pc, #108]	; (80072c8 <_dtoa_r+0x630>)
 800725c:	4650      	mov	r0, sl
 800725e:	4659      	mov	r1, fp
 8007260:	f7f9 f83c 	bl	80002dc <__adddf3>
 8007264:	4602      	mov	r2, r0
 8007266:	460b      	mov	r3, r1
 8007268:	4640      	mov	r0, r8
 800726a:	4649      	mov	r1, r9
 800726c:	f7f9 fc7c 	bl	8000b68 <__aeabi_dcmpgt>
 8007270:	2800      	cmp	r0, #0
 8007272:	d173      	bne.n	800735c <_dtoa_r+0x6c4>
 8007274:	4652      	mov	r2, sl
 8007276:	465b      	mov	r3, fp
 8007278:	4913      	ldr	r1, [pc, #76]	; (80072c8 <_dtoa_r+0x630>)
 800727a:	2000      	movs	r0, #0
 800727c:	f7f9 f82c 	bl	80002d8 <__aeabi_dsub>
 8007280:	4602      	mov	r2, r0
 8007282:	460b      	mov	r3, r1
 8007284:	4640      	mov	r0, r8
 8007286:	4649      	mov	r1, r9
 8007288:	f7f9 fc50 	bl	8000b2c <__aeabi_dcmplt>
 800728c:	2800      	cmp	r0, #0
 800728e:	f43f af35 	beq.w	80070fc <_dtoa_r+0x464>
 8007292:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007294:	1e6b      	subs	r3, r5, #1
 8007296:	930f      	str	r3, [sp, #60]	; 0x3c
 8007298:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800729c:	2b30      	cmp	r3, #48	; 0x30
 800729e:	d0f8      	beq.n	8007292 <_dtoa_r+0x5fa>
 80072a0:	9700      	str	r7, [sp, #0]
 80072a2:	e049      	b.n	8007338 <_dtoa_r+0x6a0>
 80072a4:	4b05      	ldr	r3, [pc, #20]	; (80072bc <_dtoa_r+0x624>)
 80072a6:	f7f9 f9cf 	bl	8000648 <__aeabi_dmul>
 80072aa:	4680      	mov	r8, r0
 80072ac:	4689      	mov	r9, r1
 80072ae:	e7bd      	b.n	800722c <_dtoa_r+0x594>
 80072b0:	08009d20 	.word	0x08009d20
 80072b4:	08009cf8 	.word	0x08009cf8
 80072b8:	3ff00000 	.word	0x3ff00000
 80072bc:	40240000 	.word	0x40240000
 80072c0:	401c0000 	.word	0x401c0000
 80072c4:	40140000 	.word	0x40140000
 80072c8:	3fe00000 	.word	0x3fe00000
 80072cc:	9d01      	ldr	r5, [sp, #4]
 80072ce:	4656      	mov	r6, sl
 80072d0:	465f      	mov	r7, fp
 80072d2:	4642      	mov	r2, r8
 80072d4:	464b      	mov	r3, r9
 80072d6:	4630      	mov	r0, r6
 80072d8:	4639      	mov	r1, r7
 80072da:	f7f9 fadf 	bl	800089c <__aeabi_ddiv>
 80072de:	f7f9 fc63 	bl	8000ba8 <__aeabi_d2iz>
 80072e2:	4682      	mov	sl, r0
 80072e4:	f7f9 f946 	bl	8000574 <__aeabi_i2d>
 80072e8:	4642      	mov	r2, r8
 80072ea:	464b      	mov	r3, r9
 80072ec:	f7f9 f9ac 	bl	8000648 <__aeabi_dmul>
 80072f0:	4602      	mov	r2, r0
 80072f2:	460b      	mov	r3, r1
 80072f4:	4630      	mov	r0, r6
 80072f6:	4639      	mov	r1, r7
 80072f8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80072fc:	f7f8 ffec 	bl	80002d8 <__aeabi_dsub>
 8007300:	f805 6b01 	strb.w	r6, [r5], #1
 8007304:	9e01      	ldr	r6, [sp, #4]
 8007306:	9f03      	ldr	r7, [sp, #12]
 8007308:	1bae      	subs	r6, r5, r6
 800730a:	42b7      	cmp	r7, r6
 800730c:	4602      	mov	r2, r0
 800730e:	460b      	mov	r3, r1
 8007310:	d135      	bne.n	800737e <_dtoa_r+0x6e6>
 8007312:	f7f8 ffe3 	bl	80002dc <__adddf3>
 8007316:	4642      	mov	r2, r8
 8007318:	464b      	mov	r3, r9
 800731a:	4606      	mov	r6, r0
 800731c:	460f      	mov	r7, r1
 800731e:	f7f9 fc23 	bl	8000b68 <__aeabi_dcmpgt>
 8007322:	b9d0      	cbnz	r0, 800735a <_dtoa_r+0x6c2>
 8007324:	4642      	mov	r2, r8
 8007326:	464b      	mov	r3, r9
 8007328:	4630      	mov	r0, r6
 800732a:	4639      	mov	r1, r7
 800732c:	f7f9 fbf4 	bl	8000b18 <__aeabi_dcmpeq>
 8007330:	b110      	cbz	r0, 8007338 <_dtoa_r+0x6a0>
 8007332:	f01a 0f01 	tst.w	sl, #1
 8007336:	d110      	bne.n	800735a <_dtoa_r+0x6c2>
 8007338:	4620      	mov	r0, r4
 800733a:	ee18 1a10 	vmov	r1, s16
 800733e:	f000 fe75 	bl	800802c <_Bfree>
 8007342:	2300      	movs	r3, #0
 8007344:	9800      	ldr	r0, [sp, #0]
 8007346:	702b      	strb	r3, [r5, #0]
 8007348:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800734a:	3001      	adds	r0, #1
 800734c:	6018      	str	r0, [r3, #0]
 800734e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007350:	2b00      	cmp	r3, #0
 8007352:	f43f acf1 	beq.w	8006d38 <_dtoa_r+0xa0>
 8007356:	601d      	str	r5, [r3, #0]
 8007358:	e4ee      	b.n	8006d38 <_dtoa_r+0xa0>
 800735a:	9f00      	ldr	r7, [sp, #0]
 800735c:	462b      	mov	r3, r5
 800735e:	461d      	mov	r5, r3
 8007360:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007364:	2a39      	cmp	r2, #57	; 0x39
 8007366:	d106      	bne.n	8007376 <_dtoa_r+0x6de>
 8007368:	9a01      	ldr	r2, [sp, #4]
 800736a:	429a      	cmp	r2, r3
 800736c:	d1f7      	bne.n	800735e <_dtoa_r+0x6c6>
 800736e:	9901      	ldr	r1, [sp, #4]
 8007370:	2230      	movs	r2, #48	; 0x30
 8007372:	3701      	adds	r7, #1
 8007374:	700a      	strb	r2, [r1, #0]
 8007376:	781a      	ldrb	r2, [r3, #0]
 8007378:	3201      	adds	r2, #1
 800737a:	701a      	strb	r2, [r3, #0]
 800737c:	e790      	b.n	80072a0 <_dtoa_r+0x608>
 800737e:	4ba6      	ldr	r3, [pc, #664]	; (8007618 <_dtoa_r+0x980>)
 8007380:	2200      	movs	r2, #0
 8007382:	f7f9 f961 	bl	8000648 <__aeabi_dmul>
 8007386:	2200      	movs	r2, #0
 8007388:	2300      	movs	r3, #0
 800738a:	4606      	mov	r6, r0
 800738c:	460f      	mov	r7, r1
 800738e:	f7f9 fbc3 	bl	8000b18 <__aeabi_dcmpeq>
 8007392:	2800      	cmp	r0, #0
 8007394:	d09d      	beq.n	80072d2 <_dtoa_r+0x63a>
 8007396:	e7cf      	b.n	8007338 <_dtoa_r+0x6a0>
 8007398:	9a08      	ldr	r2, [sp, #32]
 800739a:	2a00      	cmp	r2, #0
 800739c:	f000 80d7 	beq.w	800754e <_dtoa_r+0x8b6>
 80073a0:	9a06      	ldr	r2, [sp, #24]
 80073a2:	2a01      	cmp	r2, #1
 80073a4:	f300 80ba 	bgt.w	800751c <_dtoa_r+0x884>
 80073a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80073aa:	2a00      	cmp	r2, #0
 80073ac:	f000 80b2 	beq.w	8007514 <_dtoa_r+0x87c>
 80073b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80073b4:	9e07      	ldr	r6, [sp, #28]
 80073b6:	9d04      	ldr	r5, [sp, #16]
 80073b8:	9a04      	ldr	r2, [sp, #16]
 80073ba:	441a      	add	r2, r3
 80073bc:	9204      	str	r2, [sp, #16]
 80073be:	9a05      	ldr	r2, [sp, #20]
 80073c0:	2101      	movs	r1, #1
 80073c2:	441a      	add	r2, r3
 80073c4:	4620      	mov	r0, r4
 80073c6:	9205      	str	r2, [sp, #20]
 80073c8:	f000 ff32 	bl	8008230 <__i2b>
 80073cc:	4607      	mov	r7, r0
 80073ce:	2d00      	cmp	r5, #0
 80073d0:	dd0c      	ble.n	80073ec <_dtoa_r+0x754>
 80073d2:	9b05      	ldr	r3, [sp, #20]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	dd09      	ble.n	80073ec <_dtoa_r+0x754>
 80073d8:	42ab      	cmp	r3, r5
 80073da:	9a04      	ldr	r2, [sp, #16]
 80073dc:	bfa8      	it	ge
 80073de:	462b      	movge	r3, r5
 80073e0:	1ad2      	subs	r2, r2, r3
 80073e2:	9204      	str	r2, [sp, #16]
 80073e4:	9a05      	ldr	r2, [sp, #20]
 80073e6:	1aed      	subs	r5, r5, r3
 80073e8:	1ad3      	subs	r3, r2, r3
 80073ea:	9305      	str	r3, [sp, #20]
 80073ec:	9b07      	ldr	r3, [sp, #28]
 80073ee:	b31b      	cbz	r3, 8007438 <_dtoa_r+0x7a0>
 80073f0:	9b08      	ldr	r3, [sp, #32]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	f000 80af 	beq.w	8007556 <_dtoa_r+0x8be>
 80073f8:	2e00      	cmp	r6, #0
 80073fa:	dd13      	ble.n	8007424 <_dtoa_r+0x78c>
 80073fc:	4639      	mov	r1, r7
 80073fe:	4632      	mov	r2, r6
 8007400:	4620      	mov	r0, r4
 8007402:	f000 ffd5 	bl	80083b0 <__pow5mult>
 8007406:	ee18 2a10 	vmov	r2, s16
 800740a:	4601      	mov	r1, r0
 800740c:	4607      	mov	r7, r0
 800740e:	4620      	mov	r0, r4
 8007410:	f000 ff24 	bl	800825c <__multiply>
 8007414:	ee18 1a10 	vmov	r1, s16
 8007418:	4680      	mov	r8, r0
 800741a:	4620      	mov	r0, r4
 800741c:	f000 fe06 	bl	800802c <_Bfree>
 8007420:	ee08 8a10 	vmov	s16, r8
 8007424:	9b07      	ldr	r3, [sp, #28]
 8007426:	1b9a      	subs	r2, r3, r6
 8007428:	d006      	beq.n	8007438 <_dtoa_r+0x7a0>
 800742a:	ee18 1a10 	vmov	r1, s16
 800742e:	4620      	mov	r0, r4
 8007430:	f000 ffbe 	bl	80083b0 <__pow5mult>
 8007434:	ee08 0a10 	vmov	s16, r0
 8007438:	2101      	movs	r1, #1
 800743a:	4620      	mov	r0, r4
 800743c:	f000 fef8 	bl	8008230 <__i2b>
 8007440:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007442:	2b00      	cmp	r3, #0
 8007444:	4606      	mov	r6, r0
 8007446:	f340 8088 	ble.w	800755a <_dtoa_r+0x8c2>
 800744a:	461a      	mov	r2, r3
 800744c:	4601      	mov	r1, r0
 800744e:	4620      	mov	r0, r4
 8007450:	f000 ffae 	bl	80083b0 <__pow5mult>
 8007454:	9b06      	ldr	r3, [sp, #24]
 8007456:	2b01      	cmp	r3, #1
 8007458:	4606      	mov	r6, r0
 800745a:	f340 8081 	ble.w	8007560 <_dtoa_r+0x8c8>
 800745e:	f04f 0800 	mov.w	r8, #0
 8007462:	6933      	ldr	r3, [r6, #16]
 8007464:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007468:	6918      	ldr	r0, [r3, #16]
 800746a:	f000 fe91 	bl	8008190 <__hi0bits>
 800746e:	f1c0 0020 	rsb	r0, r0, #32
 8007472:	9b05      	ldr	r3, [sp, #20]
 8007474:	4418      	add	r0, r3
 8007476:	f010 001f 	ands.w	r0, r0, #31
 800747a:	f000 8092 	beq.w	80075a2 <_dtoa_r+0x90a>
 800747e:	f1c0 0320 	rsb	r3, r0, #32
 8007482:	2b04      	cmp	r3, #4
 8007484:	f340 808a 	ble.w	800759c <_dtoa_r+0x904>
 8007488:	f1c0 001c 	rsb	r0, r0, #28
 800748c:	9b04      	ldr	r3, [sp, #16]
 800748e:	4403      	add	r3, r0
 8007490:	9304      	str	r3, [sp, #16]
 8007492:	9b05      	ldr	r3, [sp, #20]
 8007494:	4403      	add	r3, r0
 8007496:	4405      	add	r5, r0
 8007498:	9305      	str	r3, [sp, #20]
 800749a:	9b04      	ldr	r3, [sp, #16]
 800749c:	2b00      	cmp	r3, #0
 800749e:	dd07      	ble.n	80074b0 <_dtoa_r+0x818>
 80074a0:	ee18 1a10 	vmov	r1, s16
 80074a4:	461a      	mov	r2, r3
 80074a6:	4620      	mov	r0, r4
 80074a8:	f000 ffdc 	bl	8008464 <__lshift>
 80074ac:	ee08 0a10 	vmov	s16, r0
 80074b0:	9b05      	ldr	r3, [sp, #20]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	dd05      	ble.n	80074c2 <_dtoa_r+0x82a>
 80074b6:	4631      	mov	r1, r6
 80074b8:	461a      	mov	r2, r3
 80074ba:	4620      	mov	r0, r4
 80074bc:	f000 ffd2 	bl	8008464 <__lshift>
 80074c0:	4606      	mov	r6, r0
 80074c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d06e      	beq.n	80075a6 <_dtoa_r+0x90e>
 80074c8:	ee18 0a10 	vmov	r0, s16
 80074cc:	4631      	mov	r1, r6
 80074ce:	f001 f839 	bl	8008544 <__mcmp>
 80074d2:	2800      	cmp	r0, #0
 80074d4:	da67      	bge.n	80075a6 <_dtoa_r+0x90e>
 80074d6:	9b00      	ldr	r3, [sp, #0]
 80074d8:	3b01      	subs	r3, #1
 80074da:	ee18 1a10 	vmov	r1, s16
 80074de:	9300      	str	r3, [sp, #0]
 80074e0:	220a      	movs	r2, #10
 80074e2:	2300      	movs	r3, #0
 80074e4:	4620      	mov	r0, r4
 80074e6:	f000 fdc3 	bl	8008070 <__multadd>
 80074ea:	9b08      	ldr	r3, [sp, #32]
 80074ec:	ee08 0a10 	vmov	s16, r0
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	f000 81b1 	beq.w	8007858 <_dtoa_r+0xbc0>
 80074f6:	2300      	movs	r3, #0
 80074f8:	4639      	mov	r1, r7
 80074fa:	220a      	movs	r2, #10
 80074fc:	4620      	mov	r0, r4
 80074fe:	f000 fdb7 	bl	8008070 <__multadd>
 8007502:	9b02      	ldr	r3, [sp, #8]
 8007504:	2b00      	cmp	r3, #0
 8007506:	4607      	mov	r7, r0
 8007508:	f300 808e 	bgt.w	8007628 <_dtoa_r+0x990>
 800750c:	9b06      	ldr	r3, [sp, #24]
 800750e:	2b02      	cmp	r3, #2
 8007510:	dc51      	bgt.n	80075b6 <_dtoa_r+0x91e>
 8007512:	e089      	b.n	8007628 <_dtoa_r+0x990>
 8007514:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007516:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800751a:	e74b      	b.n	80073b4 <_dtoa_r+0x71c>
 800751c:	9b03      	ldr	r3, [sp, #12]
 800751e:	1e5e      	subs	r6, r3, #1
 8007520:	9b07      	ldr	r3, [sp, #28]
 8007522:	42b3      	cmp	r3, r6
 8007524:	bfbf      	itttt	lt
 8007526:	9b07      	ldrlt	r3, [sp, #28]
 8007528:	9607      	strlt	r6, [sp, #28]
 800752a:	1af2      	sublt	r2, r6, r3
 800752c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800752e:	bfb6      	itet	lt
 8007530:	189b      	addlt	r3, r3, r2
 8007532:	1b9e      	subge	r6, r3, r6
 8007534:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007536:	9b03      	ldr	r3, [sp, #12]
 8007538:	bfb8      	it	lt
 800753a:	2600      	movlt	r6, #0
 800753c:	2b00      	cmp	r3, #0
 800753e:	bfb7      	itett	lt
 8007540:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007544:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007548:	1a9d      	sublt	r5, r3, r2
 800754a:	2300      	movlt	r3, #0
 800754c:	e734      	b.n	80073b8 <_dtoa_r+0x720>
 800754e:	9e07      	ldr	r6, [sp, #28]
 8007550:	9d04      	ldr	r5, [sp, #16]
 8007552:	9f08      	ldr	r7, [sp, #32]
 8007554:	e73b      	b.n	80073ce <_dtoa_r+0x736>
 8007556:	9a07      	ldr	r2, [sp, #28]
 8007558:	e767      	b.n	800742a <_dtoa_r+0x792>
 800755a:	9b06      	ldr	r3, [sp, #24]
 800755c:	2b01      	cmp	r3, #1
 800755e:	dc18      	bgt.n	8007592 <_dtoa_r+0x8fa>
 8007560:	f1ba 0f00 	cmp.w	sl, #0
 8007564:	d115      	bne.n	8007592 <_dtoa_r+0x8fa>
 8007566:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800756a:	b993      	cbnz	r3, 8007592 <_dtoa_r+0x8fa>
 800756c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007570:	0d1b      	lsrs	r3, r3, #20
 8007572:	051b      	lsls	r3, r3, #20
 8007574:	b183      	cbz	r3, 8007598 <_dtoa_r+0x900>
 8007576:	9b04      	ldr	r3, [sp, #16]
 8007578:	3301      	adds	r3, #1
 800757a:	9304      	str	r3, [sp, #16]
 800757c:	9b05      	ldr	r3, [sp, #20]
 800757e:	3301      	adds	r3, #1
 8007580:	9305      	str	r3, [sp, #20]
 8007582:	f04f 0801 	mov.w	r8, #1
 8007586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007588:	2b00      	cmp	r3, #0
 800758a:	f47f af6a 	bne.w	8007462 <_dtoa_r+0x7ca>
 800758e:	2001      	movs	r0, #1
 8007590:	e76f      	b.n	8007472 <_dtoa_r+0x7da>
 8007592:	f04f 0800 	mov.w	r8, #0
 8007596:	e7f6      	b.n	8007586 <_dtoa_r+0x8ee>
 8007598:	4698      	mov	r8, r3
 800759a:	e7f4      	b.n	8007586 <_dtoa_r+0x8ee>
 800759c:	f43f af7d 	beq.w	800749a <_dtoa_r+0x802>
 80075a0:	4618      	mov	r0, r3
 80075a2:	301c      	adds	r0, #28
 80075a4:	e772      	b.n	800748c <_dtoa_r+0x7f4>
 80075a6:	9b03      	ldr	r3, [sp, #12]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	dc37      	bgt.n	800761c <_dtoa_r+0x984>
 80075ac:	9b06      	ldr	r3, [sp, #24]
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	dd34      	ble.n	800761c <_dtoa_r+0x984>
 80075b2:	9b03      	ldr	r3, [sp, #12]
 80075b4:	9302      	str	r3, [sp, #8]
 80075b6:	9b02      	ldr	r3, [sp, #8]
 80075b8:	b96b      	cbnz	r3, 80075d6 <_dtoa_r+0x93e>
 80075ba:	4631      	mov	r1, r6
 80075bc:	2205      	movs	r2, #5
 80075be:	4620      	mov	r0, r4
 80075c0:	f000 fd56 	bl	8008070 <__multadd>
 80075c4:	4601      	mov	r1, r0
 80075c6:	4606      	mov	r6, r0
 80075c8:	ee18 0a10 	vmov	r0, s16
 80075cc:	f000 ffba 	bl	8008544 <__mcmp>
 80075d0:	2800      	cmp	r0, #0
 80075d2:	f73f adbb 	bgt.w	800714c <_dtoa_r+0x4b4>
 80075d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075d8:	9d01      	ldr	r5, [sp, #4]
 80075da:	43db      	mvns	r3, r3
 80075dc:	9300      	str	r3, [sp, #0]
 80075de:	f04f 0800 	mov.w	r8, #0
 80075e2:	4631      	mov	r1, r6
 80075e4:	4620      	mov	r0, r4
 80075e6:	f000 fd21 	bl	800802c <_Bfree>
 80075ea:	2f00      	cmp	r7, #0
 80075ec:	f43f aea4 	beq.w	8007338 <_dtoa_r+0x6a0>
 80075f0:	f1b8 0f00 	cmp.w	r8, #0
 80075f4:	d005      	beq.n	8007602 <_dtoa_r+0x96a>
 80075f6:	45b8      	cmp	r8, r7
 80075f8:	d003      	beq.n	8007602 <_dtoa_r+0x96a>
 80075fa:	4641      	mov	r1, r8
 80075fc:	4620      	mov	r0, r4
 80075fe:	f000 fd15 	bl	800802c <_Bfree>
 8007602:	4639      	mov	r1, r7
 8007604:	4620      	mov	r0, r4
 8007606:	f000 fd11 	bl	800802c <_Bfree>
 800760a:	e695      	b.n	8007338 <_dtoa_r+0x6a0>
 800760c:	2600      	movs	r6, #0
 800760e:	4637      	mov	r7, r6
 8007610:	e7e1      	b.n	80075d6 <_dtoa_r+0x93e>
 8007612:	9700      	str	r7, [sp, #0]
 8007614:	4637      	mov	r7, r6
 8007616:	e599      	b.n	800714c <_dtoa_r+0x4b4>
 8007618:	40240000 	.word	0x40240000
 800761c:	9b08      	ldr	r3, [sp, #32]
 800761e:	2b00      	cmp	r3, #0
 8007620:	f000 80ca 	beq.w	80077b8 <_dtoa_r+0xb20>
 8007624:	9b03      	ldr	r3, [sp, #12]
 8007626:	9302      	str	r3, [sp, #8]
 8007628:	2d00      	cmp	r5, #0
 800762a:	dd05      	ble.n	8007638 <_dtoa_r+0x9a0>
 800762c:	4639      	mov	r1, r7
 800762e:	462a      	mov	r2, r5
 8007630:	4620      	mov	r0, r4
 8007632:	f000 ff17 	bl	8008464 <__lshift>
 8007636:	4607      	mov	r7, r0
 8007638:	f1b8 0f00 	cmp.w	r8, #0
 800763c:	d05b      	beq.n	80076f6 <_dtoa_r+0xa5e>
 800763e:	6879      	ldr	r1, [r7, #4]
 8007640:	4620      	mov	r0, r4
 8007642:	f000 fcb3 	bl	8007fac <_Balloc>
 8007646:	4605      	mov	r5, r0
 8007648:	b928      	cbnz	r0, 8007656 <_dtoa_r+0x9be>
 800764a:	4b87      	ldr	r3, [pc, #540]	; (8007868 <_dtoa_r+0xbd0>)
 800764c:	4602      	mov	r2, r0
 800764e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007652:	f7ff bb3b 	b.w	8006ccc <_dtoa_r+0x34>
 8007656:	693a      	ldr	r2, [r7, #16]
 8007658:	3202      	adds	r2, #2
 800765a:	0092      	lsls	r2, r2, #2
 800765c:	f107 010c 	add.w	r1, r7, #12
 8007660:	300c      	adds	r0, #12
 8007662:	f000 fc95 	bl	8007f90 <memcpy>
 8007666:	2201      	movs	r2, #1
 8007668:	4629      	mov	r1, r5
 800766a:	4620      	mov	r0, r4
 800766c:	f000 fefa 	bl	8008464 <__lshift>
 8007670:	9b01      	ldr	r3, [sp, #4]
 8007672:	f103 0901 	add.w	r9, r3, #1
 8007676:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800767a:	4413      	add	r3, r2
 800767c:	9305      	str	r3, [sp, #20]
 800767e:	f00a 0301 	and.w	r3, sl, #1
 8007682:	46b8      	mov	r8, r7
 8007684:	9304      	str	r3, [sp, #16]
 8007686:	4607      	mov	r7, r0
 8007688:	4631      	mov	r1, r6
 800768a:	ee18 0a10 	vmov	r0, s16
 800768e:	f7ff fa77 	bl	8006b80 <quorem>
 8007692:	4641      	mov	r1, r8
 8007694:	9002      	str	r0, [sp, #8]
 8007696:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800769a:	ee18 0a10 	vmov	r0, s16
 800769e:	f000 ff51 	bl	8008544 <__mcmp>
 80076a2:	463a      	mov	r2, r7
 80076a4:	9003      	str	r0, [sp, #12]
 80076a6:	4631      	mov	r1, r6
 80076a8:	4620      	mov	r0, r4
 80076aa:	f000 ff67 	bl	800857c <__mdiff>
 80076ae:	68c2      	ldr	r2, [r0, #12]
 80076b0:	f109 3bff 	add.w	fp, r9, #4294967295
 80076b4:	4605      	mov	r5, r0
 80076b6:	bb02      	cbnz	r2, 80076fa <_dtoa_r+0xa62>
 80076b8:	4601      	mov	r1, r0
 80076ba:	ee18 0a10 	vmov	r0, s16
 80076be:	f000 ff41 	bl	8008544 <__mcmp>
 80076c2:	4602      	mov	r2, r0
 80076c4:	4629      	mov	r1, r5
 80076c6:	4620      	mov	r0, r4
 80076c8:	9207      	str	r2, [sp, #28]
 80076ca:	f000 fcaf 	bl	800802c <_Bfree>
 80076ce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80076d2:	ea43 0102 	orr.w	r1, r3, r2
 80076d6:	9b04      	ldr	r3, [sp, #16]
 80076d8:	430b      	orrs	r3, r1
 80076da:	464d      	mov	r5, r9
 80076dc:	d10f      	bne.n	80076fe <_dtoa_r+0xa66>
 80076de:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80076e2:	d02a      	beq.n	800773a <_dtoa_r+0xaa2>
 80076e4:	9b03      	ldr	r3, [sp, #12]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	dd02      	ble.n	80076f0 <_dtoa_r+0xa58>
 80076ea:	9b02      	ldr	r3, [sp, #8]
 80076ec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80076f0:	f88b a000 	strb.w	sl, [fp]
 80076f4:	e775      	b.n	80075e2 <_dtoa_r+0x94a>
 80076f6:	4638      	mov	r0, r7
 80076f8:	e7ba      	b.n	8007670 <_dtoa_r+0x9d8>
 80076fa:	2201      	movs	r2, #1
 80076fc:	e7e2      	b.n	80076c4 <_dtoa_r+0xa2c>
 80076fe:	9b03      	ldr	r3, [sp, #12]
 8007700:	2b00      	cmp	r3, #0
 8007702:	db04      	blt.n	800770e <_dtoa_r+0xa76>
 8007704:	9906      	ldr	r1, [sp, #24]
 8007706:	430b      	orrs	r3, r1
 8007708:	9904      	ldr	r1, [sp, #16]
 800770a:	430b      	orrs	r3, r1
 800770c:	d122      	bne.n	8007754 <_dtoa_r+0xabc>
 800770e:	2a00      	cmp	r2, #0
 8007710:	ddee      	ble.n	80076f0 <_dtoa_r+0xa58>
 8007712:	ee18 1a10 	vmov	r1, s16
 8007716:	2201      	movs	r2, #1
 8007718:	4620      	mov	r0, r4
 800771a:	f000 fea3 	bl	8008464 <__lshift>
 800771e:	4631      	mov	r1, r6
 8007720:	ee08 0a10 	vmov	s16, r0
 8007724:	f000 ff0e 	bl	8008544 <__mcmp>
 8007728:	2800      	cmp	r0, #0
 800772a:	dc03      	bgt.n	8007734 <_dtoa_r+0xa9c>
 800772c:	d1e0      	bne.n	80076f0 <_dtoa_r+0xa58>
 800772e:	f01a 0f01 	tst.w	sl, #1
 8007732:	d0dd      	beq.n	80076f0 <_dtoa_r+0xa58>
 8007734:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007738:	d1d7      	bne.n	80076ea <_dtoa_r+0xa52>
 800773a:	2339      	movs	r3, #57	; 0x39
 800773c:	f88b 3000 	strb.w	r3, [fp]
 8007740:	462b      	mov	r3, r5
 8007742:	461d      	mov	r5, r3
 8007744:	3b01      	subs	r3, #1
 8007746:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800774a:	2a39      	cmp	r2, #57	; 0x39
 800774c:	d071      	beq.n	8007832 <_dtoa_r+0xb9a>
 800774e:	3201      	adds	r2, #1
 8007750:	701a      	strb	r2, [r3, #0]
 8007752:	e746      	b.n	80075e2 <_dtoa_r+0x94a>
 8007754:	2a00      	cmp	r2, #0
 8007756:	dd07      	ble.n	8007768 <_dtoa_r+0xad0>
 8007758:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800775c:	d0ed      	beq.n	800773a <_dtoa_r+0xaa2>
 800775e:	f10a 0301 	add.w	r3, sl, #1
 8007762:	f88b 3000 	strb.w	r3, [fp]
 8007766:	e73c      	b.n	80075e2 <_dtoa_r+0x94a>
 8007768:	9b05      	ldr	r3, [sp, #20]
 800776a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800776e:	4599      	cmp	r9, r3
 8007770:	d047      	beq.n	8007802 <_dtoa_r+0xb6a>
 8007772:	ee18 1a10 	vmov	r1, s16
 8007776:	2300      	movs	r3, #0
 8007778:	220a      	movs	r2, #10
 800777a:	4620      	mov	r0, r4
 800777c:	f000 fc78 	bl	8008070 <__multadd>
 8007780:	45b8      	cmp	r8, r7
 8007782:	ee08 0a10 	vmov	s16, r0
 8007786:	f04f 0300 	mov.w	r3, #0
 800778a:	f04f 020a 	mov.w	r2, #10
 800778e:	4641      	mov	r1, r8
 8007790:	4620      	mov	r0, r4
 8007792:	d106      	bne.n	80077a2 <_dtoa_r+0xb0a>
 8007794:	f000 fc6c 	bl	8008070 <__multadd>
 8007798:	4680      	mov	r8, r0
 800779a:	4607      	mov	r7, r0
 800779c:	f109 0901 	add.w	r9, r9, #1
 80077a0:	e772      	b.n	8007688 <_dtoa_r+0x9f0>
 80077a2:	f000 fc65 	bl	8008070 <__multadd>
 80077a6:	4639      	mov	r1, r7
 80077a8:	4680      	mov	r8, r0
 80077aa:	2300      	movs	r3, #0
 80077ac:	220a      	movs	r2, #10
 80077ae:	4620      	mov	r0, r4
 80077b0:	f000 fc5e 	bl	8008070 <__multadd>
 80077b4:	4607      	mov	r7, r0
 80077b6:	e7f1      	b.n	800779c <_dtoa_r+0xb04>
 80077b8:	9b03      	ldr	r3, [sp, #12]
 80077ba:	9302      	str	r3, [sp, #8]
 80077bc:	9d01      	ldr	r5, [sp, #4]
 80077be:	ee18 0a10 	vmov	r0, s16
 80077c2:	4631      	mov	r1, r6
 80077c4:	f7ff f9dc 	bl	8006b80 <quorem>
 80077c8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80077cc:	9b01      	ldr	r3, [sp, #4]
 80077ce:	f805 ab01 	strb.w	sl, [r5], #1
 80077d2:	1aea      	subs	r2, r5, r3
 80077d4:	9b02      	ldr	r3, [sp, #8]
 80077d6:	4293      	cmp	r3, r2
 80077d8:	dd09      	ble.n	80077ee <_dtoa_r+0xb56>
 80077da:	ee18 1a10 	vmov	r1, s16
 80077de:	2300      	movs	r3, #0
 80077e0:	220a      	movs	r2, #10
 80077e2:	4620      	mov	r0, r4
 80077e4:	f000 fc44 	bl	8008070 <__multadd>
 80077e8:	ee08 0a10 	vmov	s16, r0
 80077ec:	e7e7      	b.n	80077be <_dtoa_r+0xb26>
 80077ee:	9b02      	ldr	r3, [sp, #8]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	bfc8      	it	gt
 80077f4:	461d      	movgt	r5, r3
 80077f6:	9b01      	ldr	r3, [sp, #4]
 80077f8:	bfd8      	it	le
 80077fa:	2501      	movle	r5, #1
 80077fc:	441d      	add	r5, r3
 80077fe:	f04f 0800 	mov.w	r8, #0
 8007802:	ee18 1a10 	vmov	r1, s16
 8007806:	2201      	movs	r2, #1
 8007808:	4620      	mov	r0, r4
 800780a:	f000 fe2b 	bl	8008464 <__lshift>
 800780e:	4631      	mov	r1, r6
 8007810:	ee08 0a10 	vmov	s16, r0
 8007814:	f000 fe96 	bl	8008544 <__mcmp>
 8007818:	2800      	cmp	r0, #0
 800781a:	dc91      	bgt.n	8007740 <_dtoa_r+0xaa8>
 800781c:	d102      	bne.n	8007824 <_dtoa_r+0xb8c>
 800781e:	f01a 0f01 	tst.w	sl, #1
 8007822:	d18d      	bne.n	8007740 <_dtoa_r+0xaa8>
 8007824:	462b      	mov	r3, r5
 8007826:	461d      	mov	r5, r3
 8007828:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800782c:	2a30      	cmp	r2, #48	; 0x30
 800782e:	d0fa      	beq.n	8007826 <_dtoa_r+0xb8e>
 8007830:	e6d7      	b.n	80075e2 <_dtoa_r+0x94a>
 8007832:	9a01      	ldr	r2, [sp, #4]
 8007834:	429a      	cmp	r2, r3
 8007836:	d184      	bne.n	8007742 <_dtoa_r+0xaaa>
 8007838:	9b00      	ldr	r3, [sp, #0]
 800783a:	3301      	adds	r3, #1
 800783c:	9300      	str	r3, [sp, #0]
 800783e:	2331      	movs	r3, #49	; 0x31
 8007840:	7013      	strb	r3, [r2, #0]
 8007842:	e6ce      	b.n	80075e2 <_dtoa_r+0x94a>
 8007844:	4b09      	ldr	r3, [pc, #36]	; (800786c <_dtoa_r+0xbd4>)
 8007846:	f7ff ba95 	b.w	8006d74 <_dtoa_r+0xdc>
 800784a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800784c:	2b00      	cmp	r3, #0
 800784e:	f47f aa6e 	bne.w	8006d2e <_dtoa_r+0x96>
 8007852:	4b07      	ldr	r3, [pc, #28]	; (8007870 <_dtoa_r+0xbd8>)
 8007854:	f7ff ba8e 	b.w	8006d74 <_dtoa_r+0xdc>
 8007858:	9b02      	ldr	r3, [sp, #8]
 800785a:	2b00      	cmp	r3, #0
 800785c:	dcae      	bgt.n	80077bc <_dtoa_r+0xb24>
 800785e:	9b06      	ldr	r3, [sp, #24]
 8007860:	2b02      	cmp	r3, #2
 8007862:	f73f aea8 	bgt.w	80075b6 <_dtoa_r+0x91e>
 8007866:	e7a9      	b.n	80077bc <_dtoa_r+0xb24>
 8007868:	08009c10 	.word	0x08009c10
 800786c:	08009a14 	.word	0x08009a14
 8007870:	08009b91 	.word	0x08009b91

08007874 <rshift>:
 8007874:	6903      	ldr	r3, [r0, #16]
 8007876:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800787a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800787e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007882:	f100 0414 	add.w	r4, r0, #20
 8007886:	dd45      	ble.n	8007914 <rshift+0xa0>
 8007888:	f011 011f 	ands.w	r1, r1, #31
 800788c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007890:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007894:	d10c      	bne.n	80078b0 <rshift+0x3c>
 8007896:	f100 0710 	add.w	r7, r0, #16
 800789a:	4629      	mov	r1, r5
 800789c:	42b1      	cmp	r1, r6
 800789e:	d334      	bcc.n	800790a <rshift+0x96>
 80078a0:	1a9b      	subs	r3, r3, r2
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	1eea      	subs	r2, r5, #3
 80078a6:	4296      	cmp	r6, r2
 80078a8:	bf38      	it	cc
 80078aa:	2300      	movcc	r3, #0
 80078ac:	4423      	add	r3, r4
 80078ae:	e015      	b.n	80078dc <rshift+0x68>
 80078b0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80078b4:	f1c1 0820 	rsb	r8, r1, #32
 80078b8:	40cf      	lsrs	r7, r1
 80078ba:	f105 0e04 	add.w	lr, r5, #4
 80078be:	46a1      	mov	r9, r4
 80078c0:	4576      	cmp	r6, lr
 80078c2:	46f4      	mov	ip, lr
 80078c4:	d815      	bhi.n	80078f2 <rshift+0x7e>
 80078c6:	1a9a      	subs	r2, r3, r2
 80078c8:	0092      	lsls	r2, r2, #2
 80078ca:	3a04      	subs	r2, #4
 80078cc:	3501      	adds	r5, #1
 80078ce:	42ae      	cmp	r6, r5
 80078d0:	bf38      	it	cc
 80078d2:	2200      	movcc	r2, #0
 80078d4:	18a3      	adds	r3, r4, r2
 80078d6:	50a7      	str	r7, [r4, r2]
 80078d8:	b107      	cbz	r7, 80078dc <rshift+0x68>
 80078da:	3304      	adds	r3, #4
 80078dc:	1b1a      	subs	r2, r3, r4
 80078de:	42a3      	cmp	r3, r4
 80078e0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80078e4:	bf08      	it	eq
 80078e6:	2300      	moveq	r3, #0
 80078e8:	6102      	str	r2, [r0, #16]
 80078ea:	bf08      	it	eq
 80078ec:	6143      	streq	r3, [r0, #20]
 80078ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80078f2:	f8dc c000 	ldr.w	ip, [ip]
 80078f6:	fa0c fc08 	lsl.w	ip, ip, r8
 80078fa:	ea4c 0707 	orr.w	r7, ip, r7
 80078fe:	f849 7b04 	str.w	r7, [r9], #4
 8007902:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007906:	40cf      	lsrs	r7, r1
 8007908:	e7da      	b.n	80078c0 <rshift+0x4c>
 800790a:	f851 cb04 	ldr.w	ip, [r1], #4
 800790e:	f847 cf04 	str.w	ip, [r7, #4]!
 8007912:	e7c3      	b.n	800789c <rshift+0x28>
 8007914:	4623      	mov	r3, r4
 8007916:	e7e1      	b.n	80078dc <rshift+0x68>

08007918 <__hexdig_fun>:
 8007918:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800791c:	2b09      	cmp	r3, #9
 800791e:	d802      	bhi.n	8007926 <__hexdig_fun+0xe>
 8007920:	3820      	subs	r0, #32
 8007922:	b2c0      	uxtb	r0, r0
 8007924:	4770      	bx	lr
 8007926:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800792a:	2b05      	cmp	r3, #5
 800792c:	d801      	bhi.n	8007932 <__hexdig_fun+0x1a>
 800792e:	3847      	subs	r0, #71	; 0x47
 8007930:	e7f7      	b.n	8007922 <__hexdig_fun+0xa>
 8007932:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007936:	2b05      	cmp	r3, #5
 8007938:	d801      	bhi.n	800793e <__hexdig_fun+0x26>
 800793a:	3827      	subs	r0, #39	; 0x27
 800793c:	e7f1      	b.n	8007922 <__hexdig_fun+0xa>
 800793e:	2000      	movs	r0, #0
 8007940:	4770      	bx	lr
	...

08007944 <__gethex>:
 8007944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007948:	ed2d 8b02 	vpush	{d8}
 800794c:	b089      	sub	sp, #36	; 0x24
 800794e:	ee08 0a10 	vmov	s16, r0
 8007952:	9304      	str	r3, [sp, #16]
 8007954:	4bb4      	ldr	r3, [pc, #720]	; (8007c28 <__gethex+0x2e4>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	9301      	str	r3, [sp, #4]
 800795a:	4618      	mov	r0, r3
 800795c:	468b      	mov	fp, r1
 800795e:	4690      	mov	r8, r2
 8007960:	f7f8 fc5e 	bl	8000220 <strlen>
 8007964:	9b01      	ldr	r3, [sp, #4]
 8007966:	f8db 2000 	ldr.w	r2, [fp]
 800796a:	4403      	add	r3, r0
 800796c:	4682      	mov	sl, r0
 800796e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007972:	9305      	str	r3, [sp, #20]
 8007974:	1c93      	adds	r3, r2, #2
 8007976:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800797a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800797e:	32fe      	adds	r2, #254	; 0xfe
 8007980:	18d1      	adds	r1, r2, r3
 8007982:	461f      	mov	r7, r3
 8007984:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007988:	9100      	str	r1, [sp, #0]
 800798a:	2830      	cmp	r0, #48	; 0x30
 800798c:	d0f8      	beq.n	8007980 <__gethex+0x3c>
 800798e:	f7ff ffc3 	bl	8007918 <__hexdig_fun>
 8007992:	4604      	mov	r4, r0
 8007994:	2800      	cmp	r0, #0
 8007996:	d13a      	bne.n	8007a0e <__gethex+0xca>
 8007998:	9901      	ldr	r1, [sp, #4]
 800799a:	4652      	mov	r2, sl
 800799c:	4638      	mov	r0, r7
 800799e:	f001 fa33 	bl	8008e08 <strncmp>
 80079a2:	4605      	mov	r5, r0
 80079a4:	2800      	cmp	r0, #0
 80079a6:	d168      	bne.n	8007a7a <__gethex+0x136>
 80079a8:	f817 000a 	ldrb.w	r0, [r7, sl]
 80079ac:	eb07 060a 	add.w	r6, r7, sl
 80079b0:	f7ff ffb2 	bl	8007918 <__hexdig_fun>
 80079b4:	2800      	cmp	r0, #0
 80079b6:	d062      	beq.n	8007a7e <__gethex+0x13a>
 80079b8:	4633      	mov	r3, r6
 80079ba:	7818      	ldrb	r0, [r3, #0]
 80079bc:	2830      	cmp	r0, #48	; 0x30
 80079be:	461f      	mov	r7, r3
 80079c0:	f103 0301 	add.w	r3, r3, #1
 80079c4:	d0f9      	beq.n	80079ba <__gethex+0x76>
 80079c6:	f7ff ffa7 	bl	8007918 <__hexdig_fun>
 80079ca:	2301      	movs	r3, #1
 80079cc:	fab0 f480 	clz	r4, r0
 80079d0:	0964      	lsrs	r4, r4, #5
 80079d2:	4635      	mov	r5, r6
 80079d4:	9300      	str	r3, [sp, #0]
 80079d6:	463a      	mov	r2, r7
 80079d8:	4616      	mov	r6, r2
 80079da:	3201      	adds	r2, #1
 80079dc:	7830      	ldrb	r0, [r6, #0]
 80079de:	f7ff ff9b 	bl	8007918 <__hexdig_fun>
 80079e2:	2800      	cmp	r0, #0
 80079e4:	d1f8      	bne.n	80079d8 <__gethex+0x94>
 80079e6:	9901      	ldr	r1, [sp, #4]
 80079e8:	4652      	mov	r2, sl
 80079ea:	4630      	mov	r0, r6
 80079ec:	f001 fa0c 	bl	8008e08 <strncmp>
 80079f0:	b980      	cbnz	r0, 8007a14 <__gethex+0xd0>
 80079f2:	b94d      	cbnz	r5, 8007a08 <__gethex+0xc4>
 80079f4:	eb06 050a 	add.w	r5, r6, sl
 80079f8:	462a      	mov	r2, r5
 80079fa:	4616      	mov	r6, r2
 80079fc:	3201      	adds	r2, #1
 80079fe:	7830      	ldrb	r0, [r6, #0]
 8007a00:	f7ff ff8a 	bl	8007918 <__hexdig_fun>
 8007a04:	2800      	cmp	r0, #0
 8007a06:	d1f8      	bne.n	80079fa <__gethex+0xb6>
 8007a08:	1bad      	subs	r5, r5, r6
 8007a0a:	00ad      	lsls	r5, r5, #2
 8007a0c:	e004      	b.n	8007a18 <__gethex+0xd4>
 8007a0e:	2400      	movs	r4, #0
 8007a10:	4625      	mov	r5, r4
 8007a12:	e7e0      	b.n	80079d6 <__gethex+0x92>
 8007a14:	2d00      	cmp	r5, #0
 8007a16:	d1f7      	bne.n	8007a08 <__gethex+0xc4>
 8007a18:	7833      	ldrb	r3, [r6, #0]
 8007a1a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007a1e:	2b50      	cmp	r3, #80	; 0x50
 8007a20:	d13b      	bne.n	8007a9a <__gethex+0x156>
 8007a22:	7873      	ldrb	r3, [r6, #1]
 8007a24:	2b2b      	cmp	r3, #43	; 0x2b
 8007a26:	d02c      	beq.n	8007a82 <__gethex+0x13e>
 8007a28:	2b2d      	cmp	r3, #45	; 0x2d
 8007a2a:	d02e      	beq.n	8007a8a <__gethex+0x146>
 8007a2c:	1c71      	adds	r1, r6, #1
 8007a2e:	f04f 0900 	mov.w	r9, #0
 8007a32:	7808      	ldrb	r0, [r1, #0]
 8007a34:	f7ff ff70 	bl	8007918 <__hexdig_fun>
 8007a38:	1e43      	subs	r3, r0, #1
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	2b18      	cmp	r3, #24
 8007a3e:	d82c      	bhi.n	8007a9a <__gethex+0x156>
 8007a40:	f1a0 0210 	sub.w	r2, r0, #16
 8007a44:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007a48:	f7ff ff66 	bl	8007918 <__hexdig_fun>
 8007a4c:	1e43      	subs	r3, r0, #1
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	2b18      	cmp	r3, #24
 8007a52:	d91d      	bls.n	8007a90 <__gethex+0x14c>
 8007a54:	f1b9 0f00 	cmp.w	r9, #0
 8007a58:	d000      	beq.n	8007a5c <__gethex+0x118>
 8007a5a:	4252      	negs	r2, r2
 8007a5c:	4415      	add	r5, r2
 8007a5e:	f8cb 1000 	str.w	r1, [fp]
 8007a62:	b1e4      	cbz	r4, 8007a9e <__gethex+0x15a>
 8007a64:	9b00      	ldr	r3, [sp, #0]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	bf14      	ite	ne
 8007a6a:	2700      	movne	r7, #0
 8007a6c:	2706      	moveq	r7, #6
 8007a6e:	4638      	mov	r0, r7
 8007a70:	b009      	add	sp, #36	; 0x24
 8007a72:	ecbd 8b02 	vpop	{d8}
 8007a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a7a:	463e      	mov	r6, r7
 8007a7c:	4625      	mov	r5, r4
 8007a7e:	2401      	movs	r4, #1
 8007a80:	e7ca      	b.n	8007a18 <__gethex+0xd4>
 8007a82:	f04f 0900 	mov.w	r9, #0
 8007a86:	1cb1      	adds	r1, r6, #2
 8007a88:	e7d3      	b.n	8007a32 <__gethex+0xee>
 8007a8a:	f04f 0901 	mov.w	r9, #1
 8007a8e:	e7fa      	b.n	8007a86 <__gethex+0x142>
 8007a90:	230a      	movs	r3, #10
 8007a92:	fb03 0202 	mla	r2, r3, r2, r0
 8007a96:	3a10      	subs	r2, #16
 8007a98:	e7d4      	b.n	8007a44 <__gethex+0x100>
 8007a9a:	4631      	mov	r1, r6
 8007a9c:	e7df      	b.n	8007a5e <__gethex+0x11a>
 8007a9e:	1bf3      	subs	r3, r6, r7
 8007aa0:	3b01      	subs	r3, #1
 8007aa2:	4621      	mov	r1, r4
 8007aa4:	2b07      	cmp	r3, #7
 8007aa6:	dc0b      	bgt.n	8007ac0 <__gethex+0x17c>
 8007aa8:	ee18 0a10 	vmov	r0, s16
 8007aac:	f000 fa7e 	bl	8007fac <_Balloc>
 8007ab0:	4604      	mov	r4, r0
 8007ab2:	b940      	cbnz	r0, 8007ac6 <__gethex+0x182>
 8007ab4:	4b5d      	ldr	r3, [pc, #372]	; (8007c2c <__gethex+0x2e8>)
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	21de      	movs	r1, #222	; 0xde
 8007aba:	485d      	ldr	r0, [pc, #372]	; (8007c30 <__gethex+0x2ec>)
 8007abc:	f001 f9c6 	bl	8008e4c <__assert_func>
 8007ac0:	3101      	adds	r1, #1
 8007ac2:	105b      	asrs	r3, r3, #1
 8007ac4:	e7ee      	b.n	8007aa4 <__gethex+0x160>
 8007ac6:	f100 0914 	add.w	r9, r0, #20
 8007aca:	f04f 0b00 	mov.w	fp, #0
 8007ace:	f1ca 0301 	rsb	r3, sl, #1
 8007ad2:	f8cd 9008 	str.w	r9, [sp, #8]
 8007ad6:	f8cd b000 	str.w	fp, [sp]
 8007ada:	9306      	str	r3, [sp, #24]
 8007adc:	42b7      	cmp	r7, r6
 8007ade:	d340      	bcc.n	8007b62 <__gethex+0x21e>
 8007ae0:	9802      	ldr	r0, [sp, #8]
 8007ae2:	9b00      	ldr	r3, [sp, #0]
 8007ae4:	f840 3b04 	str.w	r3, [r0], #4
 8007ae8:	eba0 0009 	sub.w	r0, r0, r9
 8007aec:	1080      	asrs	r0, r0, #2
 8007aee:	0146      	lsls	r6, r0, #5
 8007af0:	6120      	str	r0, [r4, #16]
 8007af2:	4618      	mov	r0, r3
 8007af4:	f000 fb4c 	bl	8008190 <__hi0bits>
 8007af8:	1a30      	subs	r0, r6, r0
 8007afa:	f8d8 6000 	ldr.w	r6, [r8]
 8007afe:	42b0      	cmp	r0, r6
 8007b00:	dd63      	ble.n	8007bca <__gethex+0x286>
 8007b02:	1b87      	subs	r7, r0, r6
 8007b04:	4639      	mov	r1, r7
 8007b06:	4620      	mov	r0, r4
 8007b08:	f000 fef0 	bl	80088ec <__any_on>
 8007b0c:	4682      	mov	sl, r0
 8007b0e:	b1a8      	cbz	r0, 8007b3c <__gethex+0x1f8>
 8007b10:	1e7b      	subs	r3, r7, #1
 8007b12:	1159      	asrs	r1, r3, #5
 8007b14:	f003 021f 	and.w	r2, r3, #31
 8007b18:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007b1c:	f04f 0a01 	mov.w	sl, #1
 8007b20:	fa0a f202 	lsl.w	r2, sl, r2
 8007b24:	420a      	tst	r2, r1
 8007b26:	d009      	beq.n	8007b3c <__gethex+0x1f8>
 8007b28:	4553      	cmp	r3, sl
 8007b2a:	dd05      	ble.n	8007b38 <__gethex+0x1f4>
 8007b2c:	1eb9      	subs	r1, r7, #2
 8007b2e:	4620      	mov	r0, r4
 8007b30:	f000 fedc 	bl	80088ec <__any_on>
 8007b34:	2800      	cmp	r0, #0
 8007b36:	d145      	bne.n	8007bc4 <__gethex+0x280>
 8007b38:	f04f 0a02 	mov.w	sl, #2
 8007b3c:	4639      	mov	r1, r7
 8007b3e:	4620      	mov	r0, r4
 8007b40:	f7ff fe98 	bl	8007874 <rshift>
 8007b44:	443d      	add	r5, r7
 8007b46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007b4a:	42ab      	cmp	r3, r5
 8007b4c:	da4c      	bge.n	8007be8 <__gethex+0x2a4>
 8007b4e:	ee18 0a10 	vmov	r0, s16
 8007b52:	4621      	mov	r1, r4
 8007b54:	f000 fa6a 	bl	800802c <_Bfree>
 8007b58:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	6013      	str	r3, [r2, #0]
 8007b5e:	27a3      	movs	r7, #163	; 0xa3
 8007b60:	e785      	b.n	8007a6e <__gethex+0x12a>
 8007b62:	1e73      	subs	r3, r6, #1
 8007b64:	9a05      	ldr	r2, [sp, #20]
 8007b66:	9303      	str	r3, [sp, #12]
 8007b68:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d019      	beq.n	8007ba4 <__gethex+0x260>
 8007b70:	f1bb 0f20 	cmp.w	fp, #32
 8007b74:	d107      	bne.n	8007b86 <__gethex+0x242>
 8007b76:	9b02      	ldr	r3, [sp, #8]
 8007b78:	9a00      	ldr	r2, [sp, #0]
 8007b7a:	f843 2b04 	str.w	r2, [r3], #4
 8007b7e:	9302      	str	r3, [sp, #8]
 8007b80:	2300      	movs	r3, #0
 8007b82:	9300      	str	r3, [sp, #0]
 8007b84:	469b      	mov	fp, r3
 8007b86:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007b8a:	f7ff fec5 	bl	8007918 <__hexdig_fun>
 8007b8e:	9b00      	ldr	r3, [sp, #0]
 8007b90:	f000 000f 	and.w	r0, r0, #15
 8007b94:	fa00 f00b 	lsl.w	r0, r0, fp
 8007b98:	4303      	orrs	r3, r0
 8007b9a:	9300      	str	r3, [sp, #0]
 8007b9c:	f10b 0b04 	add.w	fp, fp, #4
 8007ba0:	9b03      	ldr	r3, [sp, #12]
 8007ba2:	e00d      	b.n	8007bc0 <__gethex+0x27c>
 8007ba4:	9b03      	ldr	r3, [sp, #12]
 8007ba6:	9a06      	ldr	r2, [sp, #24]
 8007ba8:	4413      	add	r3, r2
 8007baa:	42bb      	cmp	r3, r7
 8007bac:	d3e0      	bcc.n	8007b70 <__gethex+0x22c>
 8007bae:	4618      	mov	r0, r3
 8007bb0:	9901      	ldr	r1, [sp, #4]
 8007bb2:	9307      	str	r3, [sp, #28]
 8007bb4:	4652      	mov	r2, sl
 8007bb6:	f001 f927 	bl	8008e08 <strncmp>
 8007bba:	9b07      	ldr	r3, [sp, #28]
 8007bbc:	2800      	cmp	r0, #0
 8007bbe:	d1d7      	bne.n	8007b70 <__gethex+0x22c>
 8007bc0:	461e      	mov	r6, r3
 8007bc2:	e78b      	b.n	8007adc <__gethex+0x198>
 8007bc4:	f04f 0a03 	mov.w	sl, #3
 8007bc8:	e7b8      	b.n	8007b3c <__gethex+0x1f8>
 8007bca:	da0a      	bge.n	8007be2 <__gethex+0x29e>
 8007bcc:	1a37      	subs	r7, r6, r0
 8007bce:	4621      	mov	r1, r4
 8007bd0:	ee18 0a10 	vmov	r0, s16
 8007bd4:	463a      	mov	r2, r7
 8007bd6:	f000 fc45 	bl	8008464 <__lshift>
 8007bda:	1bed      	subs	r5, r5, r7
 8007bdc:	4604      	mov	r4, r0
 8007bde:	f100 0914 	add.w	r9, r0, #20
 8007be2:	f04f 0a00 	mov.w	sl, #0
 8007be6:	e7ae      	b.n	8007b46 <__gethex+0x202>
 8007be8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007bec:	42a8      	cmp	r0, r5
 8007bee:	dd72      	ble.n	8007cd6 <__gethex+0x392>
 8007bf0:	1b45      	subs	r5, r0, r5
 8007bf2:	42ae      	cmp	r6, r5
 8007bf4:	dc36      	bgt.n	8007c64 <__gethex+0x320>
 8007bf6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007bfa:	2b02      	cmp	r3, #2
 8007bfc:	d02a      	beq.n	8007c54 <__gethex+0x310>
 8007bfe:	2b03      	cmp	r3, #3
 8007c00:	d02c      	beq.n	8007c5c <__gethex+0x318>
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	d11c      	bne.n	8007c40 <__gethex+0x2fc>
 8007c06:	42ae      	cmp	r6, r5
 8007c08:	d11a      	bne.n	8007c40 <__gethex+0x2fc>
 8007c0a:	2e01      	cmp	r6, #1
 8007c0c:	d112      	bne.n	8007c34 <__gethex+0x2f0>
 8007c0e:	9a04      	ldr	r2, [sp, #16]
 8007c10:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007c14:	6013      	str	r3, [r2, #0]
 8007c16:	2301      	movs	r3, #1
 8007c18:	6123      	str	r3, [r4, #16]
 8007c1a:	f8c9 3000 	str.w	r3, [r9]
 8007c1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007c20:	2762      	movs	r7, #98	; 0x62
 8007c22:	601c      	str	r4, [r3, #0]
 8007c24:	e723      	b.n	8007a6e <__gethex+0x12a>
 8007c26:	bf00      	nop
 8007c28:	08009c88 	.word	0x08009c88
 8007c2c:	08009c10 	.word	0x08009c10
 8007c30:	08009c21 	.word	0x08009c21
 8007c34:	1e71      	subs	r1, r6, #1
 8007c36:	4620      	mov	r0, r4
 8007c38:	f000 fe58 	bl	80088ec <__any_on>
 8007c3c:	2800      	cmp	r0, #0
 8007c3e:	d1e6      	bne.n	8007c0e <__gethex+0x2ca>
 8007c40:	ee18 0a10 	vmov	r0, s16
 8007c44:	4621      	mov	r1, r4
 8007c46:	f000 f9f1 	bl	800802c <_Bfree>
 8007c4a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	6013      	str	r3, [r2, #0]
 8007c50:	2750      	movs	r7, #80	; 0x50
 8007c52:	e70c      	b.n	8007a6e <__gethex+0x12a>
 8007c54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d1f2      	bne.n	8007c40 <__gethex+0x2fc>
 8007c5a:	e7d8      	b.n	8007c0e <__gethex+0x2ca>
 8007c5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d1d5      	bne.n	8007c0e <__gethex+0x2ca>
 8007c62:	e7ed      	b.n	8007c40 <__gethex+0x2fc>
 8007c64:	1e6f      	subs	r7, r5, #1
 8007c66:	f1ba 0f00 	cmp.w	sl, #0
 8007c6a:	d131      	bne.n	8007cd0 <__gethex+0x38c>
 8007c6c:	b127      	cbz	r7, 8007c78 <__gethex+0x334>
 8007c6e:	4639      	mov	r1, r7
 8007c70:	4620      	mov	r0, r4
 8007c72:	f000 fe3b 	bl	80088ec <__any_on>
 8007c76:	4682      	mov	sl, r0
 8007c78:	117b      	asrs	r3, r7, #5
 8007c7a:	2101      	movs	r1, #1
 8007c7c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007c80:	f007 071f 	and.w	r7, r7, #31
 8007c84:	fa01 f707 	lsl.w	r7, r1, r7
 8007c88:	421f      	tst	r7, r3
 8007c8a:	4629      	mov	r1, r5
 8007c8c:	4620      	mov	r0, r4
 8007c8e:	bf18      	it	ne
 8007c90:	f04a 0a02 	orrne.w	sl, sl, #2
 8007c94:	1b76      	subs	r6, r6, r5
 8007c96:	f7ff fded 	bl	8007874 <rshift>
 8007c9a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007c9e:	2702      	movs	r7, #2
 8007ca0:	f1ba 0f00 	cmp.w	sl, #0
 8007ca4:	d048      	beq.n	8007d38 <__gethex+0x3f4>
 8007ca6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007caa:	2b02      	cmp	r3, #2
 8007cac:	d015      	beq.n	8007cda <__gethex+0x396>
 8007cae:	2b03      	cmp	r3, #3
 8007cb0:	d017      	beq.n	8007ce2 <__gethex+0x39e>
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d109      	bne.n	8007cca <__gethex+0x386>
 8007cb6:	f01a 0f02 	tst.w	sl, #2
 8007cba:	d006      	beq.n	8007cca <__gethex+0x386>
 8007cbc:	f8d9 0000 	ldr.w	r0, [r9]
 8007cc0:	ea4a 0a00 	orr.w	sl, sl, r0
 8007cc4:	f01a 0f01 	tst.w	sl, #1
 8007cc8:	d10e      	bne.n	8007ce8 <__gethex+0x3a4>
 8007cca:	f047 0710 	orr.w	r7, r7, #16
 8007cce:	e033      	b.n	8007d38 <__gethex+0x3f4>
 8007cd0:	f04f 0a01 	mov.w	sl, #1
 8007cd4:	e7d0      	b.n	8007c78 <__gethex+0x334>
 8007cd6:	2701      	movs	r7, #1
 8007cd8:	e7e2      	b.n	8007ca0 <__gethex+0x35c>
 8007cda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007cdc:	f1c3 0301 	rsb	r3, r3, #1
 8007ce0:	9315      	str	r3, [sp, #84]	; 0x54
 8007ce2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d0f0      	beq.n	8007cca <__gethex+0x386>
 8007ce8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007cec:	f104 0314 	add.w	r3, r4, #20
 8007cf0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007cf4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007cf8:	f04f 0c00 	mov.w	ip, #0
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d02:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007d06:	d01c      	beq.n	8007d42 <__gethex+0x3fe>
 8007d08:	3201      	adds	r2, #1
 8007d0a:	6002      	str	r2, [r0, #0]
 8007d0c:	2f02      	cmp	r7, #2
 8007d0e:	f104 0314 	add.w	r3, r4, #20
 8007d12:	d13f      	bne.n	8007d94 <__gethex+0x450>
 8007d14:	f8d8 2000 	ldr.w	r2, [r8]
 8007d18:	3a01      	subs	r2, #1
 8007d1a:	42b2      	cmp	r2, r6
 8007d1c:	d10a      	bne.n	8007d34 <__gethex+0x3f0>
 8007d1e:	1171      	asrs	r1, r6, #5
 8007d20:	2201      	movs	r2, #1
 8007d22:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007d26:	f006 061f 	and.w	r6, r6, #31
 8007d2a:	fa02 f606 	lsl.w	r6, r2, r6
 8007d2e:	421e      	tst	r6, r3
 8007d30:	bf18      	it	ne
 8007d32:	4617      	movne	r7, r2
 8007d34:	f047 0720 	orr.w	r7, r7, #32
 8007d38:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007d3a:	601c      	str	r4, [r3, #0]
 8007d3c:	9b04      	ldr	r3, [sp, #16]
 8007d3e:	601d      	str	r5, [r3, #0]
 8007d40:	e695      	b.n	8007a6e <__gethex+0x12a>
 8007d42:	4299      	cmp	r1, r3
 8007d44:	f843 cc04 	str.w	ip, [r3, #-4]
 8007d48:	d8d8      	bhi.n	8007cfc <__gethex+0x3b8>
 8007d4a:	68a3      	ldr	r3, [r4, #8]
 8007d4c:	459b      	cmp	fp, r3
 8007d4e:	db19      	blt.n	8007d84 <__gethex+0x440>
 8007d50:	6861      	ldr	r1, [r4, #4]
 8007d52:	ee18 0a10 	vmov	r0, s16
 8007d56:	3101      	adds	r1, #1
 8007d58:	f000 f928 	bl	8007fac <_Balloc>
 8007d5c:	4681      	mov	r9, r0
 8007d5e:	b918      	cbnz	r0, 8007d68 <__gethex+0x424>
 8007d60:	4b1a      	ldr	r3, [pc, #104]	; (8007dcc <__gethex+0x488>)
 8007d62:	4602      	mov	r2, r0
 8007d64:	2184      	movs	r1, #132	; 0x84
 8007d66:	e6a8      	b.n	8007aba <__gethex+0x176>
 8007d68:	6922      	ldr	r2, [r4, #16]
 8007d6a:	3202      	adds	r2, #2
 8007d6c:	f104 010c 	add.w	r1, r4, #12
 8007d70:	0092      	lsls	r2, r2, #2
 8007d72:	300c      	adds	r0, #12
 8007d74:	f000 f90c 	bl	8007f90 <memcpy>
 8007d78:	4621      	mov	r1, r4
 8007d7a:	ee18 0a10 	vmov	r0, s16
 8007d7e:	f000 f955 	bl	800802c <_Bfree>
 8007d82:	464c      	mov	r4, r9
 8007d84:	6923      	ldr	r3, [r4, #16]
 8007d86:	1c5a      	adds	r2, r3, #1
 8007d88:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007d8c:	6122      	str	r2, [r4, #16]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	615a      	str	r2, [r3, #20]
 8007d92:	e7bb      	b.n	8007d0c <__gethex+0x3c8>
 8007d94:	6922      	ldr	r2, [r4, #16]
 8007d96:	455a      	cmp	r2, fp
 8007d98:	dd0b      	ble.n	8007db2 <__gethex+0x46e>
 8007d9a:	2101      	movs	r1, #1
 8007d9c:	4620      	mov	r0, r4
 8007d9e:	f7ff fd69 	bl	8007874 <rshift>
 8007da2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007da6:	3501      	adds	r5, #1
 8007da8:	42ab      	cmp	r3, r5
 8007daa:	f6ff aed0 	blt.w	8007b4e <__gethex+0x20a>
 8007dae:	2701      	movs	r7, #1
 8007db0:	e7c0      	b.n	8007d34 <__gethex+0x3f0>
 8007db2:	f016 061f 	ands.w	r6, r6, #31
 8007db6:	d0fa      	beq.n	8007dae <__gethex+0x46a>
 8007db8:	4453      	add	r3, sl
 8007dba:	f1c6 0620 	rsb	r6, r6, #32
 8007dbe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007dc2:	f000 f9e5 	bl	8008190 <__hi0bits>
 8007dc6:	42b0      	cmp	r0, r6
 8007dc8:	dbe7      	blt.n	8007d9a <__gethex+0x456>
 8007dca:	e7f0      	b.n	8007dae <__gethex+0x46a>
 8007dcc:	08009c10 	.word	0x08009c10

08007dd0 <L_shift>:
 8007dd0:	f1c2 0208 	rsb	r2, r2, #8
 8007dd4:	0092      	lsls	r2, r2, #2
 8007dd6:	b570      	push	{r4, r5, r6, lr}
 8007dd8:	f1c2 0620 	rsb	r6, r2, #32
 8007ddc:	6843      	ldr	r3, [r0, #4]
 8007dde:	6804      	ldr	r4, [r0, #0]
 8007de0:	fa03 f506 	lsl.w	r5, r3, r6
 8007de4:	432c      	orrs	r4, r5
 8007de6:	40d3      	lsrs	r3, r2
 8007de8:	6004      	str	r4, [r0, #0]
 8007dea:	f840 3f04 	str.w	r3, [r0, #4]!
 8007dee:	4288      	cmp	r0, r1
 8007df0:	d3f4      	bcc.n	8007ddc <L_shift+0xc>
 8007df2:	bd70      	pop	{r4, r5, r6, pc}

08007df4 <__match>:
 8007df4:	b530      	push	{r4, r5, lr}
 8007df6:	6803      	ldr	r3, [r0, #0]
 8007df8:	3301      	adds	r3, #1
 8007dfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007dfe:	b914      	cbnz	r4, 8007e06 <__match+0x12>
 8007e00:	6003      	str	r3, [r0, #0]
 8007e02:	2001      	movs	r0, #1
 8007e04:	bd30      	pop	{r4, r5, pc}
 8007e06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e0a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007e0e:	2d19      	cmp	r5, #25
 8007e10:	bf98      	it	ls
 8007e12:	3220      	addls	r2, #32
 8007e14:	42a2      	cmp	r2, r4
 8007e16:	d0f0      	beq.n	8007dfa <__match+0x6>
 8007e18:	2000      	movs	r0, #0
 8007e1a:	e7f3      	b.n	8007e04 <__match+0x10>

08007e1c <__hexnan>:
 8007e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e20:	680b      	ldr	r3, [r1, #0]
 8007e22:	115e      	asrs	r6, r3, #5
 8007e24:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007e28:	f013 031f 	ands.w	r3, r3, #31
 8007e2c:	b087      	sub	sp, #28
 8007e2e:	bf18      	it	ne
 8007e30:	3604      	addne	r6, #4
 8007e32:	2500      	movs	r5, #0
 8007e34:	1f37      	subs	r7, r6, #4
 8007e36:	4690      	mov	r8, r2
 8007e38:	6802      	ldr	r2, [r0, #0]
 8007e3a:	9301      	str	r3, [sp, #4]
 8007e3c:	4682      	mov	sl, r0
 8007e3e:	f846 5c04 	str.w	r5, [r6, #-4]
 8007e42:	46b9      	mov	r9, r7
 8007e44:	463c      	mov	r4, r7
 8007e46:	9502      	str	r5, [sp, #8]
 8007e48:	46ab      	mov	fp, r5
 8007e4a:	7851      	ldrb	r1, [r2, #1]
 8007e4c:	1c53      	adds	r3, r2, #1
 8007e4e:	9303      	str	r3, [sp, #12]
 8007e50:	b341      	cbz	r1, 8007ea4 <__hexnan+0x88>
 8007e52:	4608      	mov	r0, r1
 8007e54:	9205      	str	r2, [sp, #20]
 8007e56:	9104      	str	r1, [sp, #16]
 8007e58:	f7ff fd5e 	bl	8007918 <__hexdig_fun>
 8007e5c:	2800      	cmp	r0, #0
 8007e5e:	d14f      	bne.n	8007f00 <__hexnan+0xe4>
 8007e60:	9904      	ldr	r1, [sp, #16]
 8007e62:	9a05      	ldr	r2, [sp, #20]
 8007e64:	2920      	cmp	r1, #32
 8007e66:	d818      	bhi.n	8007e9a <__hexnan+0x7e>
 8007e68:	9b02      	ldr	r3, [sp, #8]
 8007e6a:	459b      	cmp	fp, r3
 8007e6c:	dd13      	ble.n	8007e96 <__hexnan+0x7a>
 8007e6e:	454c      	cmp	r4, r9
 8007e70:	d206      	bcs.n	8007e80 <__hexnan+0x64>
 8007e72:	2d07      	cmp	r5, #7
 8007e74:	dc04      	bgt.n	8007e80 <__hexnan+0x64>
 8007e76:	462a      	mov	r2, r5
 8007e78:	4649      	mov	r1, r9
 8007e7a:	4620      	mov	r0, r4
 8007e7c:	f7ff ffa8 	bl	8007dd0 <L_shift>
 8007e80:	4544      	cmp	r4, r8
 8007e82:	d950      	bls.n	8007f26 <__hexnan+0x10a>
 8007e84:	2300      	movs	r3, #0
 8007e86:	f1a4 0904 	sub.w	r9, r4, #4
 8007e8a:	f844 3c04 	str.w	r3, [r4, #-4]
 8007e8e:	f8cd b008 	str.w	fp, [sp, #8]
 8007e92:	464c      	mov	r4, r9
 8007e94:	461d      	mov	r5, r3
 8007e96:	9a03      	ldr	r2, [sp, #12]
 8007e98:	e7d7      	b.n	8007e4a <__hexnan+0x2e>
 8007e9a:	2929      	cmp	r1, #41	; 0x29
 8007e9c:	d156      	bne.n	8007f4c <__hexnan+0x130>
 8007e9e:	3202      	adds	r2, #2
 8007ea0:	f8ca 2000 	str.w	r2, [sl]
 8007ea4:	f1bb 0f00 	cmp.w	fp, #0
 8007ea8:	d050      	beq.n	8007f4c <__hexnan+0x130>
 8007eaa:	454c      	cmp	r4, r9
 8007eac:	d206      	bcs.n	8007ebc <__hexnan+0xa0>
 8007eae:	2d07      	cmp	r5, #7
 8007eb0:	dc04      	bgt.n	8007ebc <__hexnan+0xa0>
 8007eb2:	462a      	mov	r2, r5
 8007eb4:	4649      	mov	r1, r9
 8007eb6:	4620      	mov	r0, r4
 8007eb8:	f7ff ff8a 	bl	8007dd0 <L_shift>
 8007ebc:	4544      	cmp	r4, r8
 8007ebe:	d934      	bls.n	8007f2a <__hexnan+0x10e>
 8007ec0:	f1a8 0204 	sub.w	r2, r8, #4
 8007ec4:	4623      	mov	r3, r4
 8007ec6:	f853 1b04 	ldr.w	r1, [r3], #4
 8007eca:	f842 1f04 	str.w	r1, [r2, #4]!
 8007ece:	429f      	cmp	r7, r3
 8007ed0:	d2f9      	bcs.n	8007ec6 <__hexnan+0xaa>
 8007ed2:	1b3b      	subs	r3, r7, r4
 8007ed4:	f023 0303 	bic.w	r3, r3, #3
 8007ed8:	3304      	adds	r3, #4
 8007eda:	3401      	adds	r4, #1
 8007edc:	3e03      	subs	r6, #3
 8007ede:	42b4      	cmp	r4, r6
 8007ee0:	bf88      	it	hi
 8007ee2:	2304      	movhi	r3, #4
 8007ee4:	4443      	add	r3, r8
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	f843 2b04 	str.w	r2, [r3], #4
 8007eec:	429f      	cmp	r7, r3
 8007eee:	d2fb      	bcs.n	8007ee8 <__hexnan+0xcc>
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	b91b      	cbnz	r3, 8007efc <__hexnan+0xe0>
 8007ef4:	4547      	cmp	r7, r8
 8007ef6:	d127      	bne.n	8007f48 <__hexnan+0x12c>
 8007ef8:	2301      	movs	r3, #1
 8007efa:	603b      	str	r3, [r7, #0]
 8007efc:	2005      	movs	r0, #5
 8007efe:	e026      	b.n	8007f4e <__hexnan+0x132>
 8007f00:	3501      	adds	r5, #1
 8007f02:	2d08      	cmp	r5, #8
 8007f04:	f10b 0b01 	add.w	fp, fp, #1
 8007f08:	dd06      	ble.n	8007f18 <__hexnan+0xfc>
 8007f0a:	4544      	cmp	r4, r8
 8007f0c:	d9c3      	bls.n	8007e96 <__hexnan+0x7a>
 8007f0e:	2300      	movs	r3, #0
 8007f10:	f844 3c04 	str.w	r3, [r4, #-4]
 8007f14:	2501      	movs	r5, #1
 8007f16:	3c04      	subs	r4, #4
 8007f18:	6822      	ldr	r2, [r4, #0]
 8007f1a:	f000 000f 	and.w	r0, r0, #15
 8007f1e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007f22:	6022      	str	r2, [r4, #0]
 8007f24:	e7b7      	b.n	8007e96 <__hexnan+0x7a>
 8007f26:	2508      	movs	r5, #8
 8007f28:	e7b5      	b.n	8007e96 <__hexnan+0x7a>
 8007f2a:	9b01      	ldr	r3, [sp, #4]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d0df      	beq.n	8007ef0 <__hexnan+0xd4>
 8007f30:	f04f 32ff 	mov.w	r2, #4294967295
 8007f34:	f1c3 0320 	rsb	r3, r3, #32
 8007f38:	fa22 f303 	lsr.w	r3, r2, r3
 8007f3c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007f40:	401a      	ands	r2, r3
 8007f42:	f846 2c04 	str.w	r2, [r6, #-4]
 8007f46:	e7d3      	b.n	8007ef0 <__hexnan+0xd4>
 8007f48:	3f04      	subs	r7, #4
 8007f4a:	e7d1      	b.n	8007ef0 <__hexnan+0xd4>
 8007f4c:	2004      	movs	r0, #4
 8007f4e:	b007      	add	sp, #28
 8007f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007f54 <_localeconv_r>:
 8007f54:	4800      	ldr	r0, [pc, #0]	; (8007f58 <_localeconv_r+0x4>)
 8007f56:	4770      	bx	lr
 8007f58:	20000164 	.word	0x20000164

08007f5c <malloc>:
 8007f5c:	4b02      	ldr	r3, [pc, #8]	; (8007f68 <malloc+0xc>)
 8007f5e:	4601      	mov	r1, r0
 8007f60:	6818      	ldr	r0, [r3, #0]
 8007f62:	f000 bd67 	b.w	8008a34 <_malloc_r>
 8007f66:	bf00      	nop
 8007f68:	2000000c 	.word	0x2000000c

08007f6c <__ascii_mbtowc>:
 8007f6c:	b082      	sub	sp, #8
 8007f6e:	b901      	cbnz	r1, 8007f72 <__ascii_mbtowc+0x6>
 8007f70:	a901      	add	r1, sp, #4
 8007f72:	b142      	cbz	r2, 8007f86 <__ascii_mbtowc+0x1a>
 8007f74:	b14b      	cbz	r3, 8007f8a <__ascii_mbtowc+0x1e>
 8007f76:	7813      	ldrb	r3, [r2, #0]
 8007f78:	600b      	str	r3, [r1, #0]
 8007f7a:	7812      	ldrb	r2, [r2, #0]
 8007f7c:	1e10      	subs	r0, r2, #0
 8007f7e:	bf18      	it	ne
 8007f80:	2001      	movne	r0, #1
 8007f82:	b002      	add	sp, #8
 8007f84:	4770      	bx	lr
 8007f86:	4610      	mov	r0, r2
 8007f88:	e7fb      	b.n	8007f82 <__ascii_mbtowc+0x16>
 8007f8a:	f06f 0001 	mvn.w	r0, #1
 8007f8e:	e7f8      	b.n	8007f82 <__ascii_mbtowc+0x16>

08007f90 <memcpy>:
 8007f90:	440a      	add	r2, r1
 8007f92:	4291      	cmp	r1, r2
 8007f94:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f98:	d100      	bne.n	8007f9c <memcpy+0xc>
 8007f9a:	4770      	bx	lr
 8007f9c:	b510      	push	{r4, lr}
 8007f9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fa2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fa6:	4291      	cmp	r1, r2
 8007fa8:	d1f9      	bne.n	8007f9e <memcpy+0xe>
 8007faa:	bd10      	pop	{r4, pc}

08007fac <_Balloc>:
 8007fac:	b570      	push	{r4, r5, r6, lr}
 8007fae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007fb0:	4604      	mov	r4, r0
 8007fb2:	460d      	mov	r5, r1
 8007fb4:	b976      	cbnz	r6, 8007fd4 <_Balloc+0x28>
 8007fb6:	2010      	movs	r0, #16
 8007fb8:	f7ff ffd0 	bl	8007f5c <malloc>
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	6260      	str	r0, [r4, #36]	; 0x24
 8007fc0:	b920      	cbnz	r0, 8007fcc <_Balloc+0x20>
 8007fc2:	4b18      	ldr	r3, [pc, #96]	; (8008024 <_Balloc+0x78>)
 8007fc4:	4818      	ldr	r0, [pc, #96]	; (8008028 <_Balloc+0x7c>)
 8007fc6:	2166      	movs	r1, #102	; 0x66
 8007fc8:	f000 ff40 	bl	8008e4c <__assert_func>
 8007fcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007fd0:	6006      	str	r6, [r0, #0]
 8007fd2:	60c6      	str	r6, [r0, #12]
 8007fd4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007fd6:	68f3      	ldr	r3, [r6, #12]
 8007fd8:	b183      	cbz	r3, 8007ffc <_Balloc+0x50>
 8007fda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007fe2:	b9b8      	cbnz	r0, 8008014 <_Balloc+0x68>
 8007fe4:	2101      	movs	r1, #1
 8007fe6:	fa01 f605 	lsl.w	r6, r1, r5
 8007fea:	1d72      	adds	r2, r6, #5
 8007fec:	0092      	lsls	r2, r2, #2
 8007fee:	4620      	mov	r0, r4
 8007ff0:	f000 fc9d 	bl	800892e <_calloc_r>
 8007ff4:	b160      	cbz	r0, 8008010 <_Balloc+0x64>
 8007ff6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007ffa:	e00e      	b.n	800801a <_Balloc+0x6e>
 8007ffc:	2221      	movs	r2, #33	; 0x21
 8007ffe:	2104      	movs	r1, #4
 8008000:	4620      	mov	r0, r4
 8008002:	f000 fc94 	bl	800892e <_calloc_r>
 8008006:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008008:	60f0      	str	r0, [r6, #12]
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d1e4      	bne.n	8007fda <_Balloc+0x2e>
 8008010:	2000      	movs	r0, #0
 8008012:	bd70      	pop	{r4, r5, r6, pc}
 8008014:	6802      	ldr	r2, [r0, #0]
 8008016:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800801a:	2300      	movs	r3, #0
 800801c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008020:	e7f7      	b.n	8008012 <_Balloc+0x66>
 8008022:	bf00      	nop
 8008024:	08009b9e 	.word	0x08009b9e
 8008028:	08009c9c 	.word	0x08009c9c

0800802c <_Bfree>:
 800802c:	b570      	push	{r4, r5, r6, lr}
 800802e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008030:	4605      	mov	r5, r0
 8008032:	460c      	mov	r4, r1
 8008034:	b976      	cbnz	r6, 8008054 <_Bfree+0x28>
 8008036:	2010      	movs	r0, #16
 8008038:	f7ff ff90 	bl	8007f5c <malloc>
 800803c:	4602      	mov	r2, r0
 800803e:	6268      	str	r0, [r5, #36]	; 0x24
 8008040:	b920      	cbnz	r0, 800804c <_Bfree+0x20>
 8008042:	4b09      	ldr	r3, [pc, #36]	; (8008068 <_Bfree+0x3c>)
 8008044:	4809      	ldr	r0, [pc, #36]	; (800806c <_Bfree+0x40>)
 8008046:	218a      	movs	r1, #138	; 0x8a
 8008048:	f000 ff00 	bl	8008e4c <__assert_func>
 800804c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008050:	6006      	str	r6, [r0, #0]
 8008052:	60c6      	str	r6, [r0, #12]
 8008054:	b13c      	cbz	r4, 8008066 <_Bfree+0x3a>
 8008056:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008058:	6862      	ldr	r2, [r4, #4]
 800805a:	68db      	ldr	r3, [r3, #12]
 800805c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008060:	6021      	str	r1, [r4, #0]
 8008062:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008066:	bd70      	pop	{r4, r5, r6, pc}
 8008068:	08009b9e 	.word	0x08009b9e
 800806c:	08009c9c 	.word	0x08009c9c

08008070 <__multadd>:
 8008070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008074:	690d      	ldr	r5, [r1, #16]
 8008076:	4607      	mov	r7, r0
 8008078:	460c      	mov	r4, r1
 800807a:	461e      	mov	r6, r3
 800807c:	f101 0c14 	add.w	ip, r1, #20
 8008080:	2000      	movs	r0, #0
 8008082:	f8dc 3000 	ldr.w	r3, [ip]
 8008086:	b299      	uxth	r1, r3
 8008088:	fb02 6101 	mla	r1, r2, r1, r6
 800808c:	0c1e      	lsrs	r6, r3, #16
 800808e:	0c0b      	lsrs	r3, r1, #16
 8008090:	fb02 3306 	mla	r3, r2, r6, r3
 8008094:	b289      	uxth	r1, r1
 8008096:	3001      	adds	r0, #1
 8008098:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800809c:	4285      	cmp	r5, r0
 800809e:	f84c 1b04 	str.w	r1, [ip], #4
 80080a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80080a6:	dcec      	bgt.n	8008082 <__multadd+0x12>
 80080a8:	b30e      	cbz	r6, 80080ee <__multadd+0x7e>
 80080aa:	68a3      	ldr	r3, [r4, #8]
 80080ac:	42ab      	cmp	r3, r5
 80080ae:	dc19      	bgt.n	80080e4 <__multadd+0x74>
 80080b0:	6861      	ldr	r1, [r4, #4]
 80080b2:	4638      	mov	r0, r7
 80080b4:	3101      	adds	r1, #1
 80080b6:	f7ff ff79 	bl	8007fac <_Balloc>
 80080ba:	4680      	mov	r8, r0
 80080bc:	b928      	cbnz	r0, 80080ca <__multadd+0x5a>
 80080be:	4602      	mov	r2, r0
 80080c0:	4b0c      	ldr	r3, [pc, #48]	; (80080f4 <__multadd+0x84>)
 80080c2:	480d      	ldr	r0, [pc, #52]	; (80080f8 <__multadd+0x88>)
 80080c4:	21b5      	movs	r1, #181	; 0xb5
 80080c6:	f000 fec1 	bl	8008e4c <__assert_func>
 80080ca:	6922      	ldr	r2, [r4, #16]
 80080cc:	3202      	adds	r2, #2
 80080ce:	f104 010c 	add.w	r1, r4, #12
 80080d2:	0092      	lsls	r2, r2, #2
 80080d4:	300c      	adds	r0, #12
 80080d6:	f7ff ff5b 	bl	8007f90 <memcpy>
 80080da:	4621      	mov	r1, r4
 80080dc:	4638      	mov	r0, r7
 80080de:	f7ff ffa5 	bl	800802c <_Bfree>
 80080e2:	4644      	mov	r4, r8
 80080e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80080e8:	3501      	adds	r5, #1
 80080ea:	615e      	str	r6, [r3, #20]
 80080ec:	6125      	str	r5, [r4, #16]
 80080ee:	4620      	mov	r0, r4
 80080f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080f4:	08009c10 	.word	0x08009c10
 80080f8:	08009c9c 	.word	0x08009c9c

080080fc <__s2b>:
 80080fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008100:	460c      	mov	r4, r1
 8008102:	4615      	mov	r5, r2
 8008104:	461f      	mov	r7, r3
 8008106:	2209      	movs	r2, #9
 8008108:	3308      	adds	r3, #8
 800810a:	4606      	mov	r6, r0
 800810c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008110:	2100      	movs	r1, #0
 8008112:	2201      	movs	r2, #1
 8008114:	429a      	cmp	r2, r3
 8008116:	db09      	blt.n	800812c <__s2b+0x30>
 8008118:	4630      	mov	r0, r6
 800811a:	f7ff ff47 	bl	8007fac <_Balloc>
 800811e:	b940      	cbnz	r0, 8008132 <__s2b+0x36>
 8008120:	4602      	mov	r2, r0
 8008122:	4b19      	ldr	r3, [pc, #100]	; (8008188 <__s2b+0x8c>)
 8008124:	4819      	ldr	r0, [pc, #100]	; (800818c <__s2b+0x90>)
 8008126:	21ce      	movs	r1, #206	; 0xce
 8008128:	f000 fe90 	bl	8008e4c <__assert_func>
 800812c:	0052      	lsls	r2, r2, #1
 800812e:	3101      	adds	r1, #1
 8008130:	e7f0      	b.n	8008114 <__s2b+0x18>
 8008132:	9b08      	ldr	r3, [sp, #32]
 8008134:	6143      	str	r3, [r0, #20]
 8008136:	2d09      	cmp	r5, #9
 8008138:	f04f 0301 	mov.w	r3, #1
 800813c:	6103      	str	r3, [r0, #16]
 800813e:	dd16      	ble.n	800816e <__s2b+0x72>
 8008140:	f104 0909 	add.w	r9, r4, #9
 8008144:	46c8      	mov	r8, r9
 8008146:	442c      	add	r4, r5
 8008148:	f818 3b01 	ldrb.w	r3, [r8], #1
 800814c:	4601      	mov	r1, r0
 800814e:	3b30      	subs	r3, #48	; 0x30
 8008150:	220a      	movs	r2, #10
 8008152:	4630      	mov	r0, r6
 8008154:	f7ff ff8c 	bl	8008070 <__multadd>
 8008158:	45a0      	cmp	r8, r4
 800815a:	d1f5      	bne.n	8008148 <__s2b+0x4c>
 800815c:	f1a5 0408 	sub.w	r4, r5, #8
 8008160:	444c      	add	r4, r9
 8008162:	1b2d      	subs	r5, r5, r4
 8008164:	1963      	adds	r3, r4, r5
 8008166:	42bb      	cmp	r3, r7
 8008168:	db04      	blt.n	8008174 <__s2b+0x78>
 800816a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800816e:	340a      	adds	r4, #10
 8008170:	2509      	movs	r5, #9
 8008172:	e7f6      	b.n	8008162 <__s2b+0x66>
 8008174:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008178:	4601      	mov	r1, r0
 800817a:	3b30      	subs	r3, #48	; 0x30
 800817c:	220a      	movs	r2, #10
 800817e:	4630      	mov	r0, r6
 8008180:	f7ff ff76 	bl	8008070 <__multadd>
 8008184:	e7ee      	b.n	8008164 <__s2b+0x68>
 8008186:	bf00      	nop
 8008188:	08009c10 	.word	0x08009c10
 800818c:	08009c9c 	.word	0x08009c9c

08008190 <__hi0bits>:
 8008190:	0c03      	lsrs	r3, r0, #16
 8008192:	041b      	lsls	r3, r3, #16
 8008194:	b9d3      	cbnz	r3, 80081cc <__hi0bits+0x3c>
 8008196:	0400      	lsls	r0, r0, #16
 8008198:	2310      	movs	r3, #16
 800819a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800819e:	bf04      	itt	eq
 80081a0:	0200      	lsleq	r0, r0, #8
 80081a2:	3308      	addeq	r3, #8
 80081a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80081a8:	bf04      	itt	eq
 80081aa:	0100      	lsleq	r0, r0, #4
 80081ac:	3304      	addeq	r3, #4
 80081ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80081b2:	bf04      	itt	eq
 80081b4:	0080      	lsleq	r0, r0, #2
 80081b6:	3302      	addeq	r3, #2
 80081b8:	2800      	cmp	r0, #0
 80081ba:	db05      	blt.n	80081c8 <__hi0bits+0x38>
 80081bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80081c0:	f103 0301 	add.w	r3, r3, #1
 80081c4:	bf08      	it	eq
 80081c6:	2320      	moveq	r3, #32
 80081c8:	4618      	mov	r0, r3
 80081ca:	4770      	bx	lr
 80081cc:	2300      	movs	r3, #0
 80081ce:	e7e4      	b.n	800819a <__hi0bits+0xa>

080081d0 <__lo0bits>:
 80081d0:	6803      	ldr	r3, [r0, #0]
 80081d2:	f013 0207 	ands.w	r2, r3, #7
 80081d6:	4601      	mov	r1, r0
 80081d8:	d00b      	beq.n	80081f2 <__lo0bits+0x22>
 80081da:	07da      	lsls	r2, r3, #31
 80081dc:	d423      	bmi.n	8008226 <__lo0bits+0x56>
 80081de:	0798      	lsls	r0, r3, #30
 80081e0:	bf49      	itett	mi
 80081e2:	085b      	lsrmi	r3, r3, #1
 80081e4:	089b      	lsrpl	r3, r3, #2
 80081e6:	2001      	movmi	r0, #1
 80081e8:	600b      	strmi	r3, [r1, #0]
 80081ea:	bf5c      	itt	pl
 80081ec:	600b      	strpl	r3, [r1, #0]
 80081ee:	2002      	movpl	r0, #2
 80081f0:	4770      	bx	lr
 80081f2:	b298      	uxth	r0, r3
 80081f4:	b9a8      	cbnz	r0, 8008222 <__lo0bits+0x52>
 80081f6:	0c1b      	lsrs	r3, r3, #16
 80081f8:	2010      	movs	r0, #16
 80081fa:	b2da      	uxtb	r2, r3
 80081fc:	b90a      	cbnz	r2, 8008202 <__lo0bits+0x32>
 80081fe:	3008      	adds	r0, #8
 8008200:	0a1b      	lsrs	r3, r3, #8
 8008202:	071a      	lsls	r2, r3, #28
 8008204:	bf04      	itt	eq
 8008206:	091b      	lsreq	r3, r3, #4
 8008208:	3004      	addeq	r0, #4
 800820a:	079a      	lsls	r2, r3, #30
 800820c:	bf04      	itt	eq
 800820e:	089b      	lsreq	r3, r3, #2
 8008210:	3002      	addeq	r0, #2
 8008212:	07da      	lsls	r2, r3, #31
 8008214:	d403      	bmi.n	800821e <__lo0bits+0x4e>
 8008216:	085b      	lsrs	r3, r3, #1
 8008218:	f100 0001 	add.w	r0, r0, #1
 800821c:	d005      	beq.n	800822a <__lo0bits+0x5a>
 800821e:	600b      	str	r3, [r1, #0]
 8008220:	4770      	bx	lr
 8008222:	4610      	mov	r0, r2
 8008224:	e7e9      	b.n	80081fa <__lo0bits+0x2a>
 8008226:	2000      	movs	r0, #0
 8008228:	4770      	bx	lr
 800822a:	2020      	movs	r0, #32
 800822c:	4770      	bx	lr
	...

08008230 <__i2b>:
 8008230:	b510      	push	{r4, lr}
 8008232:	460c      	mov	r4, r1
 8008234:	2101      	movs	r1, #1
 8008236:	f7ff feb9 	bl	8007fac <_Balloc>
 800823a:	4602      	mov	r2, r0
 800823c:	b928      	cbnz	r0, 800824a <__i2b+0x1a>
 800823e:	4b05      	ldr	r3, [pc, #20]	; (8008254 <__i2b+0x24>)
 8008240:	4805      	ldr	r0, [pc, #20]	; (8008258 <__i2b+0x28>)
 8008242:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008246:	f000 fe01 	bl	8008e4c <__assert_func>
 800824a:	2301      	movs	r3, #1
 800824c:	6144      	str	r4, [r0, #20]
 800824e:	6103      	str	r3, [r0, #16]
 8008250:	bd10      	pop	{r4, pc}
 8008252:	bf00      	nop
 8008254:	08009c10 	.word	0x08009c10
 8008258:	08009c9c 	.word	0x08009c9c

0800825c <__multiply>:
 800825c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008260:	4691      	mov	r9, r2
 8008262:	690a      	ldr	r2, [r1, #16]
 8008264:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008268:	429a      	cmp	r2, r3
 800826a:	bfb8      	it	lt
 800826c:	460b      	movlt	r3, r1
 800826e:	460c      	mov	r4, r1
 8008270:	bfbc      	itt	lt
 8008272:	464c      	movlt	r4, r9
 8008274:	4699      	movlt	r9, r3
 8008276:	6927      	ldr	r7, [r4, #16]
 8008278:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800827c:	68a3      	ldr	r3, [r4, #8]
 800827e:	6861      	ldr	r1, [r4, #4]
 8008280:	eb07 060a 	add.w	r6, r7, sl
 8008284:	42b3      	cmp	r3, r6
 8008286:	b085      	sub	sp, #20
 8008288:	bfb8      	it	lt
 800828a:	3101      	addlt	r1, #1
 800828c:	f7ff fe8e 	bl	8007fac <_Balloc>
 8008290:	b930      	cbnz	r0, 80082a0 <__multiply+0x44>
 8008292:	4602      	mov	r2, r0
 8008294:	4b44      	ldr	r3, [pc, #272]	; (80083a8 <__multiply+0x14c>)
 8008296:	4845      	ldr	r0, [pc, #276]	; (80083ac <__multiply+0x150>)
 8008298:	f240 115d 	movw	r1, #349	; 0x15d
 800829c:	f000 fdd6 	bl	8008e4c <__assert_func>
 80082a0:	f100 0514 	add.w	r5, r0, #20
 80082a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80082a8:	462b      	mov	r3, r5
 80082aa:	2200      	movs	r2, #0
 80082ac:	4543      	cmp	r3, r8
 80082ae:	d321      	bcc.n	80082f4 <__multiply+0x98>
 80082b0:	f104 0314 	add.w	r3, r4, #20
 80082b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80082b8:	f109 0314 	add.w	r3, r9, #20
 80082bc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80082c0:	9202      	str	r2, [sp, #8]
 80082c2:	1b3a      	subs	r2, r7, r4
 80082c4:	3a15      	subs	r2, #21
 80082c6:	f022 0203 	bic.w	r2, r2, #3
 80082ca:	3204      	adds	r2, #4
 80082cc:	f104 0115 	add.w	r1, r4, #21
 80082d0:	428f      	cmp	r7, r1
 80082d2:	bf38      	it	cc
 80082d4:	2204      	movcc	r2, #4
 80082d6:	9201      	str	r2, [sp, #4]
 80082d8:	9a02      	ldr	r2, [sp, #8]
 80082da:	9303      	str	r3, [sp, #12]
 80082dc:	429a      	cmp	r2, r3
 80082de:	d80c      	bhi.n	80082fa <__multiply+0x9e>
 80082e0:	2e00      	cmp	r6, #0
 80082e2:	dd03      	ble.n	80082ec <__multiply+0x90>
 80082e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d05a      	beq.n	80083a2 <__multiply+0x146>
 80082ec:	6106      	str	r6, [r0, #16]
 80082ee:	b005      	add	sp, #20
 80082f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082f4:	f843 2b04 	str.w	r2, [r3], #4
 80082f8:	e7d8      	b.n	80082ac <__multiply+0x50>
 80082fa:	f8b3 a000 	ldrh.w	sl, [r3]
 80082fe:	f1ba 0f00 	cmp.w	sl, #0
 8008302:	d024      	beq.n	800834e <__multiply+0xf2>
 8008304:	f104 0e14 	add.w	lr, r4, #20
 8008308:	46a9      	mov	r9, r5
 800830a:	f04f 0c00 	mov.w	ip, #0
 800830e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008312:	f8d9 1000 	ldr.w	r1, [r9]
 8008316:	fa1f fb82 	uxth.w	fp, r2
 800831a:	b289      	uxth	r1, r1
 800831c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008320:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008324:	f8d9 2000 	ldr.w	r2, [r9]
 8008328:	4461      	add	r1, ip
 800832a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800832e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008332:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008336:	b289      	uxth	r1, r1
 8008338:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800833c:	4577      	cmp	r7, lr
 800833e:	f849 1b04 	str.w	r1, [r9], #4
 8008342:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008346:	d8e2      	bhi.n	800830e <__multiply+0xb2>
 8008348:	9a01      	ldr	r2, [sp, #4]
 800834a:	f845 c002 	str.w	ip, [r5, r2]
 800834e:	9a03      	ldr	r2, [sp, #12]
 8008350:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008354:	3304      	adds	r3, #4
 8008356:	f1b9 0f00 	cmp.w	r9, #0
 800835a:	d020      	beq.n	800839e <__multiply+0x142>
 800835c:	6829      	ldr	r1, [r5, #0]
 800835e:	f104 0c14 	add.w	ip, r4, #20
 8008362:	46ae      	mov	lr, r5
 8008364:	f04f 0a00 	mov.w	sl, #0
 8008368:	f8bc b000 	ldrh.w	fp, [ip]
 800836c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008370:	fb09 220b 	mla	r2, r9, fp, r2
 8008374:	4492      	add	sl, r2
 8008376:	b289      	uxth	r1, r1
 8008378:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800837c:	f84e 1b04 	str.w	r1, [lr], #4
 8008380:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008384:	f8be 1000 	ldrh.w	r1, [lr]
 8008388:	0c12      	lsrs	r2, r2, #16
 800838a:	fb09 1102 	mla	r1, r9, r2, r1
 800838e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008392:	4567      	cmp	r7, ip
 8008394:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008398:	d8e6      	bhi.n	8008368 <__multiply+0x10c>
 800839a:	9a01      	ldr	r2, [sp, #4]
 800839c:	50a9      	str	r1, [r5, r2]
 800839e:	3504      	adds	r5, #4
 80083a0:	e79a      	b.n	80082d8 <__multiply+0x7c>
 80083a2:	3e01      	subs	r6, #1
 80083a4:	e79c      	b.n	80082e0 <__multiply+0x84>
 80083a6:	bf00      	nop
 80083a8:	08009c10 	.word	0x08009c10
 80083ac:	08009c9c 	.word	0x08009c9c

080083b0 <__pow5mult>:
 80083b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083b4:	4615      	mov	r5, r2
 80083b6:	f012 0203 	ands.w	r2, r2, #3
 80083ba:	4606      	mov	r6, r0
 80083bc:	460f      	mov	r7, r1
 80083be:	d007      	beq.n	80083d0 <__pow5mult+0x20>
 80083c0:	4c25      	ldr	r4, [pc, #148]	; (8008458 <__pow5mult+0xa8>)
 80083c2:	3a01      	subs	r2, #1
 80083c4:	2300      	movs	r3, #0
 80083c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80083ca:	f7ff fe51 	bl	8008070 <__multadd>
 80083ce:	4607      	mov	r7, r0
 80083d0:	10ad      	asrs	r5, r5, #2
 80083d2:	d03d      	beq.n	8008450 <__pow5mult+0xa0>
 80083d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80083d6:	b97c      	cbnz	r4, 80083f8 <__pow5mult+0x48>
 80083d8:	2010      	movs	r0, #16
 80083da:	f7ff fdbf 	bl	8007f5c <malloc>
 80083de:	4602      	mov	r2, r0
 80083e0:	6270      	str	r0, [r6, #36]	; 0x24
 80083e2:	b928      	cbnz	r0, 80083f0 <__pow5mult+0x40>
 80083e4:	4b1d      	ldr	r3, [pc, #116]	; (800845c <__pow5mult+0xac>)
 80083e6:	481e      	ldr	r0, [pc, #120]	; (8008460 <__pow5mult+0xb0>)
 80083e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80083ec:	f000 fd2e 	bl	8008e4c <__assert_func>
 80083f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80083f4:	6004      	str	r4, [r0, #0]
 80083f6:	60c4      	str	r4, [r0, #12]
 80083f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80083fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008400:	b94c      	cbnz	r4, 8008416 <__pow5mult+0x66>
 8008402:	f240 2171 	movw	r1, #625	; 0x271
 8008406:	4630      	mov	r0, r6
 8008408:	f7ff ff12 	bl	8008230 <__i2b>
 800840c:	2300      	movs	r3, #0
 800840e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008412:	4604      	mov	r4, r0
 8008414:	6003      	str	r3, [r0, #0]
 8008416:	f04f 0900 	mov.w	r9, #0
 800841a:	07eb      	lsls	r3, r5, #31
 800841c:	d50a      	bpl.n	8008434 <__pow5mult+0x84>
 800841e:	4639      	mov	r1, r7
 8008420:	4622      	mov	r2, r4
 8008422:	4630      	mov	r0, r6
 8008424:	f7ff ff1a 	bl	800825c <__multiply>
 8008428:	4639      	mov	r1, r7
 800842a:	4680      	mov	r8, r0
 800842c:	4630      	mov	r0, r6
 800842e:	f7ff fdfd 	bl	800802c <_Bfree>
 8008432:	4647      	mov	r7, r8
 8008434:	106d      	asrs	r5, r5, #1
 8008436:	d00b      	beq.n	8008450 <__pow5mult+0xa0>
 8008438:	6820      	ldr	r0, [r4, #0]
 800843a:	b938      	cbnz	r0, 800844c <__pow5mult+0x9c>
 800843c:	4622      	mov	r2, r4
 800843e:	4621      	mov	r1, r4
 8008440:	4630      	mov	r0, r6
 8008442:	f7ff ff0b 	bl	800825c <__multiply>
 8008446:	6020      	str	r0, [r4, #0]
 8008448:	f8c0 9000 	str.w	r9, [r0]
 800844c:	4604      	mov	r4, r0
 800844e:	e7e4      	b.n	800841a <__pow5mult+0x6a>
 8008450:	4638      	mov	r0, r7
 8008452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008456:	bf00      	nop
 8008458:	08009de8 	.word	0x08009de8
 800845c:	08009b9e 	.word	0x08009b9e
 8008460:	08009c9c 	.word	0x08009c9c

08008464 <__lshift>:
 8008464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008468:	460c      	mov	r4, r1
 800846a:	6849      	ldr	r1, [r1, #4]
 800846c:	6923      	ldr	r3, [r4, #16]
 800846e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008472:	68a3      	ldr	r3, [r4, #8]
 8008474:	4607      	mov	r7, r0
 8008476:	4691      	mov	r9, r2
 8008478:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800847c:	f108 0601 	add.w	r6, r8, #1
 8008480:	42b3      	cmp	r3, r6
 8008482:	db0b      	blt.n	800849c <__lshift+0x38>
 8008484:	4638      	mov	r0, r7
 8008486:	f7ff fd91 	bl	8007fac <_Balloc>
 800848a:	4605      	mov	r5, r0
 800848c:	b948      	cbnz	r0, 80084a2 <__lshift+0x3e>
 800848e:	4602      	mov	r2, r0
 8008490:	4b2a      	ldr	r3, [pc, #168]	; (800853c <__lshift+0xd8>)
 8008492:	482b      	ldr	r0, [pc, #172]	; (8008540 <__lshift+0xdc>)
 8008494:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008498:	f000 fcd8 	bl	8008e4c <__assert_func>
 800849c:	3101      	adds	r1, #1
 800849e:	005b      	lsls	r3, r3, #1
 80084a0:	e7ee      	b.n	8008480 <__lshift+0x1c>
 80084a2:	2300      	movs	r3, #0
 80084a4:	f100 0114 	add.w	r1, r0, #20
 80084a8:	f100 0210 	add.w	r2, r0, #16
 80084ac:	4618      	mov	r0, r3
 80084ae:	4553      	cmp	r3, sl
 80084b0:	db37      	blt.n	8008522 <__lshift+0xbe>
 80084b2:	6920      	ldr	r0, [r4, #16]
 80084b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80084b8:	f104 0314 	add.w	r3, r4, #20
 80084bc:	f019 091f 	ands.w	r9, r9, #31
 80084c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80084c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80084c8:	d02f      	beq.n	800852a <__lshift+0xc6>
 80084ca:	f1c9 0e20 	rsb	lr, r9, #32
 80084ce:	468a      	mov	sl, r1
 80084d0:	f04f 0c00 	mov.w	ip, #0
 80084d4:	681a      	ldr	r2, [r3, #0]
 80084d6:	fa02 f209 	lsl.w	r2, r2, r9
 80084da:	ea42 020c 	orr.w	r2, r2, ip
 80084de:	f84a 2b04 	str.w	r2, [sl], #4
 80084e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80084e6:	4298      	cmp	r0, r3
 80084e8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80084ec:	d8f2      	bhi.n	80084d4 <__lshift+0x70>
 80084ee:	1b03      	subs	r3, r0, r4
 80084f0:	3b15      	subs	r3, #21
 80084f2:	f023 0303 	bic.w	r3, r3, #3
 80084f6:	3304      	adds	r3, #4
 80084f8:	f104 0215 	add.w	r2, r4, #21
 80084fc:	4290      	cmp	r0, r2
 80084fe:	bf38      	it	cc
 8008500:	2304      	movcc	r3, #4
 8008502:	f841 c003 	str.w	ip, [r1, r3]
 8008506:	f1bc 0f00 	cmp.w	ip, #0
 800850a:	d001      	beq.n	8008510 <__lshift+0xac>
 800850c:	f108 0602 	add.w	r6, r8, #2
 8008510:	3e01      	subs	r6, #1
 8008512:	4638      	mov	r0, r7
 8008514:	612e      	str	r6, [r5, #16]
 8008516:	4621      	mov	r1, r4
 8008518:	f7ff fd88 	bl	800802c <_Bfree>
 800851c:	4628      	mov	r0, r5
 800851e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008522:	f842 0f04 	str.w	r0, [r2, #4]!
 8008526:	3301      	adds	r3, #1
 8008528:	e7c1      	b.n	80084ae <__lshift+0x4a>
 800852a:	3904      	subs	r1, #4
 800852c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008530:	f841 2f04 	str.w	r2, [r1, #4]!
 8008534:	4298      	cmp	r0, r3
 8008536:	d8f9      	bhi.n	800852c <__lshift+0xc8>
 8008538:	e7ea      	b.n	8008510 <__lshift+0xac>
 800853a:	bf00      	nop
 800853c:	08009c10 	.word	0x08009c10
 8008540:	08009c9c 	.word	0x08009c9c

08008544 <__mcmp>:
 8008544:	b530      	push	{r4, r5, lr}
 8008546:	6902      	ldr	r2, [r0, #16]
 8008548:	690c      	ldr	r4, [r1, #16]
 800854a:	1b12      	subs	r2, r2, r4
 800854c:	d10e      	bne.n	800856c <__mcmp+0x28>
 800854e:	f100 0314 	add.w	r3, r0, #20
 8008552:	3114      	adds	r1, #20
 8008554:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008558:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800855c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008560:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008564:	42a5      	cmp	r5, r4
 8008566:	d003      	beq.n	8008570 <__mcmp+0x2c>
 8008568:	d305      	bcc.n	8008576 <__mcmp+0x32>
 800856a:	2201      	movs	r2, #1
 800856c:	4610      	mov	r0, r2
 800856e:	bd30      	pop	{r4, r5, pc}
 8008570:	4283      	cmp	r3, r0
 8008572:	d3f3      	bcc.n	800855c <__mcmp+0x18>
 8008574:	e7fa      	b.n	800856c <__mcmp+0x28>
 8008576:	f04f 32ff 	mov.w	r2, #4294967295
 800857a:	e7f7      	b.n	800856c <__mcmp+0x28>

0800857c <__mdiff>:
 800857c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008580:	460c      	mov	r4, r1
 8008582:	4606      	mov	r6, r0
 8008584:	4611      	mov	r1, r2
 8008586:	4620      	mov	r0, r4
 8008588:	4690      	mov	r8, r2
 800858a:	f7ff ffdb 	bl	8008544 <__mcmp>
 800858e:	1e05      	subs	r5, r0, #0
 8008590:	d110      	bne.n	80085b4 <__mdiff+0x38>
 8008592:	4629      	mov	r1, r5
 8008594:	4630      	mov	r0, r6
 8008596:	f7ff fd09 	bl	8007fac <_Balloc>
 800859a:	b930      	cbnz	r0, 80085aa <__mdiff+0x2e>
 800859c:	4b3a      	ldr	r3, [pc, #232]	; (8008688 <__mdiff+0x10c>)
 800859e:	4602      	mov	r2, r0
 80085a0:	f240 2132 	movw	r1, #562	; 0x232
 80085a4:	4839      	ldr	r0, [pc, #228]	; (800868c <__mdiff+0x110>)
 80085a6:	f000 fc51 	bl	8008e4c <__assert_func>
 80085aa:	2301      	movs	r3, #1
 80085ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80085b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085b4:	bfa4      	itt	ge
 80085b6:	4643      	movge	r3, r8
 80085b8:	46a0      	movge	r8, r4
 80085ba:	4630      	mov	r0, r6
 80085bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80085c0:	bfa6      	itte	ge
 80085c2:	461c      	movge	r4, r3
 80085c4:	2500      	movge	r5, #0
 80085c6:	2501      	movlt	r5, #1
 80085c8:	f7ff fcf0 	bl	8007fac <_Balloc>
 80085cc:	b920      	cbnz	r0, 80085d8 <__mdiff+0x5c>
 80085ce:	4b2e      	ldr	r3, [pc, #184]	; (8008688 <__mdiff+0x10c>)
 80085d0:	4602      	mov	r2, r0
 80085d2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80085d6:	e7e5      	b.n	80085a4 <__mdiff+0x28>
 80085d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80085dc:	6926      	ldr	r6, [r4, #16]
 80085de:	60c5      	str	r5, [r0, #12]
 80085e0:	f104 0914 	add.w	r9, r4, #20
 80085e4:	f108 0514 	add.w	r5, r8, #20
 80085e8:	f100 0e14 	add.w	lr, r0, #20
 80085ec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80085f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80085f4:	f108 0210 	add.w	r2, r8, #16
 80085f8:	46f2      	mov	sl, lr
 80085fa:	2100      	movs	r1, #0
 80085fc:	f859 3b04 	ldr.w	r3, [r9], #4
 8008600:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008604:	fa1f f883 	uxth.w	r8, r3
 8008608:	fa11 f18b 	uxtah	r1, r1, fp
 800860c:	0c1b      	lsrs	r3, r3, #16
 800860e:	eba1 0808 	sub.w	r8, r1, r8
 8008612:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008616:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800861a:	fa1f f888 	uxth.w	r8, r8
 800861e:	1419      	asrs	r1, r3, #16
 8008620:	454e      	cmp	r6, r9
 8008622:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008626:	f84a 3b04 	str.w	r3, [sl], #4
 800862a:	d8e7      	bhi.n	80085fc <__mdiff+0x80>
 800862c:	1b33      	subs	r3, r6, r4
 800862e:	3b15      	subs	r3, #21
 8008630:	f023 0303 	bic.w	r3, r3, #3
 8008634:	3304      	adds	r3, #4
 8008636:	3415      	adds	r4, #21
 8008638:	42a6      	cmp	r6, r4
 800863a:	bf38      	it	cc
 800863c:	2304      	movcc	r3, #4
 800863e:	441d      	add	r5, r3
 8008640:	4473      	add	r3, lr
 8008642:	469e      	mov	lr, r3
 8008644:	462e      	mov	r6, r5
 8008646:	4566      	cmp	r6, ip
 8008648:	d30e      	bcc.n	8008668 <__mdiff+0xec>
 800864a:	f10c 0203 	add.w	r2, ip, #3
 800864e:	1b52      	subs	r2, r2, r5
 8008650:	f022 0203 	bic.w	r2, r2, #3
 8008654:	3d03      	subs	r5, #3
 8008656:	45ac      	cmp	ip, r5
 8008658:	bf38      	it	cc
 800865a:	2200      	movcc	r2, #0
 800865c:	441a      	add	r2, r3
 800865e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008662:	b17b      	cbz	r3, 8008684 <__mdiff+0x108>
 8008664:	6107      	str	r7, [r0, #16]
 8008666:	e7a3      	b.n	80085b0 <__mdiff+0x34>
 8008668:	f856 8b04 	ldr.w	r8, [r6], #4
 800866c:	fa11 f288 	uxtah	r2, r1, r8
 8008670:	1414      	asrs	r4, r2, #16
 8008672:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008676:	b292      	uxth	r2, r2
 8008678:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800867c:	f84e 2b04 	str.w	r2, [lr], #4
 8008680:	1421      	asrs	r1, r4, #16
 8008682:	e7e0      	b.n	8008646 <__mdiff+0xca>
 8008684:	3f01      	subs	r7, #1
 8008686:	e7ea      	b.n	800865e <__mdiff+0xe2>
 8008688:	08009c10 	.word	0x08009c10
 800868c:	08009c9c 	.word	0x08009c9c

08008690 <__ulp>:
 8008690:	b082      	sub	sp, #8
 8008692:	ed8d 0b00 	vstr	d0, [sp]
 8008696:	9b01      	ldr	r3, [sp, #4]
 8008698:	4912      	ldr	r1, [pc, #72]	; (80086e4 <__ulp+0x54>)
 800869a:	4019      	ands	r1, r3
 800869c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80086a0:	2900      	cmp	r1, #0
 80086a2:	dd05      	ble.n	80086b0 <__ulp+0x20>
 80086a4:	2200      	movs	r2, #0
 80086a6:	460b      	mov	r3, r1
 80086a8:	ec43 2b10 	vmov	d0, r2, r3
 80086ac:	b002      	add	sp, #8
 80086ae:	4770      	bx	lr
 80086b0:	4249      	negs	r1, r1
 80086b2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80086b6:	ea4f 5021 	mov.w	r0, r1, asr #20
 80086ba:	f04f 0200 	mov.w	r2, #0
 80086be:	f04f 0300 	mov.w	r3, #0
 80086c2:	da04      	bge.n	80086ce <__ulp+0x3e>
 80086c4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80086c8:	fa41 f300 	asr.w	r3, r1, r0
 80086cc:	e7ec      	b.n	80086a8 <__ulp+0x18>
 80086ce:	f1a0 0114 	sub.w	r1, r0, #20
 80086d2:	291e      	cmp	r1, #30
 80086d4:	bfda      	itte	le
 80086d6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80086da:	fa20 f101 	lsrle.w	r1, r0, r1
 80086de:	2101      	movgt	r1, #1
 80086e0:	460a      	mov	r2, r1
 80086e2:	e7e1      	b.n	80086a8 <__ulp+0x18>
 80086e4:	7ff00000 	.word	0x7ff00000

080086e8 <__b2d>:
 80086e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ea:	6905      	ldr	r5, [r0, #16]
 80086ec:	f100 0714 	add.w	r7, r0, #20
 80086f0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80086f4:	1f2e      	subs	r6, r5, #4
 80086f6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80086fa:	4620      	mov	r0, r4
 80086fc:	f7ff fd48 	bl	8008190 <__hi0bits>
 8008700:	f1c0 0320 	rsb	r3, r0, #32
 8008704:	280a      	cmp	r0, #10
 8008706:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008784 <__b2d+0x9c>
 800870a:	600b      	str	r3, [r1, #0]
 800870c:	dc14      	bgt.n	8008738 <__b2d+0x50>
 800870e:	f1c0 0e0b 	rsb	lr, r0, #11
 8008712:	fa24 f10e 	lsr.w	r1, r4, lr
 8008716:	42b7      	cmp	r7, r6
 8008718:	ea41 030c 	orr.w	r3, r1, ip
 800871c:	bf34      	ite	cc
 800871e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008722:	2100      	movcs	r1, #0
 8008724:	3015      	adds	r0, #21
 8008726:	fa04 f000 	lsl.w	r0, r4, r0
 800872a:	fa21 f10e 	lsr.w	r1, r1, lr
 800872e:	ea40 0201 	orr.w	r2, r0, r1
 8008732:	ec43 2b10 	vmov	d0, r2, r3
 8008736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008738:	42b7      	cmp	r7, r6
 800873a:	bf3a      	itte	cc
 800873c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008740:	f1a5 0608 	subcc.w	r6, r5, #8
 8008744:	2100      	movcs	r1, #0
 8008746:	380b      	subs	r0, #11
 8008748:	d017      	beq.n	800877a <__b2d+0x92>
 800874a:	f1c0 0c20 	rsb	ip, r0, #32
 800874e:	fa04 f500 	lsl.w	r5, r4, r0
 8008752:	42be      	cmp	r6, r7
 8008754:	fa21 f40c 	lsr.w	r4, r1, ip
 8008758:	ea45 0504 	orr.w	r5, r5, r4
 800875c:	bf8c      	ite	hi
 800875e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008762:	2400      	movls	r4, #0
 8008764:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008768:	fa01 f000 	lsl.w	r0, r1, r0
 800876c:	fa24 f40c 	lsr.w	r4, r4, ip
 8008770:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008774:	ea40 0204 	orr.w	r2, r0, r4
 8008778:	e7db      	b.n	8008732 <__b2d+0x4a>
 800877a:	ea44 030c 	orr.w	r3, r4, ip
 800877e:	460a      	mov	r2, r1
 8008780:	e7d7      	b.n	8008732 <__b2d+0x4a>
 8008782:	bf00      	nop
 8008784:	3ff00000 	.word	0x3ff00000

08008788 <__d2b>:
 8008788:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800878c:	4689      	mov	r9, r1
 800878e:	2101      	movs	r1, #1
 8008790:	ec57 6b10 	vmov	r6, r7, d0
 8008794:	4690      	mov	r8, r2
 8008796:	f7ff fc09 	bl	8007fac <_Balloc>
 800879a:	4604      	mov	r4, r0
 800879c:	b930      	cbnz	r0, 80087ac <__d2b+0x24>
 800879e:	4602      	mov	r2, r0
 80087a0:	4b25      	ldr	r3, [pc, #148]	; (8008838 <__d2b+0xb0>)
 80087a2:	4826      	ldr	r0, [pc, #152]	; (800883c <__d2b+0xb4>)
 80087a4:	f240 310a 	movw	r1, #778	; 0x30a
 80087a8:	f000 fb50 	bl	8008e4c <__assert_func>
 80087ac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80087b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80087b4:	bb35      	cbnz	r5, 8008804 <__d2b+0x7c>
 80087b6:	2e00      	cmp	r6, #0
 80087b8:	9301      	str	r3, [sp, #4]
 80087ba:	d028      	beq.n	800880e <__d2b+0x86>
 80087bc:	4668      	mov	r0, sp
 80087be:	9600      	str	r6, [sp, #0]
 80087c0:	f7ff fd06 	bl	80081d0 <__lo0bits>
 80087c4:	9900      	ldr	r1, [sp, #0]
 80087c6:	b300      	cbz	r0, 800880a <__d2b+0x82>
 80087c8:	9a01      	ldr	r2, [sp, #4]
 80087ca:	f1c0 0320 	rsb	r3, r0, #32
 80087ce:	fa02 f303 	lsl.w	r3, r2, r3
 80087d2:	430b      	orrs	r3, r1
 80087d4:	40c2      	lsrs	r2, r0
 80087d6:	6163      	str	r3, [r4, #20]
 80087d8:	9201      	str	r2, [sp, #4]
 80087da:	9b01      	ldr	r3, [sp, #4]
 80087dc:	61a3      	str	r3, [r4, #24]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	bf14      	ite	ne
 80087e2:	2202      	movne	r2, #2
 80087e4:	2201      	moveq	r2, #1
 80087e6:	6122      	str	r2, [r4, #16]
 80087e8:	b1d5      	cbz	r5, 8008820 <__d2b+0x98>
 80087ea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80087ee:	4405      	add	r5, r0
 80087f0:	f8c9 5000 	str.w	r5, [r9]
 80087f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80087f8:	f8c8 0000 	str.w	r0, [r8]
 80087fc:	4620      	mov	r0, r4
 80087fe:	b003      	add	sp, #12
 8008800:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008804:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008808:	e7d5      	b.n	80087b6 <__d2b+0x2e>
 800880a:	6161      	str	r1, [r4, #20]
 800880c:	e7e5      	b.n	80087da <__d2b+0x52>
 800880e:	a801      	add	r0, sp, #4
 8008810:	f7ff fcde 	bl	80081d0 <__lo0bits>
 8008814:	9b01      	ldr	r3, [sp, #4]
 8008816:	6163      	str	r3, [r4, #20]
 8008818:	2201      	movs	r2, #1
 800881a:	6122      	str	r2, [r4, #16]
 800881c:	3020      	adds	r0, #32
 800881e:	e7e3      	b.n	80087e8 <__d2b+0x60>
 8008820:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008824:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008828:	f8c9 0000 	str.w	r0, [r9]
 800882c:	6918      	ldr	r0, [r3, #16]
 800882e:	f7ff fcaf 	bl	8008190 <__hi0bits>
 8008832:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008836:	e7df      	b.n	80087f8 <__d2b+0x70>
 8008838:	08009c10 	.word	0x08009c10
 800883c:	08009c9c 	.word	0x08009c9c

08008840 <__ratio>:
 8008840:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008844:	4688      	mov	r8, r1
 8008846:	4669      	mov	r1, sp
 8008848:	4681      	mov	r9, r0
 800884a:	f7ff ff4d 	bl	80086e8 <__b2d>
 800884e:	a901      	add	r1, sp, #4
 8008850:	4640      	mov	r0, r8
 8008852:	ec55 4b10 	vmov	r4, r5, d0
 8008856:	f7ff ff47 	bl	80086e8 <__b2d>
 800885a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800885e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008862:	eba3 0c02 	sub.w	ip, r3, r2
 8008866:	e9dd 3200 	ldrd	r3, r2, [sp]
 800886a:	1a9b      	subs	r3, r3, r2
 800886c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008870:	ec51 0b10 	vmov	r0, r1, d0
 8008874:	2b00      	cmp	r3, #0
 8008876:	bfd6      	itet	le
 8008878:	460a      	movle	r2, r1
 800887a:	462a      	movgt	r2, r5
 800887c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008880:	468b      	mov	fp, r1
 8008882:	462f      	mov	r7, r5
 8008884:	bfd4      	ite	le
 8008886:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800888a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800888e:	4620      	mov	r0, r4
 8008890:	ee10 2a10 	vmov	r2, s0
 8008894:	465b      	mov	r3, fp
 8008896:	4639      	mov	r1, r7
 8008898:	f7f8 f800 	bl	800089c <__aeabi_ddiv>
 800889c:	ec41 0b10 	vmov	d0, r0, r1
 80088a0:	b003      	add	sp, #12
 80088a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080088a6 <__copybits>:
 80088a6:	3901      	subs	r1, #1
 80088a8:	b570      	push	{r4, r5, r6, lr}
 80088aa:	1149      	asrs	r1, r1, #5
 80088ac:	6914      	ldr	r4, [r2, #16]
 80088ae:	3101      	adds	r1, #1
 80088b0:	f102 0314 	add.w	r3, r2, #20
 80088b4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80088b8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80088bc:	1f05      	subs	r5, r0, #4
 80088be:	42a3      	cmp	r3, r4
 80088c0:	d30c      	bcc.n	80088dc <__copybits+0x36>
 80088c2:	1aa3      	subs	r3, r4, r2
 80088c4:	3b11      	subs	r3, #17
 80088c6:	f023 0303 	bic.w	r3, r3, #3
 80088ca:	3211      	adds	r2, #17
 80088cc:	42a2      	cmp	r2, r4
 80088ce:	bf88      	it	hi
 80088d0:	2300      	movhi	r3, #0
 80088d2:	4418      	add	r0, r3
 80088d4:	2300      	movs	r3, #0
 80088d6:	4288      	cmp	r0, r1
 80088d8:	d305      	bcc.n	80088e6 <__copybits+0x40>
 80088da:	bd70      	pop	{r4, r5, r6, pc}
 80088dc:	f853 6b04 	ldr.w	r6, [r3], #4
 80088e0:	f845 6f04 	str.w	r6, [r5, #4]!
 80088e4:	e7eb      	b.n	80088be <__copybits+0x18>
 80088e6:	f840 3b04 	str.w	r3, [r0], #4
 80088ea:	e7f4      	b.n	80088d6 <__copybits+0x30>

080088ec <__any_on>:
 80088ec:	f100 0214 	add.w	r2, r0, #20
 80088f0:	6900      	ldr	r0, [r0, #16]
 80088f2:	114b      	asrs	r3, r1, #5
 80088f4:	4298      	cmp	r0, r3
 80088f6:	b510      	push	{r4, lr}
 80088f8:	db11      	blt.n	800891e <__any_on+0x32>
 80088fa:	dd0a      	ble.n	8008912 <__any_on+0x26>
 80088fc:	f011 011f 	ands.w	r1, r1, #31
 8008900:	d007      	beq.n	8008912 <__any_on+0x26>
 8008902:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008906:	fa24 f001 	lsr.w	r0, r4, r1
 800890a:	fa00 f101 	lsl.w	r1, r0, r1
 800890e:	428c      	cmp	r4, r1
 8008910:	d10b      	bne.n	800892a <__any_on+0x3e>
 8008912:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008916:	4293      	cmp	r3, r2
 8008918:	d803      	bhi.n	8008922 <__any_on+0x36>
 800891a:	2000      	movs	r0, #0
 800891c:	bd10      	pop	{r4, pc}
 800891e:	4603      	mov	r3, r0
 8008920:	e7f7      	b.n	8008912 <__any_on+0x26>
 8008922:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008926:	2900      	cmp	r1, #0
 8008928:	d0f5      	beq.n	8008916 <__any_on+0x2a>
 800892a:	2001      	movs	r0, #1
 800892c:	e7f6      	b.n	800891c <__any_on+0x30>

0800892e <_calloc_r>:
 800892e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008930:	fba1 2402 	umull	r2, r4, r1, r2
 8008934:	b94c      	cbnz	r4, 800894a <_calloc_r+0x1c>
 8008936:	4611      	mov	r1, r2
 8008938:	9201      	str	r2, [sp, #4]
 800893a:	f000 f87b 	bl	8008a34 <_malloc_r>
 800893e:	9a01      	ldr	r2, [sp, #4]
 8008940:	4605      	mov	r5, r0
 8008942:	b930      	cbnz	r0, 8008952 <_calloc_r+0x24>
 8008944:	4628      	mov	r0, r5
 8008946:	b003      	add	sp, #12
 8008948:	bd30      	pop	{r4, r5, pc}
 800894a:	220c      	movs	r2, #12
 800894c:	6002      	str	r2, [r0, #0]
 800894e:	2500      	movs	r5, #0
 8008950:	e7f8      	b.n	8008944 <_calloc_r+0x16>
 8008952:	4621      	mov	r1, r4
 8008954:	f7fc fbbe 	bl	80050d4 <memset>
 8008958:	e7f4      	b.n	8008944 <_calloc_r+0x16>
	...

0800895c <_free_r>:
 800895c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800895e:	2900      	cmp	r1, #0
 8008960:	d044      	beq.n	80089ec <_free_r+0x90>
 8008962:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008966:	9001      	str	r0, [sp, #4]
 8008968:	2b00      	cmp	r3, #0
 800896a:	f1a1 0404 	sub.w	r4, r1, #4
 800896e:	bfb8      	it	lt
 8008970:	18e4      	addlt	r4, r4, r3
 8008972:	f000 fab5 	bl	8008ee0 <__malloc_lock>
 8008976:	4a1e      	ldr	r2, [pc, #120]	; (80089f0 <_free_r+0x94>)
 8008978:	9801      	ldr	r0, [sp, #4]
 800897a:	6813      	ldr	r3, [r2, #0]
 800897c:	b933      	cbnz	r3, 800898c <_free_r+0x30>
 800897e:	6063      	str	r3, [r4, #4]
 8008980:	6014      	str	r4, [r2, #0]
 8008982:	b003      	add	sp, #12
 8008984:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008988:	f000 bab0 	b.w	8008eec <__malloc_unlock>
 800898c:	42a3      	cmp	r3, r4
 800898e:	d908      	bls.n	80089a2 <_free_r+0x46>
 8008990:	6825      	ldr	r5, [r4, #0]
 8008992:	1961      	adds	r1, r4, r5
 8008994:	428b      	cmp	r3, r1
 8008996:	bf01      	itttt	eq
 8008998:	6819      	ldreq	r1, [r3, #0]
 800899a:	685b      	ldreq	r3, [r3, #4]
 800899c:	1949      	addeq	r1, r1, r5
 800899e:	6021      	streq	r1, [r4, #0]
 80089a0:	e7ed      	b.n	800897e <_free_r+0x22>
 80089a2:	461a      	mov	r2, r3
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	b10b      	cbz	r3, 80089ac <_free_r+0x50>
 80089a8:	42a3      	cmp	r3, r4
 80089aa:	d9fa      	bls.n	80089a2 <_free_r+0x46>
 80089ac:	6811      	ldr	r1, [r2, #0]
 80089ae:	1855      	adds	r5, r2, r1
 80089b0:	42a5      	cmp	r5, r4
 80089b2:	d10b      	bne.n	80089cc <_free_r+0x70>
 80089b4:	6824      	ldr	r4, [r4, #0]
 80089b6:	4421      	add	r1, r4
 80089b8:	1854      	adds	r4, r2, r1
 80089ba:	42a3      	cmp	r3, r4
 80089bc:	6011      	str	r1, [r2, #0]
 80089be:	d1e0      	bne.n	8008982 <_free_r+0x26>
 80089c0:	681c      	ldr	r4, [r3, #0]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	6053      	str	r3, [r2, #4]
 80089c6:	4421      	add	r1, r4
 80089c8:	6011      	str	r1, [r2, #0]
 80089ca:	e7da      	b.n	8008982 <_free_r+0x26>
 80089cc:	d902      	bls.n	80089d4 <_free_r+0x78>
 80089ce:	230c      	movs	r3, #12
 80089d0:	6003      	str	r3, [r0, #0]
 80089d2:	e7d6      	b.n	8008982 <_free_r+0x26>
 80089d4:	6825      	ldr	r5, [r4, #0]
 80089d6:	1961      	adds	r1, r4, r5
 80089d8:	428b      	cmp	r3, r1
 80089da:	bf04      	itt	eq
 80089dc:	6819      	ldreq	r1, [r3, #0]
 80089de:	685b      	ldreq	r3, [r3, #4]
 80089e0:	6063      	str	r3, [r4, #4]
 80089e2:	bf04      	itt	eq
 80089e4:	1949      	addeq	r1, r1, r5
 80089e6:	6021      	streq	r1, [r4, #0]
 80089e8:	6054      	str	r4, [r2, #4]
 80089ea:	e7ca      	b.n	8008982 <_free_r+0x26>
 80089ec:	b003      	add	sp, #12
 80089ee:	bd30      	pop	{r4, r5, pc}
 80089f0:	200002fc 	.word	0x200002fc

080089f4 <sbrk_aligned>:
 80089f4:	b570      	push	{r4, r5, r6, lr}
 80089f6:	4e0e      	ldr	r6, [pc, #56]	; (8008a30 <sbrk_aligned+0x3c>)
 80089f8:	460c      	mov	r4, r1
 80089fa:	6831      	ldr	r1, [r6, #0]
 80089fc:	4605      	mov	r5, r0
 80089fe:	b911      	cbnz	r1, 8008a06 <sbrk_aligned+0x12>
 8008a00:	f000 f9f2 	bl	8008de8 <_sbrk_r>
 8008a04:	6030      	str	r0, [r6, #0]
 8008a06:	4621      	mov	r1, r4
 8008a08:	4628      	mov	r0, r5
 8008a0a:	f000 f9ed 	bl	8008de8 <_sbrk_r>
 8008a0e:	1c43      	adds	r3, r0, #1
 8008a10:	d00a      	beq.n	8008a28 <sbrk_aligned+0x34>
 8008a12:	1cc4      	adds	r4, r0, #3
 8008a14:	f024 0403 	bic.w	r4, r4, #3
 8008a18:	42a0      	cmp	r0, r4
 8008a1a:	d007      	beq.n	8008a2c <sbrk_aligned+0x38>
 8008a1c:	1a21      	subs	r1, r4, r0
 8008a1e:	4628      	mov	r0, r5
 8008a20:	f000 f9e2 	bl	8008de8 <_sbrk_r>
 8008a24:	3001      	adds	r0, #1
 8008a26:	d101      	bne.n	8008a2c <sbrk_aligned+0x38>
 8008a28:	f04f 34ff 	mov.w	r4, #4294967295
 8008a2c:	4620      	mov	r0, r4
 8008a2e:	bd70      	pop	{r4, r5, r6, pc}
 8008a30:	20000300 	.word	0x20000300

08008a34 <_malloc_r>:
 8008a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a38:	1ccd      	adds	r5, r1, #3
 8008a3a:	f025 0503 	bic.w	r5, r5, #3
 8008a3e:	3508      	adds	r5, #8
 8008a40:	2d0c      	cmp	r5, #12
 8008a42:	bf38      	it	cc
 8008a44:	250c      	movcc	r5, #12
 8008a46:	2d00      	cmp	r5, #0
 8008a48:	4607      	mov	r7, r0
 8008a4a:	db01      	blt.n	8008a50 <_malloc_r+0x1c>
 8008a4c:	42a9      	cmp	r1, r5
 8008a4e:	d905      	bls.n	8008a5c <_malloc_r+0x28>
 8008a50:	230c      	movs	r3, #12
 8008a52:	603b      	str	r3, [r7, #0]
 8008a54:	2600      	movs	r6, #0
 8008a56:	4630      	mov	r0, r6
 8008a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a5c:	4e2e      	ldr	r6, [pc, #184]	; (8008b18 <_malloc_r+0xe4>)
 8008a5e:	f000 fa3f 	bl	8008ee0 <__malloc_lock>
 8008a62:	6833      	ldr	r3, [r6, #0]
 8008a64:	461c      	mov	r4, r3
 8008a66:	bb34      	cbnz	r4, 8008ab6 <_malloc_r+0x82>
 8008a68:	4629      	mov	r1, r5
 8008a6a:	4638      	mov	r0, r7
 8008a6c:	f7ff ffc2 	bl	80089f4 <sbrk_aligned>
 8008a70:	1c43      	adds	r3, r0, #1
 8008a72:	4604      	mov	r4, r0
 8008a74:	d14d      	bne.n	8008b12 <_malloc_r+0xde>
 8008a76:	6834      	ldr	r4, [r6, #0]
 8008a78:	4626      	mov	r6, r4
 8008a7a:	2e00      	cmp	r6, #0
 8008a7c:	d140      	bne.n	8008b00 <_malloc_r+0xcc>
 8008a7e:	6823      	ldr	r3, [r4, #0]
 8008a80:	4631      	mov	r1, r6
 8008a82:	4638      	mov	r0, r7
 8008a84:	eb04 0803 	add.w	r8, r4, r3
 8008a88:	f000 f9ae 	bl	8008de8 <_sbrk_r>
 8008a8c:	4580      	cmp	r8, r0
 8008a8e:	d13a      	bne.n	8008b06 <_malloc_r+0xd2>
 8008a90:	6821      	ldr	r1, [r4, #0]
 8008a92:	3503      	adds	r5, #3
 8008a94:	1a6d      	subs	r5, r5, r1
 8008a96:	f025 0503 	bic.w	r5, r5, #3
 8008a9a:	3508      	adds	r5, #8
 8008a9c:	2d0c      	cmp	r5, #12
 8008a9e:	bf38      	it	cc
 8008aa0:	250c      	movcc	r5, #12
 8008aa2:	4629      	mov	r1, r5
 8008aa4:	4638      	mov	r0, r7
 8008aa6:	f7ff ffa5 	bl	80089f4 <sbrk_aligned>
 8008aaa:	3001      	adds	r0, #1
 8008aac:	d02b      	beq.n	8008b06 <_malloc_r+0xd2>
 8008aae:	6823      	ldr	r3, [r4, #0]
 8008ab0:	442b      	add	r3, r5
 8008ab2:	6023      	str	r3, [r4, #0]
 8008ab4:	e00e      	b.n	8008ad4 <_malloc_r+0xa0>
 8008ab6:	6822      	ldr	r2, [r4, #0]
 8008ab8:	1b52      	subs	r2, r2, r5
 8008aba:	d41e      	bmi.n	8008afa <_malloc_r+0xc6>
 8008abc:	2a0b      	cmp	r2, #11
 8008abe:	d916      	bls.n	8008aee <_malloc_r+0xba>
 8008ac0:	1961      	adds	r1, r4, r5
 8008ac2:	42a3      	cmp	r3, r4
 8008ac4:	6025      	str	r5, [r4, #0]
 8008ac6:	bf18      	it	ne
 8008ac8:	6059      	strne	r1, [r3, #4]
 8008aca:	6863      	ldr	r3, [r4, #4]
 8008acc:	bf08      	it	eq
 8008ace:	6031      	streq	r1, [r6, #0]
 8008ad0:	5162      	str	r2, [r4, r5]
 8008ad2:	604b      	str	r3, [r1, #4]
 8008ad4:	4638      	mov	r0, r7
 8008ad6:	f104 060b 	add.w	r6, r4, #11
 8008ada:	f000 fa07 	bl	8008eec <__malloc_unlock>
 8008ade:	f026 0607 	bic.w	r6, r6, #7
 8008ae2:	1d23      	adds	r3, r4, #4
 8008ae4:	1af2      	subs	r2, r6, r3
 8008ae6:	d0b6      	beq.n	8008a56 <_malloc_r+0x22>
 8008ae8:	1b9b      	subs	r3, r3, r6
 8008aea:	50a3      	str	r3, [r4, r2]
 8008aec:	e7b3      	b.n	8008a56 <_malloc_r+0x22>
 8008aee:	6862      	ldr	r2, [r4, #4]
 8008af0:	42a3      	cmp	r3, r4
 8008af2:	bf0c      	ite	eq
 8008af4:	6032      	streq	r2, [r6, #0]
 8008af6:	605a      	strne	r2, [r3, #4]
 8008af8:	e7ec      	b.n	8008ad4 <_malloc_r+0xa0>
 8008afa:	4623      	mov	r3, r4
 8008afc:	6864      	ldr	r4, [r4, #4]
 8008afe:	e7b2      	b.n	8008a66 <_malloc_r+0x32>
 8008b00:	4634      	mov	r4, r6
 8008b02:	6876      	ldr	r6, [r6, #4]
 8008b04:	e7b9      	b.n	8008a7a <_malloc_r+0x46>
 8008b06:	230c      	movs	r3, #12
 8008b08:	603b      	str	r3, [r7, #0]
 8008b0a:	4638      	mov	r0, r7
 8008b0c:	f000 f9ee 	bl	8008eec <__malloc_unlock>
 8008b10:	e7a1      	b.n	8008a56 <_malloc_r+0x22>
 8008b12:	6025      	str	r5, [r4, #0]
 8008b14:	e7de      	b.n	8008ad4 <_malloc_r+0xa0>
 8008b16:	bf00      	nop
 8008b18:	200002fc 	.word	0x200002fc

08008b1c <__ssputs_r>:
 8008b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b20:	688e      	ldr	r6, [r1, #8]
 8008b22:	429e      	cmp	r6, r3
 8008b24:	4682      	mov	sl, r0
 8008b26:	460c      	mov	r4, r1
 8008b28:	4690      	mov	r8, r2
 8008b2a:	461f      	mov	r7, r3
 8008b2c:	d838      	bhi.n	8008ba0 <__ssputs_r+0x84>
 8008b2e:	898a      	ldrh	r2, [r1, #12]
 8008b30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008b34:	d032      	beq.n	8008b9c <__ssputs_r+0x80>
 8008b36:	6825      	ldr	r5, [r4, #0]
 8008b38:	6909      	ldr	r1, [r1, #16]
 8008b3a:	eba5 0901 	sub.w	r9, r5, r1
 8008b3e:	6965      	ldr	r5, [r4, #20]
 8008b40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b48:	3301      	adds	r3, #1
 8008b4a:	444b      	add	r3, r9
 8008b4c:	106d      	asrs	r5, r5, #1
 8008b4e:	429d      	cmp	r5, r3
 8008b50:	bf38      	it	cc
 8008b52:	461d      	movcc	r5, r3
 8008b54:	0553      	lsls	r3, r2, #21
 8008b56:	d531      	bpl.n	8008bbc <__ssputs_r+0xa0>
 8008b58:	4629      	mov	r1, r5
 8008b5a:	f7ff ff6b 	bl	8008a34 <_malloc_r>
 8008b5e:	4606      	mov	r6, r0
 8008b60:	b950      	cbnz	r0, 8008b78 <__ssputs_r+0x5c>
 8008b62:	230c      	movs	r3, #12
 8008b64:	f8ca 3000 	str.w	r3, [sl]
 8008b68:	89a3      	ldrh	r3, [r4, #12]
 8008b6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b6e:	81a3      	strh	r3, [r4, #12]
 8008b70:	f04f 30ff 	mov.w	r0, #4294967295
 8008b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b78:	6921      	ldr	r1, [r4, #16]
 8008b7a:	464a      	mov	r2, r9
 8008b7c:	f7ff fa08 	bl	8007f90 <memcpy>
 8008b80:	89a3      	ldrh	r3, [r4, #12]
 8008b82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008b86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b8a:	81a3      	strh	r3, [r4, #12]
 8008b8c:	6126      	str	r6, [r4, #16]
 8008b8e:	6165      	str	r5, [r4, #20]
 8008b90:	444e      	add	r6, r9
 8008b92:	eba5 0509 	sub.w	r5, r5, r9
 8008b96:	6026      	str	r6, [r4, #0]
 8008b98:	60a5      	str	r5, [r4, #8]
 8008b9a:	463e      	mov	r6, r7
 8008b9c:	42be      	cmp	r6, r7
 8008b9e:	d900      	bls.n	8008ba2 <__ssputs_r+0x86>
 8008ba0:	463e      	mov	r6, r7
 8008ba2:	6820      	ldr	r0, [r4, #0]
 8008ba4:	4632      	mov	r2, r6
 8008ba6:	4641      	mov	r1, r8
 8008ba8:	f000 f980 	bl	8008eac <memmove>
 8008bac:	68a3      	ldr	r3, [r4, #8]
 8008bae:	1b9b      	subs	r3, r3, r6
 8008bb0:	60a3      	str	r3, [r4, #8]
 8008bb2:	6823      	ldr	r3, [r4, #0]
 8008bb4:	4433      	add	r3, r6
 8008bb6:	6023      	str	r3, [r4, #0]
 8008bb8:	2000      	movs	r0, #0
 8008bba:	e7db      	b.n	8008b74 <__ssputs_r+0x58>
 8008bbc:	462a      	mov	r2, r5
 8008bbe:	f000 f99b 	bl	8008ef8 <_realloc_r>
 8008bc2:	4606      	mov	r6, r0
 8008bc4:	2800      	cmp	r0, #0
 8008bc6:	d1e1      	bne.n	8008b8c <__ssputs_r+0x70>
 8008bc8:	6921      	ldr	r1, [r4, #16]
 8008bca:	4650      	mov	r0, sl
 8008bcc:	f7ff fec6 	bl	800895c <_free_r>
 8008bd0:	e7c7      	b.n	8008b62 <__ssputs_r+0x46>
	...

08008bd4 <_svfiprintf_r>:
 8008bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bd8:	4698      	mov	r8, r3
 8008bda:	898b      	ldrh	r3, [r1, #12]
 8008bdc:	061b      	lsls	r3, r3, #24
 8008bde:	b09d      	sub	sp, #116	; 0x74
 8008be0:	4607      	mov	r7, r0
 8008be2:	460d      	mov	r5, r1
 8008be4:	4614      	mov	r4, r2
 8008be6:	d50e      	bpl.n	8008c06 <_svfiprintf_r+0x32>
 8008be8:	690b      	ldr	r3, [r1, #16]
 8008bea:	b963      	cbnz	r3, 8008c06 <_svfiprintf_r+0x32>
 8008bec:	2140      	movs	r1, #64	; 0x40
 8008bee:	f7ff ff21 	bl	8008a34 <_malloc_r>
 8008bf2:	6028      	str	r0, [r5, #0]
 8008bf4:	6128      	str	r0, [r5, #16]
 8008bf6:	b920      	cbnz	r0, 8008c02 <_svfiprintf_r+0x2e>
 8008bf8:	230c      	movs	r3, #12
 8008bfa:	603b      	str	r3, [r7, #0]
 8008bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8008c00:	e0d1      	b.n	8008da6 <_svfiprintf_r+0x1d2>
 8008c02:	2340      	movs	r3, #64	; 0x40
 8008c04:	616b      	str	r3, [r5, #20]
 8008c06:	2300      	movs	r3, #0
 8008c08:	9309      	str	r3, [sp, #36]	; 0x24
 8008c0a:	2320      	movs	r3, #32
 8008c0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c10:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c14:	2330      	movs	r3, #48	; 0x30
 8008c16:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008dc0 <_svfiprintf_r+0x1ec>
 8008c1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c1e:	f04f 0901 	mov.w	r9, #1
 8008c22:	4623      	mov	r3, r4
 8008c24:	469a      	mov	sl, r3
 8008c26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c2a:	b10a      	cbz	r2, 8008c30 <_svfiprintf_r+0x5c>
 8008c2c:	2a25      	cmp	r2, #37	; 0x25
 8008c2e:	d1f9      	bne.n	8008c24 <_svfiprintf_r+0x50>
 8008c30:	ebba 0b04 	subs.w	fp, sl, r4
 8008c34:	d00b      	beq.n	8008c4e <_svfiprintf_r+0x7a>
 8008c36:	465b      	mov	r3, fp
 8008c38:	4622      	mov	r2, r4
 8008c3a:	4629      	mov	r1, r5
 8008c3c:	4638      	mov	r0, r7
 8008c3e:	f7ff ff6d 	bl	8008b1c <__ssputs_r>
 8008c42:	3001      	adds	r0, #1
 8008c44:	f000 80aa 	beq.w	8008d9c <_svfiprintf_r+0x1c8>
 8008c48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c4a:	445a      	add	r2, fp
 8008c4c:	9209      	str	r2, [sp, #36]	; 0x24
 8008c4e:	f89a 3000 	ldrb.w	r3, [sl]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	f000 80a2 	beq.w	8008d9c <_svfiprintf_r+0x1c8>
 8008c58:	2300      	movs	r3, #0
 8008c5a:	f04f 32ff 	mov.w	r2, #4294967295
 8008c5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c62:	f10a 0a01 	add.w	sl, sl, #1
 8008c66:	9304      	str	r3, [sp, #16]
 8008c68:	9307      	str	r3, [sp, #28]
 8008c6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c6e:	931a      	str	r3, [sp, #104]	; 0x68
 8008c70:	4654      	mov	r4, sl
 8008c72:	2205      	movs	r2, #5
 8008c74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c78:	4851      	ldr	r0, [pc, #324]	; (8008dc0 <_svfiprintf_r+0x1ec>)
 8008c7a:	f7f7 fad9 	bl	8000230 <memchr>
 8008c7e:	9a04      	ldr	r2, [sp, #16]
 8008c80:	b9d8      	cbnz	r0, 8008cba <_svfiprintf_r+0xe6>
 8008c82:	06d0      	lsls	r0, r2, #27
 8008c84:	bf44      	itt	mi
 8008c86:	2320      	movmi	r3, #32
 8008c88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c8c:	0711      	lsls	r1, r2, #28
 8008c8e:	bf44      	itt	mi
 8008c90:	232b      	movmi	r3, #43	; 0x2b
 8008c92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c96:	f89a 3000 	ldrb.w	r3, [sl]
 8008c9a:	2b2a      	cmp	r3, #42	; 0x2a
 8008c9c:	d015      	beq.n	8008cca <_svfiprintf_r+0xf6>
 8008c9e:	9a07      	ldr	r2, [sp, #28]
 8008ca0:	4654      	mov	r4, sl
 8008ca2:	2000      	movs	r0, #0
 8008ca4:	f04f 0c0a 	mov.w	ip, #10
 8008ca8:	4621      	mov	r1, r4
 8008caa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cae:	3b30      	subs	r3, #48	; 0x30
 8008cb0:	2b09      	cmp	r3, #9
 8008cb2:	d94e      	bls.n	8008d52 <_svfiprintf_r+0x17e>
 8008cb4:	b1b0      	cbz	r0, 8008ce4 <_svfiprintf_r+0x110>
 8008cb6:	9207      	str	r2, [sp, #28]
 8008cb8:	e014      	b.n	8008ce4 <_svfiprintf_r+0x110>
 8008cba:	eba0 0308 	sub.w	r3, r0, r8
 8008cbe:	fa09 f303 	lsl.w	r3, r9, r3
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	9304      	str	r3, [sp, #16]
 8008cc6:	46a2      	mov	sl, r4
 8008cc8:	e7d2      	b.n	8008c70 <_svfiprintf_r+0x9c>
 8008cca:	9b03      	ldr	r3, [sp, #12]
 8008ccc:	1d19      	adds	r1, r3, #4
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	9103      	str	r1, [sp, #12]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	bfbb      	ittet	lt
 8008cd6:	425b      	neglt	r3, r3
 8008cd8:	f042 0202 	orrlt.w	r2, r2, #2
 8008cdc:	9307      	strge	r3, [sp, #28]
 8008cde:	9307      	strlt	r3, [sp, #28]
 8008ce0:	bfb8      	it	lt
 8008ce2:	9204      	strlt	r2, [sp, #16]
 8008ce4:	7823      	ldrb	r3, [r4, #0]
 8008ce6:	2b2e      	cmp	r3, #46	; 0x2e
 8008ce8:	d10c      	bne.n	8008d04 <_svfiprintf_r+0x130>
 8008cea:	7863      	ldrb	r3, [r4, #1]
 8008cec:	2b2a      	cmp	r3, #42	; 0x2a
 8008cee:	d135      	bne.n	8008d5c <_svfiprintf_r+0x188>
 8008cf0:	9b03      	ldr	r3, [sp, #12]
 8008cf2:	1d1a      	adds	r2, r3, #4
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	9203      	str	r2, [sp, #12]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	bfb8      	it	lt
 8008cfc:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d00:	3402      	adds	r4, #2
 8008d02:	9305      	str	r3, [sp, #20]
 8008d04:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008dd0 <_svfiprintf_r+0x1fc>
 8008d08:	7821      	ldrb	r1, [r4, #0]
 8008d0a:	2203      	movs	r2, #3
 8008d0c:	4650      	mov	r0, sl
 8008d0e:	f7f7 fa8f 	bl	8000230 <memchr>
 8008d12:	b140      	cbz	r0, 8008d26 <_svfiprintf_r+0x152>
 8008d14:	2340      	movs	r3, #64	; 0x40
 8008d16:	eba0 000a 	sub.w	r0, r0, sl
 8008d1a:	fa03 f000 	lsl.w	r0, r3, r0
 8008d1e:	9b04      	ldr	r3, [sp, #16]
 8008d20:	4303      	orrs	r3, r0
 8008d22:	3401      	adds	r4, #1
 8008d24:	9304      	str	r3, [sp, #16]
 8008d26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d2a:	4826      	ldr	r0, [pc, #152]	; (8008dc4 <_svfiprintf_r+0x1f0>)
 8008d2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d30:	2206      	movs	r2, #6
 8008d32:	f7f7 fa7d 	bl	8000230 <memchr>
 8008d36:	2800      	cmp	r0, #0
 8008d38:	d038      	beq.n	8008dac <_svfiprintf_r+0x1d8>
 8008d3a:	4b23      	ldr	r3, [pc, #140]	; (8008dc8 <_svfiprintf_r+0x1f4>)
 8008d3c:	bb1b      	cbnz	r3, 8008d86 <_svfiprintf_r+0x1b2>
 8008d3e:	9b03      	ldr	r3, [sp, #12]
 8008d40:	3307      	adds	r3, #7
 8008d42:	f023 0307 	bic.w	r3, r3, #7
 8008d46:	3308      	adds	r3, #8
 8008d48:	9303      	str	r3, [sp, #12]
 8008d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d4c:	4433      	add	r3, r6
 8008d4e:	9309      	str	r3, [sp, #36]	; 0x24
 8008d50:	e767      	b.n	8008c22 <_svfiprintf_r+0x4e>
 8008d52:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d56:	460c      	mov	r4, r1
 8008d58:	2001      	movs	r0, #1
 8008d5a:	e7a5      	b.n	8008ca8 <_svfiprintf_r+0xd4>
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	3401      	adds	r4, #1
 8008d60:	9305      	str	r3, [sp, #20]
 8008d62:	4619      	mov	r1, r3
 8008d64:	f04f 0c0a 	mov.w	ip, #10
 8008d68:	4620      	mov	r0, r4
 8008d6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d6e:	3a30      	subs	r2, #48	; 0x30
 8008d70:	2a09      	cmp	r2, #9
 8008d72:	d903      	bls.n	8008d7c <_svfiprintf_r+0x1a8>
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d0c5      	beq.n	8008d04 <_svfiprintf_r+0x130>
 8008d78:	9105      	str	r1, [sp, #20]
 8008d7a:	e7c3      	b.n	8008d04 <_svfiprintf_r+0x130>
 8008d7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d80:	4604      	mov	r4, r0
 8008d82:	2301      	movs	r3, #1
 8008d84:	e7f0      	b.n	8008d68 <_svfiprintf_r+0x194>
 8008d86:	ab03      	add	r3, sp, #12
 8008d88:	9300      	str	r3, [sp, #0]
 8008d8a:	462a      	mov	r2, r5
 8008d8c:	4b0f      	ldr	r3, [pc, #60]	; (8008dcc <_svfiprintf_r+0x1f8>)
 8008d8e:	a904      	add	r1, sp, #16
 8008d90:	4638      	mov	r0, r7
 8008d92:	f7fc fa47 	bl	8005224 <_printf_float>
 8008d96:	1c42      	adds	r2, r0, #1
 8008d98:	4606      	mov	r6, r0
 8008d9a:	d1d6      	bne.n	8008d4a <_svfiprintf_r+0x176>
 8008d9c:	89ab      	ldrh	r3, [r5, #12]
 8008d9e:	065b      	lsls	r3, r3, #25
 8008da0:	f53f af2c 	bmi.w	8008bfc <_svfiprintf_r+0x28>
 8008da4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008da6:	b01d      	add	sp, #116	; 0x74
 8008da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dac:	ab03      	add	r3, sp, #12
 8008dae:	9300      	str	r3, [sp, #0]
 8008db0:	462a      	mov	r2, r5
 8008db2:	4b06      	ldr	r3, [pc, #24]	; (8008dcc <_svfiprintf_r+0x1f8>)
 8008db4:	a904      	add	r1, sp, #16
 8008db6:	4638      	mov	r0, r7
 8008db8:	f7fc fcd8 	bl	800576c <_printf_i>
 8008dbc:	e7eb      	b.n	8008d96 <_svfiprintf_r+0x1c2>
 8008dbe:	bf00      	nop
 8008dc0:	08009df4 	.word	0x08009df4
 8008dc4:	08009dfe 	.word	0x08009dfe
 8008dc8:	08005225 	.word	0x08005225
 8008dcc:	08008b1d 	.word	0x08008b1d
 8008dd0:	08009dfa 	.word	0x08009dfa
 8008dd4:	00000000 	.word	0x00000000

08008dd8 <nan>:
 8008dd8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008de0 <nan+0x8>
 8008ddc:	4770      	bx	lr
 8008dde:	bf00      	nop
 8008de0:	00000000 	.word	0x00000000
 8008de4:	7ff80000 	.word	0x7ff80000

08008de8 <_sbrk_r>:
 8008de8:	b538      	push	{r3, r4, r5, lr}
 8008dea:	4d06      	ldr	r5, [pc, #24]	; (8008e04 <_sbrk_r+0x1c>)
 8008dec:	2300      	movs	r3, #0
 8008dee:	4604      	mov	r4, r0
 8008df0:	4608      	mov	r0, r1
 8008df2:	602b      	str	r3, [r5, #0]
 8008df4:	f7f8 fbc6 	bl	8001584 <_sbrk>
 8008df8:	1c43      	adds	r3, r0, #1
 8008dfa:	d102      	bne.n	8008e02 <_sbrk_r+0x1a>
 8008dfc:	682b      	ldr	r3, [r5, #0]
 8008dfe:	b103      	cbz	r3, 8008e02 <_sbrk_r+0x1a>
 8008e00:	6023      	str	r3, [r4, #0]
 8008e02:	bd38      	pop	{r3, r4, r5, pc}
 8008e04:	20000304 	.word	0x20000304

08008e08 <strncmp>:
 8008e08:	b510      	push	{r4, lr}
 8008e0a:	b17a      	cbz	r2, 8008e2c <strncmp+0x24>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	3901      	subs	r1, #1
 8008e10:	1884      	adds	r4, r0, r2
 8008e12:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008e16:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008e1a:	4290      	cmp	r0, r2
 8008e1c:	d101      	bne.n	8008e22 <strncmp+0x1a>
 8008e1e:	42a3      	cmp	r3, r4
 8008e20:	d101      	bne.n	8008e26 <strncmp+0x1e>
 8008e22:	1a80      	subs	r0, r0, r2
 8008e24:	bd10      	pop	{r4, pc}
 8008e26:	2800      	cmp	r0, #0
 8008e28:	d1f3      	bne.n	8008e12 <strncmp+0xa>
 8008e2a:	e7fa      	b.n	8008e22 <strncmp+0x1a>
 8008e2c:	4610      	mov	r0, r2
 8008e2e:	e7f9      	b.n	8008e24 <strncmp+0x1c>

08008e30 <__ascii_wctomb>:
 8008e30:	b149      	cbz	r1, 8008e46 <__ascii_wctomb+0x16>
 8008e32:	2aff      	cmp	r2, #255	; 0xff
 8008e34:	bf85      	ittet	hi
 8008e36:	238a      	movhi	r3, #138	; 0x8a
 8008e38:	6003      	strhi	r3, [r0, #0]
 8008e3a:	700a      	strbls	r2, [r1, #0]
 8008e3c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008e40:	bf98      	it	ls
 8008e42:	2001      	movls	r0, #1
 8008e44:	4770      	bx	lr
 8008e46:	4608      	mov	r0, r1
 8008e48:	4770      	bx	lr
	...

08008e4c <__assert_func>:
 8008e4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008e4e:	4614      	mov	r4, r2
 8008e50:	461a      	mov	r2, r3
 8008e52:	4b09      	ldr	r3, [pc, #36]	; (8008e78 <__assert_func+0x2c>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4605      	mov	r5, r0
 8008e58:	68d8      	ldr	r0, [r3, #12]
 8008e5a:	b14c      	cbz	r4, 8008e70 <__assert_func+0x24>
 8008e5c:	4b07      	ldr	r3, [pc, #28]	; (8008e7c <__assert_func+0x30>)
 8008e5e:	9100      	str	r1, [sp, #0]
 8008e60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008e64:	4906      	ldr	r1, [pc, #24]	; (8008e80 <__assert_func+0x34>)
 8008e66:	462b      	mov	r3, r5
 8008e68:	f000 f80e 	bl	8008e88 <fiprintf>
 8008e6c:	f000 fa8c 	bl	8009388 <abort>
 8008e70:	4b04      	ldr	r3, [pc, #16]	; (8008e84 <__assert_func+0x38>)
 8008e72:	461c      	mov	r4, r3
 8008e74:	e7f3      	b.n	8008e5e <__assert_func+0x12>
 8008e76:	bf00      	nop
 8008e78:	2000000c 	.word	0x2000000c
 8008e7c:	08009e05 	.word	0x08009e05
 8008e80:	08009e12 	.word	0x08009e12
 8008e84:	08009e40 	.word	0x08009e40

08008e88 <fiprintf>:
 8008e88:	b40e      	push	{r1, r2, r3}
 8008e8a:	b503      	push	{r0, r1, lr}
 8008e8c:	4601      	mov	r1, r0
 8008e8e:	ab03      	add	r3, sp, #12
 8008e90:	4805      	ldr	r0, [pc, #20]	; (8008ea8 <fiprintf+0x20>)
 8008e92:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e96:	6800      	ldr	r0, [r0, #0]
 8008e98:	9301      	str	r3, [sp, #4]
 8008e9a:	f000 f885 	bl	8008fa8 <_vfiprintf_r>
 8008e9e:	b002      	add	sp, #8
 8008ea0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ea4:	b003      	add	sp, #12
 8008ea6:	4770      	bx	lr
 8008ea8:	2000000c 	.word	0x2000000c

08008eac <memmove>:
 8008eac:	4288      	cmp	r0, r1
 8008eae:	b510      	push	{r4, lr}
 8008eb0:	eb01 0402 	add.w	r4, r1, r2
 8008eb4:	d902      	bls.n	8008ebc <memmove+0x10>
 8008eb6:	4284      	cmp	r4, r0
 8008eb8:	4623      	mov	r3, r4
 8008eba:	d807      	bhi.n	8008ecc <memmove+0x20>
 8008ebc:	1e43      	subs	r3, r0, #1
 8008ebe:	42a1      	cmp	r1, r4
 8008ec0:	d008      	beq.n	8008ed4 <memmove+0x28>
 8008ec2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ec6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008eca:	e7f8      	b.n	8008ebe <memmove+0x12>
 8008ecc:	4402      	add	r2, r0
 8008ece:	4601      	mov	r1, r0
 8008ed0:	428a      	cmp	r2, r1
 8008ed2:	d100      	bne.n	8008ed6 <memmove+0x2a>
 8008ed4:	bd10      	pop	{r4, pc}
 8008ed6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008eda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ede:	e7f7      	b.n	8008ed0 <memmove+0x24>

08008ee0 <__malloc_lock>:
 8008ee0:	4801      	ldr	r0, [pc, #4]	; (8008ee8 <__malloc_lock+0x8>)
 8008ee2:	f000 bc11 	b.w	8009708 <__retarget_lock_acquire_recursive>
 8008ee6:	bf00      	nop
 8008ee8:	20000308 	.word	0x20000308

08008eec <__malloc_unlock>:
 8008eec:	4801      	ldr	r0, [pc, #4]	; (8008ef4 <__malloc_unlock+0x8>)
 8008eee:	f000 bc0c 	b.w	800970a <__retarget_lock_release_recursive>
 8008ef2:	bf00      	nop
 8008ef4:	20000308 	.word	0x20000308

08008ef8 <_realloc_r>:
 8008ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008efc:	4680      	mov	r8, r0
 8008efe:	4614      	mov	r4, r2
 8008f00:	460e      	mov	r6, r1
 8008f02:	b921      	cbnz	r1, 8008f0e <_realloc_r+0x16>
 8008f04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f08:	4611      	mov	r1, r2
 8008f0a:	f7ff bd93 	b.w	8008a34 <_malloc_r>
 8008f0e:	b92a      	cbnz	r2, 8008f1c <_realloc_r+0x24>
 8008f10:	f7ff fd24 	bl	800895c <_free_r>
 8008f14:	4625      	mov	r5, r4
 8008f16:	4628      	mov	r0, r5
 8008f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f1c:	f000 fc5c 	bl	80097d8 <_malloc_usable_size_r>
 8008f20:	4284      	cmp	r4, r0
 8008f22:	4607      	mov	r7, r0
 8008f24:	d802      	bhi.n	8008f2c <_realloc_r+0x34>
 8008f26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008f2a:	d812      	bhi.n	8008f52 <_realloc_r+0x5a>
 8008f2c:	4621      	mov	r1, r4
 8008f2e:	4640      	mov	r0, r8
 8008f30:	f7ff fd80 	bl	8008a34 <_malloc_r>
 8008f34:	4605      	mov	r5, r0
 8008f36:	2800      	cmp	r0, #0
 8008f38:	d0ed      	beq.n	8008f16 <_realloc_r+0x1e>
 8008f3a:	42bc      	cmp	r4, r7
 8008f3c:	4622      	mov	r2, r4
 8008f3e:	4631      	mov	r1, r6
 8008f40:	bf28      	it	cs
 8008f42:	463a      	movcs	r2, r7
 8008f44:	f7ff f824 	bl	8007f90 <memcpy>
 8008f48:	4631      	mov	r1, r6
 8008f4a:	4640      	mov	r0, r8
 8008f4c:	f7ff fd06 	bl	800895c <_free_r>
 8008f50:	e7e1      	b.n	8008f16 <_realloc_r+0x1e>
 8008f52:	4635      	mov	r5, r6
 8008f54:	e7df      	b.n	8008f16 <_realloc_r+0x1e>

08008f56 <__sfputc_r>:
 8008f56:	6893      	ldr	r3, [r2, #8]
 8008f58:	3b01      	subs	r3, #1
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	b410      	push	{r4}
 8008f5e:	6093      	str	r3, [r2, #8]
 8008f60:	da08      	bge.n	8008f74 <__sfputc_r+0x1e>
 8008f62:	6994      	ldr	r4, [r2, #24]
 8008f64:	42a3      	cmp	r3, r4
 8008f66:	db01      	blt.n	8008f6c <__sfputc_r+0x16>
 8008f68:	290a      	cmp	r1, #10
 8008f6a:	d103      	bne.n	8008f74 <__sfputc_r+0x1e>
 8008f6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f70:	f000 b94a 	b.w	8009208 <__swbuf_r>
 8008f74:	6813      	ldr	r3, [r2, #0]
 8008f76:	1c58      	adds	r0, r3, #1
 8008f78:	6010      	str	r0, [r2, #0]
 8008f7a:	7019      	strb	r1, [r3, #0]
 8008f7c:	4608      	mov	r0, r1
 8008f7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f82:	4770      	bx	lr

08008f84 <__sfputs_r>:
 8008f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f86:	4606      	mov	r6, r0
 8008f88:	460f      	mov	r7, r1
 8008f8a:	4614      	mov	r4, r2
 8008f8c:	18d5      	adds	r5, r2, r3
 8008f8e:	42ac      	cmp	r4, r5
 8008f90:	d101      	bne.n	8008f96 <__sfputs_r+0x12>
 8008f92:	2000      	movs	r0, #0
 8008f94:	e007      	b.n	8008fa6 <__sfputs_r+0x22>
 8008f96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f9a:	463a      	mov	r2, r7
 8008f9c:	4630      	mov	r0, r6
 8008f9e:	f7ff ffda 	bl	8008f56 <__sfputc_r>
 8008fa2:	1c43      	adds	r3, r0, #1
 8008fa4:	d1f3      	bne.n	8008f8e <__sfputs_r+0xa>
 8008fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008fa8 <_vfiprintf_r>:
 8008fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fac:	460d      	mov	r5, r1
 8008fae:	b09d      	sub	sp, #116	; 0x74
 8008fb0:	4614      	mov	r4, r2
 8008fb2:	4698      	mov	r8, r3
 8008fb4:	4606      	mov	r6, r0
 8008fb6:	b118      	cbz	r0, 8008fc0 <_vfiprintf_r+0x18>
 8008fb8:	6983      	ldr	r3, [r0, #24]
 8008fba:	b90b      	cbnz	r3, 8008fc0 <_vfiprintf_r+0x18>
 8008fbc:	f000 fb06 	bl	80095cc <__sinit>
 8008fc0:	4b89      	ldr	r3, [pc, #548]	; (80091e8 <_vfiprintf_r+0x240>)
 8008fc2:	429d      	cmp	r5, r3
 8008fc4:	d11b      	bne.n	8008ffe <_vfiprintf_r+0x56>
 8008fc6:	6875      	ldr	r5, [r6, #4]
 8008fc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fca:	07d9      	lsls	r1, r3, #31
 8008fcc:	d405      	bmi.n	8008fda <_vfiprintf_r+0x32>
 8008fce:	89ab      	ldrh	r3, [r5, #12]
 8008fd0:	059a      	lsls	r2, r3, #22
 8008fd2:	d402      	bmi.n	8008fda <_vfiprintf_r+0x32>
 8008fd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008fd6:	f000 fb97 	bl	8009708 <__retarget_lock_acquire_recursive>
 8008fda:	89ab      	ldrh	r3, [r5, #12]
 8008fdc:	071b      	lsls	r3, r3, #28
 8008fde:	d501      	bpl.n	8008fe4 <_vfiprintf_r+0x3c>
 8008fe0:	692b      	ldr	r3, [r5, #16]
 8008fe2:	b9eb      	cbnz	r3, 8009020 <_vfiprintf_r+0x78>
 8008fe4:	4629      	mov	r1, r5
 8008fe6:	4630      	mov	r0, r6
 8008fe8:	f000 f960 	bl	80092ac <__swsetup_r>
 8008fec:	b1c0      	cbz	r0, 8009020 <_vfiprintf_r+0x78>
 8008fee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ff0:	07dc      	lsls	r4, r3, #31
 8008ff2:	d50e      	bpl.n	8009012 <_vfiprintf_r+0x6a>
 8008ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ff8:	b01d      	add	sp, #116	; 0x74
 8008ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ffe:	4b7b      	ldr	r3, [pc, #492]	; (80091ec <_vfiprintf_r+0x244>)
 8009000:	429d      	cmp	r5, r3
 8009002:	d101      	bne.n	8009008 <_vfiprintf_r+0x60>
 8009004:	68b5      	ldr	r5, [r6, #8]
 8009006:	e7df      	b.n	8008fc8 <_vfiprintf_r+0x20>
 8009008:	4b79      	ldr	r3, [pc, #484]	; (80091f0 <_vfiprintf_r+0x248>)
 800900a:	429d      	cmp	r5, r3
 800900c:	bf08      	it	eq
 800900e:	68f5      	ldreq	r5, [r6, #12]
 8009010:	e7da      	b.n	8008fc8 <_vfiprintf_r+0x20>
 8009012:	89ab      	ldrh	r3, [r5, #12]
 8009014:	0598      	lsls	r0, r3, #22
 8009016:	d4ed      	bmi.n	8008ff4 <_vfiprintf_r+0x4c>
 8009018:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800901a:	f000 fb76 	bl	800970a <__retarget_lock_release_recursive>
 800901e:	e7e9      	b.n	8008ff4 <_vfiprintf_r+0x4c>
 8009020:	2300      	movs	r3, #0
 8009022:	9309      	str	r3, [sp, #36]	; 0x24
 8009024:	2320      	movs	r3, #32
 8009026:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800902a:	f8cd 800c 	str.w	r8, [sp, #12]
 800902e:	2330      	movs	r3, #48	; 0x30
 8009030:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80091f4 <_vfiprintf_r+0x24c>
 8009034:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009038:	f04f 0901 	mov.w	r9, #1
 800903c:	4623      	mov	r3, r4
 800903e:	469a      	mov	sl, r3
 8009040:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009044:	b10a      	cbz	r2, 800904a <_vfiprintf_r+0xa2>
 8009046:	2a25      	cmp	r2, #37	; 0x25
 8009048:	d1f9      	bne.n	800903e <_vfiprintf_r+0x96>
 800904a:	ebba 0b04 	subs.w	fp, sl, r4
 800904e:	d00b      	beq.n	8009068 <_vfiprintf_r+0xc0>
 8009050:	465b      	mov	r3, fp
 8009052:	4622      	mov	r2, r4
 8009054:	4629      	mov	r1, r5
 8009056:	4630      	mov	r0, r6
 8009058:	f7ff ff94 	bl	8008f84 <__sfputs_r>
 800905c:	3001      	adds	r0, #1
 800905e:	f000 80aa 	beq.w	80091b6 <_vfiprintf_r+0x20e>
 8009062:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009064:	445a      	add	r2, fp
 8009066:	9209      	str	r2, [sp, #36]	; 0x24
 8009068:	f89a 3000 	ldrb.w	r3, [sl]
 800906c:	2b00      	cmp	r3, #0
 800906e:	f000 80a2 	beq.w	80091b6 <_vfiprintf_r+0x20e>
 8009072:	2300      	movs	r3, #0
 8009074:	f04f 32ff 	mov.w	r2, #4294967295
 8009078:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800907c:	f10a 0a01 	add.w	sl, sl, #1
 8009080:	9304      	str	r3, [sp, #16]
 8009082:	9307      	str	r3, [sp, #28]
 8009084:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009088:	931a      	str	r3, [sp, #104]	; 0x68
 800908a:	4654      	mov	r4, sl
 800908c:	2205      	movs	r2, #5
 800908e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009092:	4858      	ldr	r0, [pc, #352]	; (80091f4 <_vfiprintf_r+0x24c>)
 8009094:	f7f7 f8cc 	bl	8000230 <memchr>
 8009098:	9a04      	ldr	r2, [sp, #16]
 800909a:	b9d8      	cbnz	r0, 80090d4 <_vfiprintf_r+0x12c>
 800909c:	06d1      	lsls	r1, r2, #27
 800909e:	bf44      	itt	mi
 80090a0:	2320      	movmi	r3, #32
 80090a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090a6:	0713      	lsls	r3, r2, #28
 80090a8:	bf44      	itt	mi
 80090aa:	232b      	movmi	r3, #43	; 0x2b
 80090ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090b0:	f89a 3000 	ldrb.w	r3, [sl]
 80090b4:	2b2a      	cmp	r3, #42	; 0x2a
 80090b6:	d015      	beq.n	80090e4 <_vfiprintf_r+0x13c>
 80090b8:	9a07      	ldr	r2, [sp, #28]
 80090ba:	4654      	mov	r4, sl
 80090bc:	2000      	movs	r0, #0
 80090be:	f04f 0c0a 	mov.w	ip, #10
 80090c2:	4621      	mov	r1, r4
 80090c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090c8:	3b30      	subs	r3, #48	; 0x30
 80090ca:	2b09      	cmp	r3, #9
 80090cc:	d94e      	bls.n	800916c <_vfiprintf_r+0x1c4>
 80090ce:	b1b0      	cbz	r0, 80090fe <_vfiprintf_r+0x156>
 80090d0:	9207      	str	r2, [sp, #28]
 80090d2:	e014      	b.n	80090fe <_vfiprintf_r+0x156>
 80090d4:	eba0 0308 	sub.w	r3, r0, r8
 80090d8:	fa09 f303 	lsl.w	r3, r9, r3
 80090dc:	4313      	orrs	r3, r2
 80090de:	9304      	str	r3, [sp, #16]
 80090e0:	46a2      	mov	sl, r4
 80090e2:	e7d2      	b.n	800908a <_vfiprintf_r+0xe2>
 80090e4:	9b03      	ldr	r3, [sp, #12]
 80090e6:	1d19      	adds	r1, r3, #4
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	9103      	str	r1, [sp, #12]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	bfbb      	ittet	lt
 80090f0:	425b      	neglt	r3, r3
 80090f2:	f042 0202 	orrlt.w	r2, r2, #2
 80090f6:	9307      	strge	r3, [sp, #28]
 80090f8:	9307      	strlt	r3, [sp, #28]
 80090fa:	bfb8      	it	lt
 80090fc:	9204      	strlt	r2, [sp, #16]
 80090fe:	7823      	ldrb	r3, [r4, #0]
 8009100:	2b2e      	cmp	r3, #46	; 0x2e
 8009102:	d10c      	bne.n	800911e <_vfiprintf_r+0x176>
 8009104:	7863      	ldrb	r3, [r4, #1]
 8009106:	2b2a      	cmp	r3, #42	; 0x2a
 8009108:	d135      	bne.n	8009176 <_vfiprintf_r+0x1ce>
 800910a:	9b03      	ldr	r3, [sp, #12]
 800910c:	1d1a      	adds	r2, r3, #4
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	9203      	str	r2, [sp, #12]
 8009112:	2b00      	cmp	r3, #0
 8009114:	bfb8      	it	lt
 8009116:	f04f 33ff 	movlt.w	r3, #4294967295
 800911a:	3402      	adds	r4, #2
 800911c:	9305      	str	r3, [sp, #20]
 800911e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009204 <_vfiprintf_r+0x25c>
 8009122:	7821      	ldrb	r1, [r4, #0]
 8009124:	2203      	movs	r2, #3
 8009126:	4650      	mov	r0, sl
 8009128:	f7f7 f882 	bl	8000230 <memchr>
 800912c:	b140      	cbz	r0, 8009140 <_vfiprintf_r+0x198>
 800912e:	2340      	movs	r3, #64	; 0x40
 8009130:	eba0 000a 	sub.w	r0, r0, sl
 8009134:	fa03 f000 	lsl.w	r0, r3, r0
 8009138:	9b04      	ldr	r3, [sp, #16]
 800913a:	4303      	orrs	r3, r0
 800913c:	3401      	adds	r4, #1
 800913e:	9304      	str	r3, [sp, #16]
 8009140:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009144:	482c      	ldr	r0, [pc, #176]	; (80091f8 <_vfiprintf_r+0x250>)
 8009146:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800914a:	2206      	movs	r2, #6
 800914c:	f7f7 f870 	bl	8000230 <memchr>
 8009150:	2800      	cmp	r0, #0
 8009152:	d03f      	beq.n	80091d4 <_vfiprintf_r+0x22c>
 8009154:	4b29      	ldr	r3, [pc, #164]	; (80091fc <_vfiprintf_r+0x254>)
 8009156:	bb1b      	cbnz	r3, 80091a0 <_vfiprintf_r+0x1f8>
 8009158:	9b03      	ldr	r3, [sp, #12]
 800915a:	3307      	adds	r3, #7
 800915c:	f023 0307 	bic.w	r3, r3, #7
 8009160:	3308      	adds	r3, #8
 8009162:	9303      	str	r3, [sp, #12]
 8009164:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009166:	443b      	add	r3, r7
 8009168:	9309      	str	r3, [sp, #36]	; 0x24
 800916a:	e767      	b.n	800903c <_vfiprintf_r+0x94>
 800916c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009170:	460c      	mov	r4, r1
 8009172:	2001      	movs	r0, #1
 8009174:	e7a5      	b.n	80090c2 <_vfiprintf_r+0x11a>
 8009176:	2300      	movs	r3, #0
 8009178:	3401      	adds	r4, #1
 800917a:	9305      	str	r3, [sp, #20]
 800917c:	4619      	mov	r1, r3
 800917e:	f04f 0c0a 	mov.w	ip, #10
 8009182:	4620      	mov	r0, r4
 8009184:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009188:	3a30      	subs	r2, #48	; 0x30
 800918a:	2a09      	cmp	r2, #9
 800918c:	d903      	bls.n	8009196 <_vfiprintf_r+0x1ee>
 800918e:	2b00      	cmp	r3, #0
 8009190:	d0c5      	beq.n	800911e <_vfiprintf_r+0x176>
 8009192:	9105      	str	r1, [sp, #20]
 8009194:	e7c3      	b.n	800911e <_vfiprintf_r+0x176>
 8009196:	fb0c 2101 	mla	r1, ip, r1, r2
 800919a:	4604      	mov	r4, r0
 800919c:	2301      	movs	r3, #1
 800919e:	e7f0      	b.n	8009182 <_vfiprintf_r+0x1da>
 80091a0:	ab03      	add	r3, sp, #12
 80091a2:	9300      	str	r3, [sp, #0]
 80091a4:	462a      	mov	r2, r5
 80091a6:	4b16      	ldr	r3, [pc, #88]	; (8009200 <_vfiprintf_r+0x258>)
 80091a8:	a904      	add	r1, sp, #16
 80091aa:	4630      	mov	r0, r6
 80091ac:	f7fc f83a 	bl	8005224 <_printf_float>
 80091b0:	4607      	mov	r7, r0
 80091b2:	1c78      	adds	r0, r7, #1
 80091b4:	d1d6      	bne.n	8009164 <_vfiprintf_r+0x1bc>
 80091b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091b8:	07d9      	lsls	r1, r3, #31
 80091ba:	d405      	bmi.n	80091c8 <_vfiprintf_r+0x220>
 80091bc:	89ab      	ldrh	r3, [r5, #12]
 80091be:	059a      	lsls	r2, r3, #22
 80091c0:	d402      	bmi.n	80091c8 <_vfiprintf_r+0x220>
 80091c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091c4:	f000 faa1 	bl	800970a <__retarget_lock_release_recursive>
 80091c8:	89ab      	ldrh	r3, [r5, #12]
 80091ca:	065b      	lsls	r3, r3, #25
 80091cc:	f53f af12 	bmi.w	8008ff4 <_vfiprintf_r+0x4c>
 80091d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091d2:	e711      	b.n	8008ff8 <_vfiprintf_r+0x50>
 80091d4:	ab03      	add	r3, sp, #12
 80091d6:	9300      	str	r3, [sp, #0]
 80091d8:	462a      	mov	r2, r5
 80091da:	4b09      	ldr	r3, [pc, #36]	; (8009200 <_vfiprintf_r+0x258>)
 80091dc:	a904      	add	r1, sp, #16
 80091de:	4630      	mov	r0, r6
 80091e0:	f7fc fac4 	bl	800576c <_printf_i>
 80091e4:	e7e4      	b.n	80091b0 <_vfiprintf_r+0x208>
 80091e6:	bf00      	nop
 80091e8:	08009e64 	.word	0x08009e64
 80091ec:	08009e84 	.word	0x08009e84
 80091f0:	08009e44 	.word	0x08009e44
 80091f4:	08009df4 	.word	0x08009df4
 80091f8:	08009dfe 	.word	0x08009dfe
 80091fc:	08005225 	.word	0x08005225
 8009200:	08008f85 	.word	0x08008f85
 8009204:	08009dfa 	.word	0x08009dfa

08009208 <__swbuf_r>:
 8009208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800920a:	460e      	mov	r6, r1
 800920c:	4614      	mov	r4, r2
 800920e:	4605      	mov	r5, r0
 8009210:	b118      	cbz	r0, 800921a <__swbuf_r+0x12>
 8009212:	6983      	ldr	r3, [r0, #24]
 8009214:	b90b      	cbnz	r3, 800921a <__swbuf_r+0x12>
 8009216:	f000 f9d9 	bl	80095cc <__sinit>
 800921a:	4b21      	ldr	r3, [pc, #132]	; (80092a0 <__swbuf_r+0x98>)
 800921c:	429c      	cmp	r4, r3
 800921e:	d12b      	bne.n	8009278 <__swbuf_r+0x70>
 8009220:	686c      	ldr	r4, [r5, #4]
 8009222:	69a3      	ldr	r3, [r4, #24]
 8009224:	60a3      	str	r3, [r4, #8]
 8009226:	89a3      	ldrh	r3, [r4, #12]
 8009228:	071a      	lsls	r2, r3, #28
 800922a:	d52f      	bpl.n	800928c <__swbuf_r+0x84>
 800922c:	6923      	ldr	r3, [r4, #16]
 800922e:	b36b      	cbz	r3, 800928c <__swbuf_r+0x84>
 8009230:	6923      	ldr	r3, [r4, #16]
 8009232:	6820      	ldr	r0, [r4, #0]
 8009234:	1ac0      	subs	r0, r0, r3
 8009236:	6963      	ldr	r3, [r4, #20]
 8009238:	b2f6      	uxtb	r6, r6
 800923a:	4283      	cmp	r3, r0
 800923c:	4637      	mov	r7, r6
 800923e:	dc04      	bgt.n	800924a <__swbuf_r+0x42>
 8009240:	4621      	mov	r1, r4
 8009242:	4628      	mov	r0, r5
 8009244:	f000 f92e 	bl	80094a4 <_fflush_r>
 8009248:	bb30      	cbnz	r0, 8009298 <__swbuf_r+0x90>
 800924a:	68a3      	ldr	r3, [r4, #8]
 800924c:	3b01      	subs	r3, #1
 800924e:	60a3      	str	r3, [r4, #8]
 8009250:	6823      	ldr	r3, [r4, #0]
 8009252:	1c5a      	adds	r2, r3, #1
 8009254:	6022      	str	r2, [r4, #0]
 8009256:	701e      	strb	r6, [r3, #0]
 8009258:	6963      	ldr	r3, [r4, #20]
 800925a:	3001      	adds	r0, #1
 800925c:	4283      	cmp	r3, r0
 800925e:	d004      	beq.n	800926a <__swbuf_r+0x62>
 8009260:	89a3      	ldrh	r3, [r4, #12]
 8009262:	07db      	lsls	r3, r3, #31
 8009264:	d506      	bpl.n	8009274 <__swbuf_r+0x6c>
 8009266:	2e0a      	cmp	r6, #10
 8009268:	d104      	bne.n	8009274 <__swbuf_r+0x6c>
 800926a:	4621      	mov	r1, r4
 800926c:	4628      	mov	r0, r5
 800926e:	f000 f919 	bl	80094a4 <_fflush_r>
 8009272:	b988      	cbnz	r0, 8009298 <__swbuf_r+0x90>
 8009274:	4638      	mov	r0, r7
 8009276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009278:	4b0a      	ldr	r3, [pc, #40]	; (80092a4 <__swbuf_r+0x9c>)
 800927a:	429c      	cmp	r4, r3
 800927c:	d101      	bne.n	8009282 <__swbuf_r+0x7a>
 800927e:	68ac      	ldr	r4, [r5, #8]
 8009280:	e7cf      	b.n	8009222 <__swbuf_r+0x1a>
 8009282:	4b09      	ldr	r3, [pc, #36]	; (80092a8 <__swbuf_r+0xa0>)
 8009284:	429c      	cmp	r4, r3
 8009286:	bf08      	it	eq
 8009288:	68ec      	ldreq	r4, [r5, #12]
 800928a:	e7ca      	b.n	8009222 <__swbuf_r+0x1a>
 800928c:	4621      	mov	r1, r4
 800928e:	4628      	mov	r0, r5
 8009290:	f000 f80c 	bl	80092ac <__swsetup_r>
 8009294:	2800      	cmp	r0, #0
 8009296:	d0cb      	beq.n	8009230 <__swbuf_r+0x28>
 8009298:	f04f 37ff 	mov.w	r7, #4294967295
 800929c:	e7ea      	b.n	8009274 <__swbuf_r+0x6c>
 800929e:	bf00      	nop
 80092a0:	08009e64 	.word	0x08009e64
 80092a4:	08009e84 	.word	0x08009e84
 80092a8:	08009e44 	.word	0x08009e44

080092ac <__swsetup_r>:
 80092ac:	4b32      	ldr	r3, [pc, #200]	; (8009378 <__swsetup_r+0xcc>)
 80092ae:	b570      	push	{r4, r5, r6, lr}
 80092b0:	681d      	ldr	r5, [r3, #0]
 80092b2:	4606      	mov	r6, r0
 80092b4:	460c      	mov	r4, r1
 80092b6:	b125      	cbz	r5, 80092c2 <__swsetup_r+0x16>
 80092b8:	69ab      	ldr	r3, [r5, #24]
 80092ba:	b913      	cbnz	r3, 80092c2 <__swsetup_r+0x16>
 80092bc:	4628      	mov	r0, r5
 80092be:	f000 f985 	bl	80095cc <__sinit>
 80092c2:	4b2e      	ldr	r3, [pc, #184]	; (800937c <__swsetup_r+0xd0>)
 80092c4:	429c      	cmp	r4, r3
 80092c6:	d10f      	bne.n	80092e8 <__swsetup_r+0x3c>
 80092c8:	686c      	ldr	r4, [r5, #4]
 80092ca:	89a3      	ldrh	r3, [r4, #12]
 80092cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80092d0:	0719      	lsls	r1, r3, #28
 80092d2:	d42c      	bmi.n	800932e <__swsetup_r+0x82>
 80092d4:	06dd      	lsls	r5, r3, #27
 80092d6:	d411      	bmi.n	80092fc <__swsetup_r+0x50>
 80092d8:	2309      	movs	r3, #9
 80092da:	6033      	str	r3, [r6, #0]
 80092dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80092e0:	81a3      	strh	r3, [r4, #12]
 80092e2:	f04f 30ff 	mov.w	r0, #4294967295
 80092e6:	e03e      	b.n	8009366 <__swsetup_r+0xba>
 80092e8:	4b25      	ldr	r3, [pc, #148]	; (8009380 <__swsetup_r+0xd4>)
 80092ea:	429c      	cmp	r4, r3
 80092ec:	d101      	bne.n	80092f2 <__swsetup_r+0x46>
 80092ee:	68ac      	ldr	r4, [r5, #8]
 80092f0:	e7eb      	b.n	80092ca <__swsetup_r+0x1e>
 80092f2:	4b24      	ldr	r3, [pc, #144]	; (8009384 <__swsetup_r+0xd8>)
 80092f4:	429c      	cmp	r4, r3
 80092f6:	bf08      	it	eq
 80092f8:	68ec      	ldreq	r4, [r5, #12]
 80092fa:	e7e6      	b.n	80092ca <__swsetup_r+0x1e>
 80092fc:	0758      	lsls	r0, r3, #29
 80092fe:	d512      	bpl.n	8009326 <__swsetup_r+0x7a>
 8009300:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009302:	b141      	cbz	r1, 8009316 <__swsetup_r+0x6a>
 8009304:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009308:	4299      	cmp	r1, r3
 800930a:	d002      	beq.n	8009312 <__swsetup_r+0x66>
 800930c:	4630      	mov	r0, r6
 800930e:	f7ff fb25 	bl	800895c <_free_r>
 8009312:	2300      	movs	r3, #0
 8009314:	6363      	str	r3, [r4, #52]	; 0x34
 8009316:	89a3      	ldrh	r3, [r4, #12]
 8009318:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800931c:	81a3      	strh	r3, [r4, #12]
 800931e:	2300      	movs	r3, #0
 8009320:	6063      	str	r3, [r4, #4]
 8009322:	6923      	ldr	r3, [r4, #16]
 8009324:	6023      	str	r3, [r4, #0]
 8009326:	89a3      	ldrh	r3, [r4, #12]
 8009328:	f043 0308 	orr.w	r3, r3, #8
 800932c:	81a3      	strh	r3, [r4, #12]
 800932e:	6923      	ldr	r3, [r4, #16]
 8009330:	b94b      	cbnz	r3, 8009346 <__swsetup_r+0x9a>
 8009332:	89a3      	ldrh	r3, [r4, #12]
 8009334:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009338:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800933c:	d003      	beq.n	8009346 <__swsetup_r+0x9a>
 800933e:	4621      	mov	r1, r4
 8009340:	4630      	mov	r0, r6
 8009342:	f000 fa09 	bl	8009758 <__smakebuf_r>
 8009346:	89a0      	ldrh	r0, [r4, #12]
 8009348:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800934c:	f010 0301 	ands.w	r3, r0, #1
 8009350:	d00a      	beq.n	8009368 <__swsetup_r+0xbc>
 8009352:	2300      	movs	r3, #0
 8009354:	60a3      	str	r3, [r4, #8]
 8009356:	6963      	ldr	r3, [r4, #20]
 8009358:	425b      	negs	r3, r3
 800935a:	61a3      	str	r3, [r4, #24]
 800935c:	6923      	ldr	r3, [r4, #16]
 800935e:	b943      	cbnz	r3, 8009372 <__swsetup_r+0xc6>
 8009360:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009364:	d1ba      	bne.n	80092dc <__swsetup_r+0x30>
 8009366:	bd70      	pop	{r4, r5, r6, pc}
 8009368:	0781      	lsls	r1, r0, #30
 800936a:	bf58      	it	pl
 800936c:	6963      	ldrpl	r3, [r4, #20]
 800936e:	60a3      	str	r3, [r4, #8]
 8009370:	e7f4      	b.n	800935c <__swsetup_r+0xb0>
 8009372:	2000      	movs	r0, #0
 8009374:	e7f7      	b.n	8009366 <__swsetup_r+0xba>
 8009376:	bf00      	nop
 8009378:	2000000c 	.word	0x2000000c
 800937c:	08009e64 	.word	0x08009e64
 8009380:	08009e84 	.word	0x08009e84
 8009384:	08009e44 	.word	0x08009e44

08009388 <abort>:
 8009388:	b508      	push	{r3, lr}
 800938a:	2006      	movs	r0, #6
 800938c:	f000 fa54 	bl	8009838 <raise>
 8009390:	2001      	movs	r0, #1
 8009392:	f7f8 f87f 	bl	8001494 <_exit>
	...

08009398 <__sflush_r>:
 8009398:	898a      	ldrh	r2, [r1, #12]
 800939a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800939e:	4605      	mov	r5, r0
 80093a0:	0710      	lsls	r0, r2, #28
 80093a2:	460c      	mov	r4, r1
 80093a4:	d458      	bmi.n	8009458 <__sflush_r+0xc0>
 80093a6:	684b      	ldr	r3, [r1, #4]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	dc05      	bgt.n	80093b8 <__sflush_r+0x20>
 80093ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	dc02      	bgt.n	80093b8 <__sflush_r+0x20>
 80093b2:	2000      	movs	r0, #0
 80093b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80093ba:	2e00      	cmp	r6, #0
 80093bc:	d0f9      	beq.n	80093b2 <__sflush_r+0x1a>
 80093be:	2300      	movs	r3, #0
 80093c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80093c4:	682f      	ldr	r7, [r5, #0]
 80093c6:	602b      	str	r3, [r5, #0]
 80093c8:	d032      	beq.n	8009430 <__sflush_r+0x98>
 80093ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80093cc:	89a3      	ldrh	r3, [r4, #12]
 80093ce:	075a      	lsls	r2, r3, #29
 80093d0:	d505      	bpl.n	80093de <__sflush_r+0x46>
 80093d2:	6863      	ldr	r3, [r4, #4]
 80093d4:	1ac0      	subs	r0, r0, r3
 80093d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80093d8:	b10b      	cbz	r3, 80093de <__sflush_r+0x46>
 80093da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80093dc:	1ac0      	subs	r0, r0, r3
 80093de:	2300      	movs	r3, #0
 80093e0:	4602      	mov	r2, r0
 80093e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80093e4:	6a21      	ldr	r1, [r4, #32]
 80093e6:	4628      	mov	r0, r5
 80093e8:	47b0      	blx	r6
 80093ea:	1c43      	adds	r3, r0, #1
 80093ec:	89a3      	ldrh	r3, [r4, #12]
 80093ee:	d106      	bne.n	80093fe <__sflush_r+0x66>
 80093f0:	6829      	ldr	r1, [r5, #0]
 80093f2:	291d      	cmp	r1, #29
 80093f4:	d82c      	bhi.n	8009450 <__sflush_r+0xb8>
 80093f6:	4a2a      	ldr	r2, [pc, #168]	; (80094a0 <__sflush_r+0x108>)
 80093f8:	40ca      	lsrs	r2, r1
 80093fa:	07d6      	lsls	r6, r2, #31
 80093fc:	d528      	bpl.n	8009450 <__sflush_r+0xb8>
 80093fe:	2200      	movs	r2, #0
 8009400:	6062      	str	r2, [r4, #4]
 8009402:	04d9      	lsls	r1, r3, #19
 8009404:	6922      	ldr	r2, [r4, #16]
 8009406:	6022      	str	r2, [r4, #0]
 8009408:	d504      	bpl.n	8009414 <__sflush_r+0x7c>
 800940a:	1c42      	adds	r2, r0, #1
 800940c:	d101      	bne.n	8009412 <__sflush_r+0x7a>
 800940e:	682b      	ldr	r3, [r5, #0]
 8009410:	b903      	cbnz	r3, 8009414 <__sflush_r+0x7c>
 8009412:	6560      	str	r0, [r4, #84]	; 0x54
 8009414:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009416:	602f      	str	r7, [r5, #0]
 8009418:	2900      	cmp	r1, #0
 800941a:	d0ca      	beq.n	80093b2 <__sflush_r+0x1a>
 800941c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009420:	4299      	cmp	r1, r3
 8009422:	d002      	beq.n	800942a <__sflush_r+0x92>
 8009424:	4628      	mov	r0, r5
 8009426:	f7ff fa99 	bl	800895c <_free_r>
 800942a:	2000      	movs	r0, #0
 800942c:	6360      	str	r0, [r4, #52]	; 0x34
 800942e:	e7c1      	b.n	80093b4 <__sflush_r+0x1c>
 8009430:	6a21      	ldr	r1, [r4, #32]
 8009432:	2301      	movs	r3, #1
 8009434:	4628      	mov	r0, r5
 8009436:	47b0      	blx	r6
 8009438:	1c41      	adds	r1, r0, #1
 800943a:	d1c7      	bne.n	80093cc <__sflush_r+0x34>
 800943c:	682b      	ldr	r3, [r5, #0]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d0c4      	beq.n	80093cc <__sflush_r+0x34>
 8009442:	2b1d      	cmp	r3, #29
 8009444:	d001      	beq.n	800944a <__sflush_r+0xb2>
 8009446:	2b16      	cmp	r3, #22
 8009448:	d101      	bne.n	800944e <__sflush_r+0xb6>
 800944a:	602f      	str	r7, [r5, #0]
 800944c:	e7b1      	b.n	80093b2 <__sflush_r+0x1a>
 800944e:	89a3      	ldrh	r3, [r4, #12]
 8009450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009454:	81a3      	strh	r3, [r4, #12]
 8009456:	e7ad      	b.n	80093b4 <__sflush_r+0x1c>
 8009458:	690f      	ldr	r7, [r1, #16]
 800945a:	2f00      	cmp	r7, #0
 800945c:	d0a9      	beq.n	80093b2 <__sflush_r+0x1a>
 800945e:	0793      	lsls	r3, r2, #30
 8009460:	680e      	ldr	r6, [r1, #0]
 8009462:	bf08      	it	eq
 8009464:	694b      	ldreq	r3, [r1, #20]
 8009466:	600f      	str	r7, [r1, #0]
 8009468:	bf18      	it	ne
 800946a:	2300      	movne	r3, #0
 800946c:	eba6 0807 	sub.w	r8, r6, r7
 8009470:	608b      	str	r3, [r1, #8]
 8009472:	f1b8 0f00 	cmp.w	r8, #0
 8009476:	dd9c      	ble.n	80093b2 <__sflush_r+0x1a>
 8009478:	6a21      	ldr	r1, [r4, #32]
 800947a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800947c:	4643      	mov	r3, r8
 800947e:	463a      	mov	r2, r7
 8009480:	4628      	mov	r0, r5
 8009482:	47b0      	blx	r6
 8009484:	2800      	cmp	r0, #0
 8009486:	dc06      	bgt.n	8009496 <__sflush_r+0xfe>
 8009488:	89a3      	ldrh	r3, [r4, #12]
 800948a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800948e:	81a3      	strh	r3, [r4, #12]
 8009490:	f04f 30ff 	mov.w	r0, #4294967295
 8009494:	e78e      	b.n	80093b4 <__sflush_r+0x1c>
 8009496:	4407      	add	r7, r0
 8009498:	eba8 0800 	sub.w	r8, r8, r0
 800949c:	e7e9      	b.n	8009472 <__sflush_r+0xda>
 800949e:	bf00      	nop
 80094a0:	20400001 	.word	0x20400001

080094a4 <_fflush_r>:
 80094a4:	b538      	push	{r3, r4, r5, lr}
 80094a6:	690b      	ldr	r3, [r1, #16]
 80094a8:	4605      	mov	r5, r0
 80094aa:	460c      	mov	r4, r1
 80094ac:	b913      	cbnz	r3, 80094b4 <_fflush_r+0x10>
 80094ae:	2500      	movs	r5, #0
 80094b0:	4628      	mov	r0, r5
 80094b2:	bd38      	pop	{r3, r4, r5, pc}
 80094b4:	b118      	cbz	r0, 80094be <_fflush_r+0x1a>
 80094b6:	6983      	ldr	r3, [r0, #24]
 80094b8:	b90b      	cbnz	r3, 80094be <_fflush_r+0x1a>
 80094ba:	f000 f887 	bl	80095cc <__sinit>
 80094be:	4b14      	ldr	r3, [pc, #80]	; (8009510 <_fflush_r+0x6c>)
 80094c0:	429c      	cmp	r4, r3
 80094c2:	d11b      	bne.n	80094fc <_fflush_r+0x58>
 80094c4:	686c      	ldr	r4, [r5, #4]
 80094c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d0ef      	beq.n	80094ae <_fflush_r+0xa>
 80094ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80094d0:	07d0      	lsls	r0, r2, #31
 80094d2:	d404      	bmi.n	80094de <_fflush_r+0x3a>
 80094d4:	0599      	lsls	r1, r3, #22
 80094d6:	d402      	bmi.n	80094de <_fflush_r+0x3a>
 80094d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094da:	f000 f915 	bl	8009708 <__retarget_lock_acquire_recursive>
 80094de:	4628      	mov	r0, r5
 80094e0:	4621      	mov	r1, r4
 80094e2:	f7ff ff59 	bl	8009398 <__sflush_r>
 80094e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80094e8:	07da      	lsls	r2, r3, #31
 80094ea:	4605      	mov	r5, r0
 80094ec:	d4e0      	bmi.n	80094b0 <_fflush_r+0xc>
 80094ee:	89a3      	ldrh	r3, [r4, #12]
 80094f0:	059b      	lsls	r3, r3, #22
 80094f2:	d4dd      	bmi.n	80094b0 <_fflush_r+0xc>
 80094f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094f6:	f000 f908 	bl	800970a <__retarget_lock_release_recursive>
 80094fa:	e7d9      	b.n	80094b0 <_fflush_r+0xc>
 80094fc:	4b05      	ldr	r3, [pc, #20]	; (8009514 <_fflush_r+0x70>)
 80094fe:	429c      	cmp	r4, r3
 8009500:	d101      	bne.n	8009506 <_fflush_r+0x62>
 8009502:	68ac      	ldr	r4, [r5, #8]
 8009504:	e7df      	b.n	80094c6 <_fflush_r+0x22>
 8009506:	4b04      	ldr	r3, [pc, #16]	; (8009518 <_fflush_r+0x74>)
 8009508:	429c      	cmp	r4, r3
 800950a:	bf08      	it	eq
 800950c:	68ec      	ldreq	r4, [r5, #12]
 800950e:	e7da      	b.n	80094c6 <_fflush_r+0x22>
 8009510:	08009e64 	.word	0x08009e64
 8009514:	08009e84 	.word	0x08009e84
 8009518:	08009e44 	.word	0x08009e44

0800951c <std>:
 800951c:	2300      	movs	r3, #0
 800951e:	b510      	push	{r4, lr}
 8009520:	4604      	mov	r4, r0
 8009522:	e9c0 3300 	strd	r3, r3, [r0]
 8009526:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800952a:	6083      	str	r3, [r0, #8]
 800952c:	8181      	strh	r1, [r0, #12]
 800952e:	6643      	str	r3, [r0, #100]	; 0x64
 8009530:	81c2      	strh	r2, [r0, #14]
 8009532:	6183      	str	r3, [r0, #24]
 8009534:	4619      	mov	r1, r3
 8009536:	2208      	movs	r2, #8
 8009538:	305c      	adds	r0, #92	; 0x5c
 800953a:	f7fb fdcb 	bl	80050d4 <memset>
 800953e:	4b05      	ldr	r3, [pc, #20]	; (8009554 <std+0x38>)
 8009540:	6263      	str	r3, [r4, #36]	; 0x24
 8009542:	4b05      	ldr	r3, [pc, #20]	; (8009558 <std+0x3c>)
 8009544:	62a3      	str	r3, [r4, #40]	; 0x28
 8009546:	4b05      	ldr	r3, [pc, #20]	; (800955c <std+0x40>)
 8009548:	62e3      	str	r3, [r4, #44]	; 0x2c
 800954a:	4b05      	ldr	r3, [pc, #20]	; (8009560 <std+0x44>)
 800954c:	6224      	str	r4, [r4, #32]
 800954e:	6323      	str	r3, [r4, #48]	; 0x30
 8009550:	bd10      	pop	{r4, pc}
 8009552:	bf00      	nop
 8009554:	08009871 	.word	0x08009871
 8009558:	08009893 	.word	0x08009893
 800955c:	080098cb 	.word	0x080098cb
 8009560:	080098ef 	.word	0x080098ef

08009564 <_cleanup_r>:
 8009564:	4901      	ldr	r1, [pc, #4]	; (800956c <_cleanup_r+0x8>)
 8009566:	f000 b8af 	b.w	80096c8 <_fwalk_reent>
 800956a:	bf00      	nop
 800956c:	080094a5 	.word	0x080094a5

08009570 <__sfmoreglue>:
 8009570:	b570      	push	{r4, r5, r6, lr}
 8009572:	2268      	movs	r2, #104	; 0x68
 8009574:	1e4d      	subs	r5, r1, #1
 8009576:	4355      	muls	r5, r2
 8009578:	460e      	mov	r6, r1
 800957a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800957e:	f7ff fa59 	bl	8008a34 <_malloc_r>
 8009582:	4604      	mov	r4, r0
 8009584:	b140      	cbz	r0, 8009598 <__sfmoreglue+0x28>
 8009586:	2100      	movs	r1, #0
 8009588:	e9c0 1600 	strd	r1, r6, [r0]
 800958c:	300c      	adds	r0, #12
 800958e:	60a0      	str	r0, [r4, #8]
 8009590:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009594:	f7fb fd9e 	bl	80050d4 <memset>
 8009598:	4620      	mov	r0, r4
 800959a:	bd70      	pop	{r4, r5, r6, pc}

0800959c <__sfp_lock_acquire>:
 800959c:	4801      	ldr	r0, [pc, #4]	; (80095a4 <__sfp_lock_acquire+0x8>)
 800959e:	f000 b8b3 	b.w	8009708 <__retarget_lock_acquire_recursive>
 80095a2:	bf00      	nop
 80095a4:	20000309 	.word	0x20000309

080095a8 <__sfp_lock_release>:
 80095a8:	4801      	ldr	r0, [pc, #4]	; (80095b0 <__sfp_lock_release+0x8>)
 80095aa:	f000 b8ae 	b.w	800970a <__retarget_lock_release_recursive>
 80095ae:	bf00      	nop
 80095b0:	20000309 	.word	0x20000309

080095b4 <__sinit_lock_acquire>:
 80095b4:	4801      	ldr	r0, [pc, #4]	; (80095bc <__sinit_lock_acquire+0x8>)
 80095b6:	f000 b8a7 	b.w	8009708 <__retarget_lock_acquire_recursive>
 80095ba:	bf00      	nop
 80095bc:	2000030a 	.word	0x2000030a

080095c0 <__sinit_lock_release>:
 80095c0:	4801      	ldr	r0, [pc, #4]	; (80095c8 <__sinit_lock_release+0x8>)
 80095c2:	f000 b8a2 	b.w	800970a <__retarget_lock_release_recursive>
 80095c6:	bf00      	nop
 80095c8:	2000030a 	.word	0x2000030a

080095cc <__sinit>:
 80095cc:	b510      	push	{r4, lr}
 80095ce:	4604      	mov	r4, r0
 80095d0:	f7ff fff0 	bl	80095b4 <__sinit_lock_acquire>
 80095d4:	69a3      	ldr	r3, [r4, #24]
 80095d6:	b11b      	cbz	r3, 80095e0 <__sinit+0x14>
 80095d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095dc:	f7ff bff0 	b.w	80095c0 <__sinit_lock_release>
 80095e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80095e4:	6523      	str	r3, [r4, #80]	; 0x50
 80095e6:	4b13      	ldr	r3, [pc, #76]	; (8009634 <__sinit+0x68>)
 80095e8:	4a13      	ldr	r2, [pc, #76]	; (8009638 <__sinit+0x6c>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80095ee:	42a3      	cmp	r3, r4
 80095f0:	bf04      	itt	eq
 80095f2:	2301      	moveq	r3, #1
 80095f4:	61a3      	streq	r3, [r4, #24]
 80095f6:	4620      	mov	r0, r4
 80095f8:	f000 f820 	bl	800963c <__sfp>
 80095fc:	6060      	str	r0, [r4, #4]
 80095fe:	4620      	mov	r0, r4
 8009600:	f000 f81c 	bl	800963c <__sfp>
 8009604:	60a0      	str	r0, [r4, #8]
 8009606:	4620      	mov	r0, r4
 8009608:	f000 f818 	bl	800963c <__sfp>
 800960c:	2200      	movs	r2, #0
 800960e:	60e0      	str	r0, [r4, #12]
 8009610:	2104      	movs	r1, #4
 8009612:	6860      	ldr	r0, [r4, #4]
 8009614:	f7ff ff82 	bl	800951c <std>
 8009618:	68a0      	ldr	r0, [r4, #8]
 800961a:	2201      	movs	r2, #1
 800961c:	2109      	movs	r1, #9
 800961e:	f7ff ff7d 	bl	800951c <std>
 8009622:	68e0      	ldr	r0, [r4, #12]
 8009624:	2202      	movs	r2, #2
 8009626:	2112      	movs	r1, #18
 8009628:	f7ff ff78 	bl	800951c <std>
 800962c:	2301      	movs	r3, #1
 800962e:	61a3      	str	r3, [r4, #24]
 8009630:	e7d2      	b.n	80095d8 <__sinit+0xc>
 8009632:	bf00      	nop
 8009634:	08009a00 	.word	0x08009a00
 8009638:	08009565 	.word	0x08009565

0800963c <__sfp>:
 800963c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800963e:	4607      	mov	r7, r0
 8009640:	f7ff ffac 	bl	800959c <__sfp_lock_acquire>
 8009644:	4b1e      	ldr	r3, [pc, #120]	; (80096c0 <__sfp+0x84>)
 8009646:	681e      	ldr	r6, [r3, #0]
 8009648:	69b3      	ldr	r3, [r6, #24]
 800964a:	b913      	cbnz	r3, 8009652 <__sfp+0x16>
 800964c:	4630      	mov	r0, r6
 800964e:	f7ff ffbd 	bl	80095cc <__sinit>
 8009652:	3648      	adds	r6, #72	; 0x48
 8009654:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009658:	3b01      	subs	r3, #1
 800965a:	d503      	bpl.n	8009664 <__sfp+0x28>
 800965c:	6833      	ldr	r3, [r6, #0]
 800965e:	b30b      	cbz	r3, 80096a4 <__sfp+0x68>
 8009660:	6836      	ldr	r6, [r6, #0]
 8009662:	e7f7      	b.n	8009654 <__sfp+0x18>
 8009664:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009668:	b9d5      	cbnz	r5, 80096a0 <__sfp+0x64>
 800966a:	4b16      	ldr	r3, [pc, #88]	; (80096c4 <__sfp+0x88>)
 800966c:	60e3      	str	r3, [r4, #12]
 800966e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009672:	6665      	str	r5, [r4, #100]	; 0x64
 8009674:	f000 f847 	bl	8009706 <__retarget_lock_init_recursive>
 8009678:	f7ff ff96 	bl	80095a8 <__sfp_lock_release>
 800967c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009680:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009684:	6025      	str	r5, [r4, #0]
 8009686:	61a5      	str	r5, [r4, #24]
 8009688:	2208      	movs	r2, #8
 800968a:	4629      	mov	r1, r5
 800968c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009690:	f7fb fd20 	bl	80050d4 <memset>
 8009694:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009698:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800969c:	4620      	mov	r0, r4
 800969e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096a0:	3468      	adds	r4, #104	; 0x68
 80096a2:	e7d9      	b.n	8009658 <__sfp+0x1c>
 80096a4:	2104      	movs	r1, #4
 80096a6:	4638      	mov	r0, r7
 80096a8:	f7ff ff62 	bl	8009570 <__sfmoreglue>
 80096ac:	4604      	mov	r4, r0
 80096ae:	6030      	str	r0, [r6, #0]
 80096b0:	2800      	cmp	r0, #0
 80096b2:	d1d5      	bne.n	8009660 <__sfp+0x24>
 80096b4:	f7ff ff78 	bl	80095a8 <__sfp_lock_release>
 80096b8:	230c      	movs	r3, #12
 80096ba:	603b      	str	r3, [r7, #0]
 80096bc:	e7ee      	b.n	800969c <__sfp+0x60>
 80096be:	bf00      	nop
 80096c0:	08009a00 	.word	0x08009a00
 80096c4:	ffff0001 	.word	0xffff0001

080096c8 <_fwalk_reent>:
 80096c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096cc:	4606      	mov	r6, r0
 80096ce:	4688      	mov	r8, r1
 80096d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80096d4:	2700      	movs	r7, #0
 80096d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80096da:	f1b9 0901 	subs.w	r9, r9, #1
 80096de:	d505      	bpl.n	80096ec <_fwalk_reent+0x24>
 80096e0:	6824      	ldr	r4, [r4, #0]
 80096e2:	2c00      	cmp	r4, #0
 80096e4:	d1f7      	bne.n	80096d6 <_fwalk_reent+0xe>
 80096e6:	4638      	mov	r0, r7
 80096e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096ec:	89ab      	ldrh	r3, [r5, #12]
 80096ee:	2b01      	cmp	r3, #1
 80096f0:	d907      	bls.n	8009702 <_fwalk_reent+0x3a>
 80096f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80096f6:	3301      	adds	r3, #1
 80096f8:	d003      	beq.n	8009702 <_fwalk_reent+0x3a>
 80096fa:	4629      	mov	r1, r5
 80096fc:	4630      	mov	r0, r6
 80096fe:	47c0      	blx	r8
 8009700:	4307      	orrs	r7, r0
 8009702:	3568      	adds	r5, #104	; 0x68
 8009704:	e7e9      	b.n	80096da <_fwalk_reent+0x12>

08009706 <__retarget_lock_init_recursive>:
 8009706:	4770      	bx	lr

08009708 <__retarget_lock_acquire_recursive>:
 8009708:	4770      	bx	lr

0800970a <__retarget_lock_release_recursive>:
 800970a:	4770      	bx	lr

0800970c <__swhatbuf_r>:
 800970c:	b570      	push	{r4, r5, r6, lr}
 800970e:	460e      	mov	r6, r1
 8009710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009714:	2900      	cmp	r1, #0
 8009716:	b096      	sub	sp, #88	; 0x58
 8009718:	4614      	mov	r4, r2
 800971a:	461d      	mov	r5, r3
 800971c:	da08      	bge.n	8009730 <__swhatbuf_r+0x24>
 800971e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009722:	2200      	movs	r2, #0
 8009724:	602a      	str	r2, [r5, #0]
 8009726:	061a      	lsls	r2, r3, #24
 8009728:	d410      	bmi.n	800974c <__swhatbuf_r+0x40>
 800972a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800972e:	e00e      	b.n	800974e <__swhatbuf_r+0x42>
 8009730:	466a      	mov	r2, sp
 8009732:	f000 f903 	bl	800993c <_fstat_r>
 8009736:	2800      	cmp	r0, #0
 8009738:	dbf1      	blt.n	800971e <__swhatbuf_r+0x12>
 800973a:	9a01      	ldr	r2, [sp, #4]
 800973c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009740:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009744:	425a      	negs	r2, r3
 8009746:	415a      	adcs	r2, r3
 8009748:	602a      	str	r2, [r5, #0]
 800974a:	e7ee      	b.n	800972a <__swhatbuf_r+0x1e>
 800974c:	2340      	movs	r3, #64	; 0x40
 800974e:	2000      	movs	r0, #0
 8009750:	6023      	str	r3, [r4, #0]
 8009752:	b016      	add	sp, #88	; 0x58
 8009754:	bd70      	pop	{r4, r5, r6, pc}
	...

08009758 <__smakebuf_r>:
 8009758:	898b      	ldrh	r3, [r1, #12]
 800975a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800975c:	079d      	lsls	r5, r3, #30
 800975e:	4606      	mov	r6, r0
 8009760:	460c      	mov	r4, r1
 8009762:	d507      	bpl.n	8009774 <__smakebuf_r+0x1c>
 8009764:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009768:	6023      	str	r3, [r4, #0]
 800976a:	6123      	str	r3, [r4, #16]
 800976c:	2301      	movs	r3, #1
 800976e:	6163      	str	r3, [r4, #20]
 8009770:	b002      	add	sp, #8
 8009772:	bd70      	pop	{r4, r5, r6, pc}
 8009774:	ab01      	add	r3, sp, #4
 8009776:	466a      	mov	r2, sp
 8009778:	f7ff ffc8 	bl	800970c <__swhatbuf_r>
 800977c:	9900      	ldr	r1, [sp, #0]
 800977e:	4605      	mov	r5, r0
 8009780:	4630      	mov	r0, r6
 8009782:	f7ff f957 	bl	8008a34 <_malloc_r>
 8009786:	b948      	cbnz	r0, 800979c <__smakebuf_r+0x44>
 8009788:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800978c:	059a      	lsls	r2, r3, #22
 800978e:	d4ef      	bmi.n	8009770 <__smakebuf_r+0x18>
 8009790:	f023 0303 	bic.w	r3, r3, #3
 8009794:	f043 0302 	orr.w	r3, r3, #2
 8009798:	81a3      	strh	r3, [r4, #12]
 800979a:	e7e3      	b.n	8009764 <__smakebuf_r+0xc>
 800979c:	4b0d      	ldr	r3, [pc, #52]	; (80097d4 <__smakebuf_r+0x7c>)
 800979e:	62b3      	str	r3, [r6, #40]	; 0x28
 80097a0:	89a3      	ldrh	r3, [r4, #12]
 80097a2:	6020      	str	r0, [r4, #0]
 80097a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097a8:	81a3      	strh	r3, [r4, #12]
 80097aa:	9b00      	ldr	r3, [sp, #0]
 80097ac:	6163      	str	r3, [r4, #20]
 80097ae:	9b01      	ldr	r3, [sp, #4]
 80097b0:	6120      	str	r0, [r4, #16]
 80097b2:	b15b      	cbz	r3, 80097cc <__smakebuf_r+0x74>
 80097b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097b8:	4630      	mov	r0, r6
 80097ba:	f000 f8d1 	bl	8009960 <_isatty_r>
 80097be:	b128      	cbz	r0, 80097cc <__smakebuf_r+0x74>
 80097c0:	89a3      	ldrh	r3, [r4, #12]
 80097c2:	f023 0303 	bic.w	r3, r3, #3
 80097c6:	f043 0301 	orr.w	r3, r3, #1
 80097ca:	81a3      	strh	r3, [r4, #12]
 80097cc:	89a0      	ldrh	r0, [r4, #12]
 80097ce:	4305      	orrs	r5, r0
 80097d0:	81a5      	strh	r5, [r4, #12]
 80097d2:	e7cd      	b.n	8009770 <__smakebuf_r+0x18>
 80097d4:	08009565 	.word	0x08009565

080097d8 <_malloc_usable_size_r>:
 80097d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097dc:	1f18      	subs	r0, r3, #4
 80097de:	2b00      	cmp	r3, #0
 80097e0:	bfbc      	itt	lt
 80097e2:	580b      	ldrlt	r3, [r1, r0]
 80097e4:	18c0      	addlt	r0, r0, r3
 80097e6:	4770      	bx	lr

080097e8 <_raise_r>:
 80097e8:	291f      	cmp	r1, #31
 80097ea:	b538      	push	{r3, r4, r5, lr}
 80097ec:	4604      	mov	r4, r0
 80097ee:	460d      	mov	r5, r1
 80097f0:	d904      	bls.n	80097fc <_raise_r+0x14>
 80097f2:	2316      	movs	r3, #22
 80097f4:	6003      	str	r3, [r0, #0]
 80097f6:	f04f 30ff 	mov.w	r0, #4294967295
 80097fa:	bd38      	pop	{r3, r4, r5, pc}
 80097fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80097fe:	b112      	cbz	r2, 8009806 <_raise_r+0x1e>
 8009800:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009804:	b94b      	cbnz	r3, 800981a <_raise_r+0x32>
 8009806:	4620      	mov	r0, r4
 8009808:	f000 f830 	bl	800986c <_getpid_r>
 800980c:	462a      	mov	r2, r5
 800980e:	4601      	mov	r1, r0
 8009810:	4620      	mov	r0, r4
 8009812:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009816:	f000 b817 	b.w	8009848 <_kill_r>
 800981a:	2b01      	cmp	r3, #1
 800981c:	d00a      	beq.n	8009834 <_raise_r+0x4c>
 800981e:	1c59      	adds	r1, r3, #1
 8009820:	d103      	bne.n	800982a <_raise_r+0x42>
 8009822:	2316      	movs	r3, #22
 8009824:	6003      	str	r3, [r0, #0]
 8009826:	2001      	movs	r0, #1
 8009828:	e7e7      	b.n	80097fa <_raise_r+0x12>
 800982a:	2400      	movs	r4, #0
 800982c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009830:	4628      	mov	r0, r5
 8009832:	4798      	blx	r3
 8009834:	2000      	movs	r0, #0
 8009836:	e7e0      	b.n	80097fa <_raise_r+0x12>

08009838 <raise>:
 8009838:	4b02      	ldr	r3, [pc, #8]	; (8009844 <raise+0xc>)
 800983a:	4601      	mov	r1, r0
 800983c:	6818      	ldr	r0, [r3, #0]
 800983e:	f7ff bfd3 	b.w	80097e8 <_raise_r>
 8009842:	bf00      	nop
 8009844:	2000000c 	.word	0x2000000c

08009848 <_kill_r>:
 8009848:	b538      	push	{r3, r4, r5, lr}
 800984a:	4d07      	ldr	r5, [pc, #28]	; (8009868 <_kill_r+0x20>)
 800984c:	2300      	movs	r3, #0
 800984e:	4604      	mov	r4, r0
 8009850:	4608      	mov	r0, r1
 8009852:	4611      	mov	r1, r2
 8009854:	602b      	str	r3, [r5, #0]
 8009856:	f7f7 fe0d 	bl	8001474 <_kill>
 800985a:	1c43      	adds	r3, r0, #1
 800985c:	d102      	bne.n	8009864 <_kill_r+0x1c>
 800985e:	682b      	ldr	r3, [r5, #0]
 8009860:	b103      	cbz	r3, 8009864 <_kill_r+0x1c>
 8009862:	6023      	str	r3, [r4, #0]
 8009864:	bd38      	pop	{r3, r4, r5, pc}
 8009866:	bf00      	nop
 8009868:	20000304 	.word	0x20000304

0800986c <_getpid_r>:
 800986c:	f7f7 bdfa 	b.w	8001464 <_getpid>

08009870 <__sread>:
 8009870:	b510      	push	{r4, lr}
 8009872:	460c      	mov	r4, r1
 8009874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009878:	f000 f894 	bl	80099a4 <_read_r>
 800987c:	2800      	cmp	r0, #0
 800987e:	bfab      	itete	ge
 8009880:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009882:	89a3      	ldrhlt	r3, [r4, #12]
 8009884:	181b      	addge	r3, r3, r0
 8009886:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800988a:	bfac      	ite	ge
 800988c:	6563      	strge	r3, [r4, #84]	; 0x54
 800988e:	81a3      	strhlt	r3, [r4, #12]
 8009890:	bd10      	pop	{r4, pc}

08009892 <__swrite>:
 8009892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009896:	461f      	mov	r7, r3
 8009898:	898b      	ldrh	r3, [r1, #12]
 800989a:	05db      	lsls	r3, r3, #23
 800989c:	4605      	mov	r5, r0
 800989e:	460c      	mov	r4, r1
 80098a0:	4616      	mov	r6, r2
 80098a2:	d505      	bpl.n	80098b0 <__swrite+0x1e>
 80098a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098a8:	2302      	movs	r3, #2
 80098aa:	2200      	movs	r2, #0
 80098ac:	f000 f868 	bl	8009980 <_lseek_r>
 80098b0:	89a3      	ldrh	r3, [r4, #12]
 80098b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80098ba:	81a3      	strh	r3, [r4, #12]
 80098bc:	4632      	mov	r2, r6
 80098be:	463b      	mov	r3, r7
 80098c0:	4628      	mov	r0, r5
 80098c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098c6:	f000 b817 	b.w	80098f8 <_write_r>

080098ca <__sseek>:
 80098ca:	b510      	push	{r4, lr}
 80098cc:	460c      	mov	r4, r1
 80098ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098d2:	f000 f855 	bl	8009980 <_lseek_r>
 80098d6:	1c43      	adds	r3, r0, #1
 80098d8:	89a3      	ldrh	r3, [r4, #12]
 80098da:	bf15      	itete	ne
 80098dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80098de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80098e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80098e6:	81a3      	strheq	r3, [r4, #12]
 80098e8:	bf18      	it	ne
 80098ea:	81a3      	strhne	r3, [r4, #12]
 80098ec:	bd10      	pop	{r4, pc}

080098ee <__sclose>:
 80098ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098f2:	f000 b813 	b.w	800991c <_close_r>
	...

080098f8 <_write_r>:
 80098f8:	b538      	push	{r3, r4, r5, lr}
 80098fa:	4d07      	ldr	r5, [pc, #28]	; (8009918 <_write_r+0x20>)
 80098fc:	4604      	mov	r4, r0
 80098fe:	4608      	mov	r0, r1
 8009900:	4611      	mov	r1, r2
 8009902:	2200      	movs	r2, #0
 8009904:	602a      	str	r2, [r5, #0]
 8009906:	461a      	mov	r2, r3
 8009908:	f7f7 fdeb 	bl	80014e2 <_write>
 800990c:	1c43      	adds	r3, r0, #1
 800990e:	d102      	bne.n	8009916 <_write_r+0x1e>
 8009910:	682b      	ldr	r3, [r5, #0]
 8009912:	b103      	cbz	r3, 8009916 <_write_r+0x1e>
 8009914:	6023      	str	r3, [r4, #0]
 8009916:	bd38      	pop	{r3, r4, r5, pc}
 8009918:	20000304 	.word	0x20000304

0800991c <_close_r>:
 800991c:	b538      	push	{r3, r4, r5, lr}
 800991e:	4d06      	ldr	r5, [pc, #24]	; (8009938 <_close_r+0x1c>)
 8009920:	2300      	movs	r3, #0
 8009922:	4604      	mov	r4, r0
 8009924:	4608      	mov	r0, r1
 8009926:	602b      	str	r3, [r5, #0]
 8009928:	f7f7 fdf7 	bl	800151a <_close>
 800992c:	1c43      	adds	r3, r0, #1
 800992e:	d102      	bne.n	8009936 <_close_r+0x1a>
 8009930:	682b      	ldr	r3, [r5, #0]
 8009932:	b103      	cbz	r3, 8009936 <_close_r+0x1a>
 8009934:	6023      	str	r3, [r4, #0]
 8009936:	bd38      	pop	{r3, r4, r5, pc}
 8009938:	20000304 	.word	0x20000304

0800993c <_fstat_r>:
 800993c:	b538      	push	{r3, r4, r5, lr}
 800993e:	4d07      	ldr	r5, [pc, #28]	; (800995c <_fstat_r+0x20>)
 8009940:	2300      	movs	r3, #0
 8009942:	4604      	mov	r4, r0
 8009944:	4608      	mov	r0, r1
 8009946:	4611      	mov	r1, r2
 8009948:	602b      	str	r3, [r5, #0]
 800994a:	f7f7 fdf2 	bl	8001532 <_fstat>
 800994e:	1c43      	adds	r3, r0, #1
 8009950:	d102      	bne.n	8009958 <_fstat_r+0x1c>
 8009952:	682b      	ldr	r3, [r5, #0]
 8009954:	b103      	cbz	r3, 8009958 <_fstat_r+0x1c>
 8009956:	6023      	str	r3, [r4, #0]
 8009958:	bd38      	pop	{r3, r4, r5, pc}
 800995a:	bf00      	nop
 800995c:	20000304 	.word	0x20000304

08009960 <_isatty_r>:
 8009960:	b538      	push	{r3, r4, r5, lr}
 8009962:	4d06      	ldr	r5, [pc, #24]	; (800997c <_isatty_r+0x1c>)
 8009964:	2300      	movs	r3, #0
 8009966:	4604      	mov	r4, r0
 8009968:	4608      	mov	r0, r1
 800996a:	602b      	str	r3, [r5, #0]
 800996c:	f7f7 fdf1 	bl	8001552 <_isatty>
 8009970:	1c43      	adds	r3, r0, #1
 8009972:	d102      	bne.n	800997a <_isatty_r+0x1a>
 8009974:	682b      	ldr	r3, [r5, #0]
 8009976:	b103      	cbz	r3, 800997a <_isatty_r+0x1a>
 8009978:	6023      	str	r3, [r4, #0]
 800997a:	bd38      	pop	{r3, r4, r5, pc}
 800997c:	20000304 	.word	0x20000304

08009980 <_lseek_r>:
 8009980:	b538      	push	{r3, r4, r5, lr}
 8009982:	4d07      	ldr	r5, [pc, #28]	; (80099a0 <_lseek_r+0x20>)
 8009984:	4604      	mov	r4, r0
 8009986:	4608      	mov	r0, r1
 8009988:	4611      	mov	r1, r2
 800998a:	2200      	movs	r2, #0
 800998c:	602a      	str	r2, [r5, #0]
 800998e:	461a      	mov	r2, r3
 8009990:	f7f7 fdea 	bl	8001568 <_lseek>
 8009994:	1c43      	adds	r3, r0, #1
 8009996:	d102      	bne.n	800999e <_lseek_r+0x1e>
 8009998:	682b      	ldr	r3, [r5, #0]
 800999a:	b103      	cbz	r3, 800999e <_lseek_r+0x1e>
 800999c:	6023      	str	r3, [r4, #0]
 800999e:	bd38      	pop	{r3, r4, r5, pc}
 80099a0:	20000304 	.word	0x20000304

080099a4 <_read_r>:
 80099a4:	b538      	push	{r3, r4, r5, lr}
 80099a6:	4d07      	ldr	r5, [pc, #28]	; (80099c4 <_read_r+0x20>)
 80099a8:	4604      	mov	r4, r0
 80099aa:	4608      	mov	r0, r1
 80099ac:	4611      	mov	r1, r2
 80099ae:	2200      	movs	r2, #0
 80099b0:	602a      	str	r2, [r5, #0]
 80099b2:	461a      	mov	r2, r3
 80099b4:	f7f7 fd78 	bl	80014a8 <_read>
 80099b8:	1c43      	adds	r3, r0, #1
 80099ba:	d102      	bne.n	80099c2 <_read_r+0x1e>
 80099bc:	682b      	ldr	r3, [r5, #0]
 80099be:	b103      	cbz	r3, 80099c2 <_read_r+0x1e>
 80099c0:	6023      	str	r3, [r4, #0]
 80099c2:	bd38      	pop	{r3, r4, r5, pc}
 80099c4:	20000304 	.word	0x20000304

080099c8 <_init>:
 80099c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ca:	bf00      	nop
 80099cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099ce:	bc08      	pop	{r3}
 80099d0:	469e      	mov	lr, r3
 80099d2:	4770      	bx	lr

080099d4 <_fini>:
 80099d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099d6:	bf00      	nop
 80099d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099da:	bc08      	pop	{r3}
 80099dc:	469e      	mov	lr, r3
 80099de:	4770      	bx	lr
